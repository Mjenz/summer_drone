
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

60000000 <Qspiflash_config>:
60000000:	46 43 46 42 00 04 01 56 00 00 00 00 01 03 03 00     FCFB...V........
	...
60000044:	00 04 06 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
	...
600001c0:	00 01 00 00 00 10 00 00 00 00 00 00 00 00 00 00     ................
600001d0:	00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

60001000 <image_vector_table>:
60001000:	d1 00 20 41 00 20 00 60 00 00 00 00 00 00 00 00     .. A. .`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <boot_data>:
60001020:	00 00 00 60 00 00 80 00 00 00 00 00 ff ff ff ff     ...`............
	...

60002000 <_vector_table>:
60002000:	80 61 20 20 61 89 00 60 99 31 01 60 35 89 00 60     .a  a..`.1.`5..`
60002010:	35 89 00 60 35 89 00 60 35 89 00 60 00 00 00 00     5..`5..`5..`....
	...
6000202c:	a9 81 00 60 35 89 00 60 00 00 00 00 55 81 00 60     ...`5..`....U..`
6000203c:	85 ab 00 60                                         ...`

60002040 <_irq_vector_table>:
60002040:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002050:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002060:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002070:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002080:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002090:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020a0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020b0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020c0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020d0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020e0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600020f0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002100:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002110:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002120:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002130:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002140:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002150:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002160:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002170:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002180:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002190:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021a0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021b0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021c0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021d0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021e0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600021f0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002200:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002210:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002220:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002230:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002240:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002250:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002260:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002270:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002280:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
60002290:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600022a0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`
600022b0:	4d 82 00 60 4d 82 00 60 4d 82 00 60 4d 82 00 60     M..`M..`M..`M..`

Disassembly of section text:

600022c0 <strlen>:
600022c0:	f890 f000 	pld	[r0]
600022c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
600022c8:	f020 0107 	bic.w	r1, r0, #7
600022cc:	f06f 0c00 	mvn.w	ip, #0
600022d0:	f010 0407 	ands.w	r4, r0, #7
600022d4:	f891 f020 	pld	[r1, #32]
600022d8:	f040 8049 	bne.w	6000236e <strlen+0xae>
600022dc:	f04f 0400 	mov.w	r4, #0
600022e0:	f06f 0007 	mvn.w	r0, #7
600022e4:	e9d1 2300 	ldrd	r2, r3, [r1]
600022e8:	f891 f040 	pld	[r1, #64]	; 0x40
600022ec:	f100 0008 	add.w	r0, r0, #8
600022f0:	fa82 f24c 	uadd8	r2, r2, ip
600022f4:	faa4 f28c 	sel	r2, r4, ip
600022f8:	fa83 f34c 	uadd8	r3, r3, ip
600022fc:	faa2 f38c 	sel	r3, r2, ip
60002300:	bb4b      	cbnz	r3, 60002356 <strlen+0x96>
60002302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
60002306:	fa82 f24c 	uadd8	r2, r2, ip
6000230a:	f100 0008 	add.w	r0, r0, #8
6000230e:	faa4 f28c 	sel	r2, r4, ip
60002312:	fa83 f34c 	uadd8	r3, r3, ip
60002316:	faa2 f38c 	sel	r3, r2, ip
6000231a:	b9e3      	cbnz	r3, 60002356 <strlen+0x96>
6000231c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
60002320:	fa82 f24c 	uadd8	r2, r2, ip
60002324:	f100 0008 	add.w	r0, r0, #8
60002328:	faa4 f28c 	sel	r2, r4, ip
6000232c:	fa83 f34c 	uadd8	r3, r3, ip
60002330:	faa2 f38c 	sel	r3, r2, ip
60002334:	b97b      	cbnz	r3, 60002356 <strlen+0x96>
60002336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
6000233a:	f101 0120 	add.w	r1, r1, #32
6000233e:	fa82 f24c 	uadd8	r2, r2, ip
60002342:	f100 0008 	add.w	r0, r0, #8
60002346:	faa4 f28c 	sel	r2, r4, ip
6000234a:	fa83 f34c 	uadd8	r3, r3, ip
6000234e:	faa2 f38c 	sel	r3, r2, ip
60002352:	2b00      	cmp	r3, #0
60002354:	d0c6      	beq.n	600022e4 <strlen+0x24>
60002356:	2a00      	cmp	r2, #0
60002358:	bf04      	itt	eq
6000235a:	3004      	addeq	r0, #4
6000235c:	461a      	moveq	r2, r3
6000235e:	ba12      	rev	r2, r2
60002360:	fab2 f282 	clz	r2, r2
60002364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
60002368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
6000236c:	4770      	bx	lr
6000236e:	e9d1 2300 	ldrd	r2, r3, [r1]
60002372:	f004 0503 	and.w	r5, r4, #3
60002376:	f1c4 0000 	rsb	r0, r4, #0
6000237a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
6000237e:	f014 0f04 	tst.w	r4, #4
60002382:	f891 f040 	pld	[r1, #64]	; 0x40
60002386:	fa0c f505 	lsl.w	r5, ip, r5
6000238a:	ea62 0205 	orn	r2, r2, r5
6000238e:	bf1c      	itt	ne
60002390:	ea63 0305 	ornne	r3, r3, r5
60002394:	4662      	movne	r2, ip
60002396:	f04f 0400 	mov.w	r4, #0
6000239a:	e7a9      	b.n	600022f0 <strlen+0x30>
6000239c:	0000      	movs	r0, r0
	...

600023a0 <memchr>:
600023a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
600023a4:	2a10      	cmp	r2, #16
600023a6:	db2b      	blt.n	60002400 <memchr+0x60>
600023a8:	f010 0f07 	tst.w	r0, #7
600023ac:	d008      	beq.n	600023c0 <memchr+0x20>
600023ae:	f810 3b01 	ldrb.w	r3, [r0], #1
600023b2:	3a01      	subs	r2, #1
600023b4:	428b      	cmp	r3, r1
600023b6:	d02d      	beq.n	60002414 <memchr+0x74>
600023b8:	f010 0f07 	tst.w	r0, #7
600023bc:	b342      	cbz	r2, 60002410 <memchr+0x70>
600023be:	d1f6      	bne.n	600023ae <memchr+0xe>
600023c0:	b4f0      	push	{r4, r5, r6, r7}
600023c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
600023c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
600023ca:	f022 0407 	bic.w	r4, r2, #7
600023ce:	f07f 0700 	mvns.w	r7, #0
600023d2:	2300      	movs	r3, #0
600023d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
600023d8:	3c08      	subs	r4, #8
600023da:	ea85 0501 	eor.w	r5, r5, r1
600023de:	ea86 0601 	eor.w	r6, r6, r1
600023e2:	fa85 f547 	uadd8	r5, r5, r7
600023e6:	faa3 f587 	sel	r5, r3, r7
600023ea:	fa86 f647 	uadd8	r6, r6, r7
600023ee:	faa5 f687 	sel	r6, r5, r7
600023f2:	b98e      	cbnz	r6, 60002418 <memchr+0x78>
600023f4:	d1ee      	bne.n	600023d4 <memchr+0x34>
600023f6:	bcf0      	pop	{r4, r5, r6, r7}
600023f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
600023fc:	f002 0207 	and.w	r2, r2, #7
60002400:	b132      	cbz	r2, 60002410 <memchr+0x70>
60002402:	f810 3b01 	ldrb.w	r3, [r0], #1
60002406:	3a01      	subs	r2, #1
60002408:	ea83 0301 	eor.w	r3, r3, r1
6000240c:	b113      	cbz	r3, 60002414 <memchr+0x74>
6000240e:	d1f8      	bne.n	60002402 <memchr+0x62>
60002410:	2000      	movs	r0, #0
60002412:	4770      	bx	lr
60002414:	3801      	subs	r0, #1
60002416:	4770      	bx	lr
60002418:	2d00      	cmp	r5, #0
6000241a:	bf06      	itte	eq
6000241c:	4635      	moveq	r5, r6
6000241e:	3803      	subeq	r0, #3
60002420:	3807      	subne	r0, #7
60002422:	f015 0f01 	tst.w	r5, #1
60002426:	d107      	bne.n	60002438 <memchr+0x98>
60002428:	3001      	adds	r0, #1
6000242a:	f415 7f80 	tst.w	r5, #256	; 0x100
6000242e:	bf02      	ittt	eq
60002430:	3001      	addeq	r0, #1
60002432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
60002436:	3001      	addeq	r0, #1
60002438:	bcf0      	pop	{r4, r5, r6, r7}
6000243a:	3801      	subs	r0, #1
6000243c:	4770      	bx	lr
6000243e:	bf00      	nop

60002440 <__aeabi_drsub>:
60002440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
60002444:	e002      	b.n	6000244c <__adddf3>
60002446:	bf00      	nop

60002448 <__aeabi_dsub>:
60002448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

6000244c <__adddf3>:
6000244c:	b530      	push	{r4, r5, lr}
6000244e:	ea4f 0441 	mov.w	r4, r1, lsl #1
60002452:	ea4f 0543 	mov.w	r5, r3, lsl #1
60002456:	ea94 0f05 	teq	r4, r5
6000245a:	bf08      	it	eq
6000245c:	ea90 0f02 	teqeq	r0, r2
60002460:	bf1f      	itttt	ne
60002462:	ea54 0c00 	orrsne.w	ip, r4, r0
60002466:	ea55 0c02 	orrsne.w	ip, r5, r2
6000246a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
6000246e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
60002472:	f000 80e2 	beq.w	6000263a <__adddf3+0x1ee>
60002476:	ea4f 5454 	mov.w	r4, r4, lsr #21
6000247a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
6000247e:	bfb8      	it	lt
60002480:	426d      	neglt	r5, r5
60002482:	dd0c      	ble.n	6000249e <__adddf3+0x52>
60002484:	442c      	add	r4, r5
60002486:	ea80 0202 	eor.w	r2, r0, r2
6000248a:	ea81 0303 	eor.w	r3, r1, r3
6000248e:	ea82 0000 	eor.w	r0, r2, r0
60002492:	ea83 0101 	eor.w	r1, r3, r1
60002496:	ea80 0202 	eor.w	r2, r0, r2
6000249a:	ea81 0303 	eor.w	r3, r1, r3
6000249e:	2d36      	cmp	r5, #54	; 0x36
600024a0:	bf88      	it	hi
600024a2:	bd30      	pophi	{r4, r5, pc}
600024a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
600024a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
600024ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
600024b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
600024b4:	d002      	beq.n	600024bc <__adddf3+0x70>
600024b6:	4240      	negs	r0, r0
600024b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
600024bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
600024c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
600024c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
600024c8:	d002      	beq.n	600024d0 <__adddf3+0x84>
600024ca:	4252      	negs	r2, r2
600024cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
600024d0:	ea94 0f05 	teq	r4, r5
600024d4:	f000 80a7 	beq.w	60002626 <__adddf3+0x1da>
600024d8:	f1a4 0401 	sub.w	r4, r4, #1
600024dc:	f1d5 0e20 	rsbs	lr, r5, #32
600024e0:	db0d      	blt.n	600024fe <__adddf3+0xb2>
600024e2:	fa02 fc0e 	lsl.w	ip, r2, lr
600024e6:	fa22 f205 	lsr.w	r2, r2, r5
600024ea:	1880      	adds	r0, r0, r2
600024ec:	f141 0100 	adc.w	r1, r1, #0
600024f0:	fa03 f20e 	lsl.w	r2, r3, lr
600024f4:	1880      	adds	r0, r0, r2
600024f6:	fa43 f305 	asr.w	r3, r3, r5
600024fa:	4159      	adcs	r1, r3
600024fc:	e00e      	b.n	6000251c <__adddf3+0xd0>
600024fe:	f1a5 0520 	sub.w	r5, r5, #32
60002502:	f10e 0e20 	add.w	lr, lr, #32
60002506:	2a01      	cmp	r2, #1
60002508:	fa03 fc0e 	lsl.w	ip, r3, lr
6000250c:	bf28      	it	cs
6000250e:	f04c 0c02 	orrcs.w	ip, ip, #2
60002512:	fa43 f305 	asr.w	r3, r3, r5
60002516:	18c0      	adds	r0, r0, r3
60002518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
6000251c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
60002520:	d507      	bpl.n	60002532 <__adddf3+0xe6>
60002522:	f04f 0e00 	mov.w	lr, #0
60002526:	f1dc 0c00 	rsbs	ip, ip, #0
6000252a:	eb7e 0000 	sbcs.w	r0, lr, r0
6000252e:	eb6e 0101 	sbc.w	r1, lr, r1
60002532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
60002536:	d31b      	bcc.n	60002570 <__adddf3+0x124>
60002538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
6000253c:	d30c      	bcc.n	60002558 <__adddf3+0x10c>
6000253e:	0849      	lsrs	r1, r1, #1
60002540:	ea5f 0030 	movs.w	r0, r0, rrx
60002544:	ea4f 0c3c 	mov.w	ip, ip, rrx
60002548:	f104 0401 	add.w	r4, r4, #1
6000254c:	ea4f 5244 	mov.w	r2, r4, lsl #21
60002550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
60002554:	f080 809a 	bcs.w	6000268c <__adddf3+0x240>
60002558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
6000255c:	bf08      	it	eq
6000255e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
60002562:	f150 0000 	adcs.w	r0, r0, #0
60002566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
6000256a:	ea41 0105 	orr.w	r1, r1, r5
6000256e:	bd30      	pop	{r4, r5, pc}
60002570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
60002574:	4140      	adcs	r0, r0
60002576:	eb41 0101 	adc.w	r1, r1, r1
6000257a:	3c01      	subs	r4, #1
6000257c:	bf28      	it	cs
6000257e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
60002582:	d2e9      	bcs.n	60002558 <__adddf3+0x10c>
60002584:	f091 0f00 	teq	r1, #0
60002588:	bf04      	itt	eq
6000258a:	4601      	moveq	r1, r0
6000258c:	2000      	moveq	r0, #0
6000258e:	fab1 f381 	clz	r3, r1
60002592:	bf08      	it	eq
60002594:	3320      	addeq	r3, #32
60002596:	f1a3 030b 	sub.w	r3, r3, #11
6000259a:	f1b3 0220 	subs.w	r2, r3, #32
6000259e:	da0c      	bge.n	600025ba <__adddf3+0x16e>
600025a0:	320c      	adds	r2, #12
600025a2:	dd08      	ble.n	600025b6 <__adddf3+0x16a>
600025a4:	f102 0c14 	add.w	ip, r2, #20
600025a8:	f1c2 020c 	rsb	r2, r2, #12
600025ac:	fa01 f00c 	lsl.w	r0, r1, ip
600025b0:	fa21 f102 	lsr.w	r1, r1, r2
600025b4:	e00c      	b.n	600025d0 <__adddf3+0x184>
600025b6:	f102 0214 	add.w	r2, r2, #20
600025ba:	bfd8      	it	le
600025bc:	f1c2 0c20 	rsble	ip, r2, #32
600025c0:	fa01 f102 	lsl.w	r1, r1, r2
600025c4:	fa20 fc0c 	lsr.w	ip, r0, ip
600025c8:	bfdc      	itt	le
600025ca:	ea41 010c 	orrle.w	r1, r1, ip
600025ce:	4090      	lslle	r0, r2
600025d0:	1ae4      	subs	r4, r4, r3
600025d2:	bfa2      	ittt	ge
600025d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
600025d8:	4329      	orrge	r1, r5
600025da:	bd30      	popge	{r4, r5, pc}
600025dc:	ea6f 0404 	mvn.w	r4, r4
600025e0:	3c1f      	subs	r4, #31
600025e2:	da1c      	bge.n	6000261e <__adddf3+0x1d2>
600025e4:	340c      	adds	r4, #12
600025e6:	dc0e      	bgt.n	60002606 <__adddf3+0x1ba>
600025e8:	f104 0414 	add.w	r4, r4, #20
600025ec:	f1c4 0220 	rsb	r2, r4, #32
600025f0:	fa20 f004 	lsr.w	r0, r0, r4
600025f4:	fa01 f302 	lsl.w	r3, r1, r2
600025f8:	ea40 0003 	orr.w	r0, r0, r3
600025fc:	fa21 f304 	lsr.w	r3, r1, r4
60002600:	ea45 0103 	orr.w	r1, r5, r3
60002604:	bd30      	pop	{r4, r5, pc}
60002606:	f1c4 040c 	rsb	r4, r4, #12
6000260a:	f1c4 0220 	rsb	r2, r4, #32
6000260e:	fa20 f002 	lsr.w	r0, r0, r2
60002612:	fa01 f304 	lsl.w	r3, r1, r4
60002616:	ea40 0003 	orr.w	r0, r0, r3
6000261a:	4629      	mov	r1, r5
6000261c:	bd30      	pop	{r4, r5, pc}
6000261e:	fa21 f004 	lsr.w	r0, r1, r4
60002622:	4629      	mov	r1, r5
60002624:	bd30      	pop	{r4, r5, pc}
60002626:	f094 0f00 	teq	r4, #0
6000262a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
6000262e:	bf06      	itte	eq
60002630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
60002634:	3401      	addeq	r4, #1
60002636:	3d01      	subne	r5, #1
60002638:	e74e      	b.n	600024d8 <__adddf3+0x8c>
6000263a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
6000263e:	bf18      	it	ne
60002640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
60002644:	d029      	beq.n	6000269a <__adddf3+0x24e>
60002646:	ea94 0f05 	teq	r4, r5
6000264a:	bf08      	it	eq
6000264c:	ea90 0f02 	teqeq	r0, r2
60002650:	d005      	beq.n	6000265e <__adddf3+0x212>
60002652:	ea54 0c00 	orrs.w	ip, r4, r0
60002656:	bf04      	itt	eq
60002658:	4619      	moveq	r1, r3
6000265a:	4610      	moveq	r0, r2
6000265c:	bd30      	pop	{r4, r5, pc}
6000265e:	ea91 0f03 	teq	r1, r3
60002662:	bf1e      	ittt	ne
60002664:	2100      	movne	r1, #0
60002666:	2000      	movne	r0, #0
60002668:	bd30      	popne	{r4, r5, pc}
6000266a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
6000266e:	d105      	bne.n	6000267c <__adddf3+0x230>
60002670:	0040      	lsls	r0, r0, #1
60002672:	4149      	adcs	r1, r1
60002674:	bf28      	it	cs
60002676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
6000267a:	bd30      	pop	{r4, r5, pc}
6000267c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
60002680:	bf3c      	itt	cc
60002682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
60002686:	bd30      	popcc	{r4, r5, pc}
60002688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
6000268c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
60002690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
60002694:	f04f 0000 	mov.w	r0, #0
60002698:	bd30      	pop	{r4, r5, pc}
6000269a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
6000269e:	bf1a      	itte	ne
600026a0:	4619      	movne	r1, r3
600026a2:	4610      	movne	r0, r2
600026a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
600026a8:	bf1c      	itt	ne
600026aa:	460b      	movne	r3, r1
600026ac:	4602      	movne	r2, r0
600026ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
600026b2:	bf06      	itte	eq
600026b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
600026b8:	ea91 0f03 	teqeq	r1, r3
600026bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
600026c0:	bd30      	pop	{r4, r5, pc}
600026c2:	bf00      	nop

600026c4 <__aeabi_ui2d>:
600026c4:	f090 0f00 	teq	r0, #0
600026c8:	bf04      	itt	eq
600026ca:	2100      	moveq	r1, #0
600026cc:	4770      	bxeq	lr
600026ce:	b530      	push	{r4, r5, lr}
600026d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
600026d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
600026d8:	f04f 0500 	mov.w	r5, #0
600026dc:	f04f 0100 	mov.w	r1, #0
600026e0:	e750      	b.n	60002584 <__adddf3+0x138>
600026e2:	bf00      	nop

600026e4 <__aeabi_i2d>:
600026e4:	f090 0f00 	teq	r0, #0
600026e8:	bf04      	itt	eq
600026ea:	2100      	moveq	r1, #0
600026ec:	4770      	bxeq	lr
600026ee:	b530      	push	{r4, r5, lr}
600026f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
600026f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
600026f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
600026fc:	bf48      	it	mi
600026fe:	4240      	negmi	r0, r0
60002700:	f04f 0100 	mov.w	r1, #0
60002704:	e73e      	b.n	60002584 <__adddf3+0x138>
60002706:	bf00      	nop

60002708 <__aeabi_f2d>:
60002708:	0042      	lsls	r2, r0, #1
6000270a:	ea4f 01e2 	mov.w	r1, r2, asr #3
6000270e:	ea4f 0131 	mov.w	r1, r1, rrx
60002712:	ea4f 7002 	mov.w	r0, r2, lsl #28
60002716:	bf1f      	itttt	ne
60002718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
6000271c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
60002720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
60002724:	4770      	bxne	lr
60002726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
6000272a:	bf08      	it	eq
6000272c:	4770      	bxeq	lr
6000272e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
60002732:	bf04      	itt	eq
60002734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
60002738:	4770      	bxeq	lr
6000273a:	b530      	push	{r4, r5, lr}
6000273c:	f44f 7460 	mov.w	r4, #896	; 0x380
60002740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
60002744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
60002748:	e71c      	b.n	60002584 <__adddf3+0x138>
6000274a:	bf00      	nop

6000274c <__aeabi_ul2d>:
6000274c:	ea50 0201 	orrs.w	r2, r0, r1
60002750:	bf08      	it	eq
60002752:	4770      	bxeq	lr
60002754:	b530      	push	{r4, r5, lr}
60002756:	f04f 0500 	mov.w	r5, #0
6000275a:	e00a      	b.n	60002772 <__aeabi_l2d+0x16>

6000275c <__aeabi_l2d>:
6000275c:	ea50 0201 	orrs.w	r2, r0, r1
60002760:	bf08      	it	eq
60002762:	4770      	bxeq	lr
60002764:	b530      	push	{r4, r5, lr}
60002766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
6000276a:	d502      	bpl.n	60002772 <__aeabi_l2d+0x16>
6000276c:	4240      	negs	r0, r0
6000276e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60002772:	f44f 6480 	mov.w	r4, #1024	; 0x400
60002776:	f104 0432 	add.w	r4, r4, #50	; 0x32
6000277a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
6000277e:	f43f aed8 	beq.w	60002532 <__adddf3+0xe6>
60002782:	f04f 0203 	mov.w	r2, #3
60002786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
6000278a:	bf18      	it	ne
6000278c:	3203      	addne	r2, #3
6000278e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
60002792:	bf18      	it	ne
60002794:	3203      	addne	r2, #3
60002796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
6000279a:	f1c2 0320 	rsb	r3, r2, #32
6000279e:	fa00 fc03 	lsl.w	ip, r0, r3
600027a2:	fa20 f002 	lsr.w	r0, r0, r2
600027a6:	fa01 fe03 	lsl.w	lr, r1, r3
600027aa:	ea40 000e 	orr.w	r0, r0, lr
600027ae:	fa21 f102 	lsr.w	r1, r1, r2
600027b2:	4414      	add	r4, r2
600027b4:	e6bd      	b.n	60002532 <__adddf3+0xe6>
600027b6:	bf00      	nop

600027b8 <__aeabi_dmul>:
600027b8:	b570      	push	{r4, r5, r6, lr}
600027ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
600027be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
600027c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
600027c6:	bf1d      	ittte	ne
600027c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
600027cc:	ea94 0f0c 	teqne	r4, ip
600027d0:	ea95 0f0c 	teqne	r5, ip
600027d4:	f000 f8de 	bleq	60002994 <__aeabi_dmul+0x1dc>
600027d8:	442c      	add	r4, r5
600027da:	ea81 0603 	eor.w	r6, r1, r3
600027de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
600027e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
600027e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
600027ea:	bf18      	it	ne
600027ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
600027f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
600027f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
600027f8:	d038      	beq.n	6000286c <__aeabi_dmul+0xb4>
600027fa:	fba0 ce02 	umull	ip, lr, r0, r2
600027fe:	f04f 0500 	mov.w	r5, #0
60002802:	fbe1 e502 	umlal	lr, r5, r1, r2
60002806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
6000280a:	fbe0 e503 	umlal	lr, r5, r0, r3
6000280e:	f04f 0600 	mov.w	r6, #0
60002812:	fbe1 5603 	umlal	r5, r6, r1, r3
60002816:	f09c 0f00 	teq	ip, #0
6000281a:	bf18      	it	ne
6000281c:	f04e 0e01 	orrne.w	lr, lr, #1
60002820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
60002824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
60002828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
6000282c:	d204      	bcs.n	60002838 <__aeabi_dmul+0x80>
6000282e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
60002832:	416d      	adcs	r5, r5
60002834:	eb46 0606 	adc.w	r6, r6, r6
60002838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
6000283c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
60002840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
60002844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
60002848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
6000284c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
60002850:	bf88      	it	hi
60002852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
60002856:	d81e      	bhi.n	60002896 <__aeabi_dmul+0xde>
60002858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
6000285c:	bf08      	it	eq
6000285e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
60002862:	f150 0000 	adcs.w	r0, r0, #0
60002866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
6000286a:	bd70      	pop	{r4, r5, r6, pc}
6000286c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
60002870:	ea46 0101 	orr.w	r1, r6, r1
60002874:	ea40 0002 	orr.w	r0, r0, r2
60002878:	ea81 0103 	eor.w	r1, r1, r3
6000287c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
60002880:	bfc2      	ittt	gt
60002882:	ebd4 050c 	rsbsgt	r5, r4, ip
60002886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
6000288a:	bd70      	popgt	{r4, r5, r6, pc}
6000288c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002890:	f04f 0e00 	mov.w	lr, #0
60002894:	3c01      	subs	r4, #1
60002896:	f300 80ab 	bgt.w	600029f0 <__aeabi_dmul+0x238>
6000289a:	f114 0f36 	cmn.w	r4, #54	; 0x36
6000289e:	bfde      	ittt	le
600028a0:	2000      	movle	r0, #0
600028a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
600028a6:	bd70      	pople	{r4, r5, r6, pc}
600028a8:	f1c4 0400 	rsb	r4, r4, #0
600028ac:	3c20      	subs	r4, #32
600028ae:	da35      	bge.n	6000291c <__aeabi_dmul+0x164>
600028b0:	340c      	adds	r4, #12
600028b2:	dc1b      	bgt.n	600028ec <__aeabi_dmul+0x134>
600028b4:	f104 0414 	add.w	r4, r4, #20
600028b8:	f1c4 0520 	rsb	r5, r4, #32
600028bc:	fa00 f305 	lsl.w	r3, r0, r5
600028c0:	fa20 f004 	lsr.w	r0, r0, r4
600028c4:	fa01 f205 	lsl.w	r2, r1, r5
600028c8:	ea40 0002 	orr.w	r0, r0, r2
600028cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
600028d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
600028d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
600028d8:	fa21 f604 	lsr.w	r6, r1, r4
600028dc:	eb42 0106 	adc.w	r1, r2, r6
600028e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
600028e4:	bf08      	it	eq
600028e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
600028ea:	bd70      	pop	{r4, r5, r6, pc}
600028ec:	f1c4 040c 	rsb	r4, r4, #12
600028f0:	f1c4 0520 	rsb	r5, r4, #32
600028f4:	fa00 f304 	lsl.w	r3, r0, r4
600028f8:	fa20 f005 	lsr.w	r0, r0, r5
600028fc:	fa01 f204 	lsl.w	r2, r1, r4
60002900:	ea40 0002 	orr.w	r0, r0, r2
60002904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
60002908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
6000290c:	f141 0100 	adc.w	r1, r1, #0
60002910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
60002914:	bf08      	it	eq
60002916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
6000291a:	bd70      	pop	{r4, r5, r6, pc}
6000291c:	f1c4 0520 	rsb	r5, r4, #32
60002920:	fa00 f205 	lsl.w	r2, r0, r5
60002924:	ea4e 0e02 	orr.w	lr, lr, r2
60002928:	fa20 f304 	lsr.w	r3, r0, r4
6000292c:	fa01 f205 	lsl.w	r2, r1, r5
60002930:	ea43 0302 	orr.w	r3, r3, r2
60002934:	fa21 f004 	lsr.w	r0, r1, r4
60002938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
6000293c:	fa21 f204 	lsr.w	r2, r1, r4
60002940:	ea20 0002 	bic.w	r0, r0, r2
60002944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
60002948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
6000294c:	bf08      	it	eq
6000294e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
60002952:	bd70      	pop	{r4, r5, r6, pc}
60002954:	f094 0f00 	teq	r4, #0
60002958:	d10f      	bne.n	6000297a <__aeabi_dmul+0x1c2>
6000295a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
6000295e:	0040      	lsls	r0, r0, #1
60002960:	eb41 0101 	adc.w	r1, r1, r1
60002964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002968:	bf08      	it	eq
6000296a:	3c01      	subeq	r4, #1
6000296c:	d0f7      	beq.n	6000295e <__aeabi_dmul+0x1a6>
6000296e:	ea41 0106 	orr.w	r1, r1, r6
60002972:	f095 0f00 	teq	r5, #0
60002976:	bf18      	it	ne
60002978:	4770      	bxne	lr
6000297a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
6000297e:	0052      	lsls	r2, r2, #1
60002980:	eb43 0303 	adc.w	r3, r3, r3
60002984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
60002988:	bf08      	it	eq
6000298a:	3d01      	subeq	r5, #1
6000298c:	d0f7      	beq.n	6000297e <__aeabi_dmul+0x1c6>
6000298e:	ea43 0306 	orr.w	r3, r3, r6
60002992:	4770      	bx	lr
60002994:	ea94 0f0c 	teq	r4, ip
60002998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
6000299c:	bf18      	it	ne
6000299e:	ea95 0f0c 	teqne	r5, ip
600029a2:	d00c      	beq.n	600029be <__aeabi_dmul+0x206>
600029a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
600029a8:	bf18      	it	ne
600029aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
600029ae:	d1d1      	bne.n	60002954 <__aeabi_dmul+0x19c>
600029b0:	ea81 0103 	eor.w	r1, r1, r3
600029b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
600029b8:	f04f 0000 	mov.w	r0, #0
600029bc:	bd70      	pop	{r4, r5, r6, pc}
600029be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
600029c2:	bf06      	itte	eq
600029c4:	4610      	moveq	r0, r2
600029c6:	4619      	moveq	r1, r3
600029c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
600029cc:	d019      	beq.n	60002a02 <__aeabi_dmul+0x24a>
600029ce:	ea94 0f0c 	teq	r4, ip
600029d2:	d102      	bne.n	600029da <__aeabi_dmul+0x222>
600029d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
600029d8:	d113      	bne.n	60002a02 <__aeabi_dmul+0x24a>
600029da:	ea95 0f0c 	teq	r5, ip
600029de:	d105      	bne.n	600029ec <__aeabi_dmul+0x234>
600029e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
600029e4:	bf1c      	itt	ne
600029e6:	4610      	movne	r0, r2
600029e8:	4619      	movne	r1, r3
600029ea:	d10a      	bne.n	60002a02 <__aeabi_dmul+0x24a>
600029ec:	ea81 0103 	eor.w	r1, r1, r3
600029f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
600029f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
600029f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
600029fc:	f04f 0000 	mov.w	r0, #0
60002a00:	bd70      	pop	{r4, r5, r6, pc}
60002a02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
60002a06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
60002a0a:	bd70      	pop	{r4, r5, r6, pc}

60002a0c <__aeabi_ddiv>:
60002a0c:	b570      	push	{r4, r5, r6, lr}
60002a0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
60002a12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
60002a16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
60002a1a:	bf1d      	ittte	ne
60002a1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
60002a20:	ea94 0f0c 	teqne	r4, ip
60002a24:	ea95 0f0c 	teqne	r5, ip
60002a28:	f000 f8a7 	bleq	60002b7a <__aeabi_ddiv+0x16e>
60002a2c:	eba4 0405 	sub.w	r4, r4, r5
60002a30:	ea81 0e03 	eor.w	lr, r1, r3
60002a34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
60002a38:	ea4f 3101 	mov.w	r1, r1, lsl #12
60002a3c:	f000 8088 	beq.w	60002b50 <__aeabi_ddiv+0x144>
60002a40:	ea4f 3303 	mov.w	r3, r3, lsl #12
60002a44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
60002a48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
60002a4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
60002a50:	ea4f 2202 	mov.w	r2, r2, lsl #8
60002a54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
60002a58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
60002a5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
60002a60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
60002a64:	429d      	cmp	r5, r3
60002a66:	bf08      	it	eq
60002a68:	4296      	cmpeq	r6, r2
60002a6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
60002a6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
60002a72:	d202      	bcs.n	60002a7a <__aeabi_ddiv+0x6e>
60002a74:	085b      	lsrs	r3, r3, #1
60002a76:	ea4f 0232 	mov.w	r2, r2, rrx
60002a7a:	1ab6      	subs	r6, r6, r2
60002a7c:	eb65 0503 	sbc.w	r5, r5, r3
60002a80:	085b      	lsrs	r3, r3, #1
60002a82:	ea4f 0232 	mov.w	r2, r2, rrx
60002a86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
60002a8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
60002a8e:	ebb6 0e02 	subs.w	lr, r6, r2
60002a92:	eb75 0e03 	sbcs.w	lr, r5, r3
60002a96:	bf22      	ittt	cs
60002a98:	1ab6      	subcs	r6, r6, r2
60002a9a:	4675      	movcs	r5, lr
60002a9c:	ea40 000c 	orrcs.w	r0, r0, ip
60002aa0:	085b      	lsrs	r3, r3, #1
60002aa2:	ea4f 0232 	mov.w	r2, r2, rrx
60002aa6:	ebb6 0e02 	subs.w	lr, r6, r2
60002aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
60002aae:	bf22      	ittt	cs
60002ab0:	1ab6      	subcs	r6, r6, r2
60002ab2:	4675      	movcs	r5, lr
60002ab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
60002ab8:	085b      	lsrs	r3, r3, #1
60002aba:	ea4f 0232 	mov.w	r2, r2, rrx
60002abe:	ebb6 0e02 	subs.w	lr, r6, r2
60002ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
60002ac6:	bf22      	ittt	cs
60002ac8:	1ab6      	subcs	r6, r6, r2
60002aca:	4675      	movcs	r5, lr
60002acc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
60002ad0:	085b      	lsrs	r3, r3, #1
60002ad2:	ea4f 0232 	mov.w	r2, r2, rrx
60002ad6:	ebb6 0e02 	subs.w	lr, r6, r2
60002ada:	eb75 0e03 	sbcs.w	lr, r5, r3
60002ade:	bf22      	ittt	cs
60002ae0:	1ab6      	subcs	r6, r6, r2
60002ae2:	4675      	movcs	r5, lr
60002ae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
60002ae8:	ea55 0e06 	orrs.w	lr, r5, r6
60002aec:	d018      	beq.n	60002b20 <__aeabi_ddiv+0x114>
60002aee:	ea4f 1505 	mov.w	r5, r5, lsl #4
60002af2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
60002af6:	ea4f 1606 	mov.w	r6, r6, lsl #4
60002afa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
60002afe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
60002b02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
60002b06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
60002b0a:	d1c0      	bne.n	60002a8e <__aeabi_ddiv+0x82>
60002b0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002b10:	d10b      	bne.n	60002b2a <__aeabi_ddiv+0x11e>
60002b12:	ea41 0100 	orr.w	r1, r1, r0
60002b16:	f04f 0000 	mov.w	r0, #0
60002b1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
60002b1e:	e7b6      	b.n	60002a8e <__aeabi_ddiv+0x82>
60002b20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002b24:	bf04      	itt	eq
60002b26:	4301      	orreq	r1, r0
60002b28:	2000      	moveq	r0, #0
60002b2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
60002b2e:	bf88      	it	hi
60002b30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
60002b34:	f63f aeaf 	bhi.w	60002896 <__aeabi_dmul+0xde>
60002b38:	ebb5 0c03 	subs.w	ip, r5, r3
60002b3c:	bf04      	itt	eq
60002b3e:	ebb6 0c02 	subseq.w	ip, r6, r2
60002b42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
60002b46:	f150 0000 	adcs.w	r0, r0, #0
60002b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
60002b4e:	bd70      	pop	{r4, r5, r6, pc}
60002b50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
60002b54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
60002b58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
60002b5c:	bfc2      	ittt	gt
60002b5e:	ebd4 050c 	rsbsgt	r5, r4, ip
60002b62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
60002b66:	bd70      	popgt	{r4, r5, r6, pc}
60002b68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002b6c:	f04f 0e00 	mov.w	lr, #0
60002b70:	3c01      	subs	r4, #1
60002b72:	e690      	b.n	60002896 <__aeabi_dmul+0xde>
60002b74:	ea45 0e06 	orr.w	lr, r5, r6
60002b78:	e68d      	b.n	60002896 <__aeabi_dmul+0xde>
60002b7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
60002b7e:	ea94 0f0c 	teq	r4, ip
60002b82:	bf08      	it	eq
60002b84:	ea95 0f0c 	teqeq	r5, ip
60002b88:	f43f af3b 	beq.w	60002a02 <__aeabi_dmul+0x24a>
60002b8c:	ea94 0f0c 	teq	r4, ip
60002b90:	d10a      	bne.n	60002ba8 <__aeabi_ddiv+0x19c>
60002b92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
60002b96:	f47f af34 	bne.w	60002a02 <__aeabi_dmul+0x24a>
60002b9a:	ea95 0f0c 	teq	r5, ip
60002b9e:	f47f af25 	bne.w	600029ec <__aeabi_dmul+0x234>
60002ba2:	4610      	mov	r0, r2
60002ba4:	4619      	mov	r1, r3
60002ba6:	e72c      	b.n	60002a02 <__aeabi_dmul+0x24a>
60002ba8:	ea95 0f0c 	teq	r5, ip
60002bac:	d106      	bne.n	60002bbc <__aeabi_ddiv+0x1b0>
60002bae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
60002bb2:	f43f aefd 	beq.w	600029b0 <__aeabi_dmul+0x1f8>
60002bb6:	4610      	mov	r0, r2
60002bb8:	4619      	mov	r1, r3
60002bba:	e722      	b.n	60002a02 <__aeabi_dmul+0x24a>
60002bbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
60002bc0:	bf18      	it	ne
60002bc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
60002bc6:	f47f aec5 	bne.w	60002954 <__aeabi_dmul+0x19c>
60002bca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
60002bce:	f47f af0d 	bne.w	600029ec <__aeabi_dmul+0x234>
60002bd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
60002bd6:	f47f aeeb 	bne.w	600029b0 <__aeabi_dmul+0x1f8>
60002bda:	e712      	b.n	60002a02 <__aeabi_dmul+0x24a>

60002bdc <__gedf2>:
60002bdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
60002be0:	e006      	b.n	60002bf0 <__cmpdf2+0x4>
60002be2:	bf00      	nop

60002be4 <__ledf2>:
60002be4:	f04f 0c01 	mov.w	ip, #1
60002be8:	e002      	b.n	60002bf0 <__cmpdf2+0x4>
60002bea:	bf00      	nop

60002bec <__cmpdf2>:
60002bec:	f04f 0c01 	mov.w	ip, #1
60002bf0:	f84d cd04 	str.w	ip, [sp, #-4]!
60002bf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
60002bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
60002c00:	bf18      	it	ne
60002c02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
60002c06:	d01b      	beq.n	60002c40 <__cmpdf2+0x54>
60002c08:	b001      	add	sp, #4
60002c0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
60002c0e:	bf0c      	ite	eq
60002c10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
60002c14:	ea91 0f03 	teqne	r1, r3
60002c18:	bf02      	ittt	eq
60002c1a:	ea90 0f02 	teqeq	r0, r2
60002c1e:	2000      	moveq	r0, #0
60002c20:	4770      	bxeq	lr
60002c22:	f110 0f00 	cmn.w	r0, #0
60002c26:	ea91 0f03 	teq	r1, r3
60002c2a:	bf58      	it	pl
60002c2c:	4299      	cmppl	r1, r3
60002c2e:	bf08      	it	eq
60002c30:	4290      	cmpeq	r0, r2
60002c32:	bf2c      	ite	cs
60002c34:	17d8      	asrcs	r0, r3, #31
60002c36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
60002c3a:	f040 0001 	orr.w	r0, r0, #1
60002c3e:	4770      	bx	lr
60002c40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
60002c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002c48:	d102      	bne.n	60002c50 <__cmpdf2+0x64>
60002c4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
60002c4e:	d107      	bne.n	60002c60 <__cmpdf2+0x74>
60002c50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
60002c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002c58:	d1d6      	bne.n	60002c08 <__cmpdf2+0x1c>
60002c5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
60002c5e:	d0d3      	beq.n	60002c08 <__cmpdf2+0x1c>
60002c60:	f85d 0b04 	ldr.w	r0, [sp], #4
60002c64:	4770      	bx	lr
60002c66:	bf00      	nop

60002c68 <__aeabi_cdrcmple>:
60002c68:	4684      	mov	ip, r0
60002c6a:	4610      	mov	r0, r2
60002c6c:	4662      	mov	r2, ip
60002c6e:	468c      	mov	ip, r1
60002c70:	4619      	mov	r1, r3
60002c72:	4663      	mov	r3, ip
60002c74:	e000      	b.n	60002c78 <__aeabi_cdcmpeq>
60002c76:	bf00      	nop

60002c78 <__aeabi_cdcmpeq>:
60002c78:	b501      	push	{r0, lr}
60002c7a:	f7ff ffb7 	bl	60002bec <__cmpdf2>
60002c7e:	2800      	cmp	r0, #0
60002c80:	bf48      	it	mi
60002c82:	f110 0f00 	cmnmi.w	r0, #0
60002c86:	bd01      	pop	{r0, pc}

60002c88 <__aeabi_dcmpeq>:
60002c88:	f84d ed08 	str.w	lr, [sp, #-8]!
60002c8c:	f7ff fff4 	bl	60002c78 <__aeabi_cdcmpeq>
60002c90:	bf0c      	ite	eq
60002c92:	2001      	moveq	r0, #1
60002c94:	2000      	movne	r0, #0
60002c96:	f85d fb08 	ldr.w	pc, [sp], #8
60002c9a:	bf00      	nop

60002c9c <__aeabi_dcmplt>:
60002c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
60002ca0:	f7ff ffea 	bl	60002c78 <__aeabi_cdcmpeq>
60002ca4:	bf34      	ite	cc
60002ca6:	2001      	movcc	r0, #1
60002ca8:	2000      	movcs	r0, #0
60002caa:	f85d fb08 	ldr.w	pc, [sp], #8
60002cae:	bf00      	nop

60002cb0 <__aeabi_dcmple>:
60002cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
60002cb4:	f7ff ffe0 	bl	60002c78 <__aeabi_cdcmpeq>
60002cb8:	bf94      	ite	ls
60002cba:	2001      	movls	r0, #1
60002cbc:	2000      	movhi	r0, #0
60002cbe:	f85d fb08 	ldr.w	pc, [sp], #8
60002cc2:	bf00      	nop

60002cc4 <__aeabi_dcmpge>:
60002cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
60002cc8:	f7ff ffce 	bl	60002c68 <__aeabi_cdrcmple>
60002ccc:	bf94      	ite	ls
60002cce:	2001      	movls	r0, #1
60002cd0:	2000      	movhi	r0, #0
60002cd2:	f85d fb08 	ldr.w	pc, [sp], #8
60002cd6:	bf00      	nop

60002cd8 <__aeabi_dcmpgt>:
60002cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
60002cdc:	f7ff ffc4 	bl	60002c68 <__aeabi_cdrcmple>
60002ce0:	bf34      	ite	cc
60002ce2:	2001      	movcc	r0, #1
60002ce4:	2000      	movcs	r0, #0
60002ce6:	f85d fb08 	ldr.w	pc, [sp], #8
60002cea:	bf00      	nop

60002cec <__aeabi_d2iz>:
60002cec:	ea4f 0241 	mov.w	r2, r1, lsl #1
60002cf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
60002cf4:	d215      	bcs.n	60002d22 <__aeabi_d2iz+0x36>
60002cf6:	d511      	bpl.n	60002d1c <__aeabi_d2iz+0x30>
60002cf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
60002cfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
60002d00:	d912      	bls.n	60002d28 <__aeabi_d2iz+0x3c>
60002d02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
60002d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
60002d0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
60002d0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
60002d12:	fa23 f002 	lsr.w	r0, r3, r2
60002d16:	bf18      	it	ne
60002d18:	4240      	negne	r0, r0
60002d1a:	4770      	bx	lr
60002d1c:	f04f 0000 	mov.w	r0, #0
60002d20:	4770      	bx	lr
60002d22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
60002d26:	d105      	bne.n	60002d34 <__aeabi_d2iz+0x48>
60002d28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
60002d2c:	bf08      	it	eq
60002d2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
60002d32:	4770      	bx	lr
60002d34:	f04f 0000 	mov.w	r0, #0
60002d38:	4770      	bx	lr
60002d3a:	bf00      	nop

60002d3c <__aeabi_d2f>:
60002d3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
60002d40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
60002d44:	bf24      	itt	cs
60002d46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
60002d4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
60002d4e:	d90d      	bls.n	60002d6c <__aeabi_d2f+0x30>
60002d50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
60002d54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
60002d58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
60002d5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
60002d60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
60002d64:	bf08      	it	eq
60002d66:	f020 0001 	biceq.w	r0, r0, #1
60002d6a:	4770      	bx	lr
60002d6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
60002d70:	d121      	bne.n	60002db6 <__aeabi_d2f+0x7a>
60002d72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
60002d76:	bfbc      	itt	lt
60002d78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
60002d7c:	4770      	bxlt	lr
60002d7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002d82:	ea4f 5252 	mov.w	r2, r2, lsr #21
60002d86:	f1c2 0218 	rsb	r2, r2, #24
60002d8a:	f1c2 0c20 	rsb	ip, r2, #32
60002d8e:	fa10 f30c 	lsls.w	r3, r0, ip
60002d92:	fa20 f002 	lsr.w	r0, r0, r2
60002d96:	bf18      	it	ne
60002d98:	f040 0001 	orrne.w	r0, r0, #1
60002d9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
60002da0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
60002da4:	fa03 fc0c 	lsl.w	ip, r3, ip
60002da8:	ea40 000c 	orr.w	r0, r0, ip
60002dac:	fa23 f302 	lsr.w	r3, r3, r2
60002db0:	ea4f 0343 	mov.w	r3, r3, lsl #1
60002db4:	e7cc      	b.n	60002d50 <__aeabi_d2f+0x14>
60002db6:	ea7f 5362 	mvns.w	r3, r2, asr #21
60002dba:	d107      	bne.n	60002dcc <__aeabi_d2f+0x90>
60002dbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
60002dc0:	bf1e      	ittt	ne
60002dc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
60002dc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
60002dca:	4770      	bxne	lr
60002dcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
60002dd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
60002dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60002dd8:	4770      	bx	lr
60002dda:	bf00      	nop

60002ddc <__aeabi_frsub>:
60002ddc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
60002de0:	e002      	b.n	60002de8 <__addsf3>
60002de2:	bf00      	nop

60002de4 <__aeabi_fsub>:
60002de4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

60002de8 <__addsf3>:
60002de8:	0042      	lsls	r2, r0, #1
60002dea:	bf1f      	itttt	ne
60002dec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
60002df0:	ea92 0f03 	teqne	r2, r3
60002df4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
60002df8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
60002dfc:	d06a      	beq.n	60002ed4 <__addsf3+0xec>
60002dfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
60002e02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
60002e06:	bfc1      	itttt	gt
60002e08:	18d2      	addgt	r2, r2, r3
60002e0a:	4041      	eorgt	r1, r0
60002e0c:	4048      	eorgt	r0, r1
60002e0e:	4041      	eorgt	r1, r0
60002e10:	bfb8      	it	lt
60002e12:	425b      	neglt	r3, r3
60002e14:	2b19      	cmp	r3, #25
60002e16:	bf88      	it	hi
60002e18:	4770      	bxhi	lr
60002e1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
60002e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60002e22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
60002e26:	bf18      	it	ne
60002e28:	4240      	negne	r0, r0
60002e2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
60002e2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
60002e32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
60002e36:	bf18      	it	ne
60002e38:	4249      	negne	r1, r1
60002e3a:	ea92 0f03 	teq	r2, r3
60002e3e:	d03f      	beq.n	60002ec0 <__addsf3+0xd8>
60002e40:	f1a2 0201 	sub.w	r2, r2, #1
60002e44:	fa41 fc03 	asr.w	ip, r1, r3
60002e48:	eb10 000c 	adds.w	r0, r0, ip
60002e4c:	f1c3 0320 	rsb	r3, r3, #32
60002e50:	fa01 f103 	lsl.w	r1, r1, r3
60002e54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
60002e58:	d502      	bpl.n	60002e60 <__addsf3+0x78>
60002e5a:	4249      	negs	r1, r1
60002e5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
60002e60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
60002e64:	d313      	bcc.n	60002e8e <__addsf3+0xa6>
60002e66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
60002e6a:	d306      	bcc.n	60002e7a <__addsf3+0x92>
60002e6c:	0840      	lsrs	r0, r0, #1
60002e6e:	ea4f 0131 	mov.w	r1, r1, rrx
60002e72:	f102 0201 	add.w	r2, r2, #1
60002e76:	2afe      	cmp	r2, #254	; 0xfe
60002e78:	d251      	bcs.n	60002f1e <__addsf3+0x136>
60002e7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
60002e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
60002e82:	bf08      	it	eq
60002e84:	f020 0001 	biceq.w	r0, r0, #1
60002e88:	ea40 0003 	orr.w	r0, r0, r3
60002e8c:	4770      	bx	lr
60002e8e:	0049      	lsls	r1, r1, #1
60002e90:	eb40 0000 	adc.w	r0, r0, r0
60002e94:	3a01      	subs	r2, #1
60002e96:	bf28      	it	cs
60002e98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
60002e9c:	d2ed      	bcs.n	60002e7a <__addsf3+0x92>
60002e9e:	fab0 fc80 	clz	ip, r0
60002ea2:	f1ac 0c08 	sub.w	ip, ip, #8
60002ea6:	ebb2 020c 	subs.w	r2, r2, ip
60002eaa:	fa00 f00c 	lsl.w	r0, r0, ip
60002eae:	bfaa      	itet	ge
60002eb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
60002eb4:	4252      	neglt	r2, r2
60002eb6:	4318      	orrge	r0, r3
60002eb8:	bfbc      	itt	lt
60002eba:	40d0      	lsrlt	r0, r2
60002ebc:	4318      	orrlt	r0, r3
60002ebe:	4770      	bx	lr
60002ec0:	f092 0f00 	teq	r2, #0
60002ec4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
60002ec8:	bf06      	itte	eq
60002eca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
60002ece:	3201      	addeq	r2, #1
60002ed0:	3b01      	subne	r3, #1
60002ed2:	e7b5      	b.n	60002e40 <__addsf3+0x58>
60002ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
60002ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
60002edc:	bf18      	it	ne
60002ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
60002ee2:	d021      	beq.n	60002f28 <__addsf3+0x140>
60002ee4:	ea92 0f03 	teq	r2, r3
60002ee8:	d004      	beq.n	60002ef4 <__addsf3+0x10c>
60002eea:	f092 0f00 	teq	r2, #0
60002eee:	bf08      	it	eq
60002ef0:	4608      	moveq	r0, r1
60002ef2:	4770      	bx	lr
60002ef4:	ea90 0f01 	teq	r0, r1
60002ef8:	bf1c      	itt	ne
60002efa:	2000      	movne	r0, #0
60002efc:	4770      	bxne	lr
60002efe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
60002f02:	d104      	bne.n	60002f0e <__addsf3+0x126>
60002f04:	0040      	lsls	r0, r0, #1
60002f06:	bf28      	it	cs
60002f08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
60002f0c:	4770      	bx	lr
60002f0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
60002f12:	bf3c      	itt	cc
60002f14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
60002f18:	4770      	bxcc	lr
60002f1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
60002f1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
60002f22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60002f26:	4770      	bx	lr
60002f28:	ea7f 6222 	mvns.w	r2, r2, asr #24
60002f2c:	bf16      	itet	ne
60002f2e:	4608      	movne	r0, r1
60002f30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
60002f34:	4601      	movne	r1, r0
60002f36:	0242      	lsls	r2, r0, #9
60002f38:	bf06      	itte	eq
60002f3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
60002f3e:	ea90 0f01 	teqeq	r0, r1
60002f42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
60002f46:	4770      	bx	lr

60002f48 <__aeabi_ui2f>:
60002f48:	f04f 0300 	mov.w	r3, #0
60002f4c:	e004      	b.n	60002f58 <__aeabi_i2f+0x8>
60002f4e:	bf00      	nop

60002f50 <__aeabi_i2f>:
60002f50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
60002f54:	bf48      	it	mi
60002f56:	4240      	negmi	r0, r0
60002f58:	ea5f 0c00 	movs.w	ip, r0
60002f5c:	bf08      	it	eq
60002f5e:	4770      	bxeq	lr
60002f60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
60002f64:	4601      	mov	r1, r0
60002f66:	f04f 0000 	mov.w	r0, #0
60002f6a:	e01c      	b.n	60002fa6 <__aeabi_l2f+0x2a>

60002f6c <__aeabi_ul2f>:
60002f6c:	ea50 0201 	orrs.w	r2, r0, r1
60002f70:	bf08      	it	eq
60002f72:	4770      	bxeq	lr
60002f74:	f04f 0300 	mov.w	r3, #0
60002f78:	e00a      	b.n	60002f90 <__aeabi_l2f+0x14>
60002f7a:	bf00      	nop

60002f7c <__aeabi_l2f>:
60002f7c:	ea50 0201 	orrs.w	r2, r0, r1
60002f80:	bf08      	it	eq
60002f82:	4770      	bxeq	lr
60002f84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
60002f88:	d502      	bpl.n	60002f90 <__aeabi_l2f+0x14>
60002f8a:	4240      	negs	r0, r0
60002f8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60002f90:	ea5f 0c01 	movs.w	ip, r1
60002f94:	bf02      	ittt	eq
60002f96:	4684      	moveq	ip, r0
60002f98:	4601      	moveq	r1, r0
60002f9a:	2000      	moveq	r0, #0
60002f9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
60002fa0:	bf08      	it	eq
60002fa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
60002fa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
60002faa:	fabc f28c 	clz	r2, ip
60002fae:	3a08      	subs	r2, #8
60002fb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
60002fb4:	db10      	blt.n	60002fd8 <__aeabi_l2f+0x5c>
60002fb6:	fa01 fc02 	lsl.w	ip, r1, r2
60002fba:	4463      	add	r3, ip
60002fbc:	fa00 fc02 	lsl.w	ip, r0, r2
60002fc0:	f1c2 0220 	rsb	r2, r2, #32
60002fc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
60002fc8:	fa20 f202 	lsr.w	r2, r0, r2
60002fcc:	eb43 0002 	adc.w	r0, r3, r2
60002fd0:	bf08      	it	eq
60002fd2:	f020 0001 	biceq.w	r0, r0, #1
60002fd6:	4770      	bx	lr
60002fd8:	f102 0220 	add.w	r2, r2, #32
60002fdc:	fa01 fc02 	lsl.w	ip, r1, r2
60002fe0:	f1c2 0220 	rsb	r2, r2, #32
60002fe4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
60002fe8:	fa21 f202 	lsr.w	r2, r1, r2
60002fec:	eb43 0002 	adc.w	r0, r3, r2
60002ff0:	bf08      	it	eq
60002ff2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
60002ff6:	4770      	bx	lr

60002ff8 <__aeabi_fmul>:
60002ff8:	f04f 0cff 	mov.w	ip, #255	; 0xff
60002ffc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
60003000:	bf1e      	ittt	ne
60003002:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
60003006:	ea92 0f0c 	teqne	r2, ip
6000300a:	ea93 0f0c 	teqne	r3, ip
6000300e:	d06f      	beq.n	600030f0 <__aeabi_fmul+0xf8>
60003010:	441a      	add	r2, r3
60003012:	ea80 0c01 	eor.w	ip, r0, r1
60003016:	0240      	lsls	r0, r0, #9
60003018:	bf18      	it	ne
6000301a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
6000301e:	d01e      	beq.n	6000305e <__aeabi_fmul+0x66>
60003020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
60003024:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
60003028:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
6000302c:	fba0 3101 	umull	r3, r1, r0, r1
60003030:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
60003034:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
60003038:	bf3e      	ittt	cc
6000303a:	0049      	lslcc	r1, r1, #1
6000303c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
60003040:	005b      	lslcc	r3, r3, #1
60003042:	ea40 0001 	orr.w	r0, r0, r1
60003046:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
6000304a:	2afd      	cmp	r2, #253	; 0xfd
6000304c:	d81d      	bhi.n	6000308a <__aeabi_fmul+0x92>
6000304e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
60003052:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
60003056:	bf08      	it	eq
60003058:	f020 0001 	biceq.w	r0, r0, #1
6000305c:	4770      	bx	lr
6000305e:	f090 0f00 	teq	r0, #0
60003062:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
60003066:	bf08      	it	eq
60003068:	0249      	lsleq	r1, r1, #9
6000306a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
6000306e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
60003072:	3a7f      	subs	r2, #127	; 0x7f
60003074:	bfc2      	ittt	gt
60003076:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
6000307a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
6000307e:	4770      	bxgt	lr
60003080:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003084:	f04f 0300 	mov.w	r3, #0
60003088:	3a01      	subs	r2, #1
6000308a:	dc5d      	bgt.n	60003148 <__aeabi_fmul+0x150>
6000308c:	f112 0f19 	cmn.w	r2, #25
60003090:	bfdc      	itt	le
60003092:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
60003096:	4770      	bxle	lr
60003098:	f1c2 0200 	rsb	r2, r2, #0
6000309c:	0041      	lsls	r1, r0, #1
6000309e:	fa21 f102 	lsr.w	r1, r1, r2
600030a2:	f1c2 0220 	rsb	r2, r2, #32
600030a6:	fa00 fc02 	lsl.w	ip, r0, r2
600030aa:	ea5f 0031 	movs.w	r0, r1, rrx
600030ae:	f140 0000 	adc.w	r0, r0, #0
600030b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
600030b6:	bf08      	it	eq
600030b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
600030bc:	4770      	bx	lr
600030be:	f092 0f00 	teq	r2, #0
600030c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
600030c6:	bf02      	ittt	eq
600030c8:	0040      	lsleq	r0, r0, #1
600030ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
600030ce:	3a01      	subeq	r2, #1
600030d0:	d0f9      	beq.n	600030c6 <__aeabi_fmul+0xce>
600030d2:	ea40 000c 	orr.w	r0, r0, ip
600030d6:	f093 0f00 	teq	r3, #0
600030da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
600030de:	bf02      	ittt	eq
600030e0:	0049      	lsleq	r1, r1, #1
600030e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
600030e6:	3b01      	subeq	r3, #1
600030e8:	d0f9      	beq.n	600030de <__aeabi_fmul+0xe6>
600030ea:	ea41 010c 	orr.w	r1, r1, ip
600030ee:	e78f      	b.n	60003010 <__aeabi_fmul+0x18>
600030f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
600030f4:	ea92 0f0c 	teq	r2, ip
600030f8:	bf18      	it	ne
600030fa:	ea93 0f0c 	teqne	r3, ip
600030fe:	d00a      	beq.n	60003116 <__aeabi_fmul+0x11e>
60003100:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
60003104:	bf18      	it	ne
60003106:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
6000310a:	d1d8      	bne.n	600030be <__aeabi_fmul+0xc6>
6000310c:	ea80 0001 	eor.w	r0, r0, r1
60003110:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
60003114:	4770      	bx	lr
60003116:	f090 0f00 	teq	r0, #0
6000311a:	bf17      	itett	ne
6000311c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
60003120:	4608      	moveq	r0, r1
60003122:	f091 0f00 	teqne	r1, #0
60003126:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
6000312a:	d014      	beq.n	60003156 <__aeabi_fmul+0x15e>
6000312c:	ea92 0f0c 	teq	r2, ip
60003130:	d101      	bne.n	60003136 <__aeabi_fmul+0x13e>
60003132:	0242      	lsls	r2, r0, #9
60003134:	d10f      	bne.n	60003156 <__aeabi_fmul+0x15e>
60003136:	ea93 0f0c 	teq	r3, ip
6000313a:	d103      	bne.n	60003144 <__aeabi_fmul+0x14c>
6000313c:	024b      	lsls	r3, r1, #9
6000313e:	bf18      	it	ne
60003140:	4608      	movne	r0, r1
60003142:	d108      	bne.n	60003156 <__aeabi_fmul+0x15e>
60003144:	ea80 0001 	eor.w	r0, r0, r1
60003148:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
6000314c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
60003150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003154:	4770      	bx	lr
60003156:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
6000315a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
6000315e:	4770      	bx	lr

60003160 <__aeabi_fdiv>:
60003160:	f04f 0cff 	mov.w	ip, #255	; 0xff
60003164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
60003168:	bf1e      	ittt	ne
6000316a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
6000316e:	ea92 0f0c 	teqne	r2, ip
60003172:	ea93 0f0c 	teqne	r3, ip
60003176:	d069      	beq.n	6000324c <__aeabi_fdiv+0xec>
60003178:	eba2 0203 	sub.w	r2, r2, r3
6000317c:	ea80 0c01 	eor.w	ip, r0, r1
60003180:	0249      	lsls	r1, r1, #9
60003182:	ea4f 2040 	mov.w	r0, r0, lsl #9
60003186:	d037      	beq.n	600031f8 <__aeabi_fdiv+0x98>
60003188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
6000318c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
60003190:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
60003194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
60003198:	428b      	cmp	r3, r1
6000319a:	bf38      	it	cc
6000319c:	005b      	lslcc	r3, r3, #1
6000319e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
600031a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
600031a6:	428b      	cmp	r3, r1
600031a8:	bf24      	itt	cs
600031aa:	1a5b      	subcs	r3, r3, r1
600031ac:	ea40 000c 	orrcs.w	r0, r0, ip
600031b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
600031b4:	bf24      	itt	cs
600031b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
600031ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
600031be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
600031c2:	bf24      	itt	cs
600031c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
600031c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
600031cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
600031d0:	bf24      	itt	cs
600031d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
600031d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
600031da:	011b      	lsls	r3, r3, #4
600031dc:	bf18      	it	ne
600031de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
600031e2:	d1e0      	bne.n	600031a6 <__aeabi_fdiv+0x46>
600031e4:	2afd      	cmp	r2, #253	; 0xfd
600031e6:	f63f af50 	bhi.w	6000308a <__aeabi_fmul+0x92>
600031ea:	428b      	cmp	r3, r1
600031ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
600031f0:	bf08      	it	eq
600031f2:	f020 0001 	biceq.w	r0, r0, #1
600031f6:	4770      	bx	lr
600031f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
600031fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
60003200:	327f      	adds	r2, #127	; 0x7f
60003202:	bfc2      	ittt	gt
60003204:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
60003208:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
6000320c:	4770      	bxgt	lr
6000320e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003212:	f04f 0300 	mov.w	r3, #0
60003216:	3a01      	subs	r2, #1
60003218:	e737      	b.n	6000308a <__aeabi_fmul+0x92>
6000321a:	f092 0f00 	teq	r2, #0
6000321e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
60003222:	bf02      	ittt	eq
60003224:	0040      	lsleq	r0, r0, #1
60003226:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
6000322a:	3a01      	subeq	r2, #1
6000322c:	d0f9      	beq.n	60003222 <__aeabi_fdiv+0xc2>
6000322e:	ea40 000c 	orr.w	r0, r0, ip
60003232:	f093 0f00 	teq	r3, #0
60003236:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
6000323a:	bf02      	ittt	eq
6000323c:	0049      	lsleq	r1, r1, #1
6000323e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
60003242:	3b01      	subeq	r3, #1
60003244:	d0f9      	beq.n	6000323a <__aeabi_fdiv+0xda>
60003246:	ea41 010c 	orr.w	r1, r1, ip
6000324a:	e795      	b.n	60003178 <__aeabi_fdiv+0x18>
6000324c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
60003250:	ea92 0f0c 	teq	r2, ip
60003254:	d108      	bne.n	60003268 <__aeabi_fdiv+0x108>
60003256:	0242      	lsls	r2, r0, #9
60003258:	f47f af7d 	bne.w	60003156 <__aeabi_fmul+0x15e>
6000325c:	ea93 0f0c 	teq	r3, ip
60003260:	f47f af70 	bne.w	60003144 <__aeabi_fmul+0x14c>
60003264:	4608      	mov	r0, r1
60003266:	e776      	b.n	60003156 <__aeabi_fmul+0x15e>
60003268:	ea93 0f0c 	teq	r3, ip
6000326c:	d104      	bne.n	60003278 <__aeabi_fdiv+0x118>
6000326e:	024b      	lsls	r3, r1, #9
60003270:	f43f af4c 	beq.w	6000310c <__aeabi_fmul+0x114>
60003274:	4608      	mov	r0, r1
60003276:	e76e      	b.n	60003156 <__aeabi_fmul+0x15e>
60003278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
6000327c:	bf18      	it	ne
6000327e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
60003282:	d1ca      	bne.n	6000321a <__aeabi_fdiv+0xba>
60003284:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
60003288:	f47f af5c 	bne.w	60003144 <__aeabi_fmul+0x14c>
6000328c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
60003290:	f47f af3c 	bne.w	6000310c <__aeabi_fmul+0x114>
60003294:	e75f      	b.n	60003156 <__aeabi_fmul+0x15e>
60003296:	bf00      	nop

60003298 <__aeabi_f2iz>:
60003298:	ea4f 0240 	mov.w	r2, r0, lsl #1
6000329c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
600032a0:	d30f      	bcc.n	600032c2 <__aeabi_f2iz+0x2a>
600032a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
600032a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
600032aa:	d90d      	bls.n	600032c8 <__aeabi_f2iz+0x30>
600032ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
600032b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
600032b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
600032b8:	fa23 f002 	lsr.w	r0, r3, r2
600032bc:	bf18      	it	ne
600032be:	4240      	negne	r0, r0
600032c0:	4770      	bx	lr
600032c2:	f04f 0000 	mov.w	r0, #0
600032c6:	4770      	bx	lr
600032c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
600032cc:	d101      	bne.n	600032d2 <__aeabi_f2iz+0x3a>
600032ce:	0242      	lsls	r2, r0, #9
600032d0:	d105      	bne.n	600032de <__aeabi_f2iz+0x46>
600032d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
600032d6:	bf08      	it	eq
600032d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
600032dc:	4770      	bx	lr
600032de:	f04f 0000 	mov.w	r0, #0
600032e2:	4770      	bx	lr

600032e4 <__aeabi_ldivmod>:
600032e4:	b97b      	cbnz	r3, 60003306 <__aeabi_ldivmod+0x22>
600032e6:	b972      	cbnz	r2, 60003306 <__aeabi_ldivmod+0x22>
600032e8:	2900      	cmp	r1, #0
600032ea:	bfbe      	ittt	lt
600032ec:	2000      	movlt	r0, #0
600032ee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
600032f2:	e006      	blt.n	60003302 <__aeabi_ldivmod+0x1e>
600032f4:	bf08      	it	eq
600032f6:	2800      	cmpeq	r0, #0
600032f8:	bf1c      	itt	ne
600032fa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
600032fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60003302:	f000 b857 	b.w	600033b4 <__aeabi_idiv0>
60003306:	f1ad 0c08 	sub.w	ip, sp, #8
6000330a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
6000330e:	2900      	cmp	r1, #0
60003310:	db09      	blt.n	60003326 <__aeabi_ldivmod+0x42>
60003312:	2b00      	cmp	r3, #0
60003314:	db1a      	blt.n	6000334c <__aeabi_ldivmod+0x68>
60003316:	f000 f8e9 	bl	600034ec <__udivmoddi4>
6000331a:	f8dd e004 	ldr.w	lr, [sp, #4]
6000331e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60003322:	b004      	add	sp, #16
60003324:	4770      	bx	lr
60003326:	4240      	negs	r0, r0
60003328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
6000332c:	2b00      	cmp	r3, #0
6000332e:	db1b      	blt.n	60003368 <__aeabi_ldivmod+0x84>
60003330:	f000 f8dc 	bl	600034ec <__udivmoddi4>
60003334:	f8dd e004 	ldr.w	lr, [sp, #4]
60003338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
6000333c:	b004      	add	sp, #16
6000333e:	4240      	negs	r0, r0
60003340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60003344:	4252      	negs	r2, r2
60003346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
6000334a:	4770      	bx	lr
6000334c:	4252      	negs	r2, r2
6000334e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60003352:	f000 f8cb 	bl	600034ec <__udivmoddi4>
60003356:	f8dd e004 	ldr.w	lr, [sp, #4]
6000335a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
6000335e:	b004      	add	sp, #16
60003360:	4240      	negs	r0, r0
60003362:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60003366:	4770      	bx	lr
60003368:	4252      	negs	r2, r2
6000336a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
6000336e:	f000 f8bd 	bl	600034ec <__udivmoddi4>
60003372:	f8dd e004 	ldr.w	lr, [sp, #4]
60003376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
6000337a:	b004      	add	sp, #16
6000337c:	4252      	negs	r2, r2
6000337e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60003382:	4770      	bx	lr

60003384 <__aeabi_uldivmod>:
60003384:	b953      	cbnz	r3, 6000339c <__aeabi_uldivmod+0x18>
60003386:	b94a      	cbnz	r2, 6000339c <__aeabi_uldivmod+0x18>
60003388:	2900      	cmp	r1, #0
6000338a:	bf08      	it	eq
6000338c:	2800      	cmpeq	r0, #0
6000338e:	bf1c      	itt	ne
60003390:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
60003394:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60003398:	f000 b80c 	b.w	600033b4 <__aeabi_idiv0>
6000339c:	f1ad 0c08 	sub.w	ip, sp, #8
600033a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
600033a4:	f000 f8a2 	bl	600034ec <__udivmoddi4>
600033a8:	f8dd e004 	ldr.w	lr, [sp, #4]
600033ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
600033b0:	b004      	add	sp, #16
600033b2:	4770      	bx	lr

600033b4 <__aeabi_idiv0>:
600033b4:	4770      	bx	lr
600033b6:	bf00      	nop

600033b8 <memcpy>:
600033b8:	4684      	mov	ip, r0
600033ba:	ea41 0300 	orr.w	r3, r1, r0
600033be:	f013 0303 	ands.w	r3, r3, #3
600033c2:	d16d      	bne.n	600034a0 <memcpy+0xe8>
600033c4:	3a40      	subs	r2, #64	; 0x40
600033c6:	d341      	bcc.n	6000344c <memcpy+0x94>
600033c8:	f851 3b04 	ldr.w	r3, [r1], #4
600033cc:	f840 3b04 	str.w	r3, [r0], #4
600033d0:	f851 3b04 	ldr.w	r3, [r1], #4
600033d4:	f840 3b04 	str.w	r3, [r0], #4
600033d8:	f851 3b04 	ldr.w	r3, [r1], #4
600033dc:	f840 3b04 	str.w	r3, [r0], #4
600033e0:	f851 3b04 	ldr.w	r3, [r1], #4
600033e4:	f840 3b04 	str.w	r3, [r0], #4
600033e8:	f851 3b04 	ldr.w	r3, [r1], #4
600033ec:	f840 3b04 	str.w	r3, [r0], #4
600033f0:	f851 3b04 	ldr.w	r3, [r1], #4
600033f4:	f840 3b04 	str.w	r3, [r0], #4
600033f8:	f851 3b04 	ldr.w	r3, [r1], #4
600033fc:	f840 3b04 	str.w	r3, [r0], #4
60003400:	f851 3b04 	ldr.w	r3, [r1], #4
60003404:	f840 3b04 	str.w	r3, [r0], #4
60003408:	f851 3b04 	ldr.w	r3, [r1], #4
6000340c:	f840 3b04 	str.w	r3, [r0], #4
60003410:	f851 3b04 	ldr.w	r3, [r1], #4
60003414:	f840 3b04 	str.w	r3, [r0], #4
60003418:	f851 3b04 	ldr.w	r3, [r1], #4
6000341c:	f840 3b04 	str.w	r3, [r0], #4
60003420:	f851 3b04 	ldr.w	r3, [r1], #4
60003424:	f840 3b04 	str.w	r3, [r0], #4
60003428:	f851 3b04 	ldr.w	r3, [r1], #4
6000342c:	f840 3b04 	str.w	r3, [r0], #4
60003430:	f851 3b04 	ldr.w	r3, [r1], #4
60003434:	f840 3b04 	str.w	r3, [r0], #4
60003438:	f851 3b04 	ldr.w	r3, [r1], #4
6000343c:	f840 3b04 	str.w	r3, [r0], #4
60003440:	f851 3b04 	ldr.w	r3, [r1], #4
60003444:	f840 3b04 	str.w	r3, [r0], #4
60003448:	3a40      	subs	r2, #64	; 0x40
6000344a:	d2bd      	bcs.n	600033c8 <memcpy+0x10>
6000344c:	3230      	adds	r2, #48	; 0x30
6000344e:	d311      	bcc.n	60003474 <memcpy+0xbc>
60003450:	f851 3b04 	ldr.w	r3, [r1], #4
60003454:	f840 3b04 	str.w	r3, [r0], #4
60003458:	f851 3b04 	ldr.w	r3, [r1], #4
6000345c:	f840 3b04 	str.w	r3, [r0], #4
60003460:	f851 3b04 	ldr.w	r3, [r1], #4
60003464:	f840 3b04 	str.w	r3, [r0], #4
60003468:	f851 3b04 	ldr.w	r3, [r1], #4
6000346c:	f840 3b04 	str.w	r3, [r0], #4
60003470:	3a10      	subs	r2, #16
60003472:	d2ed      	bcs.n	60003450 <memcpy+0x98>
60003474:	320c      	adds	r2, #12
60003476:	d305      	bcc.n	60003484 <memcpy+0xcc>
60003478:	f851 3b04 	ldr.w	r3, [r1], #4
6000347c:	f840 3b04 	str.w	r3, [r0], #4
60003480:	3a04      	subs	r2, #4
60003482:	d2f9      	bcs.n	60003478 <memcpy+0xc0>
60003484:	3204      	adds	r2, #4
60003486:	d008      	beq.n	6000349a <memcpy+0xe2>
60003488:	07d2      	lsls	r2, r2, #31
6000348a:	bf1c      	itt	ne
6000348c:	f811 3b01 	ldrbne.w	r3, [r1], #1
60003490:	f800 3b01 	strbne.w	r3, [r0], #1
60003494:	d301      	bcc.n	6000349a <memcpy+0xe2>
60003496:	880b      	ldrh	r3, [r1, #0]
60003498:	8003      	strh	r3, [r0, #0]
6000349a:	4660      	mov	r0, ip
6000349c:	4770      	bx	lr
6000349e:	bf00      	nop
600034a0:	2a08      	cmp	r2, #8
600034a2:	d313      	bcc.n	600034cc <memcpy+0x114>
600034a4:	078b      	lsls	r3, r1, #30
600034a6:	d08d      	beq.n	600033c4 <memcpy+0xc>
600034a8:	f010 0303 	ands.w	r3, r0, #3
600034ac:	d08a      	beq.n	600033c4 <memcpy+0xc>
600034ae:	f1c3 0304 	rsb	r3, r3, #4
600034b2:	1ad2      	subs	r2, r2, r3
600034b4:	07db      	lsls	r3, r3, #31
600034b6:	bf1c      	itt	ne
600034b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
600034bc:	f800 3b01 	strbne.w	r3, [r0], #1
600034c0:	d380      	bcc.n	600033c4 <memcpy+0xc>
600034c2:	f831 3b02 	ldrh.w	r3, [r1], #2
600034c6:	f820 3b02 	strh.w	r3, [r0], #2
600034ca:	e77b      	b.n	600033c4 <memcpy+0xc>
600034cc:	3a04      	subs	r2, #4
600034ce:	d3d9      	bcc.n	60003484 <memcpy+0xcc>
600034d0:	3a01      	subs	r2, #1
600034d2:	f811 3b01 	ldrb.w	r3, [r1], #1
600034d6:	f800 3b01 	strb.w	r3, [r0], #1
600034da:	d2f9      	bcs.n	600034d0 <memcpy+0x118>
600034dc:	780b      	ldrb	r3, [r1, #0]
600034de:	7003      	strb	r3, [r0, #0]
600034e0:	784b      	ldrb	r3, [r1, #1]
600034e2:	7043      	strb	r3, [r0, #1]
600034e4:	788b      	ldrb	r3, [r1, #2]
600034e6:	7083      	strb	r3, [r0, #2]
600034e8:	4660      	mov	r0, ip
600034ea:	4770      	bx	lr

600034ec <__udivmoddi4>:
600034ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600034f0:	4686      	mov	lr, r0
600034f2:	468c      	mov	ip, r1
600034f4:	4608      	mov	r0, r1
600034f6:	9e08      	ldr	r6, [sp, #32]
600034f8:	4615      	mov	r5, r2
600034fa:	4674      	mov	r4, lr
600034fc:	4619      	mov	r1, r3
600034fe:	2b00      	cmp	r3, #0
60003500:	f040 80c2 	bne.w	60003688 <__udivmoddi4+0x19c>
60003504:	4285      	cmp	r5, r0
60003506:	fab2 f282 	clz	r2, r2
6000350a:	d945      	bls.n	60003598 <__udivmoddi4+0xac>
6000350c:	b14a      	cbz	r2, 60003522 <__udivmoddi4+0x36>
6000350e:	f1c2 0320 	rsb	r3, r2, #32
60003512:	fa00 fc02 	lsl.w	ip, r0, r2
60003516:	fa2e f303 	lsr.w	r3, lr, r3
6000351a:	4095      	lsls	r5, r2
6000351c:	ea43 0c0c 	orr.w	ip, r3, ip
60003520:	4094      	lsls	r4, r2
60003522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
60003526:	b2a8      	uxth	r0, r5
60003528:	fbbc f8fe 	udiv	r8, ip, lr
6000352c:	0c23      	lsrs	r3, r4, #16
6000352e:	fb0e cc18 	mls	ip, lr, r8, ip
60003532:	fb08 f900 	mul.w	r9, r8, r0
60003536:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
6000353a:	4599      	cmp	r9, r3
6000353c:	d928      	bls.n	60003590 <__udivmoddi4+0xa4>
6000353e:	18eb      	adds	r3, r5, r3
60003540:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
60003544:	d204      	bcs.n	60003550 <__udivmoddi4+0x64>
60003546:	4599      	cmp	r9, r3
60003548:	d902      	bls.n	60003550 <__udivmoddi4+0x64>
6000354a:	f1a8 0702 	sub.w	r7, r8, #2
6000354e:	442b      	add	r3, r5
60003550:	eba3 0309 	sub.w	r3, r3, r9
60003554:	b2a4      	uxth	r4, r4
60003556:	fbb3 fcfe 	udiv	ip, r3, lr
6000355a:	fb0e 331c 	mls	r3, lr, ip, r3
6000355e:	fb0c f000 	mul.w	r0, ip, r0
60003562:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
60003566:	42a0      	cmp	r0, r4
60003568:	d914      	bls.n	60003594 <__udivmoddi4+0xa8>
6000356a:	192c      	adds	r4, r5, r4
6000356c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
60003570:	d204      	bcs.n	6000357c <__udivmoddi4+0x90>
60003572:	42a0      	cmp	r0, r4
60003574:	d902      	bls.n	6000357c <__udivmoddi4+0x90>
60003576:	f1ac 0302 	sub.w	r3, ip, #2
6000357a:	442c      	add	r4, r5
6000357c:	1a24      	subs	r4, r4, r0
6000357e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
60003582:	b11e      	cbz	r6, 6000358c <__udivmoddi4+0xa0>
60003584:	40d4      	lsrs	r4, r2
60003586:	2300      	movs	r3, #0
60003588:	6034      	str	r4, [r6, #0]
6000358a:	6073      	str	r3, [r6, #4]
6000358c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60003590:	4647      	mov	r7, r8
60003592:	e7dd      	b.n	60003550 <__udivmoddi4+0x64>
60003594:	4663      	mov	r3, ip
60003596:	e7f1      	b.n	6000357c <__udivmoddi4+0x90>
60003598:	bb92      	cbnz	r2, 60003600 <__udivmoddi4+0x114>
6000359a:	1b43      	subs	r3, r0, r5
6000359c:	2101      	movs	r1, #1
6000359e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
600035a2:	b2af      	uxth	r7, r5
600035a4:	fbb3 fcfe 	udiv	ip, r3, lr
600035a8:	0c20      	lsrs	r0, r4, #16
600035aa:	fb0e 331c 	mls	r3, lr, ip, r3
600035ae:	fb0c f807 	mul.w	r8, ip, r7
600035b2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
600035b6:	4598      	cmp	r8, r3
600035b8:	d962      	bls.n	60003680 <__udivmoddi4+0x194>
600035ba:	18eb      	adds	r3, r5, r3
600035bc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
600035c0:	d204      	bcs.n	600035cc <__udivmoddi4+0xe0>
600035c2:	4598      	cmp	r8, r3
600035c4:	d902      	bls.n	600035cc <__udivmoddi4+0xe0>
600035c6:	f1ac 0002 	sub.w	r0, ip, #2
600035ca:	442b      	add	r3, r5
600035cc:	eba3 0308 	sub.w	r3, r3, r8
600035d0:	b2a4      	uxth	r4, r4
600035d2:	fbb3 fcfe 	udiv	ip, r3, lr
600035d6:	fb0e 331c 	mls	r3, lr, ip, r3
600035da:	fb0c f707 	mul.w	r7, ip, r7
600035de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
600035e2:	42a7      	cmp	r7, r4
600035e4:	d94e      	bls.n	60003684 <__udivmoddi4+0x198>
600035e6:	192c      	adds	r4, r5, r4
600035e8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
600035ec:	d204      	bcs.n	600035f8 <__udivmoddi4+0x10c>
600035ee:	42a7      	cmp	r7, r4
600035f0:	d902      	bls.n	600035f8 <__udivmoddi4+0x10c>
600035f2:	f1ac 0302 	sub.w	r3, ip, #2
600035f6:	442c      	add	r4, r5
600035f8:	1be4      	subs	r4, r4, r7
600035fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
600035fe:	e7c0      	b.n	60003582 <__udivmoddi4+0x96>
60003600:	f1c2 0320 	rsb	r3, r2, #32
60003604:	fa20 f103 	lsr.w	r1, r0, r3
60003608:	4095      	lsls	r5, r2
6000360a:	4090      	lsls	r0, r2
6000360c:	fa2e f303 	lsr.w	r3, lr, r3
60003610:	4303      	orrs	r3, r0
60003612:	ea4f 4e15 	mov.w	lr, r5, lsr #16
60003616:	b2af      	uxth	r7, r5
60003618:	fbb1 fcfe 	udiv	ip, r1, lr
6000361c:	fb0e 101c 	mls	r0, lr, ip, r1
60003620:	0c19      	lsrs	r1, r3, #16
60003622:	fb0c f807 	mul.w	r8, ip, r7
60003626:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
6000362a:	4588      	cmp	r8, r1
6000362c:	fa04 f402 	lsl.w	r4, r4, r2
60003630:	d922      	bls.n	60003678 <__udivmoddi4+0x18c>
60003632:	1869      	adds	r1, r5, r1
60003634:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
60003638:	d204      	bcs.n	60003644 <__udivmoddi4+0x158>
6000363a:	4588      	cmp	r8, r1
6000363c:	d902      	bls.n	60003644 <__udivmoddi4+0x158>
6000363e:	f1ac 0002 	sub.w	r0, ip, #2
60003642:	4429      	add	r1, r5
60003644:	eba1 0108 	sub.w	r1, r1, r8
60003648:	b29b      	uxth	r3, r3
6000364a:	fbb1 fcfe 	udiv	ip, r1, lr
6000364e:	fb0e 111c 	mls	r1, lr, ip, r1
60003652:	fb0c f707 	mul.w	r7, ip, r7
60003656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
6000365a:	429f      	cmp	r7, r3
6000365c:	d90e      	bls.n	6000367c <__udivmoddi4+0x190>
6000365e:	18eb      	adds	r3, r5, r3
60003660:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
60003664:	d204      	bcs.n	60003670 <__udivmoddi4+0x184>
60003666:	429f      	cmp	r7, r3
60003668:	d902      	bls.n	60003670 <__udivmoddi4+0x184>
6000366a:	f1ac 0102 	sub.w	r1, ip, #2
6000366e:	442b      	add	r3, r5
60003670:	1bdb      	subs	r3, r3, r7
60003672:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
60003676:	e792      	b.n	6000359e <__udivmoddi4+0xb2>
60003678:	4660      	mov	r0, ip
6000367a:	e7e3      	b.n	60003644 <__udivmoddi4+0x158>
6000367c:	4661      	mov	r1, ip
6000367e:	e7f7      	b.n	60003670 <__udivmoddi4+0x184>
60003680:	4660      	mov	r0, ip
60003682:	e7a3      	b.n	600035cc <__udivmoddi4+0xe0>
60003684:	4663      	mov	r3, ip
60003686:	e7b7      	b.n	600035f8 <__udivmoddi4+0x10c>
60003688:	4283      	cmp	r3, r0
6000368a:	d906      	bls.n	6000369a <__udivmoddi4+0x1ae>
6000368c:	b916      	cbnz	r6, 60003694 <__udivmoddi4+0x1a8>
6000368e:	2100      	movs	r1, #0
60003690:	4608      	mov	r0, r1
60003692:	e77b      	b.n	6000358c <__udivmoddi4+0xa0>
60003694:	e9c6 e000 	strd	lr, r0, [r6]
60003698:	e7f9      	b.n	6000368e <__udivmoddi4+0x1a2>
6000369a:	fab3 f783 	clz	r7, r3
6000369e:	b98f      	cbnz	r7, 600036c4 <__udivmoddi4+0x1d8>
600036a0:	4283      	cmp	r3, r0
600036a2:	d301      	bcc.n	600036a8 <__udivmoddi4+0x1bc>
600036a4:	4572      	cmp	r2, lr
600036a6:	d808      	bhi.n	600036ba <__udivmoddi4+0x1ce>
600036a8:	ebbe 0402 	subs.w	r4, lr, r2
600036ac:	eb60 0303 	sbc.w	r3, r0, r3
600036b0:	2001      	movs	r0, #1
600036b2:	469c      	mov	ip, r3
600036b4:	b91e      	cbnz	r6, 600036be <__udivmoddi4+0x1d2>
600036b6:	2100      	movs	r1, #0
600036b8:	e768      	b.n	6000358c <__udivmoddi4+0xa0>
600036ba:	4638      	mov	r0, r7
600036bc:	e7fa      	b.n	600036b4 <__udivmoddi4+0x1c8>
600036be:	e9c6 4c00 	strd	r4, ip, [r6]
600036c2:	e7f8      	b.n	600036b6 <__udivmoddi4+0x1ca>
600036c4:	f1c7 0c20 	rsb	ip, r7, #32
600036c8:	40bb      	lsls	r3, r7
600036ca:	fa22 f40c 	lsr.w	r4, r2, ip
600036ce:	431c      	orrs	r4, r3
600036d0:	fa2e f10c 	lsr.w	r1, lr, ip
600036d4:	fa20 f30c 	lsr.w	r3, r0, ip
600036d8:	40b8      	lsls	r0, r7
600036da:	4301      	orrs	r1, r0
600036dc:	ea4f 4914 	mov.w	r9, r4, lsr #16
600036e0:	fa0e f507 	lsl.w	r5, lr, r7
600036e4:	fbb3 f8f9 	udiv	r8, r3, r9
600036e8:	fa1f fe84 	uxth.w	lr, r4
600036ec:	fb09 3018 	mls	r0, r9, r8, r3
600036f0:	0c0b      	lsrs	r3, r1, #16
600036f2:	fb08 fa0e 	mul.w	sl, r8, lr
600036f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
600036fa:	459a      	cmp	sl, r3
600036fc:	fa02 f207 	lsl.w	r2, r2, r7
60003700:	d940      	bls.n	60003784 <__udivmoddi4+0x298>
60003702:	18e3      	adds	r3, r4, r3
60003704:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
60003708:	d204      	bcs.n	60003714 <__udivmoddi4+0x228>
6000370a:	459a      	cmp	sl, r3
6000370c:	d902      	bls.n	60003714 <__udivmoddi4+0x228>
6000370e:	f1a8 0002 	sub.w	r0, r8, #2
60003712:	4423      	add	r3, r4
60003714:	eba3 030a 	sub.w	r3, r3, sl
60003718:	b289      	uxth	r1, r1
6000371a:	fbb3 f8f9 	udiv	r8, r3, r9
6000371e:	fb09 3318 	mls	r3, r9, r8, r3
60003722:	fb08 fe0e 	mul.w	lr, r8, lr
60003726:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
6000372a:	458e      	cmp	lr, r1
6000372c:	d92c      	bls.n	60003788 <__udivmoddi4+0x29c>
6000372e:	1861      	adds	r1, r4, r1
60003730:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
60003734:	d204      	bcs.n	60003740 <__udivmoddi4+0x254>
60003736:	458e      	cmp	lr, r1
60003738:	d902      	bls.n	60003740 <__udivmoddi4+0x254>
6000373a:	f1a8 0302 	sub.w	r3, r8, #2
6000373e:	4421      	add	r1, r4
60003740:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
60003744:	fba0 9802 	umull	r9, r8, r0, r2
60003748:	eba1 010e 	sub.w	r1, r1, lr
6000374c:	4541      	cmp	r1, r8
6000374e:	46ce      	mov	lr, r9
60003750:	4643      	mov	r3, r8
60003752:	d302      	bcc.n	6000375a <__udivmoddi4+0x26e>
60003754:	d106      	bne.n	60003764 <__udivmoddi4+0x278>
60003756:	454d      	cmp	r5, r9
60003758:	d204      	bcs.n	60003764 <__udivmoddi4+0x278>
6000375a:	ebb9 0e02 	subs.w	lr, r9, r2
6000375e:	eb68 0304 	sbc.w	r3, r8, r4
60003762:	3801      	subs	r0, #1
60003764:	2e00      	cmp	r6, #0
60003766:	d0a6      	beq.n	600036b6 <__udivmoddi4+0x1ca>
60003768:	ebb5 020e 	subs.w	r2, r5, lr
6000376c:	eb61 0103 	sbc.w	r1, r1, r3
60003770:	fa01 fc0c 	lsl.w	ip, r1, ip
60003774:	fa22 f307 	lsr.w	r3, r2, r7
60003778:	ea4c 0303 	orr.w	r3, ip, r3
6000377c:	40f9      	lsrs	r1, r7
6000377e:	e9c6 3100 	strd	r3, r1, [r6]
60003782:	e798      	b.n	600036b6 <__udivmoddi4+0x1ca>
60003784:	4640      	mov	r0, r8
60003786:	e7c5      	b.n	60003714 <__udivmoddi4+0x228>
60003788:	4643      	mov	r3, r8
6000378a:	e7d9      	b.n	60003740 <__udivmoddi4+0x254>
6000378c:	0000      	movs	r0, r0
	...

60003790 <pwm_set_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
60003790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003794:	b089      	sub	sp, #36	; 0x24
60003796:	4688      	mov	r8, r1
60003798:	4615      	mov	r5, r2
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
6000379a:	e9d0 6300 	ldrd	r6, r3, [r0]
6000379e:	9303      	str	r3, [sp, #12]
600037a0:	8983      	ldrh	r3, [r0, #12]
600037a2:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
600037a4:	68b3      	ldr	r3, [r6, #8]
600037a6:	aa06      	add	r2, sp, #24
600037a8:	9903      	ldr	r1, [sp, #12]
600037aa:	4630      	mov	r0, r6
600037ac:	685b      	ldr	r3, [r3, #4]
600037ae:	4798      	blx	r3
	if (err < 0) {
600037b0:	2800      	cmp	r0, #0
600037b2:	db31      	blt.n	60003818 <pwm_set_dt+0x88>
	if (period_cycles > UINT32_MAX) {
600037b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
600037b8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 60003838 <pwm_set_dt+0xa8>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
600037bc:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
600037c0:	fba8 2304 	umull	r2, r3, r8, r4
600037c4:	fb08 380b 	mla	r8, r8, fp, r3
600037c8:	9204      	str	r2, [sp, #16]
600037ca:	9804      	ldr	r0, [sp, #16]
600037cc:	4641      	mov	r1, r8
600037ce:	a318      	add	r3, pc, #96	; (adr r3, 60003830 <pwm_set_dt+0xa0>)
600037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
600037d4:	f7ff fdd6 	bl	60003384 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
600037d8:	9b04      	ldr	r3, [sp, #16]
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
600037da:	4607      	mov	r7, r0
	if (period_cycles > UINT32_MAX) {
600037dc:	459a      	cmp	sl, r3
600037de:	eb79 0308 	sbcs.w	r3, r9, r8
600037e2:	d31c      	bcc.n	6000381e <pwm_set_dt+0x8e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
600037e4:	fba5 4304 	umull	r4, r3, r5, r4
600037e8:	fb05 350b 	mla	r5, r5, fp, r3
600037ec:	4620      	mov	r0, r4
600037ee:	a310      	add	r3, pc, #64	; (adr r3, 60003830 <pwm_set_dt+0xa0>)
600037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
600037f4:	4629      	mov	r1, r5
600037f6:	f7ff fdc5 	bl	60003384 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
600037fa:	45a2      	cmp	sl, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
600037fc:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
600037fe:	eb79 0505 	sbcs.w	r5, r9, r5
60003802:	d30c      	bcc.n	6000381e <pwm_set_dt+0x8e>
	if (pulse > period) {
60003804:	4287      	cmp	r7, r0
	const struct pwm_driver_api *api =
60003806:	68b2      	ldr	r2, [r6, #8]
	if (pulse > period) {
60003808:	d30c      	bcc.n	60003824 <pwm_set_dt+0x94>
	return api->set_cycles(dev, channel, period, pulse, flags);
6000380a:	9905      	ldr	r1, [sp, #20]
6000380c:	4630      	mov	r0, r6
6000380e:	9100      	str	r1, [sp, #0]
60003810:	9903      	ldr	r1, [sp, #12]
60003812:	6814      	ldr	r4, [r2, #0]
60003814:	463a      	mov	r2, r7
60003816:	47a0      	blx	r4
}
60003818:	b009      	add	sp, #36	; 0x24
6000381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
6000381e:	f06f 0085 	mvn.w	r0, #133	; 0x85
60003822:	e7f9      	b.n	60003818 <pwm_set_dt+0x88>
		return -EINVAL;
60003824:	f06f 0015 	mvn.w	r0, #21
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
60003828:	e7f6      	b.n	60003818 <pwm_set_dt+0x88>
6000382a:	bf00      	nop
6000382c:	f3af 8000 	nop.w
60003830:	3b9aca00 	.word	0x3b9aca00
60003834:	00000000 	.word	0x00000000
60003838:	3b9ac9ff 	.word	0x3b9ac9ff
6000383c:	00000000 	.word	0x00000000

60003840 <read_pot_adc>:
}

/// Thread Definitions

void read_pot_adc(void)
{
60003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int err;

    sequence.buffer = &buf;
    sequence.buffer_size = sizeof(buf);
60003844:	2302      	movs	r3, #2
    sequence.buffer = &buf;
60003846:	4d4e      	ldr	r5, [pc, #312]	; (60003980 <read_pot_adc+0x140>)
60003848:	4f4e      	ldr	r7, [pc, #312]	; (60003984 <read_pot_adc+0x144>)
{
6000384a:	b085      	sub	sp, #20
    

    float rawBuffer[WINDOW_SIZE] = {0}; 
    int currentIndex = 0; 

    k_work_queue_init(&motor1_work_q);         // init work q
6000384c:	484e      	ldr	r0, [pc, #312]	; (60003988 <read_pot_adc+0x148>)
    sequence.buffer_size = sizeof(buf);
6000384e:	60eb      	str	r3, [r5, #12]
    sequence.buffer = &buf;
60003850:	60af      	str	r7, [r5, #8]
    k_work_queue_init(&motor1_work_q);         // init work q
60003852:	f00a fc4b 	bl	6000e0ec <k_work_queue_init>
    k_work_queue_start(&motor1_work_q, motor1_q_stack_area,K_THREAD_STACK_SIZEOF(motor1_q_stack_area), PRIORITY,NULL); // Start data queue 
60003856:	2300      	movs	r3, #0
60003858:	f44f 7200 	mov.w	r2, #512	; 0x200
6000385c:	494b      	ldr	r1, [pc, #300]	; (6000398c <read_pot_adc+0x14c>)
6000385e:	9300      	str	r3, [sp, #0]
60003860:	2305      	movs	r3, #5
60003862:	4849      	ldr	r0, [pc, #292]	; (60003988 <read_pot_adc+0x148>)
60003864:	f00a fc5c 	bl	6000e120 <k_work_queue_start>
    k_work_init(&motor1_command,motor_control);// init work item
60003868:	4949      	ldr	r1, [pc, #292]	; (60003990 <read_pot_adc+0x150>)
6000386a:	484a      	ldr	r0, [pc, #296]	; (60003994 <read_pot_adc+0x154>)
6000386c:	f00a fbbe 	bl	6000dfec <k_work_init>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
60003870:	2100      	movs	r1, #0
60003872:	f649 4040 	movw	r0, #40000	; 0x9c40
60003876:	f00b fdbd 	bl	6000f3f4 <z_impl_k_sleep>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
6000387a:	4e47      	ldr	r6, [pc, #284]	; (60003998 <read_pot_adc+0x158>)
6000387c:	4630      	mov	r0, r6
6000387e:	f010 fea2 	bl	600145c6 <z_device_is_ready>

    k_sleep(K_SECONDS(4));

	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
60003882:	b918      	cbnz	r0, 6000388c <read_pot_adc+0x4c>
			printk("ADC controller device %s not ready\n",adc_channels[i].dev->name);
60003884:	6831      	ldr	r1, [r6, #0]
60003886:	4845      	ldr	r0, [pc, #276]	; (6000399c <read_pot_adc+0x15c>)
60003888:	f00e ff3b 	bl	60012702 <printk>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
6000388c:	68b3      	ldr	r3, [r6, #8]
6000388e:	4944      	ldr	r1, [pc, #272]	; (600039a0 <read_pot_adc+0x160>)
60003890:	681b      	ldr	r3, [r3, #0]
60003892:	4841      	ldr	r0, [pc, #260]	; (60003998 <read_pot_adc+0x158>)
60003894:	4798      	blx	r3
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
		if (err < 0) {
60003896:	1e02      	subs	r2, r0, #0
60003898:	da03      	bge.n	600038a2 <read_pot_adc+0x62>
			printk("Could not setup channel #%d (%d)\n", i, err);
6000389a:	2100      	movs	r1, #0
6000389c:	4841      	ldr	r0, [pc, #260]	; (600039a4 <read_pot_adc+0x164>)
6000389e:	f00e ff30 	bl	60012702 <printk>
		}
	}

    // ESC calibraiton sequence
    for(int i = 0; i < 1500;i++){
600038a2:	2100      	movs	r1, #0
        k_timer_start(&pot_adc_timer, K_MSEC(1), K_NO_WAIT);
        if(i < 500){
            // Save to work queue
            motor1_command.pwm = 4100;
600038a4:	f8df b100 	ldr.w	fp, [pc, #256]	; 600039a8 <read_pot_adc+0x168>
600038a8:	f04f 0800 	mov.w	r8, #0
600038ac:	f04f 0900 	mov.w	r9, #0
600038b0:	9103      	str	r1, [sp, #12]
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
600038b2:	220a      	movs	r2, #10
600038b4:	2300      	movs	r3, #0
600038b6:	483d      	ldr	r0, [pc, #244]	; (600039ac <read_pot_adc+0x16c>)
600038b8:	4c36      	ldr	r4, [pc, #216]	; (60003994 <read_pot_adc+0x154>)
600038ba:	e9cd 8900 	strd	r8, r9, [sp]
600038be:	f00c fab1 	bl	6000fe24 <z_impl_k_timer_start>
        if(i < 500){
600038c2:	9903      	ldr	r1, [sp, #12]
600038c4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
600038c8:	f101 0a01 	add.w	sl, r1, #1
600038cc:	da0a      	bge.n	600038e4 <read_pot_adc+0xa4>
            // Submit to queue
            k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
600038ce:	4621      	mov	r1, r4
600038d0:	482d      	ldr	r0, [pc, #180]	; (60003988 <read_pot_adc+0x148>)
            motor1_command.pwm = 4100;
600038d2:	f8c4 b010 	str.w	fp, [r4, #16]
            k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
600038d6:	f010 feda 	bl	6001468e <k_work_submit_to_queue>
		union { uintptr_t x; struct k_timer * val; } parm0 = { .val = timer };
		return (uint32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_TIMER_STATUS_SYNC);
	}
#endif
	compiler_barrier();
	return z_impl_k_timer_status_sync(timer);
600038da:	4834      	ldr	r0, [pc, #208]	; (600039ac <read_pot_adc+0x16c>)
600038dc:	f00c faee 	bl	6000febc <z_impl_k_timer_status_sync>
    for(int i = 0; i < 1500;i++){
600038e0:	4651      	mov	r1, sl
600038e2:	e7e1      	b.n	600038a8 <read_pot_adc+0x68>
        } else {
            // Save to work queue
            motor1_command.pwm = 4100 - (i-500) * 4.1;            
600038e4:	f5a1 70fa 	sub.w	r0, r1, #500	; 0x1f4
600038e8:	f7fe fefc 	bl	600026e4 <__aeabi_i2d>
600038ec:	a320      	add	r3, pc, #128	; (adr r3, 60003970 <read_pot_adc+0x130>)
600038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
600038f2:	f7fe ff61 	bl	600027b8 <__aeabi_dmul>
600038f6:	4602      	mov	r2, r0
600038f8:	460b      	mov	r3, r1
600038fa:	a11f      	add	r1, pc, #124	; (adr r1, 60003978 <read_pot_adc+0x138>)
600038fc:	e9d1 0100 	ldrd	r0, r1, [r1]
60003900:	f7fe fda2 	bl	60002448 <__aeabi_dsub>
60003904:	f7ff fa1a 	bl	60002d3c <__aeabi_d2f>
            // motor1_command.pwm = 0;

            // Submit to queue
            k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
60003908:	4621      	mov	r1, r4
            motor1_command.pwm = 4100 - (i-500) * 4.1;            
6000390a:	6120      	str	r0, [r4, #16]
            k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
6000390c:	481e      	ldr	r0, [pc, #120]	; (60003988 <read_pot_adc+0x148>)
6000390e:	f010 febe 	bl	6001468e <k_work_submit_to_queue>
60003912:	4826      	ldr	r0, [pc, #152]	; (600039ac <read_pot_adc+0x16c>)
60003914:	f00c fad2 	bl	6000febc <z_impl_k_timer_status_sync>
    for(int i = 0; i < 1500;i++){
60003918:	f240 53dc 	movw	r3, #1500	; 0x5dc
6000391c:	4651      	mov	r1, sl
6000391e:	459a      	cmp	sl, r3
60003920:	d1c2      	bne.n	600038a8 <read_pot_adc+0x68>
	z_impl_k_timer_start(timer, duration, period);
60003922:	f8df a088 	ldr.w	sl, [pc, #136]	; 600039ac <read_pot_adc+0x16c>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
60003926:	f8df b058 	ldr.w	fp, [pc, #88]	; 60003980 <read_pot_adc+0x140>
6000392a:	220a      	movs	r2, #10
6000392c:	2300      	movs	r3, #0
6000392e:	4650      	mov	r0, sl
60003930:	e9cd 8900 	strd	r8, r9, [sp]
60003934:	f00c fa76 	bl	6000fe24 <z_impl_k_timer_start>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
60003938:	2302      	movs	r3, #2
6000393a:	606b      	str	r3, [r5, #4]
	seq->resolution = spec->resolution;
6000393c:	230c      	movs	r3, #12
6000393e:	822b      	strh	r3, [r5, #16]
	return api->read(dev, sequence);
60003940:	68b3      	ldr	r3, [r6, #8]
60003942:	4659      	mov	r1, fp
60003944:	4814      	ldr	r0, [pc, #80]	; (60003998 <read_pot_adc+0x158>)
60003946:	685b      	ldr	r3, [r3, #4]
60003948:	4798      	blx	r3
        k_timer_start(&pot_adc_timer, K_MSEC(1), K_NO_WAIT);
        
        (void)adc_sequence_init_dt(&adc_channels[0], &sequence);
        // Read adc, assign to buf
        err = adc_read(adc_channels[0].dev, &sequence);
        if (err < 0) {
6000394a:	1e01      	subs	r1, r0, #0
6000394c:	da03      	bge.n	60003956 <read_pot_adc+0x116>
            printk("Could not read (%d)\n", err);
6000394e:	4818      	ldr	r0, [pc, #96]	; (600039b0 <read_pot_adc+0x170>)
60003950:	f00e fed7 	bl	60012702 <printk>
            continue;
60003954:	e7e9      	b.n	6000392a <read_pot_adc+0xea>
        }
        // Save to work queue
        motor1_command.pwm = buf;
60003956:	8838      	ldrh	r0, [r7, #0]
60003958:	f7ff faf6 	bl	60002f48 <__aeabi_ui2f>
        // Submit to queue
        k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
6000395c:	490d      	ldr	r1, [pc, #52]	; (60003994 <read_pot_adc+0x154>)
        motor1_command.pwm = buf;
6000395e:	6120      	str	r0, [r4, #16]
        k_work_submit_to_queue(&motor1_work_q, &motor1_command.work);
60003960:	4809      	ldr	r0, [pc, #36]	; (60003988 <read_pot_adc+0x148>)
60003962:	f010 fe94 	bl	6001468e <k_work_submit_to_queue>
	return z_impl_k_timer_status_sync(timer);
60003966:	4650      	mov	r0, sl
60003968:	f00c faa8 	bl	6000febc <z_impl_k_timer_status_sync>
6000396c:	e7dd      	b.n	6000392a <read_pot_adc+0xea>
6000396e:	bf00      	nop
60003970:	66666666 	.word	0x66666666
60003974:	40106666 	.word	0x40106666
60003978:	00000000 	.word	0x00000000
6000397c:	40b00400 	.word	0x40b00400
60003980:	20203be8 	.word	0x20203be8
60003984:	20204288 	.word	0x20204288
60003988:	20203440 	.word	0x20203440
6000398c:	20204500 	.word	0x20204500
60003990:	60003ab5 	.word	0x60003ab5
60003994:	20203bfc 	.word	0x20203bfc
60003998:	600149e0 	.word	0x600149e0
6000399c:	60016d6b 	.word	0x60016d6b
600039a0:	6001512e 	.word	0x6001512e
600039a4:	60016d8f 	.word	0x60016d8f
600039a8:	45802000 	.word	0x45802000
600039ac:	20202c08 	.word	0x20202c08
600039b0:	60016db1 	.word	0x60016db1
600039b4:	00000000 	.word	0x00000000

600039b8 <ina219_channel_get>:
	const struct ina219_config *cfg = dev->config;
	struct ina219_data *data = dev->data;
	double tmp;
	int8_t sign = 1;

	switch (chan) {
600039b8:	291f      	cmp	r1, #31
{
600039ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
600039be:	4616      	mov	r6, r2
	const struct ina219_config *cfg = dev->config;
600039c0:	6844      	ldr	r4, [r0, #4]
	struct ina219_data *data = dev->data;
600039c2:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
600039c4:	d052      	beq.n	60003a6c <ina219_channel_get+0xb4>
600039c6:	2920      	cmp	r1, #32
600039c8:	d045      	beq.n	60003a56 <ina219_channel_get+0x9e>
600039ca:	291e      	cmp	r1, #30
600039cc:	d15a      	bne.n	60003a84 <ina219_channel_get+0xcc>
	case SENSOR_CHAN_VOLTAGE:
		tmp = data->v_bus * INA219_V_BUS_MUL;
600039ce:	8858      	ldrh	r0, [r3, #2]
600039d0:	f7fe fe88 	bl	600026e4 <__aeabi_i2d>
600039d4:	a32e      	add	r3, pc, #184	; (adr r3, 60003a90 <ina219_channel_get+0xd8>)
600039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
	case SENSOR_CHAN_CURRENT:
		if (INA219_SIGN_BIT(data->current)) {
			data->current = ~data->current + 1;
			sign = -1;
		}
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
600039da:	f7fe feed 	bl	600027b8 <__aeabi_dmul>
 * @param inp The converted value.
 * @return 0 if successful, negative errno code if failure.
 */
static inline int sensor_value_from_double(struct sensor_value *val, double inp)
{
	if (inp < INT32_MIN || inp > INT32_MAX) {
600039de:	2200      	movs	r2, #0
600039e0:	4b33      	ldr	r3, [pc, #204]	; (60003ab0 <ina219_channel_get+0xf8>)
600039e2:	4604      	mov	r4, r0
600039e4:	460d      	mov	r5, r1
600039e6:	f7ff f959 	bl	60002c9c <__aeabi_dcmplt>
600039ea:	2800      	cmp	r0, #0
600039ec:	d14d      	bne.n	60003a8a <ina219_channel_get+0xd2>
600039ee:	4620      	mov	r0, r4
600039f0:	4629      	mov	r1, r5
600039f2:	a329      	add	r3, pc, #164	; (adr r3, 60003a98 <ina219_channel_get+0xe0>)
600039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
600039f8:	f7ff f96e 	bl	60002cd8 <__aeabi_dcmpgt>
600039fc:	2800      	cmp	r0, #0
600039fe:	d144      	bne.n	60003a8a <ina219_channel_get+0xd2>
		return -ERANGE;
	}

	double val2 = (inp - (int32_t)inp) * 1000000.0;
60003a00:	4629      	mov	r1, r5
60003a02:	4620      	mov	r0, r4
60003a04:	f7ff f972 	bl	60002cec <__aeabi_d2iz>
60003a08:	4607      	mov	r7, r0
60003a0a:	f7fe fe6b 	bl	600026e4 <__aeabi_i2d>
60003a0e:	4602      	mov	r2, r0
60003a10:	460b      	mov	r3, r1
60003a12:	4620      	mov	r0, r4
60003a14:	4629      	mov	r1, r5
60003a16:	f7fe fd17 	bl	60002448 <__aeabi_dsub>
60003a1a:	a321      	add	r3, pc, #132	; (adr r3, 60003aa0 <ina219_channel_get+0xe8>)
60003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
60003a20:	f7fe feca 	bl	600027b8 <__aeabi_dmul>

	if (val2 < INT32_MIN || val2 > INT32_MAX) {
60003a24:	2200      	movs	r2, #0
60003a26:	4b22      	ldr	r3, [pc, #136]	; (60003ab0 <ina219_channel_get+0xf8>)
	double val2 = (inp - (int32_t)inp) * 1000000.0;
60003a28:	4680      	mov	r8, r0
60003a2a:	4689      	mov	r9, r1
	if (val2 < INT32_MIN || val2 > INT32_MAX) {
60003a2c:	f7ff f936 	bl	60002c9c <__aeabi_dcmplt>
60003a30:	bb58      	cbnz	r0, 60003a8a <ina219_channel_get+0xd2>
60003a32:	4640      	mov	r0, r8
60003a34:	4649      	mov	r1, r9
60003a36:	a318      	add	r3, pc, #96	; (adr r3, 60003a98 <ina219_channel_get+0xe0>)
60003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
60003a3c:	f7ff f94c 	bl	60002cd8 <__aeabi_dcmpgt>
60003a40:	4604      	mov	r4, r0
60003a42:	bb10      	cbnz	r0, 60003a8a <ina219_channel_get+0xd2>
		return -ERANGE;
	}

	val->val1 = (int32_t)inp;
	val->val2 = (int32_t)val2;
60003a44:	4640      	mov	r0, r8
60003a46:	4649      	mov	r1, r9
	val->val1 = (int32_t)inp;
60003a48:	6037      	str	r7, [r6, #0]
	val->val2 = (int32_t)val2;
60003a4a:	f7ff f94f 	bl	60002cec <__aeabi_d2iz>
60003a4e:	6070      	str	r0, [r6, #4]

	return 0;
60003a50:	4620      	mov	r0, r4
		LOG_DBG("Channel not supported by device!");
		return -ENOTSUP;
	}

	return sensor_value_from_double(val, tmp);
}
60003a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		tmp = data->power * cfg->current_lsb * INA219_POWER_MUL * INA219_SI_MUL;
60003a56:	889b      	ldrh	r3, [r3, #4]
60003a58:	2014      	movs	r0, #20
60003a5a:	8922      	ldrh	r2, [r4, #8]
60003a5c:	4353      	muls	r3, r2
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
60003a5e:	4358      	muls	r0, r3
60003a60:	f7fe fe40 	bl	600026e4 <__aeabi_i2d>
60003a64:	a310      	add	r3, pc, #64	; (adr r3, 60003aa8 <ina219_channel_get+0xf0>)
60003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
60003a6a:	e7b6      	b.n	600039da <ina219_channel_get+0x22>
		if (INA219_SIGN_BIT(data->current)) {
60003a6c:	88da      	ldrh	r2, [r3, #6]
60003a6e:	0bd1      	lsrs	r1, r2, #15
			data->current = ~data->current + 1;
60003a70:	bf17      	itett	ne
60003a72:	4252      	negne	r2, r2
	int8_t sign = 1;
60003a74:	2201      	moveq	r2, #1
			data->current = ~data->current + 1;
60003a76:	80da      	strhne	r2, [r3, #6]
			sign = -1;
60003a78:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
60003a7c:	88db      	ldrh	r3, [r3, #6]
60003a7e:	8920      	ldrh	r0, [r4, #8]
60003a80:	4353      	muls	r3, r2
60003a82:	e7ec      	b.n	60003a5e <ina219_channel_get+0xa6>
	switch (chan) {
60003a84:	f06f 0085 	mvn.w	r0, #133	; 0x85
60003a88:	e7e3      	b.n	60003a52 <ina219_channel_get+0x9a>
		return -ERANGE;
60003a8a:	f06f 0021 	mvn.w	r0, #33	; 0x21
60003a8e:	e7e0      	b.n	60003a52 <ina219_channel_get+0x9a>
60003a90:	d2f1a9fc 	.word	0xd2f1a9fc
60003a94:	3f70624d 	.word	0x3f70624d
60003a98:	ffc00000 	.word	0xffc00000
60003a9c:	41dfffff 	.word	0x41dfffff
60003aa0:	00000000 	.word	0x00000000
60003aa4:	412e8480 	.word	0x412e8480
60003aa8:	88e368f1 	.word	0x88e368f1
60003aac:	3ee4f8b5 	.word	0x3ee4f8b5
60003ab0:	c1e00000 	.word	0xc1e00000

60003ab4 <motor_control>:
{
60003ab4:	b538      	push	{r3, r4, r5, lr}
    int pwm_val = (motor1->pwm / 4100) *  1000000 + 1000000; // units of ns
60003ab6:	491e      	ldr	r1, [pc, #120]	; (60003b30 <motor_control+0x7c>)
60003ab8:	6900      	ldr	r0, [r0, #16]
60003aba:	f7ff fb51 	bl	60003160 <__aeabi_fdiv>
60003abe:	491d      	ldr	r1, [pc, #116]	; (60003b34 <motor_control+0x80>)
60003ac0:	f7ff fa9a 	bl	60002ff8 <__aeabi_fmul>
60003ac4:	491b      	ldr	r1, [pc, #108]	; (60003b34 <motor_control+0x80>)
60003ac6:	f7ff f98f 	bl	60002de8 <__addsf3>
    ret = pwm_set_dt(&pwm_28, period,pwm_val);
60003aca:	4d1b      	ldr	r5, [pc, #108]	; (60003b38 <motor_control+0x84>)
    int pwm_val = (motor1->pwm / 4100) *  1000000 + 1000000; // units of ns
60003acc:	f7ff fbe4 	bl	60003298 <__aeabi_f2iz>
60003ad0:	4604      	mov	r4, r0
    printk("%d\n",pwm_val);
60003ad2:	4601      	mov	r1, r0
60003ad4:	4819      	ldr	r0, [pc, #100]	; (60003b3c <motor_control+0x88>)
60003ad6:	f00e fe14 	bl	60012702 <printk>
    ret = pwm_set_dt(&pwm_28, period,pwm_val);
60003ada:	6829      	ldr	r1, [r5, #0]
60003adc:	4622      	mov	r2, r4
60003ade:	4818      	ldr	r0, [pc, #96]	; (60003b40 <motor_control+0x8c>)
60003ae0:	f7ff fe56 	bl	60003790 <pwm_set_dt>
    if (ret < 0) {
60003ae4:	1e01      	subs	r1, r0, #0
60003ae6:	da02      	bge.n	60003aee <motor_control+0x3a>
        printk("Error %d: failed to set 0 pulse width for 28\n", ret);
60003ae8:	4816      	ldr	r0, [pc, #88]	; (60003b44 <motor_control+0x90>)
60003aea:	f00e fe0a 	bl	60012702 <printk>
    ret = pwm_set_dt(&pwm_5, period,pwm_val);
60003aee:	6829      	ldr	r1, [r5, #0]
60003af0:	4622      	mov	r2, r4
60003af2:	4815      	ldr	r0, [pc, #84]	; (60003b48 <motor_control+0x94>)
60003af4:	f7ff fe4c 	bl	60003790 <pwm_set_dt>
    if (ret < 0) {
60003af8:	1e01      	subs	r1, r0, #0
60003afa:	da02      	bge.n	60003b02 <motor_control+0x4e>
        printk("Error %d: failed to set 0 pulse width for 5\n", ret);
60003afc:	4813      	ldr	r0, [pc, #76]	; (60003b4c <motor_control+0x98>)
60003afe:	f00e fe00 	bl	60012702 <printk>
    ret = pwm_set_dt(&pwm_2, period,pwm_val);
60003b02:	6829      	ldr	r1, [r5, #0]
60003b04:	4622      	mov	r2, r4
60003b06:	4812      	ldr	r0, [pc, #72]	; (60003b50 <motor_control+0x9c>)
60003b08:	f7ff fe42 	bl	60003790 <pwm_set_dt>
    if (ret < 0) {
60003b0c:	1e01      	subs	r1, r0, #0
60003b0e:	da02      	bge.n	60003b16 <motor_control+0x62>
        printk("Error %d: failed to set 0 pulse width for 2\n", ret);
60003b10:	4810      	ldr	r0, [pc, #64]	; (60003b54 <motor_control+0xa0>)
60003b12:	f00e fdf6 	bl	60012702 <printk>
    ret = pwm_set_dt(&pwm_9, period,pwm_val);
60003b16:	6829      	ldr	r1, [r5, #0]
60003b18:	4622      	mov	r2, r4
60003b1a:	480f      	ldr	r0, [pc, #60]	; (60003b58 <motor_control+0xa4>)
60003b1c:	f7ff fe38 	bl	60003790 <pwm_set_dt>
    if (ret < 0) {
60003b20:	1e01      	subs	r1, r0, #0
60003b22:	da04      	bge.n	60003b2e <motor_control+0x7a>
        printk("Error %d: failed to set 0 pulse width for 9\n", ret);
60003b24:	480d      	ldr	r0, [pc, #52]	; (60003b5c <motor_control+0xa8>)
}
60003b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("Error %d: failed to set 0 pulse width for 9\n", ret);
60003b2a:	f00e bdea 	b.w	60012702 <printk>
}
60003b2e:	bd38      	pop	{r3, r4, r5, pc}
60003b30:	45802000 	.word	0x45802000
60003b34:	49742400 	.word	0x49742400
60003b38:	202029b0 	.word	0x202029b0
60003b3c:	60019423 	.word	0x60019423
60003b40:	60015168 	.word	0x60015168
60003b44:	60016cb6 	.word	0x60016cb6
60003b48:	60015158 	.word	0x60015158
60003b4c:	60016ce4 	.word	0x60016ce4
60003b50:	60015148 	.word	0x60015148
60003b54:	60016d11 	.word	0x60016d11
60003b58:	60015138 	.word	0x60015138
60003b5c:	60016d3e 	.word	0x60016d3e

60003b60 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
60003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003b64:	b091      	sub	sp, #68	; 0x44
60003b66:	4605      	mov	r5, r0
60003b68:	460e      	mov	r6, r1
60003b6a:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
60003b6c:	f002 0304 	and.w	r3, r2, #4
60003b70:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
60003b74:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
60003b76:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
60003b7a:	9202      	str	r2, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
60003b7c:	3301      	adds	r3, #1
60003b7e:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
60003b80:	0783      	lsls	r3, r0, #30
60003b82:	f040 81fe 	bne.w	60003f82 <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
60003b86:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
60003b88:	b130      	cbz	r0, 60003b98 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
60003b8a:	2907      	cmp	r1, #7
60003b8c:	d809      	bhi.n	60003ba2 <cbvprintf_package+0x42>
		return -ENOSPC;
60003b8e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
60003b92:	b011      	add	sp, #68	; 0x44
60003b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
60003b98:	f001 0607 	and.w	r6, r1, #7
60003b9c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
60003b9e:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
60003ba2:	f04f 0800 	mov.w	r8, #0
	s = fmt--;
60003ba6:	9b00      	ldr	r3, [sp, #0]
	align = VA_STACK_ALIGN(char *);
60003ba8:	f04f 0b04 	mov.w	fp, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
60003bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	s = fmt--;
60003bb0:	1e59      	subs	r1, r3, #1
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
60003bb2:	4647      	mov	r7, r8
	bool parsing = false;
60003bb4:	4643      	mov	r3, r8
	size = sizeof(char *);
60003bb6:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
60003bb8:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
60003bbc:	b10d      	cbz	r5, 60003bc2 <cbvprintf_package+0x62>
				*(const char **)buf = s;
60003bbe:	9800      	ldr	r0, [sp, #0]
60003bc0:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003bc2:	9804      	ldr	r0, [sp, #16]
60003bc4:	2800      	cmp	r0, #0
60003bc6:	f300 80e1 	bgt.w	60003d8c <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
60003bca:	489c      	ldr	r0, [pc, #624]	; (60003e3c <cbvprintf_package+0x2dc>)
60003bcc:	f8dd c000 	ldr.w	ip, [sp]
60003bd0:	4584      	cmp	ip, r0
60003bd2:	d303      	bcc.n	60003bdc <cbvprintf_package+0x7c>
60003bd4:	489a      	ldr	r0, [pc, #616]	; (60003e40 <cbvprintf_package+0x2e0>)
60003bd6:	4584      	cmp	ip, r0
60003bd8:	f0c0 80d8 	bcc.w	60003d8c <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003bdc:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003be0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003be4:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003be8:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003bec:	f000 80e9 	beq.w	60003dc2 <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003bf0:	f04f 0c00 	mov.w	ip, #0
60003bf4:	e0d3      	b.n	60003d9e <cbvprintf_package+0x23e>
			switch (*fmt) {
60003bf6:	287a      	cmp	r0, #122	; 0x7a
60003bf8:	d864      	bhi.n	60003cc4 <cbvprintf_package+0x164>
60003bfa:	284b      	cmp	r0, #75	; 0x4b
60003bfc:	d80f      	bhi.n	60003c1e <cbvprintf_package+0xbe>
60003bfe:	2847      	cmp	r0, #71	; 0x47
60003c00:	d860      	bhi.n	60003cc4 <cbvprintf_package+0x164>
60003c02:	2829      	cmp	r0, #41	; 0x29
60003c04:	d82f      	bhi.n	60003c66 <cbvprintf_package+0x106>
60003c06:	2825      	cmp	r0, #37	; 0x25
60003c08:	d05b      	beq.n	60003cc2 <cbvprintf_package+0x162>
60003c0a:	d85b      	bhi.n	60003cc4 <cbvprintf_package+0x164>
60003c0c:	2820      	cmp	r0, #32
60003c0e:	d07f      	beq.n	60003d10 <cbvprintf_package+0x1b0>
60003c10:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
60003c14:	f1d9 0300 	rsbs	r3, r9, #0
60003c18:	eb43 0309 	adc.w	r3, r3, r9
60003c1c:	e078      	b.n	60003d10 <cbvprintf_package+0x1b0>
60003c1e:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
60003c22:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
60003c26:	d84d      	bhi.n	60003cc4 <cbvprintf_package+0x164>
60003c28:	e8df f00e 	tbb	[pc, lr]
60003c2c:	4c4c4c72 	.word	0x4c4c4c72
60003c30:	4c4c4c4c 	.word	0x4c4c4c4c
60003c34:	4c4c4c4c 	.word	0x4c4c4c4c
60003c38:	4c4c4c4e 	.word	0x4c4c4c4e
60003c3c:	4c4c4c4c 	.word	0x4c4c4c4c
60003c40:	4e4c5c4c 	.word	0x4e4c5c4c
60003c44:	5c5c5c4e 	.word	0x5c5c5c4e
60003c48:	4c6f4e72 	.word	0x4c6f4e72
60003c4c:	4e184c72 	.word	0x4e184c72
60003c50:	814c4c18 	.word	0x814c4c18
60003c54:	4c4c4e7e 	.word	0x4c4c4e7e
60003c58:	4c4e      	.short	0x4c4e
60003c5a:	7e          	.byte	0x7e
60003c5b:	00          	.byte	0x00
60003c5c:	2000      	movs	r0, #0
60003c5e:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
60003c60:	f04f 0b04 	mov.w	fp, #4
60003c64:	e03c      	b.n	60003ce0 <cbvprintf_package+0x180>
			switch (*fmt) {
60003c66:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
60003c6a:	2001      	movs	r0, #1
60003c6c:	fa5f fe8e 	uxtb.w	lr, lr
60003c70:	fa00 fe0e 	lsl.w	lr, r0, lr
60003c74:	f64f 70da 	movw	r0, #65498	; 0xffda
60003c78:	ea1e 0f00 	tst.w	lr, r0
60003c7c:	d148      	bne.n	60003d10 <cbvprintf_package+0x1b0>
60003c7e:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
60003c82:	d12f      	bne.n	60003ce4 <cbvprintf_package+0x184>
60003c84:	f01e 0301 	ands.w	r3, lr, #1
60003c88:	d042      	beq.n	60003d10 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
60003c8a:	3c01      	subs	r4, #1
60003c8c:	f1cb 0e00 	rsb	lr, fp, #0
60003c90:	445c      	add	r4, fp
60003c92:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
60003c96:	2d00      	cmp	r5, #0
60003c98:	d05e      	beq.n	60003d58 <cbvprintf_package+0x1f8>
60003c9a:	ebaa 0e05 	sub.w	lr, sl, r5
60003c9e:	44a6      	add	lr, r4
60003ca0:	4576      	cmp	r6, lr
60003ca2:	f4ff af74 	bcc.w	60003b8e <cbvprintf_package+0x2e>
		if (is_str_arg) {
60003ca6:	2800      	cmp	r0, #0
60003ca8:	d168      	bne.n	60003d7c <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
60003caa:	f1ba 0f04 	cmp.w	sl, #4
60003cae:	d143      	bne.n	60003d38 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
60003cb0:	46e1      	mov	r9, ip
60003cb2:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
60003cb6:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
60003cb8:	3404      	adds	r4, #4
60003cba:	46cc      	mov	ip, r9
60003cbc:	f04f 0a04 	mov.w	sl, #4
60003cc0:	e026      	b.n	60003d10 <cbvprintf_package+0x1b0>
				arg_idx--;
60003cc2:	3a01      	subs	r2, #1
				parsing = false;
60003cc4:	2300      	movs	r3, #0
				continue;
60003cc6:	e023      	b.n	60003d10 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
60003cc8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
60003ccc:	2b6c      	cmp	r3, #108	; 0x6c
60003cce:	d130      	bne.n	60003d32 <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
60003cd0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
60003cd4:	2000      	movs	r0, #0
60003cd6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
60003cd8:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
60003cda:	d1c1      	bne.n	60003c60 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
60003cdc:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
60003ce0:	46da      	mov	sl, fp
60003ce2:	e7d2      	b.n	60003c8a <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
60003ce4:	f10c 0907 	add.w	r9, ip, #7
				buf = (void *) ROUND_UP(buf, align);
60003ce8:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
60003cea:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
60003cee:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
60003cf2:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
60003cf6:	b135      	cbz	r5, 60003d06 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
60003cf8:	9805      	ldr	r0, [sp, #20]
60003cfa:	4420      	add	r0, r4
60003cfc:	42b0      	cmp	r0, r6
60003cfe:	f63f af46 	bhi.w	60003b8e <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
60003d02:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
60003d06:	3408      	adds	r4, #8
				parsing = false;
60003d08:	2300      	movs	r3, #0
			switch (*fmt) {
60003d0a:	f04f 0b08 	mov.w	fp, #8
60003d0e:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
60003d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
60003d14:	2800      	cmp	r0, #0
60003d16:	f000 80bc 	beq.w	60003e92 <cbvprintf_package+0x332>
			if (!parsing) {
60003d1a:	2b00      	cmp	r3, #0
60003d1c:	f47f af6b 	bne.w	60003bf6 <cbvprintf_package+0x96>
				if (*fmt == '%') {
60003d20:	2825      	cmp	r0, #37	; 0x25
60003d22:	d1f5      	bne.n	60003d10 <cbvprintf_package+0x1b0>
					arg_idx++;
60003d24:	3201      	adds	r2, #1
					parsing = true;
60003d26:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
60003d28:	f04f 0b04 	mov.w	fp, #4
60003d2c:	e7ef      	b.n	60003d0e <cbvprintf_package+0x1ae>
			switch (*fmt) {
60003d2e:	4618      	mov	r0, r3
60003d30:	e795      	b.n	60003c5e <cbvprintf_package+0xfe>
60003d32:	2000      	movs	r0, #0
				parsing = false;
60003d34:	4603      	mov	r3, r0
60003d36:	e7a8      	b.n	60003c8a <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
60003d38:	f1ba 0f08 	cmp.w	sl, #8
60003d3c:	f040 809b 	bne.w	60003e76 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
60003d40:	f10c 0907 	add.w	r9, ip, #7
60003d44:	f029 0c07 	bic.w	ip, r9, #7
60003d48:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
60003d4c:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
60003d50:	3408      	adds	r4, #8
60003d52:	f04f 0a08 	mov.w	sl, #8
60003d56:	e7db      	b.n	60003d10 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
60003d58:	b980      	cbnz	r0, 60003d7c <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
60003d5a:	f1ba 0f04 	cmp.w	sl, #4
60003d5e:	d102      	bne.n	60003d66 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
60003d60:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
60003d64:	e7a8      	b.n	60003cb8 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
60003d66:	f1ba 0f08 	cmp.w	sl, #8
60003d6a:	f040 8084 	bne.w	60003e76 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
60003d6e:	f10c 0907 	add.w	r9, ip, #7
60003d72:	f029 0907 	bic.w	r9, r9, #7
60003d76:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
60003d7a:	e7e9      	b.n	60003d50 <cbvprintf_package+0x1f0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003d7c:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
60003d7e:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003d80:	3801      	subs	r0, #1
60003d82:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
60003d84:	f859 0b04 	ldr.w	r0, [r9], #4
60003d88:	9000      	str	r0, [sp, #0]
60003d8a:	e717      	b.n	60003bbc <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
60003d8c:	9802      	ldr	r0, [sp, #8]
60003d8e:	0780      	lsls	r0, r0, #30
60003d90:	d548      	bpl.n	60003e24 <cbvprintf_package+0x2c4>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003d92:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003d96:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003d9a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003d9e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
60003da2:	d31d      	bcc.n	60003de0 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
60003da4:	4927      	ldr	r1, [pc, #156]	; (60003e44 <cbvprintf_package+0x2e4>)
60003da6:	f240 237b 	movw	r3, #635	; 0x27b
60003daa:	4a27      	ldr	r2, [pc, #156]	; (60003e48 <cbvprintf_package+0x2e8>)
60003dac:	4827      	ldr	r0, [pc, #156]	; (60003e4c <cbvprintf_package+0x2ec>)
60003dae:	f00e ff54 	bl	60012c5a <assert_print>
60003db2:	4827      	ldr	r0, [pc, #156]	; (60003e50 <cbvprintf_package+0x2f0>)
60003db4:	f00e ff51 	bl	60012c5a <assert_print>
60003db8:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
60003dbc:	4822      	ldr	r0, [pc, #136]	; (60003e48 <cbvprintf_package+0x2e8>)
60003dbe:	f00e ff45 	bl	60012c4c <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
60003dc2:	2f0f      	cmp	r7, #15
60003dc4:	d80e      	bhi.n	60003de4 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
60003dc6:	2d00      	cmp	r5, #0
60003dc8:	d046      	beq.n	60003e58 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
60003dca:	f107 0c40 	add.w	ip, r7, #64	; 0x40
60003dce:	44ec      	add	ip, sp
60003dd0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
60003dd4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
60003dd8:	9803      	ldr	r0, [sp, #12]
60003dda:	3001      	adds	r0, #1
60003ddc:	9003      	str	r0, [sp, #12]
60003dde:	e020      	b.n	60003e22 <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
60003de0:	2f0f      	cmp	r7, #15
60003de2:	d90c      	bls.n	60003dfe <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
60003de4:	4917      	ldr	r1, [pc, #92]	; (60003e44 <cbvprintf_package+0x2e4>)
60003de6:	f44f 7320 	mov.w	r3, #640	; 0x280
60003dea:	4a17      	ldr	r2, [pc, #92]	; (60003e48 <cbvprintf_package+0x2e8>)
60003dec:	4817      	ldr	r0, [pc, #92]	; (60003e4c <cbvprintf_package+0x2ec>)
60003dee:	f00e ff34 	bl	60012c5a <assert_print>
60003df2:	4818      	ldr	r0, [pc, #96]	; (60003e54 <cbvprintf_package+0x2f4>)
60003df4:	f00e ff31 	bl	60012c5a <assert_print>
60003df8:	f44f 7120 	mov.w	r1, #640	; 0x280
60003dfc:	e7de      	b.n	60003dbc <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
60003dfe:	b1bd      	cbz	r5, 60003e30 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
60003e00:	f107 0e40 	add.w	lr, r7, #64	; 0x40
60003e04:	b2c0      	uxtb	r0, r0
60003e06:	44ee      	add	lr, sp
60003e08:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
60003e0c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
60003e10:	f1bc 0f00 	cmp.w	ip, #0
60003e14:	d0e0      	beq.n	60003dd8 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
60003e16:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
60003e1a:	f108 0801 	add.w	r8, r8, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
60003e1e:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
60003e22:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
60003e24:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
60003e28:	3404      	adds	r4, #4
			is_str_arg = false;
60003e2a:	46cc      	mov	ip, r9
					if (BUF_OFFSET + size > len) {
60003e2c:	9005      	str	r0, [sp, #20]
60003e2e:	e76f      	b.n	60003d10 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
60003e30:	f1bc 0f00 	cmp.w	ip, #0
60003e34:	d010      	beq.n	60003e58 <cbvprintf_package+0x2f8>
					len += 1;
60003e36:	3601      	adds	r6, #1
60003e38:	e7f3      	b.n	60003e22 <cbvprintf_package+0x2c2>
60003e3a:	bf00      	nop
60003e3c:	600147c8 	.word	0x600147c8
60003e40:	600198c8 	.word	0x600198c8
60003e44:	60017072 	.word	0x60017072
60003e48:	60016dcd 	.word	0x60016dcd
60003e4c:	60016dfb 	.word	0x60016dfb
60003e50:	60016e18 	.word	0x60016e18
60003e54:	60016e39 	.word	0x60016e39
				} else if (rws_pos_en) {
60003e58:	9801      	ldr	r0, [sp, #4]
					len += 2;
60003e5a:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
60003e5c:	2800      	cmp	r0, #0
60003e5e:	d1e0      	bne.n	60003e22 <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
60003e60:	9800      	ldr	r0, [sp, #0]
60003e62:	9205      	str	r2, [sp, #20]
60003e64:	e9cd 3106 	strd	r3, r1, [sp, #24]
60003e68:	f7fe fa2a 	bl	600022c0 <strlen>
60003e6c:	9a05      	ldr	r2, [sp, #20]
60003e6e:	4406      	add	r6, r0
60003e70:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
60003e74:	e7d5      	b.n	60003e22 <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
60003e76:	f240 23c5 	movw	r3, #709	; 0x2c5
60003e7a:	4a43      	ldr	r2, [pc, #268]	; (60003f88 <cbvprintf_package+0x428>)
60003e7c:	4943      	ldr	r1, [pc, #268]	; (60003f8c <cbvprintf_package+0x42c>)
60003e7e:	4844      	ldr	r0, [pc, #272]	; (60003f90 <cbvprintf_package+0x430>)
60003e80:	f00e feeb 	bl	60012c5a <assert_print>
60003e84:	4651      	mov	r1, sl
60003e86:	4843      	ldr	r0, [pc, #268]	; (60003f94 <cbvprintf_package+0x434>)
60003e88:	f00e fee7 	bl	60012c5a <assert_print>
60003e8c:	f240 21c5 	movw	r1, #709	; 0x2c5
60003e90:	e794      	b.n	60003dbc <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
60003e92:	1b63      	subs	r3, r4, r5
60003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
60003e98:	d30c      	bcc.n	60003eb4 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
60003e9a:	493c      	ldr	r1, [pc, #240]	; (60003f8c <cbvprintf_package+0x42c>)
60003e9c:	f240 23d1 	movw	r3, #721	; 0x2d1
60003ea0:	4a39      	ldr	r2, [pc, #228]	; (60003f88 <cbvprintf_package+0x428>)
60003ea2:	483b      	ldr	r0, [pc, #236]	; (60003f90 <cbvprintf_package+0x430>)
60003ea4:	f00e fed9 	bl	60012c5a <assert_print>
60003ea8:	483b      	ldr	r0, [pc, #236]	; (60003f98 <cbvprintf_package+0x438>)
60003eaa:	f00e fed6 	bl	60012c5a <assert_print>
60003eae:	f240 21d1 	movw	r1, #721	; 0x2d1
60003eb2:	e783      	b.n	60003dbc <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
60003eb4:	b91d      	cbnz	r5, 60003ebe <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
60003eb6:	f1a6 0408 	sub.w	r4, r6, #8
60003eba:	18e0      	adds	r0, r4, r3
60003ebc:	e669      	b.n	60003b92 <cbvprintf_package+0x32>
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
60003ebe:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
60003ec0:	9a01      	ldr	r2, [sp, #4]
	*(char **)buf0 = NULL;
60003ec2:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
60003ec4:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
60003ec6:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
60003eca:	b1c2      	cbz	r2, 60003efe <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
60003ecc:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
60003ece:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
60003ed2:	f1b8 0f00 	cmp.w	r8, #0
60003ed6:	d005      	beq.n	60003ee4 <cbvprintf_package+0x384>
60003ed8:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
60003eda:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
60003edc:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
60003ee0:	4297      	cmp	r7, r2
60003ee2:	d10e      	bne.n	60003f02 <cbvprintf_package+0x3a2>
		if (BUF_OFFSET + 1 + size > len) {
60003ee4:	f1c5 0301 	rsb	r3, r5, #1
60003ee8:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
60003eec:	f04f 0a00 	mov.w	sl, #0
60003ef0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if (BUF_OFFSET + 1 + size > len) {
60003ef4:	9302      	str	r3, [sp, #8]
	for (i = 0; i < s_idx; i++) {
60003ef6:	4557      	cmp	r7, sl
60003ef8:	d112      	bne.n	60003f20 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
60003efa:	1b60      	subs	r0, r4, r5
60003efc:	e649      	b.n	60003b92 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
60003efe:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
60003f00:	e7e5      	b.n	60003ece <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
60003f02:	f810 3b01 	ldrb.w	r3, [r0], #1
60003f06:	0619      	lsls	r1, r3, #24
60003f08:	d508      	bpl.n	60003f1c <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
60003f0a:	eb04 0e0c 	add.w	lr, r4, ip
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
60003f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
60003f12:	4576      	cmp	r6, lr
60003f14:	f4ff ae3b 	bcc.w	60003b8e <cbvprintf_package+0x2e>
			*buf++ = pos;
60003f18:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
60003f1c:	3201      	adds	r2, #1
60003f1e:	e7df      	b.n	60003ee0 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
60003f20:	f1b8 0f00 	cmp.w	r8, #0
60003f24:	d003      	beq.n	60003f2e <cbvprintf_package+0x3ce>
60003f26:	f999 2000 	ldrsb.w	r2, [r9]
60003f2a:	2a00      	cmp	r2, #0
60003f2c:	db17      	blt.n	60003f5e <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
60003f2e:	9b01      	ldr	r3, [sp, #4]
60003f30:	b1d3      	cbz	r3, 60003f68 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
60003f32:	f81a 200b 	ldrb.w	r2, [sl, fp]
60003f36:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
60003f3a:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
60003f3c:	9b02      	ldr	r3, [sp, #8]
60003f3e:	1898      	adds	r0, r3, r2
60003f40:	4420      	add	r0, r4
60003f42:	4286      	cmp	r6, r0
60003f44:	f4ff ae23 	bcc.w	60003b8e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
60003f48:	f899 0000 	ldrb.w	r0, [r9]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
60003f4c:	9900      	ldr	r1, [sp, #0]
60003f4e:	f804 0b01 	strb.w	r0, [r4], #1
60003f52:	4620      	mov	r0, r4
60003f54:	9203      	str	r2, [sp, #12]
60003f56:	f7ff fa2f 	bl	600033b8 <memcpy>
		buf += size;
60003f5a:	9a03      	ldr	r2, [sp, #12]
60003f5c:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
60003f5e:	f10a 0a01 	add.w	sl, sl, #1
60003f62:	f109 0901 	add.w	r9, r9, #1
60003f66:	e7c6      	b.n	60003ef6 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
60003f68:	f899 2000 	ldrb.w	r2, [r9]
60003f6c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
60003f70:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
60003f72:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
60003f74:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
60003f76:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
60003f7a:	f7fe f9a1 	bl	600022c0 <strlen>
60003f7e:	1c42      	adds	r2, r0, #1
60003f80:	e7dc      	b.n	60003f3c <cbvprintf_package+0x3dc>
		return -EFAULT;
60003f82:	f06f 000d 	mvn.w	r0, #13
60003f86:	e604      	b.n	60003b92 <cbvprintf_package+0x32>
60003f88:	60016dcd 	.word	0x60016dcd
60003f8c:	60017072 	.word	0x60017072
60003f90:	60016dfb 	.word	0x60016dfb
60003f94:	60016e53 	.word	0x60016e53
60003f98:	60016e68 	.word	0x60016e68

60003f9c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
60003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003fa0:	b097      	sub	sp, #92	; 0x5c
	__ASSERT_NO_MSG(in_packaged != NULL);
60003fa2:	4604      	mov	r4, r0
{
60003fa4:	af00      	add	r7, sp, #0
60003fa6:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
60003faa:	61fb      	str	r3, [r7, #28]
60003fac:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
	__ASSERT_NO_MSG(in_packaged != NULL);
60003fb0:	b958      	cbnz	r0, 60003fca <cbprintf_package_convert+0x2e>
60003fb2:	49ab      	ldr	r1, [pc, #684]	; (60004260 <cbprintf_package_convert+0x2c4>)
60003fb4:	f44f 7365 	mov.w	r3, #916	; 0x394
60003fb8:	4aaa      	ldr	r2, [pc, #680]	; (60004264 <cbprintf_package_convert+0x2c8>)
60003fba:	48ab      	ldr	r0, [pc, #684]	; (60004268 <cbprintf_package_convert+0x2cc>)
60003fbc:	f00e fe4d 	bl	60012c5a <assert_print>
60003fc0:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
60003fc4:	48a7      	ldr	r0, [pc, #668]	; (60004264 <cbprintf_package_convert+0x2c8>)
60003fc6:	f00e fe41 	bl	60012c4c <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
60003fca:	f3ca 03c0 	ubfx	r3, sl, #3, #1
60003fce:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
60003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
60003fd2:	b953      	cbnz	r3, 60003fea <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
60003fd4:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
60003fd6:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
60003fd8:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
60003fda:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
60003fdc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
60003fe0:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
60003fe2:	42b5      	cmp	r5, r6
60003fe4:	d319      	bcc.n	6000401a <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
60003fe6:	1b03      	subs	r3, r0, r4
60003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
60003fea:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
60003fec:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
60003ff0:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
60003ff2:	f1bb 0f00 	cmp.w	fp, #0
60003ff6:	d002      	beq.n	60003ffe <cbprintf_package_convert+0x62>
60003ff8:	f01a 0f01 	tst.w	sl, #1
60003ffc:	d116      	bne.n	6000402c <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
60003ffe:	69bb      	ldr	r3, [r7, #24]
60004000:	bb53      	cbnz	r3, 60004058 <cbprintf_package_convert+0xbc>
		if (cb) {
60004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004004:	b11b      	cbz	r3, 6000400e <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
60004006:	69fa      	ldr	r2, [r7, #28]
60004008:	4620      	mov	r0, r4
6000400a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
6000400c:	4798      	blx	r3
		return in_len;
6000400e:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
60004010:	4628      	mov	r0, r5
60004012:	375c      	adds	r7, #92	; 0x5c
60004014:	46bd      	mov	sp, r7
60004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
6000401a:	f100 0801 	add.w	r8, r0, #1
	for (int i = 0; i < s_nbr; i++) {
6000401e:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
60004020:	4640      	mov	r0, r8
60004022:	f7fe f94d 	bl	600022c0 <strlen>
60004026:	3001      	adds	r0, #1
60004028:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
6000402a:	e7da      	b.n	60003fe2 <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
6000402c:	7823      	ldrb	r3, [r4, #0]
6000402e:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
60004030:	627b      	str	r3, [r7, #36]	; 0x24
60004032:	009b      	lsls	r3, r3, #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
60004034:	623a      	str	r2, [r7, #32]
	args_size = in_desc->len * sizeof(int);
60004036:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
60004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
6000403a:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
6000403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004040:	2b00      	cmp	r3, #0
60004042:	f040 8101 	bne.w	60004248 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
60004046:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
60004048:	46c8      	mov	r8, r9
6000404a:	eb09 030b 	add.w	r3, r9, fp
	size_t strl_cnt = 0;
6000404e:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
60004050:	4543      	cmp	r3, r8
60004052:	d14e      	bne.n	600040f2 <cbprintf_package_convert+0x156>
60004054:	44d9      	add	r9, fp
60004056:	e013      	b.n	60004080 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
60004058:	f01a 0f02 	tst.w	sl, #2
6000405c:	d0d1      	beq.n	60004002 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
6000405e:	7823      	ldrb	r3, [r4, #0]
60004060:	4699      	mov	r9, r3
60004062:	627b      	str	r3, [r7, #36]	; 0x24
60004064:	009b      	lsls	r3, r3, #2
	uint8_t *str_pos = &buf[args_size];
60004066:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	args_size = in_desc->len * sizeof(int);
6000406a:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
6000406c:	6863      	ldr	r3, [r4, #4]
6000406e:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
60004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004072:	2b00      	cmp	r3, #0
60004074:	d17c      	bne.n	60004170 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
60004076:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
60004078:	f1bb 0f00 	cmp.w	fp, #0
6000407c:	d150      	bne.n	60004120 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
6000407e:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
60004080:	f01a 0f05 	tst.w	sl, #5
60004084:	bf0c      	ite	eq
60004086:	2302      	moveq	r3, #2
60004088:	2301      	movne	r3, #1
6000408a:	62fb      	str	r3, [r7, #44]	; 0x2c
6000408c:	69bb      	ldr	r3, [r7, #24]
6000408e:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004092:	f00a 0302 	and.w	r3, sl, #2
60004096:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
60004098:	45d9      	cmp	r9, fp
6000409a:	d0b9      	beq.n	60004010 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
6000409c:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
600040a0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
600040a4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
600040a8:	4b70      	ldr	r3, [pc, #448]	; (6000426c <cbprintf_package_convert+0x2d0>)
600040aa:	4598      	cmp	r8, r3
600040ac:	d302      	bcc.n	600040b4 <cbprintf_package_convert+0x118>
600040ae:	4b70      	ldr	r3, [pc, #448]	; (60004270 <cbprintf_package_convert+0x2d4>)
600040b0:	4598      	cmp	r8, r3
600040b2:	d33b      	bcc.n	6000412c <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
600040b4:	697b      	ldr	r3, [r7, #20]
600040b6:	2b00      	cmp	r3, #0
600040b8:	d045      	beq.n	60004146 <cbprintf_package_convert+0x1aa>
600040ba:	6a38      	ldr	r0, [r7, #32]
600040bc:	f00e fae6 	bl	6001268c <is_ptr>
600040c0:	2800      	cmp	r0, #0
600040c2:	d040      	beq.n	60004146 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
600040c4:	46e8      	mov	r8, sp
600040c6:	b08a      	sub	sp, #40	; 0x28
600040c8:	466a      	mov	r2, sp
600040ca:	4b6a      	ldr	r3, [pc, #424]	; (60004274 <cbprintf_package_convert+0x2d8>)
600040cc:	6153      	str	r3, [r2, #20]
600040ce:	6a3b      	ldr	r3, [r7, #32]
600040d0:	e9c2 3106 	strd	r3, r1, [r2, #24]
600040d4:	f44f 7300 	mov.w	r3, #512	; 0x200
600040d8:	8413      	strh	r3, [r2, #32]
600040da:	4b67      	ldr	r3, [pc, #412]	; (60004278 <cbprintf_package_convert+0x2dc>)
600040dc:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
600040e0:	2300      	movs	r3, #0
600040e2:	f44f 5112 	mov.w	r1, #9344	; 0x2480
600040e6:	4865      	ldr	r0, [pc, #404]	; (6000427c <cbprintf_package_convert+0x2e0>)
				out_len -= 2;
600040e8:	3d02      	subs	r5, #2
600040ea:	f002 f8a7 	bl	6000623c <z_impl_z_log_msg_static_create>
600040ee:	46c5      	mov	sp, r8
				continue;
600040f0:	e7d2      	b.n	60004098 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
600040f2:	f818 2b01 	ldrb.w	r2, [r8], #1
600040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
600040f8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
600040fc:	f7fe f8e0 	bl	600022c0 <strlen>
				if (strl && strl_cnt < strl_len) {
60004100:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
60004104:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
60004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004108:	b142      	cbz	r2, 6000411c <cbprintf_package_convert+0x180>
6000410a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
6000410e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
60004110:	bf3e      	ittt	cc
60004112:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
60004116:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
6000411a:	3601      	addcc	r6, #1
				out_len += len;
6000411c:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
6000411e:	e797      	b.n	60004050 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
60004120:	f01a 0604 	ands.w	r6, sl, #4
				str_pos += ros_nbr;
60004124:	bf1c      	itt	ne
60004126:	44d9      	addne	r9, fp
	size_t strl_cnt = 0;
60004128:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
6000412a:	e7a9      	b.n	60004080 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
6000412c:	697b      	ldr	r3, [r7, #20]
6000412e:	b123      	cbz	r3, 6000413a <cbprintf_package_convert+0x19e>
60004130:	6a38      	ldr	r0, [r7, #32]
60004132:	f00e faab 	bl	6001268c <is_ptr>
60004136:	2800      	cmp	r0, #0
60004138:	d1c4      	bne.n	600040c4 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
6000413a:	f01a 0f01 	tst.w	sl, #1
6000413e:	d105      	bne.n	6000414c <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
60004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004142:	1aed      	subs	r5, r5, r3
60004144:	e7a8      	b.n	60004098 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
60004148:	2b00      	cmp	r3, #0
6000414a:	d0a5      	beq.n	60004098 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
6000414c:	4640      	mov	r0, r8
6000414e:	f7fe f8b7 	bl	600022c0 <strlen>
				if (strl && strl_cnt < strl_len) {
60004152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
60004156:	b14b      	cbz	r3, 6000416c <cbprintf_package_convert+0x1d0>
60004158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
6000415c:	429e      	cmp	r6, r3
		return 1 + strlen(str);
6000415e:	bf3f      	itttt	cc
60004160:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
60004162:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
60004166:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
6000416a:	3601      	addcc	r6, #1
				out_len += (len - 1);
6000416c:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
6000416e:	e793      	b.n	60004098 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
60004170:	f1bb 0f00 	cmp.w	fp, #0
60004174:	d06e      	beq.n	60004254 <cbprintf_package_convert+0x2b8>
60004176:	f01a 0604 	ands.w	r6, sl, #4
6000417a:	d06e      	beq.n	6000425a <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
6000417c:	46d8      	mov	r8, fp
		scpy_cnt = 0;
6000417e:	2600      	movs	r6, #0
		dst = keep_str_pos;
60004180:	f107 0048 	add.w	r0, r7, #72	; 0x48
60004184:	465a      	mov	r2, fp
60004186:	4649      	mov	r1, r9
60004188:	f7ff f916 	bl	600033b8 <memcpy>
	str_pos += ros_nbr;
6000418c:	69bb      	ldr	r3, [r7, #24]
6000418e:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
60004190:	005b      	lsls	r3, r3, #1
60004192:	60fb      	str	r3, [r7, #12]
60004194:	69bb      	ldr	r3, [r7, #24]
60004196:	eb09 0343 	add.w	r3, r9, r3, lsl #1
6000419a:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
6000419c:	f00a 0302 	and.w	r3, sl, #2
600041a0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
600041a2:	68bb      	ldr	r3, [r7, #8]
600041a4:	454b      	cmp	r3, r9
600041a6:	d16b      	bne.n	60004280 <cbprintf_package_convert+0x2e4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
600041a8:	f01a 0f02 	tst.w	sl, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
600041ac:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
600041ae:	bf08      	it	eq
600041b0:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
600041b4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
600041b8:	bf18      	it	ne
600041ba:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
600041bc:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
600041c0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
600041c2:	f040 80e1 	bne.w	60004388 <cbprintf_package_convert+0x3ec>
600041c6:	f01a 0f04 	tst.w	sl, #4
600041ca:	bf14      	ite	ne
600041cc:	4640      	movne	r0, r8
600041ce:	2000      	moveq	r0, #0
600041d0:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
600041d2:	7062      	strb	r2, [r4, #1]
600041d4:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
600041d6:	4620      	mov	r0, r4
	*in_desc = out_desc;
600041d8:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
600041da:	69fa      	ldr	r2, [r7, #28]
600041dc:	6939      	ldr	r1, [r7, #16]
600041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600041e0:	4798      	blx	r3
	if (rv < 0) {
600041e2:	1e05      	subs	r5, r0, #0
600041e4:	f6ff af14 	blt.w	60004010 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
600041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
600041ea:	4641      	mov	r1, r8
600041ec:	69fa      	ldr	r2, [r7, #28]
600041ee:	f107 0048 	add.w	r0, r7, #72	; 0x48
	*in_desc = in_desc_backup;
600041f2:	7023      	strb	r3, [r4, #0]
600041f4:	6a3b      	ldr	r3, [r7, #32]
600041f6:	f884 b002 	strb.w	fp, [r4, #2]
600041fa:	7063      	strb	r3, [r4, #1]
600041fc:	69bb      	ldr	r3, [r7, #24]
600041fe:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
60004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004202:	4798      	blx	r3
	if (rv < 0) {
60004204:	f1b0 0800 	subs.w	r8, r0, #0
60004208:	f2c0 80ec 	blt.w	600043e4 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
6000420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
6000420e:	4648      	mov	r0, r9
60004210:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
60004212:	eba3 010b 	sub.w	r1, r3, fp
60004216:	693b      	ldr	r3, [r7, #16]
60004218:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
6000421a:	68fb      	ldr	r3, [r7, #12]
6000421c:	1ac9      	subs	r1, r1, r3
6000421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004220:	4798      	blx	r3
	if (rv < 0) {
60004222:	2800      	cmp	r0, #0
60004224:	f2c0 80e0 	blt.w	600043e8 <cbprintf_package_convert+0x44c>
	out_len += rv;
60004228:	44a8      	add	r8, r5
	for (int i = 0; i < scpy_cnt; i++) {
6000422a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
6000422e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	out_len += rv;
60004232:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
60004236:	45b3      	cmp	fp, r6
60004238:	f2c0 80a8 	blt.w	6000438c <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
6000423c:	2100      	movs	r1, #0
6000423e:	69fa      	ldr	r2, [r7, #28]
60004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60004242:	4608      	mov	r0, r1
60004244:	4798      	blx	r3
	return out_len;
60004246:	e6e3      	b.n	60004010 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
60004248:	465e      	mov	r6, fp
6000424a:	f04f 0800 	mov.w	r8, #0
6000424e:	f107 0038 	add.w	r0, r7, #56	; 0x38
60004252:	e797      	b.n	60004184 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
60004254:	465e      	mov	r6, fp
		keep_cnt = 0;
60004256:	46d8      	mov	r8, fp
60004258:	e798      	b.n	6000418c <cbprintf_package_convert+0x1f0>
6000425a:	46b0      	mov	r8, r6
6000425c:	e796      	b.n	6000418c <cbprintf_package_convert+0x1f0>
6000425e:	bf00      	nop
60004260:	60016e7f 	.word	0x60016e7f
60004264:	60016dcd 	.word	0x60016dcd
60004268:	60016dfb 	.word	0x60016dfb
6000426c:	600147c8 	.word	0x600147c8
60004270:	600198c8 	.word	0x600198c8
60004274:	60016e9a 	.word	0x60016e9a
60004278:	01000004 	.word	0x01000004
6000427c:	60015084 	.word	0x60015084
		uint8_t arg_idx = *str_pos++;
60004280:	f819 1b02 	ldrb.w	r1, [r9], #2
60004284:	4b59      	ldr	r3, [pc, #356]	; (600043ec <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
60004286:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
6000428a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
6000428e:	4298      	cmp	r0, r3
60004290:	d302      	bcc.n	60004298 <cbprintf_package_convert+0x2fc>
60004292:	4b57      	ldr	r3, [pc, #348]	; (600043f0 <cbprintf_package_convert+0x454>)
60004294:	4298      	cmp	r0, r3
60004296:	d316      	bcc.n	600042c6 <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
60004298:	697b      	ldr	r3, [r7, #20]
6000429a:	b12b      	cbz	r3, 600042a8 <cbprintf_package_convert+0x30c>
6000429c:	6a38      	ldr	r0, [r7, #32]
6000429e:	f00e f9f5 	bl	6001268c <is_ptr>
600042a2:	2800      	cmp	r0, #0
600042a4:	f47f af7d 	bne.w	600041a2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
600042a8:	687b      	ldr	r3, [r7, #4]
600042aa:	2b00      	cmp	r3, #0
600042ac:	d04a      	beq.n	60004344 <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
600042ae:	2e0f      	cmp	r6, #15
600042b0:	d93e      	bls.n	60004330 <cbprintf_package_convert+0x394>
600042b2:	4950      	ldr	r1, [pc, #320]	; (600043f4 <cbprintf_package_convert+0x458>)
600042b4:	f44f 6389 	mov.w	r3, #1096	; 0x448
600042b8:	4a4f      	ldr	r2, [pc, #316]	; (600043f8 <cbprintf_package_convert+0x45c>)
600042ba:	4850      	ldr	r0, [pc, #320]	; (600043fc <cbprintf_package_convert+0x460>)
600042bc:	f00e fccd 	bl	60012c5a <assert_print>
600042c0:	f44f 6189 	mov.w	r1, #1096	; 0x448
600042c4:	e67e      	b.n	60003fc4 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
600042c6:	697b      	ldr	r3, [r7, #20]
600042c8:	b12b      	cbz	r3, 600042d6 <cbprintf_package_convert+0x33a>
600042ca:	6a38      	ldr	r0, [r7, #32]
600042cc:	f00e f9de 	bl	6001268c <is_ptr>
600042d0:	2800      	cmp	r0, #0
600042d2:	f47f af66 	bne.w	600041a2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
600042d6:	f01a 0f01 	tst.w	sl, #1
600042da:	d00b      	beq.n	600042f4 <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
600042dc:	2e0f      	cmp	r6, #15
600042de:	d927      	bls.n	60004330 <cbprintf_package_convert+0x394>
600042e0:	4944      	ldr	r1, [pc, #272]	; (600043f4 <cbprintf_package_convert+0x458>)
600042e2:	f240 433e 	movw	r3, #1086	; 0x43e
600042e6:	4a44      	ldr	r2, [pc, #272]	; (600043f8 <cbprintf_package_convert+0x45c>)
600042e8:	4844      	ldr	r0, [pc, #272]	; (600043fc <cbprintf_package_convert+0x460>)
600042ea:	f00e fcb6 	bl	60012c5a <assert_print>
600042ee:	f240 413e 	movw	r1, #1086	; 0x43e
600042f2:	e667      	b.n	60003fc4 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
600042f4:	f01a 0f04 	tst.w	sl, #4
600042f8:	f43f af53 	beq.w	600041a2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
600042fc:	f1b8 0f0f 	cmp.w	r8, #15
60004300:	d909      	bls.n	60004316 <cbprintf_package_convert+0x37a>
60004302:	493f      	ldr	r1, [pc, #252]	; (60004400 <cbprintf_package_convert+0x464>)
60004304:	f240 4341 	movw	r3, #1089	; 0x441
60004308:	4a3b      	ldr	r2, [pc, #236]	; (600043f8 <cbprintf_package_convert+0x45c>)
6000430a:	483c      	ldr	r0, [pc, #240]	; (600043fc <cbprintf_package_convert+0x460>)
6000430c:	f00e fca5 	bl	60012c5a <assert_print>
60004310:	f240 4141 	movw	r1, #1089	; 0x441
60004314:	e656      	b.n	60003fc4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
60004316:	f108 0328 	add.w	r3, r8, #40	; 0x28
6000431a:	f107 0230 	add.w	r2, r7, #48	; 0x30
6000431e:	f108 0101 	add.w	r1, r8, #1
60004322:	eb03 0802 	add.w	r8, r3, r2
60004326:	f808 5c10 	strb.w	r5, [r8, #-16]
6000432a:	fa5f f881 	uxtb.w	r8, r1
6000432e:	e738      	b.n	600041a2 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
60004330:	f106 0328 	add.w	r3, r6, #40	; 0x28
60004334:	f107 0230 	add.w	r2, r7, #48	; 0x30
60004338:	1c71      	adds	r1, r6, #1
6000433a:	189e      	adds	r6, r3, r2
6000433c:	f806 5c20 	strb.w	r5, [r6, #-32]
60004340:	b2ce      	uxtb	r6, r1
60004342:	e72e      	b.n	600041a2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
60004344:	f1b8 0f0f 	cmp.w	r8, #15
60004348:	d909      	bls.n	6000435e <cbprintf_package_convert+0x3c2>
6000434a:	492d      	ldr	r1, [pc, #180]	; (60004400 <cbprintf_package_convert+0x464>)
6000434c:	f240 434b 	movw	r3, #1099	; 0x44b
60004350:	4a29      	ldr	r2, [pc, #164]	; (600043f8 <cbprintf_package_convert+0x45c>)
60004352:	482a      	ldr	r0, [pc, #168]	; (600043fc <cbprintf_package_convert+0x460>)
60004354:	f00e fc81 	bl	60012c5a <assert_print>
60004358:	f240 414b 	movw	r1, #1099	; 0x44b
6000435c:	e632      	b.n	60003fc4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
6000435e:	f108 0328 	add.w	r3, r8, #40	; 0x28
60004362:	f107 0230 	add.w	r2, r7, #48	; 0x30
60004366:	f108 0001 	add.w	r0, r8, #1
				keep_str_pos[keep_cnt++] = arg_pos;
6000436a:	f108 0802 	add.w	r8, r8, #2
				keep_str_pos[keep_cnt++] = arg_idx;
6000436e:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
60004372:	f107 0358 	add.w	r3, r7, #88	; 0x58
60004376:	fa5f f888 	uxtb.w	r8, r8
6000437a:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
6000437e:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
60004382:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
60004386:	e70c      	b.n	600041a2 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60004388:	2000      	movs	r0, #0
6000438a:	e721      	b.n	600041d0 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
6000438c:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
60004390:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
60004394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
60004398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
6000439c:	b1fb      	cbz	r3, 600043de <cbprintf_package_convert+0x442>
6000439e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
600043a2:	69fa      	ldr	r2, [r7, #28]
600043a4:	2101      	movs	r1, #1
600043a6:	f107 0037 	add.w	r0, r7, #55	; 0x37
600043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600043ac:	4798      	blx	r3
		if (rv < 0) {
600043ae:	2800      	cmp	r0, #0
600043b0:	db1a      	blt.n	600043e8 <cbprintf_package_convert+0x44c>
		out_len += rv;
600043b2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
600043b4:	f1b8 0f00 	cmp.w	r8, #0
600043b8:	d106      	bne.n	600043c8 <cbprintf_package_convert+0x42c>
600043ba:	4648      	mov	r0, r9
600043bc:	f7fd ff80 	bl	600022c0 <strlen>
600043c0:	f100 0801 	add.w	r8, r0, #1
600043c4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
600043c8:	69fa      	ldr	r2, [r7, #28]
600043ca:	4641      	mov	r1, r8
600043cc:	4648      	mov	r0, r9
600043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600043d0:	4798      	blx	r3
		if (rv < 0) {
600043d2:	2800      	cmp	r0, #0
600043d4:	db08      	blt.n	600043e8 <cbprintf_package_convert+0x44c>
		out_len += rv;
600043d6:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
600043d8:	f10b 0b01 	add.w	fp, fp, #1
600043dc:	e72b      	b.n	60004236 <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
600043de:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
600043e2:	e7de      	b.n	600043a2 <cbprintf_package_convert+0x406>
600043e4:	4645      	mov	r5, r8
600043e6:	e613      	b.n	60004010 <cbprintf_package_convert+0x74>
600043e8:	4605      	mov	r5, r0
600043ea:	e611      	b.n	60004010 <cbprintf_package_convert+0x74>
600043ec:	600147c8 	.word	0x600147c8
600043f0:	600198c8 	.word	0x600198c8
600043f4:	60016f3d 	.word	0x60016f3d
600043f8:	60016dcd 	.word	0x60016dcd
600043fc:	60016dfb 	.word	0x60016dfb
60004400:	60016f5c 	.word	0x60016f5c

60004404 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
60004404:	4b01      	ldr	r3, [pc, #4]	; (6000440c <__printk_hook_install+0x8>)
60004406:	6018      	str	r0, [r3, #0]
}
60004408:	4770      	bx	lr
6000440a:	bf00      	nop
6000440c:	202029b4 	.word	0x202029b4

60004410 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
60004410:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
60004412:	2500      	movs	r5, #0
{
60004414:	b087      	sub	sp, #28
60004416:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
60004418:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
6000441a:	9505      	str	r5, [sp, #20]
6000441c:	e9cd 0103 	strd	r0, r1, [sp, #12]
60004420:	a903      	add	r1, sp, #12
60004422:	4805      	ldr	r0, [pc, #20]	; (60004438 <vsnprintk+0x28>)
60004424:	f000 f9dc 	bl	600047e0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
60004428:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
6000442c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
6000442e:	bfb8      	it	lt
60004430:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
60004432:	b007      	add	sp, #28
60004434:	bd30      	pop	{r4, r5, pc}
60004436:	bf00      	nop
60004438:	600126db 	.word	0x600126db

6000443c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
6000443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
6000443e:	460f      	mov	r7, r1
60004440:	2900      	cmp	r1, #0
60004442:	d03b      	beq.n	600044bc <sys_heap_free+0x80>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
60004444:	6806      	ldr	r6, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60004446:	2201      	movs	r2, #1
	chunkid_t c = mem_to_chunkid(h, mem);
60004448:	4630      	mov	r0, r6
6000444a:	f00e f9b6 	bl	600127ba <mem_to_chunkid>
6000444e:	4601      	mov	r1, r0
60004450:	4604      	mov	r4, r0
60004452:	4630      	mov	r0, r6
60004454:	f00e f979 	bl	6001274a <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
60004458:	07c3      	lsls	r3, r0, #31
6000445a:	d40d      	bmi.n	60004478 <sys_heap_free+0x3c>
6000445c:	23af      	movs	r3, #175	; 0xaf
6000445e:	4a18      	ldr	r2, [pc, #96]	; (600044c0 <sys_heap_free+0x84>)
60004460:	4918      	ldr	r1, [pc, #96]	; (600044c4 <sys_heap_free+0x88>)
60004462:	4819      	ldr	r0, [pc, #100]	; (600044c8 <sys_heap_free+0x8c>)
60004464:	f00e fbf9 	bl	60012c5a <assert_print>
60004468:	4639      	mov	r1, r7
6000446a:	4818      	ldr	r0, [pc, #96]	; (600044cc <sys_heap_free+0x90>)
6000446c:	f00e fbf5 	bl	60012c5a <assert_print>
60004470:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
60004472:	4813      	ldr	r0, [pc, #76]	; (600044c0 <sys_heap_free+0x84>)
60004474:	f00e fbea 	bl	60012c4c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
60004478:	4621      	mov	r1, r4
6000447a:	4630      	mov	r0, r6
6000447c:	f00e f97b 	bl	60012776 <chunk_size>
60004480:	1825      	adds	r5, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
60004482:	2200      	movs	r2, #0
60004484:	4630      	mov	r0, r6
60004486:	4629      	mov	r1, r5
60004488:	f00e f95f 	bl	6001274a <chunk_field>
6000448c:	1a2d      	subs	r5, r5, r0
6000448e:	42ac      	cmp	r4, r5
60004490:	d00b      	beq.n	600044aa <sys_heap_free+0x6e>
60004492:	23b7      	movs	r3, #183	; 0xb7
60004494:	4a0a      	ldr	r2, [pc, #40]	; (600044c0 <sys_heap_free+0x84>)
60004496:	490e      	ldr	r1, [pc, #56]	; (600044d0 <sys_heap_free+0x94>)
60004498:	480b      	ldr	r0, [pc, #44]	; (600044c8 <sys_heap_free+0x8c>)
6000449a:	f00e fbde 	bl	60012c5a <assert_print>
6000449e:	4639      	mov	r1, r7
600044a0:	480c      	ldr	r0, [pc, #48]	; (600044d4 <sys_heap_free+0x98>)
600044a2:	f00e fbda 	bl	60012c5a <assert_print>
600044a6:	21b7      	movs	r1, #183	; 0xb7
600044a8:	e7e3      	b.n	60004472 <sys_heap_free+0x36>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
600044aa:	4621      	mov	r1, r4
600044ac:	4630      	mov	r0, r6
600044ae:	f00e f968 	bl	60012782 <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
600044b2:	4621      	mov	r1, r4
}
600044b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
600044b8:	f00e baa5 	b.w	60012a06 <free_chunk>
}
600044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600044be:	bf00      	nop
600044c0:	60016f8d 	.word	0x60016f8d
600044c4:	60016fae 	.word	0x60016fae
600044c8:	60016dfb 	.word	0x60016dfb
600044cc:	60016fbf 	.word	0x60016fbf
600044d0:	60016ff7 	.word	0x60016ff7
600044d4:	6001701d 	.word	0x6001701d

600044d8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
600044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
600044dc:	6806      	ldr	r6, [r0, #0]
{
600044de:	4614      	mov	r4, r2
600044e0:	460f      	mov	r7, r1
600044e2:	1e4b      	subs	r3, r1, #1
	return big_heap_chunks(h->end_chunk);
600044e4:	68b2      	ldr	r2, [r6, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
600044e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
600044ea:	bf34      	ite	cc
600044ec:	2104      	movcc	r1, #4
600044ee:	2108      	movcs	r1, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
600044f0:	403b      	ands	r3, r7
600044f2:	d00f      	beq.n	60004514 <sys_heap_aligned_alloc+0x3c>
	rew = align & -align;
600044f4:	f1c7 0900 	rsb	r9, r7, #0
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
600044f8:	1e58      	subs	r0, r3, #1
	rew = align & -align;
600044fa:	ea09 0907 	and.w	r9, r9, r7
600044fe:	4549      	cmp	r1, r9
60004500:	bf28      	it	cs
60004502:	4649      	movcs	r1, r9
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
60004504:	4218      	tst	r0, r3
60004506:	d10c      	bne.n	60004522 <sys_heap_aligned_alloc+0x4a>
60004508:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
6000450a:	b9dc      	cbnz	r4, 60004544 <sys_heap_aligned_alloc+0x6c>
		return NULL;
6000450c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
6000450e:	4628      	mov	r0, r5
60004510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
60004514:	428f      	cmp	r7, r1
60004516:	d813      	bhi.n	60004540 <sys_heap_aligned_alloc+0x68>
			return sys_heap_alloc(heap, bytes);
60004518:	4621      	mov	r1, r4
}
6000451a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
6000451e:	f00e bab4 	b.w	60012a8a <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
60004522:	492f      	ldr	r1, [pc, #188]	; (600045e0 <sys_heap_aligned_alloc+0x108>)
60004524:	f44f 73a2 	mov.w	r3, #324	; 0x144
60004528:	4a2e      	ldr	r2, [pc, #184]	; (600045e4 <sys_heap_aligned_alloc+0x10c>)
6000452a:	482f      	ldr	r0, [pc, #188]	; (600045e8 <sys_heap_aligned_alloc+0x110>)
6000452c:	f00e fb95 	bl	60012c5a <assert_print>
60004530:	482e      	ldr	r0, [pc, #184]	; (600045ec <sys_heap_aligned_alloc+0x114>)
60004532:	f00e fb92 	bl	60012c5a <assert_print>
60004536:	f44f 71a2 	mov.w	r1, #324	; 0x144
6000453a:	482a      	ldr	r0, [pc, #168]	; (600045e4 <sys_heap_aligned_alloc+0x10c>)
6000453c:	f00e fb86 	bl	60012c4c <assert_post_action>
		rew = 0;
60004540:	4699      	mov	r9, r3
60004542:	e7e2      	b.n	6000450a <sys_heap_aligned_alloc+0x32>
	if (bytes == 0 || size_too_big(h, bytes)) {
60004544:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
60004548:	d9e0      	bls.n	6000450c <sys_heap_aligned_alloc+0x34>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
6000454a:	19e3      	adds	r3, r4, r7
6000454c:	4610      	mov	r0, r2
6000454e:	1a59      	subs	r1, r3, r1
60004550:	f00e f93d 	bl	600127ce <bytes_to_chunksz.isra.0>
60004554:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
60004556:	4630      	mov	r0, r6
60004558:	f00e f994 	bl	60012884 <alloc_chunk>
	if (c0 == 0) {
6000455c:	4680      	mov	r8, r0
6000455e:	2800      	cmp	r0, #0
60004560:	d0d4      	beq.n	6000450c <sys_heap_aligned_alloc+0x34>
60004562:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
60004564:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
	chunkid_t c = mem_to_chunkid(h, mem);
60004568:	4630      	mov	r0, r6
6000456a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
6000456e:	bf34      	ite	cc
60004570:	2304      	movcc	r3, #4
60004572:	2308      	movcs	r3, #8
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
60004574:	441d      	add	r5, r3
60004576:	1e7b      	subs	r3, r7, #1
60004578:	427f      	negs	r7, r7
6000457a:	4435      	add	r5, r6
6000457c:	441d      	add	r5, r3
6000457e:	403d      	ands	r5, r7
60004580:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
60004584:	442c      	add	r4, r5
	chunkid_t c = mem_to_chunkid(h, mem);
60004586:	4629      	mov	r1, r5
60004588:	f00e f917 	bl	600127ba <mem_to_chunkid>
	if (c > c0) {
6000458c:	4580      	cmp	r8, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
6000458e:	f104 0407 	add.w	r4, r4, #7
	chunkid_t c = mem_to_chunkid(h, mem);
60004592:	4607      	mov	r7, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
60004594:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
60004598:	eba4 0406 	sub.w	r4, r4, r6
6000459c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
600045a0:	d208      	bcs.n	600045b4 <sys_heap_aligned_alloc+0xdc>
		split_chunks(h, c0, c);
600045a2:	4602      	mov	r2, r0
600045a4:	4641      	mov	r1, r8
600045a6:	4630      	mov	r0, r6
600045a8:	f00e f9a6 	bl	600128f8 <split_chunks>
		free_list_add(h, c0);
600045ac:	4641      	mov	r1, r8
600045ae:	4630      	mov	r0, r6
600045b0:	f00e f9e7 	bl	60012982 <free_list_add>
	return c + chunk_size(h, c);
600045b4:	4639      	mov	r1, r7
600045b6:	4630      	mov	r0, r6
600045b8:	f00e f8dd 	bl	60012776 <chunk_size>
600045bc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
600045be:	4284      	cmp	r4, r0
600045c0:	d208      	bcs.n	600045d4 <sys_heap_aligned_alloc+0xfc>
		split_chunks(h, c, c_end);
600045c2:	4639      	mov	r1, r7
600045c4:	4630      	mov	r0, r6
600045c6:	4622      	mov	r2, r4
600045c8:	f00e f996 	bl	600128f8 <split_chunks>
		free_list_add(h, c_end);
600045cc:	4621      	mov	r1, r4
600045ce:	4630      	mov	r0, r6
600045d0:	f00e f9d7 	bl	60012982 <free_list_add>
	set_chunk_used(h, c, true);
600045d4:	2201      	movs	r2, #1
600045d6:	4639      	mov	r1, r7
600045d8:	4630      	mov	r0, r6
600045da:	f00e f8d2 	bl	60012782 <set_chunk_used>
	return mem;
600045de:	e796      	b.n	6000450e <sys_heap_aligned_alloc+0x36>
600045e0:	60017059 	.word	0x60017059
600045e4:	60016f8d 	.word	0x60016f8d
600045e8:	60016dfb 	.word	0x60016dfb
600045ec:	60017074 	.word	0x60017074

600045f0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
600045f0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
600045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600045f6:	d210      	bcs.n	6000461a <sys_heap_init+0x2a>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
600045f8:	2a04      	cmp	r2, #4
600045fa:	d828      	bhi.n	6000464e <sys_heap_init+0x5e>
600045fc:	4941      	ldr	r1, [pc, #260]	; (60004704 <sys_heap_init+0x114>)
600045fe:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
60004602:	4a41      	ldr	r2, [pc, #260]	; (60004708 <sys_heap_init+0x118>)
60004604:	4841      	ldr	r0, [pc, #260]	; (6000470c <sys_heap_init+0x11c>)
60004606:	f00e fb28 	bl	60012c5a <assert_print>
6000460a:	4841      	ldr	r0, [pc, #260]	; (60004710 <sys_heap_init+0x120>)
6000460c:	f00e fb25 	bl	60012c5a <assert_print>
60004610:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
60004614:	483c      	ldr	r0, [pc, #240]	; (60004708 <sys_heap_init+0x118>)
60004616:	f00e fb19 	bl	60012c4c <assert_post_action>
6000461a:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
6000461c:	1ad2      	subs	r2, r2, r3
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
6000461e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
60004620:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
60004622:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
60004626:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
6000462a:	1b09      	subs	r1, r1, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
6000462c:	2917      	cmp	r1, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
6000462e:	ea4f 06d1 	mov.w	r6, r1, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
60004632:	d80e      	bhi.n	60004652 <sys_heap_init+0x62>
60004634:	4937      	ldr	r1, [pc, #220]	; (60004714 <sys_heap_init+0x124>)
60004636:	f240 13fb 	movw	r3, #507	; 0x1fb
6000463a:	4a33      	ldr	r2, [pc, #204]	; (60004708 <sys_heap_init+0x118>)
6000463c:	4833      	ldr	r0, [pc, #204]	; (6000470c <sys_heap_init+0x11c>)
6000463e:	f00e fb0c 	bl	60012c5a <assert_print>
60004642:	4833      	ldr	r0, [pc, #204]	; (60004710 <sys_heap_init+0x120>)
60004644:	f00e fb09 	bl	60012c5a <assert_print>
60004648:	f240 11fb 	movw	r1, #507	; 0x1fb
6000464c:	e7e2      	b.n	60004614 <sys_heap_init+0x24>
6000464e:	2304      	movs	r3, #4
60004650:	e7e4      	b.n	6000461c <sys_heap_init+0x2c>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
60004652:	2700      	movs	r7, #0
	heap->heap = h;
60004654:	6004      	str	r4, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
60004656:	4631      	mov	r1, r6
60004658:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
6000465a:	60a6      	str	r6, [r4, #8]
	h->avail_buckets = 0;
6000465c:	60e7      	str	r7, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
6000465e:	f00e f8c0 	bl	600127e2 <bucket_idx.isra.0>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
60004662:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
60004664:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
60004666:	4602      	mov	r2, r0
60004668:	4630      	mov	r0, r6
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
6000466a:	351b      	adds	r5, #27
	return bytes_to_chunksz(h, 1);
6000466c:	f00e f8af 	bl	600127ce <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
60004670:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
60004672:	4428      	add	r0, r5
60004674:	42b0      	cmp	r0, r6
60004676:	d834      	bhi.n	600046e2 <sys_heap_init+0xf2>
60004678:	f104 010c 	add.w	r1, r4, #12

	for (int i = 0; i < nb_buckets; i++) {
6000467c:	463b      	mov	r3, r7
		h->buckets[i].next = 0;
6000467e:	4638      	mov	r0, r7
	for (int i = 0; i < nb_buckets; i++) {
60004680:	429a      	cmp	r2, r3
60004682:	da3b      	bge.n	600046fc <sys_heap_init+0x10c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
60004684:	462a      	mov	r2, r5
60004686:	4620      	mov	r0, r4
60004688:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
6000468a:	1b77      	subs	r7, r6, r5
	set_chunk_size(h, 0, chunk0_size);
6000468c:	f00e f891 	bl	600127b2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60004690:	2300      	movs	r3, #0
60004692:	4620      	mov	r0, r4
60004694:	461a      	mov	r2, r3
60004696:	4619      	mov	r1, r3
60004698:	f00e f862 	bl	60012760 <chunk_set>
	set_chunk_used(h, 0, true);
6000469c:	4619      	mov	r1, r3
6000469e:	4620      	mov	r0, r4
600046a0:	2201      	movs	r2, #1
600046a2:	f00e f86e 	bl	60012782 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
600046a6:	463a      	mov	r2, r7
600046a8:	4629      	mov	r1, r5
600046aa:	f00e f882 	bl	600127b2 <set_chunk_size>
600046ae:	462b      	mov	r3, r5
600046b0:	2200      	movs	r2, #0
600046b2:	4629      	mov	r1, r5
600046b4:	4620      	mov	r0, r4
600046b6:	f00e f853 	bl	60012760 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
600046ba:	4631      	mov	r1, r6
600046bc:	4620      	mov	r0, r4
600046be:	f00e f878 	bl	600127b2 <set_chunk_size>
600046c2:	463b      	mov	r3, r7
600046c4:	4631      	mov	r1, r6
600046c6:	4620      	mov	r0, r4
600046c8:	2200      	movs	r2, #0
600046ca:	f00e f849 	bl	60012760 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
600046ce:	4631      	mov	r1, r6
600046d0:	4620      	mov	r0, r4
600046d2:	2201      	movs	r2, #1
600046d4:	f00e f855 	bl	60012782 <set_chunk_used>

	free_list_add(h, chunk0_size);
600046d8:	4629      	mov	r1, r5
}
600046da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
600046de:	f00e b950 	b.w	60012982 <free_list_add>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
600046e2:	490d      	ldr	r1, [pc, #52]	; (60004718 <sys_heap_init+0x128>)
600046e4:	f44f 7303 	mov.w	r3, #524	; 0x20c
600046e8:	4a07      	ldr	r2, [pc, #28]	; (60004708 <sys_heap_init+0x118>)
600046ea:	4808      	ldr	r0, [pc, #32]	; (6000470c <sys_heap_init+0x11c>)
600046ec:	f00e fab5 	bl	60012c5a <assert_print>
600046f0:	4807      	ldr	r0, [pc, #28]	; (60004710 <sys_heap_init+0x120>)
600046f2:	f00e fab2 	bl	60012c5a <assert_print>
600046f6:	f44f 7103 	mov.w	r1, #524	; 0x20c
600046fa:	e78b      	b.n	60004614 <sys_heap_init+0x24>
	for (int i = 0; i < nb_buckets; i++) {
600046fc:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
600046fe:	f841 0f04 	str.w	r0, [r1, #4]!
	for (int i = 0; i < nb_buckets; i++) {
60004702:	e7bd      	b.n	60004680 <sys_heap_init+0x90>
60004704:	60017091 	.word	0x60017091
60004708:	60016f8d 	.word	0x60016f8d
6000470c:	60016dfb 	.word	0x60016dfb
60004710:	600170b2 	.word	0x600170b2
60004714:	600170cb 	.word	0x600170cb
60004718:	600170f4 	.word	0x600170f4

6000471c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
6000471c:	b5f0      	push	{r4, r5, r6, r7, lr}
6000471e:	4602      	mov	r2, r0
60004720:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
60004722:	4e08      	ldr	r6, [pc, #32]	; (60004744 <extract_decimal+0x28>)
	size_t val = 0;
60004724:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
60004726:	270a      	movs	r7, #10
60004728:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
6000472a:	3101      	adds	r1, #1
6000472c:	781c      	ldrb	r4, [r3, #0]
6000472e:	5d35      	ldrb	r5, [r6, r4]
60004730:	076d      	lsls	r5, r5, #29
60004732:	d401      	bmi.n	60004738 <extract_decimal+0x1c>
	}
	*str = sp;
60004734:	6013      	str	r3, [r2, #0]
	return val;
}
60004736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
60004738:	fb07 4300 	mla	r3, r7, r0, r4
6000473c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
60004740:	e7f2      	b.n	60004728 <extract_decimal+0xc>
60004742:	bf00      	nop
60004744:	60016b01 	.word	0x60016b01

60004748 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
60004748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000474c:	4615      	mov	r5, r2
6000474e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
60004750:	78d3      	ldrb	r3, [r2, #3]
{
60004752:	4680      	mov	r8, r0
	bool upcase = isupper((int)conv->specifier);
60004754:	4a21      	ldr	r2, [pc, #132]	; (600047dc <encode_uint+0x94>)
{
60004756:	460f      	mov	r7, r1
	switch (specifier) {
60004758:	2b6f      	cmp	r3, #111	; 0x6f
6000475a:	f812 b003 	ldrb.w	fp, [r2, r3]
6000475e:	f00b 0b03 	and.w	fp, fp, #3
60004762:	d029      	beq.n	600047b8 <encode_uint+0x70>
60004764:	d824      	bhi.n	600047b0 <encode_uint+0x68>
		return 10;
60004766:	2b58      	cmp	r3, #88	; 0x58
60004768:	bf0c      	ite	eq
6000476a:	2610      	moveq	r6, #16
6000476c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
6000476e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
60004772:	4632      	mov	r2, r6
60004774:	2300      	movs	r3, #0
60004776:	4640      	mov	r0, r8
60004778:	4639      	mov	r1, r7
6000477a:	f7fe fe03 	bl	60003384 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
6000477e:	2a09      	cmp	r2, #9
60004780:	b2d4      	uxtb	r4, r2
60004782:	d81e      	bhi.n	600047c2 <encode_uint+0x7a>
60004784:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
60004786:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
60004788:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
6000478a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
6000478e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
60004792:	d301      	bcc.n	60004798 <encode_uint+0x50>
60004794:	45d1      	cmp	r9, sl
60004796:	d811      	bhi.n	600047bc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
60004798:	782b      	ldrb	r3, [r5, #0]
6000479a:	069b      	lsls	r3, r3, #26
6000479c:	d505      	bpl.n	600047aa <encode_uint+0x62>
		if (radix == 8) {
6000479e:	2e08      	cmp	r6, #8
600047a0:	d115      	bne.n	600047ce <encode_uint+0x86>
			conv->altform_0 = true;
600047a2:	78ab      	ldrb	r3, [r5, #2]
600047a4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
600047a8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
600047aa:	4648      	mov	r0, r9
600047ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
600047b0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
600047b4:	2b70      	cmp	r3, #112	; 0x70
600047b6:	e7d7      	b.n	60004768 <encode_uint+0x20>
	switch (specifier) {
600047b8:	2608      	movs	r6, #8
600047ba:	e7d8      	b.n	6000476e <encode_uint+0x26>
		value /= radix;
600047bc:	4680      	mov	r8, r0
600047be:	460f      	mov	r7, r1
600047c0:	e7d7      	b.n	60004772 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
600047c2:	f1bb 0f01 	cmp.w	fp, #1
600047c6:	bf0c      	ite	eq
600047c8:	3437      	addeq	r4, #55	; 0x37
600047ca:	3457      	addne	r4, #87	; 0x57
600047cc:	e7db      	b.n	60004786 <encode_uint+0x3e>
		} else if (radix == 16) {
600047ce:	2e10      	cmp	r6, #16
600047d0:	d1eb      	bne.n	600047aa <encode_uint+0x62>
			conv->altform_0c = true;
600047d2:	78ab      	ldrb	r3, [r5, #2]
600047d4:	f043 0310 	orr.w	r3, r3, #16
600047d8:	e7e6      	b.n	600047a8 <encode_uint+0x60>
600047da:	bf00      	nop
600047dc:	60016b01 	.word	0x60016b01

600047e0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
600047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600047e4:	4682      	mov	sl, r0
600047e6:	b09f      	sub	sp, #124	; 0x7c
600047e8:	4616      	mov	r6, r2
600047ea:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
600047ec:	2500      	movs	r5, #0
{
600047ee:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
600047f0:	7830      	ldrb	r0, [r6, #0]
600047f2:	b910      	cbnz	r0, 600047fa <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
600047f4:	4628      	mov	r0, r5
600047f6:	f000 bd85 	b.w	60005304 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
600047fa:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
600047fc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
600047fe:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
60004800:	d006      	beq.n	60004810 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
60004802:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
60004804:	47d0      	blx	sl
60004806:	2800      	cmp	r0, #0
60004808:	f2c0 857c 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
6000480c:	3501      	adds	r5, #1
		if (bps == NULL) {
6000480e:	e21f      	b.n	60004c50 <z_cbvprintf_impl+0x470>
		} state = {
60004810:	2218      	movs	r2, #24
60004812:	2100      	movs	r1, #0
60004814:	a810      	add	r0, sp, #64	; 0x40
60004816:	f00b fef3 	bl	60010600 <memset>
	if (*sp == '%') {
6000481a:	7873      	ldrb	r3, [r6, #1]
6000481c:	2b25      	cmp	r3, #37	; 0x25
6000481e:	f000 80bc 	beq.w	6000499a <z_cbvprintf_impl+0x1ba>
60004822:	2300      	movs	r3, #0
60004824:	1c71      	adds	r1, r6, #1
60004826:	4698      	mov	r8, r3
60004828:	469e      	mov	lr, r3
6000482a:	469c      	mov	ip, r3
6000482c:	4618      	mov	r0, r3
6000482e:	460f      	mov	r7, r1
		switch (*sp) {
60004830:	f811 2b01 	ldrb.w	r2, [r1], #1
60004834:	2a2b      	cmp	r2, #43	; 0x2b
60004836:	f000 80df 	beq.w	600049f8 <z_cbvprintf_impl+0x218>
6000483a:	f200 80d6 	bhi.w	600049ea <z_cbvprintf_impl+0x20a>
6000483e:	2a20      	cmp	r2, #32
60004840:	f000 80dd 	beq.w	600049fe <z_cbvprintf_impl+0x21e>
60004844:	2a23      	cmp	r2, #35	; 0x23
60004846:	f000 80dd 	beq.w	60004a04 <z_cbvprintf_impl+0x224>
6000484a:	b12b      	cbz	r3, 60004858 <z_cbvprintf_impl+0x78>
6000484c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60004854:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
60004858:	f1b8 0f00 	cmp.w	r8, #0
6000485c:	d005      	beq.n	6000486a <z_cbvprintf_impl+0x8a>
6000485e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004862:	f043 0320 	orr.w	r3, r3, #32
60004866:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
6000486a:	f1be 0f00 	cmp.w	lr, #0
6000486e:	d005      	beq.n	6000487c <z_cbvprintf_impl+0x9c>
60004870:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004874:	f043 0310 	orr.w	r3, r3, #16
60004878:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
6000487c:	f1bc 0f00 	cmp.w	ip, #0
60004880:	d005      	beq.n	6000488e <z_cbvprintf_impl+0xae>
60004882:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004886:	f043 0308 	orr.w	r3, r3, #8
6000488a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
6000488e:	b128      	cbz	r0, 6000489c <z_cbvprintf_impl+0xbc>
60004890:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004894:	f043 0304 	orr.w	r3, r3, #4
60004898:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
6000489c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600048a0:	f003 0144 	and.w	r1, r3, #68	; 0x44
600048a4:	2944      	cmp	r1, #68	; 0x44
600048a6:	d103      	bne.n	600048b0 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
600048a8:	f36f 1386 	bfc	r3, #6, #1
600048ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
600048b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
600048b4:	2a2a      	cmp	r2, #42	; 0x2a
600048b6:	970e      	str	r7, [sp, #56]	; 0x38
	conv->width_present = true;
600048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
600048bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
600048c0:	f040 80a5 	bne.w	60004a0e <z_cbvprintf_impl+0x22e>
		conv->width_star = true;
600048c4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
600048c8:	f043 0301 	orr.w	r3, r3, #1
600048cc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
600048d0:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
600048d2:	781a      	ldrb	r2, [r3, #0]
600048d4:	2a2e      	cmp	r2, #46	; 0x2e
600048d6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
600048da:	bf0c      	ite	eq
600048dc:	2101      	moveq	r1, #1
600048de:	2100      	movne	r1, #0
600048e0:	f361 0241 	bfi	r2, r1, #1, #1
600048e4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
600048e8:	d10c      	bne.n	60004904 <z_cbvprintf_impl+0x124>
	++sp;
600048ea:	1c5a      	adds	r2, r3, #1
600048ec:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
600048ee:	785a      	ldrb	r2, [r3, #1]
600048f0:	2a2a      	cmp	r2, #42	; 0x2a
600048f2:	f040 809c 	bne.w	60004a2e <z_cbvprintf_impl+0x24e>
		conv->prec_star = true;
600048f6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
600048fa:	3302      	adds	r3, #2
		conv->prec_star = true;
600048fc:	f042 0204 	orr.w	r2, r2, #4
60004900:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
60004904:	781a      	ldrb	r2, [r3, #0]
60004906:	2a6c      	cmp	r2, #108	; 0x6c
60004908:	f000 80bd 	beq.w	60004a86 <z_cbvprintf_impl+0x2a6>
6000490c:	f200 809f 	bhi.w	60004a4e <z_cbvprintf_impl+0x26e>
60004910:	2a68      	cmp	r2, #104	; 0x68
60004912:	f000 80a5 	beq.w	60004a60 <z_cbvprintf_impl+0x280>
60004916:	2a6a      	cmp	r2, #106	; 0x6a
60004918:	f000 80be 	beq.w	60004a98 <z_cbvprintf_impl+0x2b8>
6000491c:	2a4c      	cmp	r2, #76	; 0x4c
6000491e:	f000 80c3 	beq.w	60004aa8 <z_cbvprintf_impl+0x2c8>
	conv->specifier = *sp++;
60004922:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
60004926:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
60004928:	9306      	str	r3, [sp, #24]
6000492a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
6000492e:	f200 8105 	bhi.w	60004b3c <z_cbvprintf_impl+0x35c>
60004932:	2a6d      	cmp	r2, #109	; 0x6d
60004934:	f200 80c5 	bhi.w	60004ac2 <z_cbvprintf_impl+0x2e2>
60004938:	2a69      	cmp	r2, #105	; 0x69
6000493a:	f200 80ff 	bhi.w	60004b3c <z_cbvprintf_impl+0x35c>
6000493e:	2a57      	cmp	r2, #87	; 0x57
60004940:	f200 80de 	bhi.w	60004b00 <z_cbvprintf_impl+0x320>
60004944:	2a41      	cmp	r2, #65	; 0x41
60004946:	d004      	beq.n	60004952 <z_cbvprintf_impl+0x172>
60004948:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
6000494c:	2b02      	cmp	r3, #2
6000494e:	f200 80f5 	bhi.w	60004b3c <z_cbvprintf_impl+0x35c>
			|| (conv->specifier == 'A');
60004952:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
60004956:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
6000495a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
6000495c:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
60004960:	f361 0302 	bfi	r3, r1, #0, #3
		conv->specifier_a = (conv->specifier == 'a')
60004964:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
60004968:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_cat = SPECIFIER_FP;
6000496c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
60004970:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
60004974:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
60004978:	060a      	lsls	r2, r1, #24
6000497a:	b2cb      	uxtb	r3, r1
		conv->specifier_a = (conv->specifier == 'a')
6000497c:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
60004980:	f100 811b 	bmi.w	60004bba <z_cbvprintf_impl+0x3da>
		if (conv->length_mod == LENGTH_L) {
60004984:	f003 0278 	and.w	r2, r3, #120	; 0x78
60004988:	2a18      	cmp	r2, #24
6000498a:	f040 8105 	bne.w	60004b98 <z_cbvprintf_impl+0x3b8>
			conv->length_mod = LENGTH_NONE;
6000498e:	f36f 03c6 	bfc	r3, #3, #4
60004992:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
60004996:	2300      	movs	r3, #0
60004998:	e0f4      	b.n	60004b84 <z_cbvprintf_impl+0x3a4>
		conv->specifier = *sp++;
6000499a:	1cb2      	adds	r2, r6, #2
6000499c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
600049a0:	9206      	str	r2, [sp, #24]
		if (conv->width_star) {
600049a2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
600049a6:	07df      	lsls	r7, r3, #31
600049a8:	f140 8109 	bpl.w	60004bbe <z_cbvprintf_impl+0x3de>
			width = va_arg(ap, int);
600049ac:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
600049b0:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
600049b2:	9204      	str	r2, [sp, #16]
			if (width < 0) {
600049b4:	da08      	bge.n	600049c8 <z_cbvprintf_impl+0x1e8>
				conv->flag_dash = true;
600049b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
600049ba:	f042 0204 	orr.w	r2, r2, #4
600049be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
600049c2:	9a04      	ldr	r2, [sp, #16]
600049c4:	4252      	negs	r2, r2
		int width = -1;
600049c6:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
600049c8:	0758      	lsls	r0, r3, #29
600049ca:	f140 8100 	bpl.w	60004bce <z_cbvprintf_impl+0x3ee>
			int arg = va_arg(ap, int);
600049ce:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
600049d2:	2f00      	cmp	r7, #0
600049d4:	f280 80ff 	bge.w	60004bd6 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
600049d8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
600049dc:	f36f 0341 	bfc	r3, #1, #1
600049e0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
600049e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
600049e8:	e0f5      	b.n	60004bd6 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
600049ea:	2a2d      	cmp	r2, #45	; 0x2d
600049ec:	d00d      	beq.n	60004a0a <z_cbvprintf_impl+0x22a>
600049ee:	2a30      	cmp	r2, #48	; 0x30
600049f0:	f47f af2b 	bne.w	6000484a <z_cbvprintf_impl+0x6a>
600049f4:	2301      	movs	r3, #1
	} while (loop);
600049f6:	e71a      	b.n	6000482e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
600049f8:	f04f 0c01 	mov.w	ip, #1
600049fc:	e717      	b.n	6000482e <z_cbvprintf_impl+0x4e>
600049fe:	f04f 0e01 	mov.w	lr, #1
60004a02:	e714      	b.n	6000482e <z_cbvprintf_impl+0x4e>
60004a04:	f04f 0801 	mov.w	r8, #1
60004a08:	e711      	b.n	6000482e <z_cbvprintf_impl+0x4e>
60004a0a:	2001      	movs	r0, #1
60004a0c:	e70f      	b.n	6000482e <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
60004a0e:	a80e      	add	r0, sp, #56	; 0x38
60004a10:	f7ff fe84 	bl	6000471c <extract_decimal>
	if (sp != wp) {
60004a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60004a16:	42bb      	cmp	r3, r7
60004a18:	f43f af5b 	beq.w	600048d2 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
60004a1c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
60004a20:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
60004a22:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
60004a24:	f360 0241 	bfi	r2, r0, #1, #1
60004a28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
60004a2c:	e751      	b.n	600048d2 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
60004a2e:	a80e      	add	r0, sp, #56	; 0x38
60004a30:	f7ff fe74 	bl	6000471c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
60004a34:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
60004a38:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
60004a3a:	f3c3 0240 	ubfx	r2, r3, #1, #1
60004a3e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
60004a42:	f362 0341 	bfi	r3, r2, #1, #1
60004a46:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
60004a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60004a4c:	e75a      	b.n	60004904 <z_cbvprintf_impl+0x124>
	switch (*sp) {
60004a4e:	2a74      	cmp	r2, #116	; 0x74
60004a50:	d026      	beq.n	60004aa0 <z_cbvprintf_impl+0x2c0>
60004a52:	2a7a      	cmp	r2, #122	; 0x7a
60004a54:	f47f af65 	bne.w	60004922 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
60004a58:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60004a5c:	2106      	movs	r1, #6
60004a5e:	e00c      	b.n	60004a7a <z_cbvprintf_impl+0x29a>
		if (*++sp == 'h') {
60004a60:	785a      	ldrb	r2, [r3, #1]
60004a62:	2a68      	cmp	r2, #104	; 0x68
60004a64:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60004a68:	d106      	bne.n	60004a78 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_HH;
60004a6a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
60004a6c:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
60004a70:	3302      	adds	r3, #2
			conv->length_mod = LENGTH_LL;
60004a72:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
60004a76:	e754      	b.n	60004922 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
60004a78:	2102      	movs	r1, #2
60004a7a:	f361 02c6 	bfi	r2, r1, #3, #4
60004a7e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
60004a82:	3301      	adds	r3, #1
60004a84:	e74d      	b.n	60004922 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
60004a86:	785a      	ldrb	r2, [r3, #1]
60004a88:	2a6c      	cmp	r2, #108	; 0x6c
60004a8a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60004a8e:	d101      	bne.n	60004a94 <z_cbvprintf_impl+0x2b4>
			conv->length_mod = LENGTH_LL;
60004a90:	2104      	movs	r1, #4
60004a92:	e7eb      	b.n	60004a6c <z_cbvprintf_impl+0x28c>
			conv->length_mod = LENGTH_L;
60004a94:	2103      	movs	r1, #3
60004a96:	e7f0      	b.n	60004a7a <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_J;
60004a98:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60004a9c:	2105      	movs	r1, #5
60004a9e:	e7ec      	b.n	60004a7a <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_T;
60004aa0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60004aa4:	2107      	movs	r1, #7
60004aa6:	e7e8      	b.n	60004a7a <z_cbvprintf_impl+0x29a>
		conv->unsupported = true;
60004aa8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
60004aac:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
60004ab0:	f022 0202 	bic.w	r2, r2, #2
60004ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
60004ab8:	f042 0202 	orr.w	r2, r2, #2
60004abc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
60004ac0:	e7df      	b.n	60004a82 <z_cbvprintf_impl+0x2a2>
	switch (conv->specifier) {
60004ac2:	3a6e      	subs	r2, #110	; 0x6e
60004ac4:	b2d3      	uxtb	r3, r2
60004ac6:	2201      	movs	r2, #1
60004ac8:	409a      	lsls	r2, r3
60004aca:	f240 4382 	movw	r3, #1154	; 0x482
60004ace:	421a      	tst	r2, r3
60004ad0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
60004ad4:	d139      	bne.n	60004b4a <z_cbvprintf_impl+0x36a>
60004ad6:	f012 0f24 	tst.w	r2, #36	; 0x24
60004ada:	d161      	bne.n	60004ba0 <z_cbvprintf_impl+0x3c0>
60004adc:	07d1      	lsls	r1, r2, #31
60004ade:	d52d      	bpl.n	60004b3c <z_cbvprintf_impl+0x35c>
		if (conv->length_mod == LENGTH_UPPER_L) {
60004ae0:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
60004ae4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60004ae8:	2103      	movs	r1, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60004aea:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
60004aee:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60004af2:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
60004af6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
60004afa:	eb43 030c 	adc.w	r3, r3, ip
60004afe:	e041      	b.n	60004b84 <z_cbvprintf_impl+0x3a4>
	switch (conv->specifier) {
60004b00:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
60004b04:	2001      	movs	r0, #1
60004b06:	b2c9      	uxtb	r1, r1
60004b08:	fa00 f101 	lsl.w	r1, r0, r1
60004b0c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
60004b10:	f47f af1f 	bne.w	60004952 <z_cbvprintf_impl+0x172>
60004b14:	f640 0301 	movw	r3, #2049	; 0x801
60004b18:	4219      	tst	r1, r3
60004b1a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
60004b1e:	d11a      	bne.n	60004b56 <z_cbvprintf_impl+0x376>
60004b20:	f411 3f04 	tst.w	r1, #135168	; 0x21000
60004b24:	d00a      	beq.n	60004b3c <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
60004b26:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60004b2a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60004b2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
60004b32:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
60004b36:	2b40      	cmp	r3, #64	; 0x40
60004b38:	f47f af2d 	bne.w	60004996 <z_cbvprintf_impl+0x1b6>
		conv->invalid = true;
60004b3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004b40:	f043 0301 	orr.w	r3, r3, #1
60004b44:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
60004b48:	e725      	b.n	60004996 <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
60004b4a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60004b4e:	2102      	movs	r1, #2
60004b50:	f361 0202 	bfi	r2, r1, #0, #3
60004b54:	e7eb      	b.n	60004b2e <z_cbvprintf_impl+0x34e>
60004b56:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
60004b5a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
60004b5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
60004b60:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60004b64:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
60004b66:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
60004b6a:	bf02      	ittt	eq
60004b6c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
60004b70:	f041 0101 	orreq.w	r1, r1, #1
60004b74:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
60004b78:	2a63      	cmp	r2, #99	; 0x63
60004b7a:	f47f af0c 	bne.w	60004996 <z_cbvprintf_impl+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
60004b7e:	3b00      	subs	r3, #0
60004b80:	bf18      	it	ne
60004b82:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
60004b84:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
60004b88:	f3c2 0140 	ubfx	r1, r2, #1, #1
60004b8c:	430b      	orrs	r3, r1
60004b8e:	f363 0241 	bfi	r2, r3, #1, #1
60004b92:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
60004b96:	e704      	b.n	600049a2 <z_cbvprintf_impl+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
60004b98:	f013 0f38 	tst.w	r3, #56	; 0x38
60004b9c:	d1ce      	bne.n	60004b3c <z_cbvprintf_impl+0x35c>
60004b9e:	e6fa      	b.n	60004996 <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
60004ba0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60004ba4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
60004ba6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
60004baa:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
60004bae:	bf14      	ite	ne
60004bb0:	2301      	movne	r3, #1
60004bb2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
60004bb4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
60004bb8:	e7e4      	b.n	60004b84 <z_cbvprintf_impl+0x3a4>
			unsupported = true;
60004bba:	2301      	movs	r3, #1
60004bbc:	e7e2      	b.n	60004b84 <z_cbvprintf_impl+0x3a4>
		} else if (conv->width_present) {
60004bbe:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
60004bc2:	2a00      	cmp	r2, #0
			width = conv->width_value;
60004bc4:	bfb4      	ite	lt
60004bc6:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
60004bc8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
60004bcc:	e6fb      	b.n	600049c6 <z_cbvprintf_impl+0x1e6>
		} else if (conv->prec_present) {
60004bce:	0799      	lsls	r1, r3, #30
60004bd0:	f57f af08 	bpl.w	600049e4 <z_cbvprintf_impl+0x204>
			precision = conv->prec_value;
60004bd4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
60004bd6:	2300      	movs	r3, #0
60004bd8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_pre_exp = 0;
60004bdc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
60004be0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
60004be4:	f003 0207 	and.w	r2, r3, #7
60004be8:	2a04      	cmp	r2, #4
60004bea:	d107      	bne.n	60004bfc <z_cbvprintf_impl+0x41c>
		    && !conv->prec_present) {
60004bec:	078a      	lsls	r2, r1, #30
60004bee:	d405      	bmi.n	60004bfc <z_cbvprintf_impl+0x41c>
			if (conv->specifier_a) {
60004bf0:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
60004bf4:	2a00      	cmp	r2, #0
60004bf6:	bfac      	ite	ge
60004bf8:	2706      	movge	r7, #6
60004bfa:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
60004bfc:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
60004c00:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
60004c04:	2b01      	cmp	r3, #1
60004c06:	d133      	bne.n	60004c70 <z_cbvprintf_impl+0x490>
			switch (length_mod) {
60004c08:	1ecb      	subs	r3, r1, #3
60004c0a:	2b04      	cmp	r3, #4
60004c0c:	d804      	bhi.n	60004c18 <z_cbvprintf_impl+0x438>
60004c0e:	e8df f003 	tbb	[pc, r3]
60004c12:	4621      	.short	0x4621
60004c14:	2146      	.short	0x2146
60004c16:	21          	.byte	0x21
60004c17:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
60004c18:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
60004c1a:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
60004c1c:	ea4f 72e3 	mov.w	r2, r3, asr #31
60004c20:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
60004c24:	d11c      	bne.n	60004c60 <z_cbvprintf_impl+0x480>
				value->sint = (signed char)value->sint;
60004c26:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
60004c2a:	17da      	asrs	r2, r3, #31
60004c2c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
60004c30:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
60004c32:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60004c36:	9307      	str	r3, [sp, #28]
60004c38:	079b      	lsls	r3, r3, #30
60004c3a:	d050      	beq.n	60004cde <z_cbvprintf_impl+0x4fe>
			OUTS(sp, fp);
60004c3c:	9b06      	ldr	r3, [sp, #24]
60004c3e:	4632      	mov	r2, r6
60004c40:	9903      	ldr	r1, [sp, #12]
60004c42:	4650      	mov	r0, sl
60004c44:	f00d ff82 	bl	60012b4c <outs>
60004c48:	2800      	cmp	r0, #0
60004c4a:	f2c0 835b 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60004c4e:	4405      	add	r5, r0
			continue;
60004c50:	9e06      	ldr	r6, [sp, #24]
60004c52:	e5cd      	b.n	600047f0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
60004c54:	f854 3b04 	ldr.w	r3, [r4], #4
60004c58:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
60004c5a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
60004c5e:	e7e8      	b.n	60004c32 <z_cbvprintf_impl+0x452>
			} else if (length_mod == LENGTH_H) {
60004c60:	2902      	cmp	r1, #2
60004c62:	d1e5      	bne.n	60004c30 <z_cbvprintf_impl+0x450>
				value->sint = (short)value->sint;
60004c64:	b21a      	sxth	r2, r3
60004c66:	f343 33c0 	sbfx	r3, r3, #15, #1
60004c6a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
60004c6e:	e7df      	b.n	60004c30 <z_cbvprintf_impl+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
60004c70:	2b02      	cmp	r3, #2
60004c72:	d124      	bne.n	60004cbe <z_cbvprintf_impl+0x4de>
			switch (length_mod) {
60004c74:	1ecb      	subs	r3, r1, #3
60004c76:	2b04      	cmp	r3, #4
60004c78:	d804      	bhi.n	60004c84 <z_cbvprintf_impl+0x4a4>
60004c7a:	e8df f003 	tbb	[pc, r3]
60004c7e:	1018      	.short	0x1018
60004c80:	1810      	.short	0x1810
60004c82:	18          	.byte	0x18
60004c83:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
60004c84:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
60004c86:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
60004c8a:	f04f 0200 	mov.w	r2, #0
60004c8e:	d014      	beq.n	60004cba <z_cbvprintf_impl+0x4da>
			} else if (length_mod == LENGTH_H) {
60004c90:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
60004c92:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
60004c96:	d1cc      	bne.n	60004c32 <z_cbvprintf_impl+0x452>
				value->uint = (unsigned short)value->uint;
60004c98:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
60004c9a:	9310      	str	r3, [sp, #64]	; 0x40
60004c9c:	e7c9      	b.n	60004c32 <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap,
60004c9e:	3407      	adds	r4, #7
60004ca0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
60004ca4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
60004ca8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
60004cac:	e7c1      	b.n	60004c32 <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap, size_t);
60004cae:	f854 3b04 	ldr.w	r3, [r4], #4
60004cb2:	9310      	str	r3, [sp, #64]	; 0x40
60004cb4:	2300      	movs	r3, #0
60004cb6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
60004cb8:	e7bb      	b.n	60004c32 <z_cbvprintf_impl+0x452>
				value->uint = (unsigned char)value->uint;
60004cba:	b2db      	uxtb	r3, r3
60004cbc:	e7cd      	b.n	60004c5a <z_cbvprintf_impl+0x47a>
		} else if (specifier_cat == SPECIFIER_FP) {
60004cbe:	2b04      	cmp	r3, #4
60004cc0:	d108      	bne.n	60004cd4 <z_cbvprintf_impl+0x4f4>
					(sint_value_type)va_arg(ap, long long);
60004cc2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
60004cc4:	f024 0407 	bic.w	r4, r4, #7
60004cc8:	e9d4 2300 	ldrd	r2, r3, [r4]
60004ccc:	3408      	adds	r4, #8
60004cce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
60004cd2:	e7ae      	b.n	60004c32 <z_cbvprintf_impl+0x452>
		} else if (specifier_cat == SPECIFIER_PTR) {
60004cd4:	2b03      	cmp	r3, #3
60004cd6:	d1ac      	bne.n	60004c32 <z_cbvprintf_impl+0x452>
			value->ptr = va_arg(ap, void *);
60004cd8:	f854 3b04 	ldr.w	r3, [r4], #4
60004cdc:	e7dd      	b.n	60004c9a <z_cbvprintf_impl+0x4ba>
		switch (conv->specifier) {
60004cde:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
60004ce2:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
60004ce6:	d8b3      	bhi.n	60004c50 <z_cbvprintf_impl+0x470>
60004ce8:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
60004cec:	d849      	bhi.n	60004d82 <z_cbvprintf_impl+0x5a2>
60004cee:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
60004cf2:	f000 8091 	beq.w	60004e18 <z_cbvprintf_impl+0x638>
60004cf6:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
60004cfa:	d9a9      	bls.n	60004c50 <z_cbvprintf_impl+0x470>
60004cfc:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
60004d00:	d003      	beq.n	60004d0a <z_cbvprintf_impl+0x52a>
60004d02:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
60004d06:	2a02      	cmp	r2, #2
60004d08:	d8a2      	bhi.n	60004c50 <z_cbvprintf_impl+0x470>
	} u = {
60004d0a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
60004d0e:	2a00      	cmp	r2, #0
60004d10:	f2c0 8136 	blt.w	60004f80 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_plus) {
60004d14:	9b07      	ldr	r3, [sp, #28]
60004d16:	0718      	lsls	r0, r3, #28
60004d18:	f100 8135 	bmi.w	60004f86 <z_cbvprintf_impl+0x7a6>
	} else if (conv->flag_space) {
60004d1c:	f3c3 1900 	ubfx	r9, r3, #4, #1
60004d20:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
60004d24:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
60004d28:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
60004d2c:	2800      	cmp	r0, #0
60004d2e:	f040 812d 	bne.w	60004f8c <z_cbvprintf_impl+0x7ac>
60004d32:	ea51 0602 	orrs.w	r6, r1, r2
60004d36:	bf14      	ite	ne
60004d38:	2601      	movne	r6, #1
60004d3a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
60004d3c:	02d2      	lsls	r2, r2, #11
		c = 'f';
60004d3e:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	fract <<= EXPONENT_BITS;
60004d42:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
		c = 'f';
60004d46:	bf08      	it	eq
60004d48:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	fract <<= EXPONENT_BITS;
60004d4c:	02c9      	lsls	r1, r1, #11
	if ((expo | fract) != 0) {
60004d4e:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
60004d52:	ea40 0e01 	orr.w	lr, r0, r1
60004d56:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
60004d5a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
60004d5e:	f000 819d 	beq.w	6000509c <z_cbvprintf_impl+0x8bc>
		if (is_subnormal) {
60004d62:	2e00      	cmp	r6, #0
60004d64:	f040 8149 	bne.w	60004ffa <z_cbvprintf_impl+0x81a>
		fract |= BIT_63;
60004d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
60004d6a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
60004d6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
60004d72:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
60004d74:	2000      	movs	r0, #0
		fract *= 5U;
60004d76:	f04f 0c05 	mov.w	ip, #5
60004d7a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
60004d7e:	4606      	mov	r6, r0
60004d80:	e155      	b.n	6000502e <z_cbvprintf_impl+0x84e>
		switch (conv->specifier) {
60004d82:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
60004d86:	2a20      	cmp	r2, #32
60004d88:	f63f af62 	bhi.w	60004c50 <z_cbvprintf_impl+0x470>
60004d8c:	a001      	add	r0, pc, #4	; (adr r0, 60004d94 <z_cbvprintf_impl+0x5b4>)
60004d8e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
60004d92:	bf00      	nop
60004d94:	60004f1f 	.word	0x60004f1f
60004d98:	60004c51 	.word	0x60004c51
60004d9c:	60004c51 	.word	0x60004c51
60004da0:	60004c51 	.word	0x60004c51
60004da4:	60004c51 	.word	0x60004c51
60004da8:	60004c51 	.word	0x60004c51
60004dac:	60004c51 	.word	0x60004c51
60004db0:	60004c51 	.word	0x60004c51
60004db4:	60004c51 	.word	0x60004c51
60004db8:	60004d0b 	.word	0x60004d0b
60004dbc:	60004c51 	.word	0x60004c51
60004dc0:	60004ea3 	.word	0x60004ea3
60004dc4:	60004eb7 	.word	0x60004eb7
60004dc8:	60004d0b 	.word	0x60004d0b
60004dcc:	60004d0b 	.word	0x60004d0b
60004dd0:	60004d0b 	.word	0x60004d0b
60004dd4:	60004c51 	.word	0x60004c51
60004dd8:	60004eb7 	.word	0x60004eb7
60004ddc:	60004c51 	.word	0x60004c51
60004de0:	60004c51 	.word	0x60004c51
60004de4:	60004c51 	.word	0x60004c51
60004de8:	60004c51 	.word	0x60004c51
60004dec:	60004f59 	.word	0x60004f59
60004df0:	60004f1f 	.word	0x60004f1f
60004df4:	60004f25 	.word	0x60004f25
60004df8:	60004c51 	.word	0x60004c51
60004dfc:	60004c51 	.word	0x60004c51
60004e00:	60004e1f 	.word	0x60004e1f
60004e04:	60004c51 	.word	0x60004c51
60004e08:	60004f1f 	.word	0x60004f1f
60004e0c:	60004c51 	.word	0x60004c51
60004e10:	60004c51 	.word	0x60004c51
60004e14:	60004f1f 	.word	0x60004f1f
			OUTC('%');
60004e18:	9903      	ldr	r1, [sp, #12]
60004e1a:	4658      	mov	r0, fp
60004e1c:	e4f2      	b.n	60004804 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
60004e1e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
60004e20:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
60004e22:	db3a      	blt.n	60004e9a <z_cbvprintf_impl+0x6ba>
				len = strnlen(bps, precision);
60004e24:	4639      	mov	r1, r7
60004e26:	4630      	mov	r0, r6
60004e28:	f00b fc5a 	bl	600106e0 <strnlen>
			bpe = bps + len;
60004e2c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
60004e2e:	2e00      	cmp	r6, #0
60004e30:	f43f af0e 	beq.w	60004c50 <z_cbvprintf_impl+0x470>
		char sign = 0;
60004e34:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
60004e38:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
60004e3c:	f013 0210 	ands.w	r2, r3, #16
60004e40:	9205      	str	r2, [sp, #20]
60004e42:	f000 8254 	beq.w	600052ee <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
60004e46:	3002      	adds	r0, #2
		if (conv->pad_fp) {
60004e48:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
60004e4c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
60004e50:	9308      	str	r3, [sp, #32]
		nj_len += conv->pad0_value;
60004e52:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
60004e54:	bf18      	it	ne
60004e56:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
60004e58:	f8cd 801c 	str.w	r8, [sp, #28]
			nj_len += conv->pad0_pre_exp;
60004e5c:	bf18      	it	ne
60004e5e:	18c0      	addne	r0, r0, r3
		if (width > 0) {
60004e60:	9b04      	ldr	r3, [sp, #16]
60004e62:	2b00      	cmp	r3, #0
60004e64:	f340 825e 	ble.w	60005324 <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
60004e68:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
60004e6c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
60004e6e:	0750      	lsls	r0, r2, #29
60004e70:	f3c2 0b80 	ubfx	fp, r2, #2, #1
			width -= (int)nj_len;
60004e74:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
60004e76:	f100 8255 	bmi.w	60005324 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
60004e7a:	0651      	lsls	r1, r2, #25
60004e7c:	f140 8245 	bpl.w	6000530a <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
60004e80:	f1b9 0f00 	cmp.w	r9, #0
60004e84:	d007      	beq.n	60004e96 <z_cbvprintf_impl+0x6b6>
						OUTC(sign);
60004e86:	9903      	ldr	r1, [sp, #12]
60004e88:	4648      	mov	r0, r9
60004e8a:	47d0      	blx	sl
60004e8c:	2800      	cmp	r0, #0
60004e8e:	f2c0 8239 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60004e92:	3501      	adds	r5, #1
						sign = 0;
60004e94:	46d9      	mov	r9, fp
					pad = '0';
60004e96:	2230      	movs	r2, #48	; 0x30
60004e98:	e238      	b.n	6000530c <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
60004e9a:	4630      	mov	r0, r6
60004e9c:	f7fd fa10 	bl	600022c0 <strlen>
60004ea0:	e7c4      	b.n	60004e2c <z_cbvprintf_impl+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
60004ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
60004ea4:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
60004ea8:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
60004eac:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
60004eae:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
60004eb0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (sign != 0) {
60004eb4:	e7c0      	b.n	60004e38 <z_cbvprintf_impl+0x658>
			if (conv->flag_plus) {
60004eb6:	9b07      	ldr	r3, [sp, #28]
60004eb8:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
60004eba:	bf54      	ite	pl
60004ebc:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
60004ec0:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
60004ec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
60004ec8:	bf58      	it	pl
60004eca:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
60004ece:	2b00      	cmp	r3, #0
60004ed0:	da06      	bge.n	60004ee0 <z_cbvprintf_impl+0x700>
				value->uint = (uint_value_type)-sint;
60004ed2:	4252      	negs	r2, r2
				sign = '-';
60004ed4:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
60004ed8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60004edc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
60004ee0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
60004ee4:	aa12      	add	r2, sp, #72	; 0x48
60004ee6:	9300      	str	r3, [sp, #0]
60004ee8:	ab17      	add	r3, sp, #92	; 0x5c
60004eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
60004eee:	f7ff fc2b 	bl	60004748 <encode_uint>
60004ef2:	4606      	mov	r6, r0
			if (precision >= 0) {
60004ef4:	2f00      	cmp	r7, #0
60004ef6:	db0c      	blt.n	60004f12 <z_cbvprintf_impl+0x732>
				size_t len = bpe - bps;
60004ef8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
				conv->flag_zero = false;
60004efc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
60004f00:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
60004f02:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
60004f06:	429f      	cmp	r7, r3
				conv->flag_zero = false;
60004f08:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
60004f0c:	d901      	bls.n	60004f12 <z_cbvprintf_impl+0x732>
					conv->pad0_value = precision - (int)len;
60004f0e:	1afb      	subs	r3, r7, r3
60004f10:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
60004f12:	2e00      	cmp	r6, #0
60004f14:	f43f ae9c 	beq.w	60004c50 <z_cbvprintf_impl+0x470>
60004f18:	f10d 0775 	add.w	r7, sp, #117	; 0x75
60004f1c:	e05b      	b.n	60004fd6 <z_cbvprintf_impl+0x7f6>
		switch (conv->specifier) {
60004f1e:	f04f 0900 	mov.w	r9, #0
60004f22:	e7dd      	b.n	60004ee0 <z_cbvprintf_impl+0x700>
			if (value->ptr != NULL) {
60004f24:	9810      	ldr	r0, [sp, #64]	; 0x40
60004f26:	2800      	cmp	r0, #0
60004f28:	f000 81dc 	beq.w	600052e4 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
60004f2c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
60004f30:	aa12      	add	r2, sp, #72	; 0x48
60004f32:	2100      	movs	r1, #0
		char sign = 0;
60004f34:	f04f 0900 	mov.w	r9, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
60004f38:	9300      	str	r3, [sp, #0]
60004f3a:	ab17      	add	r3, sp, #92	; 0x5c
60004f3c:	f7ff fc04 	bl	60004748 <encode_uint>
				conv->altform_0c = true;
60004f40:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
60004f44:	4606      	mov	r6, r0
				conv->altform_0c = true;
60004f46:	f003 03ef 	and.w	r3, r3, #239	; 0xef
60004f4a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
60004f4e:	f043 0310 	orr.w	r3, r3, #16
60004f52:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
60004f56:	e7cd      	b.n	60004ef4 <z_cbvprintf_impl+0x714>
				store_count(conv, value->ptr, count);
60004f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
60004f5a:	2907      	cmp	r1, #7
60004f5c:	f63f ae78 	bhi.w	60004c50 <z_cbvprintf_impl+0x470>
60004f60:	e8df f001 	tbb	[pc, r1]
60004f64:	0c06040c 	.word	0x0c06040c
60004f68:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
60004f6c:	701d      	strb	r5, [r3, #0]
		break;
60004f6e:	e66f      	b.n	60004c50 <z_cbvprintf_impl+0x470>
		*(short *)dp = (short)count;
60004f70:	801d      	strh	r5, [r3, #0]
		break;
60004f72:	e66d      	b.n	60004c50 <z_cbvprintf_impl+0x470>
		*(intmax_t *)dp = (intmax_t)count;
60004f74:	17ea      	asrs	r2, r5, #31
60004f76:	e9c3 5200 	strd	r5, r2, [r3]
		break;
60004f7a:	e669      	b.n	60004c50 <z_cbvprintf_impl+0x470>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
60004f7c:	601d      	str	r5, [r3, #0]
		break;
60004f7e:	e667      	b.n	60004c50 <z_cbvprintf_impl+0x470>
		*sign = '-';
60004f80:	f04f 092d 	mov.w	r9, #45	; 0x2d
60004f84:	e6ce      	b.n	60004d24 <z_cbvprintf_impl+0x544>
		*sign = '+';
60004f86:	f04f 092b 	mov.w	r9, #43	; 0x2b
60004f8a:	e6cb      	b.n	60004d24 <z_cbvprintf_impl+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
60004f8c:	f240 76ff 	movw	r6, #2047	; 0x7ff
60004f90:	42b0      	cmp	r0, r6
60004f92:	d12f      	bne.n	60004ff4 <z_cbvprintf_impl+0x814>
			if (isupper((unsigned char)c)) {
60004f94:	f10b 0301 	add.w	r3, fp, #1
60004f98:	489d      	ldr	r0, [pc, #628]	; (60005210 <z_cbvprintf_impl+0xa30>)
		if (fract == 0) {
60004f9a:	430a      	orrs	r2, r1
			if (isupper((unsigned char)c)) {
60004f9c:	b2db      	uxtb	r3, r3
60004f9e:	5cc3      	ldrb	r3, [r0, r3]
60004fa0:	f003 0303 	and.w	r3, r3, #3
		if (fract == 0) {
60004fa4:	d11e      	bne.n	60004fe4 <z_cbvprintf_impl+0x804>
			if (isupper((unsigned char)c)) {
60004fa6:	2b01      	cmp	r3, #1
60004fa8:	bf0b      	itete	eq
60004faa:	2349      	moveq	r3, #73	; 0x49
60004fac:	2369      	movne	r3, #105	; 0x69
60004fae:	214e      	moveq	r1, #78	; 0x4e
60004fb0:	216e      	movne	r1, #110	; 0x6e
60004fb2:	bf0c      	ite	eq
60004fb4:	2246      	moveq	r2, #70	; 0x46
60004fb6:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
60004fb8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		*bpe = buf;
60004fbc:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
		conv->flag_zero = false;
60004fc0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
60004fc4:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
60004fc8:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
60004fcc:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
60004fd0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
				bps = encode_float(value->dbl, conv, precision,
60004fd4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
60004fd6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
60004fd8:	f1b9 0f00 	cmp.w	r9, #0
60004fdc:	f43f af2c 	beq.w	60004e38 <z_cbvprintf_impl+0x658>
			nj_len += 1U;
60004fe0:	3001      	adds	r0, #1
60004fe2:	e729      	b.n	60004e38 <z_cbvprintf_impl+0x658>
			if (isupper((unsigned char)c)) {
60004fe4:	2b01      	cmp	r3, #1
60004fe6:	bf15      	itete	ne
60004fe8:	236e      	movne	r3, #110	; 0x6e
60004fea:	234e      	moveq	r3, #78	; 0x4e
60004fec:	2161      	movne	r1, #97	; 0x61
60004fee:	2141      	moveq	r1, #65	; 0x41
60004ff0:	461a      	mov	r2, r3
60004ff2:	e7e1      	b.n	60004fb8 <z_cbvprintf_impl+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
60004ff4:	2600      	movs	r6, #0
60004ff6:	e6a1      	b.n	60004d3c <z_cbvprintf_impl+0x55c>
				expo--;
60004ff8:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
60004ffa:	1849      	adds	r1, r1, r1
60004ffc:	4152      	adcs	r2, r2
60004ffe:	2a00      	cmp	r2, #0
60005000:	dafa      	bge.n	60004ff8 <z_cbvprintf_impl+0x818>
60005002:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
60005006:	e6af      	b.n	60004d68 <z_cbvprintf_impl+0x588>
			fract >>= 1;
60005008:	0849      	lsrs	r1, r1, #1
6000500a:	4640      	mov	r0, r8
			expo++;
6000500c:	f108 0801 	add.w	r8, r8, #1
			fract >>= 1;
60005010:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
60005014:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
60005016:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
6000501a:	d2f5      	bcs.n	60005008 <z_cbvprintf_impl+0x828>
		fract *= 5U;
6000501c:	fb0c fe02 	mul.w	lr, ip, r2
		expo++;
60005020:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
60005024:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
60005028:	3e01      	subs	r6, #1
6000502a:	2001      	movs	r0, #1
		fract *= 5U;
6000502c:	4472      	add	r2, lr
	while (expo < -2) {
6000502e:	f118 0f02 	cmn.w	r8, #2
60005032:	dbe9      	blt.n	60005008 <z_cbvprintf_impl+0x828>
60005034:	b108      	cbz	r0, 6000503a <z_cbvprintf_impl+0x85a>
60005036:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
6000503a:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
6000503e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
60005042:	dc2e      	bgt.n	600050a2 <z_cbvprintf_impl+0x8c2>
	fract >>= (4 - expo);
60005044:	f1c8 0004 	rsb	r0, r8, #4
60005048:	f108 081c 	add.w	r8, r8, #28
6000504c:	f1a0 0c20 	sub.w	ip, r0, #32
60005050:	40c2      	lsrs	r2, r0
60005052:	fa21 f300 	lsr.w	r3, r1, r0
60005056:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
6000505a:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
6000505e:	fa21 fc0c 	lsr.w	ip, r1, ip
60005062:	ea42 0208 	orr.w	r2, r2, r8
60005066:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
60005068:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
6000506a:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
6000506e:	d139      	bne.n	600050e4 <z_cbvprintf_impl+0x904>
		if (decexp < (-4 + 1) || decexp > precision) {
60005070:	1cf3      	adds	r3, r6, #3
60005072:	db01      	blt.n	60005078 <z_cbvprintf_impl+0x898>
60005074:	42b7      	cmp	r7, r6
60005076:	da2b      	bge.n	600050d0 <z_cbvprintf_impl+0x8f0>
			c += 'e' - 'g';  /* e or E */
60005078:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
6000507c:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
6000507e:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
60005082:	dd7e      	ble.n	60005182 <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
60005084:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
60005088:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
6000508a:	0680      	lsls	r0, r0, #26
6000508c:	d479      	bmi.n	60005182 <z_cbvprintf_impl+0x9a2>
6000508e:	1e3b      	subs	r3, r7, #0
60005090:	bf18      	it	ne
60005092:	2301      	movne	r3, #1
	bool prune_zero = false;
60005094:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
60005096:	f107 0801 	add.w	r8, r7, #1
6000509a:	e02d      	b.n	600050f8 <z_cbvprintf_impl+0x918>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
6000509c:	f04f 0800 	mov.w	r8, #0
600050a0:	e668      	b.n	60004d74 <z_cbvprintf_impl+0x594>
		fract += 2;
600050a2:	3202      	adds	r2, #2
		_ldiv5(&fract);
600050a4:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
600050a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
600050aa:	f106 0601 	add.w	r6, r6, #1
		fract += 2;
600050ae:	f141 0100 	adc.w	r1, r1, #0
600050b2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
600050b6:	f00d fd1a 	bl	60012aee <_ldiv5>
		decexp++;
600050ba:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
600050be:	1892      	adds	r2, r2, r2
			expo--;
600050c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
600050c4:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
600050c6:	2900      	cmp	r1, #0
600050c8:	daf9      	bge.n	600050be <z_cbvprintf_impl+0x8de>
600050ca:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
600050ce:	e7b4      	b.n	6000503a <z_cbvprintf_impl+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
600050d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
600050d4:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
600050d6:	0699      	lsls	r1, r3, #26
600050d8:	d451      	bmi.n	6000517e <z_cbvprintf_impl+0x99e>
600050da:	1e3b      	subs	r3, r7, #0
600050dc:	bf18      	it	ne
600050de:	2301      	movne	r3, #1
	bool prune_zero = false;
600050e0:	9305      	str	r3, [sp, #20]
600050e2:	e004      	b.n	600050ee <z_cbvprintf_impl+0x90e>
600050e4:	2300      	movs	r3, #0
	if (c == 'f') {
600050e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
600050ea:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
600050ec:	d1d3      	bne.n	60005096 <z_cbvprintf_impl+0x8b6>
		if (decimals < 0) {
600050ee:	eb17 0806 	adds.w	r8, r7, r6
600050f2:	f04f 0b66 	mov.w	fp, #102	; 0x66
600050f6:	d446      	bmi.n	60005186 <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
600050f8:	f1b8 0f10 	cmp.w	r8, #16
600050fc:	bfa8      	it	ge
600050fe:	f04f 0810 	movge.w	r8, #16
60005102:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
60005104:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
60005108:	900b      	str	r0, [sp, #44]	; 0x2c
6000510a:	2000      	movs	r0, #0
6000510c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
60005110:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
60005114:	f1b8 0f00 	cmp.w	r8, #0
60005118:	d138      	bne.n	6000518c <z_cbvprintf_impl+0x9ac>
	fract += round;
6000511a:	1812      	adds	r2, r2, r0
6000511c:	9908      	ldr	r1, [sp, #32]
6000511e:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
60005122:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
60005126:	d23f      	bcs.n	600051a8 <z_cbvprintf_impl+0x9c8>
	fract += round;
60005128:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
6000512c:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
6000512e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
60005132:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
60005136:	f040 80b4 	bne.w	600052a2 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
6000513a:	2e00      	cmp	r6, #0
6000513c:	dc3f      	bgt.n	600051be <z_cbvprintf_impl+0x9de>
			*buf++ = '0';
6000513e:	2130      	movs	r1, #48	; 0x30
60005140:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
60005144:	2a00      	cmp	r2, #0
60005146:	d165      	bne.n	60005214 <z_cbvprintf_impl+0xa34>
60005148:	2f00      	cmp	r7, #0
6000514a:	f340 81ac 	ble.w	600054a6 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
6000514e:	222e      	movs	r2, #46	; 0x2e
60005150:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
60005154:	b186      	cbz	r6, 60005178 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
60005156:	4272      	negs	r2, r6
			conv->pad_postdp = (conv->pad0_value > 0);
60005158:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
6000515c:	42ba      	cmp	r2, r7
6000515e:	bfa8      	it	ge
60005160:	463a      	movge	r2, r7
60005162:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
60005164:	eba7 0702 	sub.w	r7, r7, r2
60005168:	9213      	str	r2, [sp, #76]	; 0x4c
			conv->pad_postdp = (conv->pad0_value > 0);
6000516a:	bfd4      	ite	le
6000516c:	2200      	movle	r2, #0
6000516e:	2201      	movgt	r2, #1
60005170:	f362 1145 	bfi	r1, r2, #5, #1
60005174:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
60005178:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
6000517c:	e037      	b.n	600051ee <z_cbvprintf_impl+0xa0e>
	bool prune_zero = false;
6000517e:	2300      	movs	r3, #0
60005180:	e7ae      	b.n	600050e0 <z_cbvprintf_impl+0x900>
60005182:	2300      	movs	r3, #0
60005184:	e786      	b.n	60005094 <z_cbvprintf_impl+0x8b4>
			decimals = 0;
60005186:	f04f 0800 	mov.w	r8, #0
6000518a:	e7ba      	b.n	60005102 <z_cbvprintf_impl+0x922>
	*v >>= 1;
6000518c:	0840      	lsrs	r0, r0, #1
6000518e:	9209      	str	r2, [sp, #36]	; 0x24
60005190:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
60005194:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
60005198:	085b      	lsrs	r3, r3, #1
6000519a:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
6000519e:	a80e      	add	r0, sp, #56	; 0x38
600051a0:	f00d fca5 	bl	60012aee <_ldiv5>
600051a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
600051a6:	e7b3      	b.n	60005110 <z_cbvprintf_impl+0x930>
	*v >>= 1;
600051a8:	0852      	lsrs	r2, r2, #1
	_ldiv5(v);
600051aa:	a80c      	add	r0, sp, #48	; 0x30
		decexp++;
600051ac:	3601      	adds	r6, #1
	*v >>= 1;
600051ae:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
600051b2:	0849      	lsrs	r1, r1, #1
600051b4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
	_ldiv5(v);
600051b8:	f00d fc99 	bl	60012aee <_ldiv5>
		decexp++;
600051bc:	e7b6      	b.n	6000512c <z_cbvprintf_impl+0x94c>
	char *buf = bps;
600051be:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
600051c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
600051c4:	2900      	cmp	r1, #0
600051c6:	dd09      	ble.n	600051dc <z_cbvprintf_impl+0x9fc>
				*buf++ = _get_digit(&fract, &digit_count);
600051c8:	a90b      	add	r1, sp, #44	; 0x2c
600051ca:	a80c      	add	r0, sp, #48	; 0x30
600051cc:	9207      	str	r2, [sp, #28]
600051ce:	f00d fca6 	bl	60012b1e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
600051d2:	3e01      	subs	r6, #1
600051d4:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
600051d6:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
600051da:	d1f2      	bne.n	600051c2 <z_cbvprintf_impl+0x9e2>
			conv->pad0_value = decexp;
600051dc:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
600051de:	b99a      	cbnz	r2, 60005208 <z_cbvprintf_impl+0xa28>
600051e0:	2f00      	cmp	r7, #0
600051e2:	f340 815e 	ble.w	600054a2 <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
600051e6:	212e      	movs	r1, #46	; 0x2e
600051e8:	f808 1b01 	strb.w	r1, [r8], #1
600051ec:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
600051ee:	2f00      	cmp	r7, #0
600051f0:	dd19      	ble.n	60005226 <z_cbvprintf_impl+0xa46>
600051f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
600051f4:	2a00      	cmp	r2, #0
600051f6:	dd16      	ble.n	60005226 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
600051f8:	a90b      	add	r1, sp, #44	; 0x2c
600051fa:	a80c      	add	r0, sp, #48	; 0x30
600051fc:	f00d fc8f 	bl	60012b1e <_get_digit>
		precision--;
60005200:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
60005202:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
60005206:	e7f2      	b.n	600051ee <z_cbvprintf_impl+0xa0e>
			*buf++ = '.';
60005208:	222e      	movs	r2, #46	; 0x2e
6000520a:	f808 2b01 	strb.w	r2, [r8], #1
6000520e:	e7ed      	b.n	600051ec <z_cbvprintf_impl+0xa0c>
60005210:	60016b00 	.word	0x60016b00
60005214:	222e      	movs	r2, #46	; 0x2e
60005216:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
6000521a:	2e00      	cmp	r6, #0
6000521c:	d0ac      	beq.n	60005178 <z_cbvprintf_impl+0x998>
6000521e:	2f00      	cmp	r7, #0
60005220:	dc99      	bgt.n	60005156 <z_cbvprintf_impl+0x976>
			*buf++ = '.';
60005222:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
60005226:	9b05      	ldr	r3, [sp, #20]
60005228:	2b00      	cmp	r3, #0
6000522a:	d14e      	bne.n	600052ca <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
6000522c:	9714      	str	r7, [sp, #80]	; 0x50
6000522e:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
60005230:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
60005234:	2a45      	cmp	r2, #69	; 0x45
60005236:	d123      	bne.n	60005280 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
60005238:	2e00      	cmp	r6, #0
		*buf++ = c;
6000523a:	f887 b000 	strb.w	fp, [r7]
			decexp = -decexp;
6000523e:	bfba      	itte	lt
60005240:	4276      	neglt	r6, r6
			*buf++ = '-';
60005242:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
60005244:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
60005246:	2e63      	cmp	r6, #99	; 0x63
60005248:	707b      	strb	r3, [r7, #1]
			*buf++ = (decexp / 100) + '0';
6000524a:	bfc9      	itett	gt
6000524c:	2164      	movgt	r1, #100	; 0x64
			*buf++ = '-';
6000524e:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
60005250:	1cfa      	addgt	r2, r7, #3
60005252:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
60005256:	bfc8      	it	gt
60005258:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
6000525c:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
60005260:	bfc8      	it	gt
60005262:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
60005266:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = (decexp / 100) + '0';
6000526a:	bfc8      	it	gt
6000526c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = (decexp / 10) + '0';
6000526e:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
60005272:	fb01 6313 	mls	r3, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
60005276:	4617      	mov	r7, r2
		*buf++ = (decexp % 10) + '0';
60005278:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
6000527a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
6000527e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
60005280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
60005282:	2b00      	cmp	r3, #0
60005284:	dc2c      	bgt.n	600052e0 <z_cbvprintf_impl+0xb00>
60005286:	9b14      	ldr	r3, [sp, #80]	; 0x50
60005288:	2b00      	cmp	r3, #0
6000528a:	bfd4      	ite	le
6000528c:	2300      	movle	r3, #0
6000528e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
60005290:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60005294:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
60005298:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
6000529a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
6000529e:	703b      	strb	r3, [r7, #0]
	return bps;
600052a0:	e698      	b.n	60004fd4 <z_cbvprintf_impl+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
600052a2:	a90b      	add	r1, sp, #44	; 0x2c
600052a4:	a80c      	add	r0, sp, #48	; 0x30
600052a6:	9207      	str	r2, [sp, #28]
600052a8:	f00d fc39 	bl	60012b1e <_get_digit>
		if (*buf++ != '0') {
600052ac:	9a07      	ldr	r2, [sp, #28]
600052ae:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
600052b0:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
600052b4:	bf18      	it	ne
600052b6:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
600052ba:	b912      	cbnz	r2, 600052c2 <z_cbvprintf_impl+0xae2>
600052bc:	2f00      	cmp	r7, #0
600052be:	f340 80f2 	ble.w	600054a6 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
600052c2:	222e      	movs	r2, #46	; 0x2e
600052c4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
600052c8:	e756      	b.n	60005178 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
600052ca:	4647      	mov	r7, r8
600052cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
600052d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
600052d4:	2a30      	cmp	r2, #48	; 0x30
600052d6:	d0f8      	beq.n	600052ca <z_cbvprintf_impl+0xaea>
600052d8:	2a2e      	cmp	r2, #46	; 0x2e
600052da:	bf08      	it	eq
600052dc:	4647      	moveq	r7, r8
600052de:	e7a7      	b.n	60005230 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
600052e0:	2301      	movs	r3, #1
600052e2:	e7d5      	b.n	60005290 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
600052e4:	4f71      	ldr	r7, [pc, #452]	; (600054ac <z_cbvprintf_impl+0xccc>)
		char sign = 0;
600052e6:	4681      	mov	r9, r0
		size_t nj_len = (bpe - bps);
600052e8:	2005      	movs	r0, #5
			bps = "(nil)";
600052ea:	1f7e      	subs	r6, r7, #5
600052ec:	e5a4      	b.n	60004e38 <z_cbvprintf_impl+0x658>
		} else if (conv->altform_0) {
600052ee:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
600052f0:	bf48      	it	mi
600052f2:	3001      	addmi	r0, #1
600052f4:	e5a8      	b.n	60004e48 <z_cbvprintf_impl+0x668>
					OUTC(pad);
600052f6:	4610      	mov	r0, r2
600052f8:	9209      	str	r2, [sp, #36]	; 0x24
600052fa:	9903      	ldr	r1, [sp, #12]
600052fc:	47d0      	blx	sl
600052fe:	2800      	cmp	r0, #0
60005300:	9a09      	ldr	r2, [sp, #36]	; 0x24
60005302:	da05      	bge.n	60005310 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
60005304:	b01f      	add	sp, #124	; 0x7c
60005306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
6000530a:	2220      	movs	r2, #32
					pad = '0';
6000530c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
60005310:	4659      	mov	r1, fp
60005312:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
60005316:	2900      	cmp	r1, #0
60005318:	dced      	bgt.n	600052f6 <z_cbvprintf_impl+0xb16>
6000531a:	9b04      	ldr	r3, [sp, #16]
6000531c:	f8cd b010 	str.w	fp, [sp, #16]
60005320:	442b      	add	r3, r5
60005322:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
60005324:	f1b9 0f00 	cmp.w	r9, #0
60005328:	d005      	beq.n	60005336 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
6000532a:	9903      	ldr	r1, [sp, #12]
6000532c:	4648      	mov	r0, r9
6000532e:	47d0      	blx	sl
60005330:	2800      	cmp	r0, #0
60005332:	dbe7      	blt.n	60005304 <z_cbvprintf_impl+0xb24>
60005334:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
60005336:	9b08      	ldr	r3, [sp, #32]
60005338:	2b00      	cmp	r3, #0
6000533a:	d077      	beq.n	6000542c <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
6000533c:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
60005340:	2b00      	cmp	r3, #0
60005342:	db28      	blt.n	60005396 <z_cbvprintf_impl+0xbb6>
60005344:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
60005346:	f8df 9168 	ldr.w	r9, [pc, #360]	; 600054b0 <z_cbvprintf_impl+0xcd0>
6000534a:	7818      	ldrb	r0, [r3, #0]
6000534c:	469b      	mov	fp, r3
6000534e:	3301      	adds	r3, #1
60005350:	f819 2000 	ldrb.w	r2, [r9, r0]
60005354:	0752      	lsls	r2, r2, #29
60005356:	d43f      	bmi.n	600053d8 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
60005358:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
6000535c:	1bae      	subs	r6, r5, r6
6000535e:	0698      	lsls	r0, r3, #26
60005360:	445e      	add	r6, fp
60005362:	d407      	bmi.n	60005374 <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
60005364:	4642      	mov	r2, r8
60005366:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
6000536a:	2a00      	cmp	r2, #0
6000536c:	dc3b      	bgt.n	600053e6 <z_cbvprintf_impl+0xc06>
6000536e:	9b07      	ldr	r3, [sp, #28]
60005370:	4433      	add	r3, r6
60005372:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
60005374:	f89b 0000 	ldrb.w	r0, [fp]
60005378:	282e      	cmp	r0, #46	; 0x2e
6000537a:	d10a      	bne.n	60005392 <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
6000537c:	9903      	ldr	r1, [sp, #12]
6000537e:	47d0      	blx	sl
						OUTC('0');
60005380:	2800      	cmp	r0, #0
60005382:	dbbf      	blt.n	60005304 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
60005384:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
60005388:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
6000538c:	dc31      	bgt.n	600053f2 <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
6000538e:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
60005392:	465d      	mov	r5, fp
60005394:	e038      	b.n	60005408 <z_cbvprintf_impl+0xc28>
60005396:	46b1      	mov	r9, r6
				while (*cp != 'p') {
60005398:	f899 0000 	ldrb.w	r0, [r9]
6000539c:	46c8      	mov	r8, r9
6000539e:	f109 0901 	add.w	r9, r9, #1
600053a2:	2870      	cmp	r0, #112	; 0x70
600053a4:	d113      	bne.n	600053ce <z_cbvprintf_impl+0xbee>
600053a6:	1bae      	subs	r6, r5, r6
600053a8:	4446      	add	r6, r8
			while (pad_len-- > 0) {
600053aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
600053ac:	4435      	add	r5, r6
600053ae:	1bab      	subs	r3, r5, r6
600053b0:	2b00      	cmp	r3, #0
600053b2:	dc33      	bgt.n	6000541c <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
600053b4:	463b      	mov	r3, r7
600053b6:	4642      	mov	r2, r8
600053b8:	9903      	ldr	r1, [sp, #12]
600053ba:	4650      	mov	r0, sl
600053bc:	f00d fbc6 	bl	60012b4c <outs>
600053c0:	2800      	cmp	r0, #0
600053c2:	db9f      	blt.n	60005304 <z_cbvprintf_impl+0xb24>
600053c4:	4430      	add	r0, r6
600053c6:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
600053c8:	4605      	mov	r5, r0
600053ca:	4406      	add	r6, r0
600053cc:	e064      	b.n	60005498 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
600053ce:	9903      	ldr	r1, [sp, #12]
600053d0:	47d0      	blx	sl
600053d2:	2800      	cmp	r0, #0
600053d4:	dae0      	bge.n	60005398 <z_cbvprintf_impl+0xbb8>
600053d6:	e795      	b.n	60005304 <z_cbvprintf_impl+0xb24>
600053d8:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
600053da:	9903      	ldr	r1, [sp, #12]
600053dc:	47d0      	blx	sl
600053de:	2800      	cmp	r0, #0
600053e0:	9b05      	ldr	r3, [sp, #20]
600053e2:	dab2      	bge.n	6000534a <z_cbvprintf_impl+0xb6a>
600053e4:	e78e      	b.n	60005304 <z_cbvprintf_impl+0xb24>
						OUTC('0');
600053e6:	9903      	ldr	r1, [sp, #12]
600053e8:	2030      	movs	r0, #48	; 0x30
600053ea:	47d0      	blx	sl
600053ec:	2800      	cmp	r0, #0
600053ee:	dab9      	bge.n	60005364 <z_cbvprintf_impl+0xb84>
600053f0:	e788      	b.n	60005304 <z_cbvprintf_impl+0xb24>
						OUTC('0');
600053f2:	9903      	ldr	r1, [sp, #12]
600053f4:	2030      	movs	r0, #48	; 0x30
600053f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
600053fa:	47d0      	blx	sl
600053fc:	e7c0      	b.n	60005380 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
600053fe:	9903      	ldr	r1, [sp, #12]
60005400:	47d0      	blx	sl
60005402:	2800      	cmp	r0, #0
60005404:	f6ff af7e 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
60005408:	7828      	ldrb	r0, [r5, #0]
6000540a:	46a8      	mov	r8, r5
6000540c:	3501      	adds	r5, #1
6000540e:	f819 3000 	ldrb.w	r3, [r9, r0]
60005412:	0759      	lsls	r1, r3, #29
60005414:	d4f3      	bmi.n	600053fe <z_cbvprintf_impl+0xc1e>
60005416:	eba6 060b 	sub.w	r6, r6, fp
6000541a:	e7c5      	b.n	600053a8 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
6000541c:	9903      	ldr	r1, [sp, #12]
6000541e:	2030      	movs	r0, #48	; 0x30
60005420:	47d0      	blx	sl
60005422:	2800      	cmp	r0, #0
60005424:	f6ff af6e 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60005428:	3601      	adds	r6, #1
6000542a:	e7c0      	b.n	600053ae <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
6000542c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
60005430:	06da      	lsls	r2, r3, #27
60005432:	d401      	bmi.n	60005438 <z_cbvprintf_impl+0xc58>
60005434:	071b      	lsls	r3, r3, #28
60005436:	d506      	bpl.n	60005446 <z_cbvprintf_impl+0xc66>
				OUTC('0');
60005438:	9903      	ldr	r1, [sp, #12]
6000543a:	2030      	movs	r0, #48	; 0x30
6000543c:	47d0      	blx	sl
6000543e:	2800      	cmp	r0, #0
60005440:	f6ff af60 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60005444:	3501      	adds	r5, #1
			if (conv->altform_0c) {
60005446:	9b05      	ldr	r3, [sp, #20]
60005448:	b13b      	cbz	r3, 6000545a <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
6000544a:	9903      	ldr	r1, [sp, #12]
6000544c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
60005450:	47d0      	blx	sl
60005452:	2800      	cmp	r0, #0
60005454:	f6ff af56 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60005458:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
6000545a:	44a8      	add	r8, r5
6000545c:	e006      	b.n	6000546c <z_cbvprintf_impl+0xc8c>
				OUTC('0');
6000545e:	9903      	ldr	r1, [sp, #12]
60005460:	2030      	movs	r0, #48	; 0x30
60005462:	47d0      	blx	sl
60005464:	2800      	cmp	r0, #0
60005466:	f6ff af4d 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
6000546a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
6000546c:	eba8 0305 	sub.w	r3, r8, r5
60005470:	2b00      	cmp	r3, #0
60005472:	dcf4      	bgt.n	6000545e <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
60005474:	463b      	mov	r3, r7
60005476:	4632      	mov	r2, r6
60005478:	9903      	ldr	r1, [sp, #12]
6000547a:	4650      	mov	r0, sl
6000547c:	f00d fb66 	bl	60012b4c <outs>
60005480:	2800      	cmp	r0, #0
60005482:	f6ff af3f 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60005486:	4428      	add	r0, r5
60005488:	e79d      	b.n	600053c6 <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
6000548a:	9903      	ldr	r1, [sp, #12]
6000548c:	2020      	movs	r0, #32
6000548e:	47d0      	blx	sl
60005490:	2800      	cmp	r0, #0
60005492:	f6ff af37 	blt.w	60005304 <z_cbvprintf_impl+0xb24>
60005496:	3501      	adds	r5, #1
		while (width > 0) {
60005498:	1b73      	subs	r3, r6, r5
6000549a:	2b00      	cmp	r3, #0
6000549c:	dcf5      	bgt.n	6000548a <z_cbvprintf_impl+0xcaa>
6000549e:	f7ff bbd7 	b.w	60004c50 <z_cbvprintf_impl+0x470>
			decexp = 0;
600054a2:	4616      	mov	r6, r2
600054a4:	e6bf      	b.n	60005226 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
600054a6:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
600054aa:	e6bc      	b.n	60005226 <z_cbvprintf_impl+0xa46>
600054ac:	60017124 	.word	0x60017124
600054b0:	60016b01 	.word	0x60016b01

600054b4 <ring_buf_put>:

	return 0;
}

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
600054b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
600054b8:	4680      	mov	r8, r0
600054ba:	460e      	mov	r6, r1
600054bc:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
600054be:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
600054c0:	462a      	mov	r2, r5
600054c2:	a901      	add	r1, sp, #4
600054c4:	4640      	mov	r0, r8
600054c6:	f00d fb58 	bl	60012b7a <ring_buf_put_claim>
600054ca:	4604      	mov	r4, r0
600054cc:	4602      	mov	r2, r0
600054ce:	4631      	mov	r1, r6
600054d0:	9801      	ldr	r0, [sp, #4]
		memcpy(dst, data, partial_size);
		total_size += partial_size;
600054d2:	4427      	add	r7, r4
600054d4:	f7fd ff70 	bl	600033b8 <memcpy>
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
600054d8:	1b2d      	subs	r5, r5, r4
		data += partial_size;
600054da:	4426      	add	r6, r4
	} while (size && partial_size);
600054dc:	d001      	beq.n	600054e2 <ring_buf_put+0x2e>
600054de:	2c00      	cmp	r4, #0
600054e0:	d1ee      	bne.n	600054c0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
600054e2:	4639      	mov	r1, r7
600054e4:	4640      	mov	r0, r8
600054e6:	f00d fb68 	bl	60012bba <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
600054ea:	b148      	cbz	r0, 60005500 <ring_buf_put+0x4c>
600054ec:	4906      	ldr	r1, [pc, #24]	; (60005508 <ring_buf_put+0x54>)
600054ee:	2349      	movs	r3, #73	; 0x49
600054f0:	4806      	ldr	r0, [pc, #24]	; (6000550c <ring_buf_put+0x58>)
600054f2:	4a07      	ldr	r2, [pc, #28]	; (60005510 <ring_buf_put+0x5c>)
600054f4:	f00d fbb1 	bl	60012c5a <assert_print>
600054f8:	2149      	movs	r1, #73	; 0x49
600054fa:	4805      	ldr	r0, [pc, #20]	; (60005510 <ring_buf_put+0x5c>)
600054fc:	f00d fba6 	bl	60012c4c <assert_post_action>
	ARG_UNUSED(err);

	return total_size;
}
60005500:	4638      	mov	r0, r7
60005502:	b002      	add	sp, #8
60005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60005508:	6001714d 	.word	0x6001714d
6000550c:	60016dfb 	.word	0x60016dfb
60005510:	60017125 	.word	0x60017125

60005514 <ring_buf_get>:

	return 0;
}

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
60005514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
60005518:	4680      	mov	r8, r0
6000551a:	460d      	mov	r5, r1
6000551c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
6000551e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
60005520:	4632      	mov	r2, r6
60005522:	a901      	add	r1, sp, #4
60005524:	4640      	mov	r0, r8
60005526:	f00d fb5d 	bl	60012be4 <ring_buf_get_claim>
6000552a:	4604      	mov	r4, r0
		if (data) {
6000552c:	b12d      	cbz	r5, 6000553a <ring_buf_get+0x26>
6000552e:	4602      	mov	r2, r0
60005530:	4628      	mov	r0, r5
			memcpy(data, src, partial_size);
			data += partial_size;
60005532:	4425      	add	r5, r4
60005534:	9901      	ldr	r1, [sp, #4]
60005536:	f7fd ff3f 	bl	600033b8 <memcpy>
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
6000553a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
6000553c:	4427      	add	r7, r4
	} while (size && partial_size);
6000553e:	d001      	beq.n	60005544 <ring_buf_get+0x30>
60005540:	2c00      	cmp	r4, #0
60005542:	d1ed      	bne.n	60005520 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
60005544:	4639      	mov	r1, r7
60005546:	4640      	mov	r0, r8
60005548:	f00d fb6b 	bl	60012c22 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
6000554c:	b148      	cbz	r0, 60005562 <ring_buf_get+0x4e>
6000554e:	4907      	ldr	r1, [pc, #28]	; (6000556c <ring_buf_get+0x58>)
60005550:	238e      	movs	r3, #142	; 0x8e
60005552:	4807      	ldr	r0, [pc, #28]	; (60005570 <ring_buf_get+0x5c>)
60005554:	4a07      	ldr	r2, [pc, #28]	; (60005574 <ring_buf_get+0x60>)
60005556:	f00d fb80 	bl	60012c5a <assert_print>
6000555a:	218e      	movs	r1, #142	; 0x8e
6000555c:	4805      	ldr	r0, [pc, #20]	; (60005574 <ring_buf_get+0x60>)
6000555e:	f00d fb75 	bl	60012c4c <assert_post_action>
	ARG_UNUSED(err);

	return total_size;
}
60005562:	4638      	mov	r0, r7
60005564:	b002      	add	sp, #8
60005566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
6000556a:	bf00      	nop
6000556c:	6001714d 	.word	0x6001714d
60005570:	60016dfb 	.word	0x60016dfb
60005574:	60017125 	.word	0x60017125

60005578 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
60005578:	b538      	push	{r3, r4, r5, lr}
6000557a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
6000557c:	2220      	movs	r2, #32
6000557e:	2100      	movs	r1, #0
60005580:	4604      	mov	r4, r0
60005582:	f00b f83d 	bl	60010600 <memset>
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
60005586:	68eb      	ldr	r3, [r5, #12]
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
60005588:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
6000558a:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
6000558c:	68ab      	ldr	r3, [r5, #8]
6000558e:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
60005590:	682b      	ldr	r3, [r5, #0]
60005592:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
60005594:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
60005596:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
60005598:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
6000559a:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
6000559c:	b123      	cbz	r3, 600055a8 <mpsc_pbuf_init+0x30>
6000559e:	1e59      	subs	r1, r3, #1
600055a0:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
600055a2:	bf08      	it	eq
600055a4:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
600055a8:	6122      	str	r2, [r4, #16]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
600055aa:	2201      	movs	r2, #1
600055ac:	2100      	movs	r1, #0
600055ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
600055b2:	f00f f84e 	bl	60014652 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
600055b6:	b148      	cbz	r0, 600055cc <mpsc_pbuf_init+0x54>
600055b8:	4905      	ldr	r1, [pc, #20]	; (600055d0 <mpsc_pbuf_init+0x58>)
600055ba:	232e      	movs	r3, #46	; 0x2e
600055bc:	4805      	ldr	r0, [pc, #20]	; (600055d4 <mpsc_pbuf_init+0x5c>)
600055be:	4a06      	ldr	r2, [pc, #24]	; (600055d8 <mpsc_pbuf_init+0x60>)
600055c0:	f00d fb4b 	bl	60012c5a <assert_print>
600055c4:	212e      	movs	r1, #46	; 0x2e
600055c6:	4804      	ldr	r0, [pc, #16]	; (600055d8 <mpsc_pbuf_init+0x60>)
600055c8:	f00d fb40 	bl	60012c4c <assert_post_action>
	ARG_UNUSED(err);
}
600055cc:	bd38      	pop	{r3, r4, r5, pc}
600055ce:	bf00      	nop
600055d0:	6001714d 	.word	0x6001714d
600055d4:	60016dfb 	.word	0x60016dfb
600055d8:	60017156 	.word	0x60017156

600055dc <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
600055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600055e0:	b089      	sub	sp, #36	; 0x24
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
600055e2:	2700      	movs	r7, #0
{
600055e4:	4604      	mov	r4, r0
600055e6:	4688      	mov	r8, r1

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
600055e8:	46ba      	mov	sl, r7
	union mpsc_pbuf_generic *dropped_item = NULL;
600055ea:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
600055ec:	9707      	str	r7, [sp, #28]
{
600055ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (wlen > (buffer->size)) {
600055f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
600055f4:	428b      	cmp	r3, r1
600055f6:	d353      	bcc.n	600056a0 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
600055f8:	f100 0614 	add.w	r6, r0, #20
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
600055fc:	f04f 0310 	mov.w	r3, #16
60005600:	f3ef 8b11 	mrs	fp, BASEPRI
60005604:	f383 8812 	msr	BASEPRI_MAX, r3
60005608:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000560c:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
6000560e:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60005610:	f007 ff92 	bl	6000d538 <z_spin_lock_valid>
60005614:	b958      	cbnz	r0, 6000562e <mpsc_pbuf_alloc+0x52>
60005616:	2394      	movs	r3, #148	; 0x94
60005618:	4a4a      	ldr	r2, [pc, #296]	; (60005744 <mpsc_pbuf_alloc+0x168>)
6000561a:	494b      	ldr	r1, [pc, #300]	; (60005748 <mpsc_pbuf_alloc+0x16c>)
6000561c:	484b      	ldr	r0, [pc, #300]	; (6000574c <mpsc_pbuf_alloc+0x170>)
6000561e:	f00d fb1c 	bl	60012c5a <assert_print>
60005622:	4631      	mov	r1, r6
60005624:	484a      	ldr	r0, [pc, #296]	; (60005750 <mpsc_pbuf_alloc+0x174>)
60005626:	f00d fb18 	bl	60012c5a <assert_print>
6000562a:	2194      	movs	r1, #148	; 0x94
6000562c:	e05e      	b.n	600056ec <mpsc_pbuf_alloc+0x110>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
6000562e:	4630      	mov	r0, r6
60005630:	f007 ff9e 	bl	6000d570 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
60005634:	9a07      	ldr	r2, [sp, #28]
60005636:	b12a      	cbz	r2, 60005644 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
60005638:	4639      	mov	r1, r7
6000563a:	4620      	mov	r0, r4
6000563c:	f00d fbec 	bl	60012e18 <post_drop_action>
			tmp_wr_idx_shift = 0;
60005640:	2300      	movs	r3, #0
60005642:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
60005644:	a906      	add	r1, sp, #24
60005646:	4620      	mov	r0, r4
60005648:	f00d fb14 	bl	60012c74 <free_space>

		if (free_wlen >= wlen) {
6000564c:	9906      	ldr	r1, [sp, #24]
		wrap = free_space(buffer, &free_wlen);
6000564e:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
60005650:	4541      	cmp	r1, r8
60005652:	d32e      	bcc.n	600056b2 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
60005654:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60005656:	4620      	mov	r0, r4
			item =
60005658:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
6000565a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
6000565e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
60005662:	f021 0103 	bic.w	r1, r1, #3
60005666:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
6000566a:	4642      	mov	r2, r8
6000566c:	6821      	ldr	r1, [r4, #0]
6000566e:	f00d fb25 	bl	60012cbc <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60005672:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60005674:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60005676:	4298      	cmp	r0, r3
60005678:	d016      	beq.n	600056a8 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
6000567a:	2500      	movs	r5, #0
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000567c:	4630      	mov	r0, r6
6000567e:	f007 ff69 	bl	6000d554 <z_spin_unlock_valid>
60005682:	b340      	cbz	r0, 600056d6 <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
60005684:	f389 8811 	msr	BASEPRI, r9
60005688:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
6000568c:	9905      	ldr	r1, [sp, #20]
6000568e:	b129      	cbz	r1, 6000569c <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
60005690:	69a2      	ldr	r2, [r4, #24]
60005692:	b10a      	cbz	r2, 60005698 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
60005694:	4620      	mov	r0, r4
60005696:	4790      	blx	r2
			}
			dropped_item = NULL;
60005698:	2300      	movs	r3, #0
6000569a:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
6000569c:	2d00      	cmp	r5, #0
6000569e:	d1ad      	bne.n	600055fc <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
600056a0:	4650      	mov	r0, sl
600056a2:	b009      	add	sp, #36	; 0x24
600056a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
600056a8:	6923      	ldr	r3, [r4, #16]
600056aa:	f043 0308 	orr.w	r3, r3, #8
600056ae:	6123      	str	r3, [r4, #16]
600056b0:	e7e3      	b.n	6000567a <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
600056b2:	b118      	cbz	r0, 600056bc <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
600056b4:	4620      	mov	r0, r4
600056b6:	f00d fb1b 	bl	60012cf0 <add_skip_item>
			cont = true;
600056ba:	e7df      	b.n	6000567c <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
600056bc:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
600056c0:	4313      	orrs	r3, r2
600056c2:	d036      	beq.n	60005732 <mpsc_pbuf_alloc+0x156>
600056c4:	9103      	str	r1, [sp, #12]
600056c6:	f00e ffa8 	bl	6001461a <k_is_in_isr>
600056ca:	9903      	ldr	r1, [sp, #12]
600056cc:	bb88      	cbnz	r0, 60005732 <mpsc_pbuf_alloc+0x156>
600056ce:	4630      	mov	r0, r6
600056d0:	f007 ff40 	bl	6000d554 <z_spin_unlock_valid>
600056d4:	b968      	cbnz	r0, 600056f2 <mpsc_pbuf_alloc+0x116>
600056d6:	23c2      	movs	r3, #194	; 0xc2
600056d8:	4a1a      	ldr	r2, [pc, #104]	; (60005744 <mpsc_pbuf_alloc+0x168>)
600056da:	491e      	ldr	r1, [pc, #120]	; (60005754 <mpsc_pbuf_alloc+0x178>)
600056dc:	481b      	ldr	r0, [pc, #108]	; (6000574c <mpsc_pbuf_alloc+0x170>)
600056de:	f00d fabc 	bl	60012c5a <assert_print>
600056e2:	4631      	mov	r1, r6
600056e4:	481c      	ldr	r0, [pc, #112]	; (60005758 <mpsc_pbuf_alloc+0x17c>)
600056e6:	f00d fab8 	bl	60012c5a <assert_print>
600056ea:	21c2      	movs	r1, #194	; 0xc2
600056ec:	4815      	ldr	r0, [pc, #84]	; (60005744 <mpsc_pbuf_alloc+0x168>)
600056ee:	f00d faad 	bl	60012c4c <assert_post_action>
600056f2:	f38b 8811 	msr	BASEPRI, fp
600056f6:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
600056fa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
600056fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
60005702:	f008 fa47 	bl	6000db94 <z_impl_k_sem_take>
60005706:	4605      	mov	r5, r0
	__asm__ volatile(
60005708:	f04f 0310 	mov.w	r3, #16
6000570c:	f3ef 8911 	mrs	r9, BASEPRI
60005710:	f383 8812 	msr	BASEPRI_MAX, r3
60005714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60005718:	4630      	mov	r0, r6
6000571a:	f007 ff0d 	bl	6000d538 <z_spin_lock_valid>
6000571e:	2800      	cmp	r0, #0
60005720:	f43f af79 	beq.w	60005616 <mpsc_pbuf_alloc+0x3a>
			cont = (err == 0) ? true : false;
60005724:	fab5 f585 	clz	r5, r5
	z_spin_lock_set_owner(l);
60005728:	4630      	mov	r0, r6
6000572a:	f007 ff21 	bl	6000d570 <z_spin_lock_set_owner>
6000572e:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
60005730:	e7a4      	b.n	6000567c <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
60005732:	ab07      	add	r3, sp, #28
60005734:	aa05      	add	r2, sp, #20
60005736:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
60005738:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
6000573a:	f00d faf6 	bl	60012d2a <drop_item_locked>
6000573e:	4605      	mov	r5, r0
60005740:	e79c      	b.n	6000567c <mpsc_pbuf_alloc+0xa0>
60005742:	bf00      	nop
60005744:	6001717c 	.word	0x6001717c
60005748:	600171a9 	.word	0x600171a9
6000574c:	60016dfb 	.word	0x60016dfb
60005750:	600171be 	.word	0x600171be
60005754:	600171d6 	.word	0x600171d6
60005758:	600171ed 	.word	0x600171ed

6000575c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
6000575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60005760:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
60005762:	69c3      	ldr	r3, [r0, #28]
60005764:	4608      	mov	r0, r1
{
60005766:	460e      	mov	r6, r1

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
60005768:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
6000576c:	4798      	blx	r3
6000576e:	4607      	mov	r7, r0
60005770:	f04f 0310 	mov.w	r3, #16
60005774:	f3ef 8811 	mrs	r8, BASEPRI
60005778:	f383 8812 	msr	BASEPRI_MAX, r3
6000577c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60005780:	4628      	mov	r0, r5
60005782:	f007 fed9 	bl	6000d538 <z_spin_lock_valid>
60005786:	b968      	cbnz	r0, 600057a4 <mpsc_pbuf_commit+0x48>
60005788:	2394      	movs	r3, #148	; 0x94
6000578a:	4a19      	ldr	r2, [pc, #100]	; (600057f0 <mpsc_pbuf_commit+0x94>)
6000578c:	4919      	ldr	r1, [pc, #100]	; (600057f4 <mpsc_pbuf_commit+0x98>)
6000578e:	481a      	ldr	r0, [pc, #104]	; (600057f8 <mpsc_pbuf_commit+0x9c>)
60005790:	f00d fa63 	bl	60012c5a <assert_print>
60005794:	4629      	mov	r1, r5
60005796:	4819      	ldr	r0, [pc, #100]	; (600057fc <mpsc_pbuf_commit+0xa0>)
60005798:	f00d fa5f 	bl	60012c5a <assert_print>
6000579c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000579e:	4814      	ldr	r0, [pc, #80]	; (600057f0 <mpsc_pbuf_commit+0x94>)
600057a0:	f00d fa54 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
600057a4:	4628      	mov	r0, r5
600057a6:	f007 fee3 	bl	6000d570 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
600057aa:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
600057ac:	463a      	mov	r2, r7
600057ae:	4620      	mov	r0, r4
	item->hdr.valid = 1;
600057b0:	f043 0301 	orr.w	r3, r3, #1
600057b4:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
600057b6:	6861      	ldr	r1, [r4, #4]
600057b8:	f00d fa80 	bl	60012cbc <idx_inc>
600057bc:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
600057be:	4620      	mov	r0, r4
600057c0:	f00d fb45 	bl	60012e4e <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600057c4:	4628      	mov	r0, r5
600057c6:	f007 fec5 	bl	6000d554 <z_spin_unlock_valid>
600057ca:	b958      	cbnz	r0, 600057e4 <mpsc_pbuf_commit+0x88>
600057cc:	23c2      	movs	r3, #194	; 0xc2
600057ce:	4a08      	ldr	r2, [pc, #32]	; (600057f0 <mpsc_pbuf_commit+0x94>)
600057d0:	490b      	ldr	r1, [pc, #44]	; (60005800 <mpsc_pbuf_commit+0xa4>)
600057d2:	4809      	ldr	r0, [pc, #36]	; (600057f8 <mpsc_pbuf_commit+0x9c>)
600057d4:	f00d fa41 	bl	60012c5a <assert_print>
600057d8:	4629      	mov	r1, r5
600057da:	480a      	ldr	r0, [pc, #40]	; (60005804 <mpsc_pbuf_commit+0xa8>)
600057dc:	f00d fa3d 	bl	60012c5a <assert_print>
600057e0:	21c2      	movs	r1, #194	; 0xc2
600057e2:	e7dc      	b.n	6000579e <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
600057e4:	f388 8811 	msr	BASEPRI, r8
600057e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
600057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
600057f0:	6001717c 	.word	0x6001717c
600057f4:	600171a9 	.word	0x600171a9
600057f8:	60016dfb 	.word	0x60016dfb
600057fc:	600171be 	.word	0x600171be
60005800:	600171d6 	.word	0x600171d6
60005804:	600171ed 	.word	0x600171ed

60005808 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
60005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6000580c:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
6000580e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
60005812:	f04f 0310 	mov.w	r3, #16
60005816:	f3ef 8811 	mrs	r8, BASEPRI
6000581a:	f383 8812 	msr	BASEPRI_MAX, r3
6000581e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60005822:	4638      	mov	r0, r7
60005824:	f007 fe88 	bl	6000d538 <z_spin_lock_valid>
60005828:	4605      	mov	r5, r0
6000582a:	b968      	cbnz	r0, 60005848 <mpsc_pbuf_claim+0x40>
6000582c:	2394      	movs	r3, #148	; 0x94
6000582e:	4a34      	ldr	r2, [pc, #208]	; (60005900 <mpsc_pbuf_claim+0xf8>)
60005830:	4934      	ldr	r1, [pc, #208]	; (60005904 <mpsc_pbuf_claim+0xfc>)
60005832:	4835      	ldr	r0, [pc, #212]	; (60005908 <mpsc_pbuf_claim+0x100>)
60005834:	f00d fa11 	bl	60012c5a <assert_print>
60005838:	4639      	mov	r1, r7
6000583a:	4834      	ldr	r0, [pc, #208]	; (6000590c <mpsc_pbuf_claim+0x104>)
6000583c:	f00d fa0d 	bl	60012c5a <assert_print>
60005840:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60005842:	482f      	ldr	r0, [pc, #188]	; (60005900 <mpsc_pbuf_claim+0xf8>)
60005844:	f00d fa02 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
60005848:	4638      	mov	r0, r7
6000584a:	f007 fe91 	bl	6000d570 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
6000584e:	6923      	ldr	r3, [r4, #16]
60005850:	68a2      	ldr	r2, [r4, #8]
60005852:	f013 0f08 	tst.w	r3, #8
60005856:	d102      	bne.n	6000585e <mpsc_pbuf_claim+0x56>
60005858:	6863      	ldr	r3, [r4, #4]
6000585a:	429a      	cmp	r2, r3
6000585c:	d900      	bls.n	60005860 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
6000585e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
60005860:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
60005862:	2b00      	cmp	r3, #0
60005864:	d03d      	beq.n	600058e2 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
60005866:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
60005868:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
6000586c:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
60005870:	f013 0003 	ands.w	r0, r3, #3
60005874:	d038      	beq.n	600058e8 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
60005876:	2802      	cmp	r0, #2
60005878:	d103      	bne.n	60005882 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
6000587a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
6000587e:	08b6      	lsrs	r6, r6, #2
60005880:	d105      	bne.n	6000588e <mpsc_pbuf_claim+0x86>
60005882:	07d8      	lsls	r0, r3, #31
60005884:	d41d      	bmi.n	600058c2 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
60005886:	69e3      	ldr	r3, [r4, #28]
60005888:	4648      	mov	r0, r9
6000588a:	4798      	blx	r3
6000588c:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
6000588e:	68a1      	ldr	r1, [r4, #8]
60005890:	4632      	mov	r2, r6
60005892:	4620      	mov	r0, r4
60005894:	f00d fa12 	bl	60012cbc <idx_inc>
				rd_idx_inc(buffer, inc);
60005898:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
6000589a:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
6000589c:	4620      	mov	r0, r4
6000589e:	f00d fa1b 	bl	60012cd8 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600058a2:	4638      	mov	r0, r7
600058a4:	f007 fe56 	bl	6000d554 <z_spin_unlock_valid>
600058a8:	bb00      	cbnz	r0, 600058ec <mpsc_pbuf_claim+0xe4>
600058aa:	23c2      	movs	r3, #194	; 0xc2
600058ac:	4a14      	ldr	r2, [pc, #80]	; (60005900 <mpsc_pbuf_claim+0xf8>)
600058ae:	4918      	ldr	r1, [pc, #96]	; (60005910 <mpsc_pbuf_claim+0x108>)
600058b0:	4815      	ldr	r0, [pc, #84]	; (60005908 <mpsc_pbuf_claim+0x100>)
600058b2:	f00d f9d2 	bl	60012c5a <assert_print>
600058b6:	4639      	mov	r1, r7
600058b8:	4816      	ldr	r0, [pc, #88]	; (60005914 <mpsc_pbuf_claim+0x10c>)
600058ba:	f00d f9ce 	bl	60012c5a <assert_print>
600058be:	21c2      	movs	r1, #194	; 0xc2
600058c0:	e7bf      	b.n	60005842 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
600058c2:	f043 0302 	orr.w	r3, r3, #2
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
600058c6:	4648      	mov	r0, r9
				item->hdr.busy = 1;
600058c8:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
600058cc:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
600058ce:	69e3      	ldr	r3, [r4, #28]
600058d0:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
600058d2:	4629      	mov	r1, r5
						buffer->get_wlen(item));
600058d4:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
600058d6:	4620      	mov	r0, r4
600058d8:	f00d f9f0 	bl	60012cbc <idx_inc>
		cont = false;
600058dc:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
600058de:	60a0      	str	r0, [r4, #8]
600058e0:	e7df      	b.n	600058a2 <mpsc_pbuf_claim+0x9a>
		cont = false;
600058e2:	461d      	mov	r5, r3
			item = NULL;
600058e4:	46a9      	mov	r9, r5
600058e6:	e7dc      	b.n	600058a2 <mpsc_pbuf_claim+0x9a>
		cont = false;
600058e8:	4605      	mov	r5, r0
600058ea:	e7fb      	b.n	600058e4 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
600058ec:	f388 8811 	msr	BASEPRI, r8
600058f0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
600058f4:	2d00      	cmp	r5, #0
600058f6:	d18c      	bne.n	60005812 <mpsc_pbuf_claim+0xa>

	return item;
}
600058f8:	4648      	mov	r0, r9
600058fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
600058fe:	bf00      	nop
60005900:	6001717c 	.word	0x6001717c
60005904:	600171a9 	.word	0x600171a9
60005908:	60016dfb 	.word	0x60016dfb
6000590c:	600171be 	.word	0x600171be
60005910:	600171d6 	.word	0x600171d6
60005914:	600171ed 	.word	0x600171ed

60005918 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
60005918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000591c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
6000591e:	69c3      	ldr	r3, [r0, #28]
60005920:	4608      	mov	r0, r1
{
60005922:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
60005924:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
60005928:	4798      	blx	r3
6000592a:	4607      	mov	r7, r0
	__asm__ volatile(
6000592c:	f04f 0310 	mov.w	r3, #16
60005930:	f3ef 8811 	mrs	r8, BASEPRI
60005934:	f383 8812 	msr	BASEPRI_MAX, r3
60005938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000593c:	4630      	mov	r0, r6
6000593e:	f007 fdfb 	bl	6000d538 <z_spin_lock_valid>
60005942:	b968      	cbnz	r0, 60005960 <mpsc_pbuf_free+0x48>
60005944:	2394      	movs	r3, #148	; 0x94
60005946:	4a26      	ldr	r2, [pc, #152]	; (600059e0 <mpsc_pbuf_free+0xc8>)
60005948:	4926      	ldr	r1, [pc, #152]	; (600059e4 <mpsc_pbuf_free+0xcc>)
6000594a:	4827      	ldr	r0, [pc, #156]	; (600059e8 <mpsc_pbuf_free+0xd0>)
6000594c:	f00d f985 	bl	60012c5a <assert_print>
60005950:	4631      	mov	r1, r6
60005952:	4826      	ldr	r0, [pc, #152]	; (600059ec <mpsc_pbuf_free+0xd4>)
60005954:	f00d f981 	bl	60012c5a <assert_print>
60005958:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000595a:	4821      	ldr	r0, [pc, #132]	; (600059e0 <mpsc_pbuf_free+0xc8>)
6000595c:	f00d f976 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
60005960:	4630      	mov	r0, r6
60005962:	f007 fe05 	bl	6000d570 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
60005966:	782b      	ldrb	r3, [r5, #0]
60005968:	f36f 0300 	bfc	r3, #0, #1
6000596c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
6000596e:	6923      	ldr	r3, [r4, #16]
60005970:	079b      	lsls	r3, r3, #30
60005972:	d505      	bpl.n	60005980 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
60005974:	68e2      	ldr	r2, [r4, #12]
60005976:	6a23      	ldr	r3, [r4, #32]
60005978:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
6000597c:	429d      	cmp	r5, r3
6000597e:	d120      	bne.n	600059c2 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
60005980:	782b      	ldrb	r3, [r5, #0]
60005982:	f36f 0341 	bfc	r3, #1, #1
60005986:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
60005988:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
6000598c:	4299      	cmp	r1, r3
6000598e:	d104      	bne.n	6000599a <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
60005990:	463a      	mov	r2, r7
60005992:	4620      	mov	r0, r4
60005994:	f00d f992 	bl	60012cbc <idx_inc>
60005998:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
6000599a:	4639      	mov	r1, r7
6000599c:	4620      	mov	r0, r4
6000599e:	f00d f99b 	bl	60012cd8 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600059a2:	4630      	mov	r0, r6
600059a4:	f007 fdd6 	bl	6000d554 <z_spin_unlock_valid>
600059a8:	b980      	cbnz	r0, 600059cc <mpsc_pbuf_free+0xb4>
600059aa:	23c2      	movs	r3, #194	; 0xc2
600059ac:	4a0c      	ldr	r2, [pc, #48]	; (600059e0 <mpsc_pbuf_free+0xc8>)
600059ae:	4910      	ldr	r1, [pc, #64]	; (600059f0 <mpsc_pbuf_free+0xd8>)
600059b0:	480d      	ldr	r0, [pc, #52]	; (600059e8 <mpsc_pbuf_free+0xd0>)
600059b2:	f00d f952 	bl	60012c5a <assert_print>
600059b6:	4631      	mov	r1, r6
600059b8:	480e      	ldr	r0, [pc, #56]	; (600059f4 <mpsc_pbuf_free+0xdc>)
600059ba:	f00d f94e 	bl	60012c5a <assert_print>
600059be:	21c2      	movs	r1, #194	; 0xc2
600059c0:	e7cb      	b.n	6000595a <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
600059c2:	682b      	ldr	r3, [r5, #0]
600059c4:	f367 039f 	bfi	r3, r7, #2, #30
600059c8:	602b      	str	r3, [r5, #0]
600059ca:	e7ea      	b.n	600059a2 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
600059cc:	f388 8811 	msr	BASEPRI, r8
600059d0:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
600059d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
600059d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
600059dc:	f008 b89c 	b.w	6000db18 <z_impl_k_sem_give>
600059e0:	6001717c 	.word	0x6001717c
600059e4:	600171a9 	.word	0x600171a9
600059e8:	60016dfb 	.word	0x60016dfb
600059ec:	600171be 	.word	0x600171be
600059f0:	600171d6 	.word	0x600171d6
600059f4:	600171ed 	.word	0x600171ed

600059f8 <imxrt_init>:
 *
 * @return 0
 */

static int imxrt_init(const struct device *arg)
{
600059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
600059fa:	f04f 0310 	mov.w	r3, #16
600059fe:	f3ef 8611 	mrs	r6, BASEPRI
60005a02:	f383 8812 	msr	BASEPRI_MAX, r3
60005a06:	f3bf 8f6f 	isb	sy
	unsigned int oldLevel; /* old interrupt lock level */

	/* disable interrupts */
	oldLevel = irq_lock();

	if ((SCB->CCR & SCB_CCR_DC_Msk) == 0) {
60005a0a:	4a4d      	ldr	r2, [pc, #308]	; (60005b40 <imxrt_init+0x148>)
60005a0c:	6953      	ldr	r3, [r2, #20]
60005a0e:	03dc      	lsls	r4, r3, #15
60005a10:	d427      	bmi.n	60005a62 <imxrt_init+0x6a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
60005a12:	6953      	ldr	r3, [r2, #20]
60005a14:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
60005a18:	d123      	bne.n	60005a62 <imxrt_init+0x6a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
60005a1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
60005a1e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
60005a22:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60005a26:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60005a2a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
60005a2e:	f3c3 334e 	ubfx	r3, r3, #13, #15
60005a32:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60005a34:	ea03 0704 	and.w	r7, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60005a38:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60005a3a:	ea47 7581 	orr.w	r5, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
60005a3e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60005a40:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
60005a44:	d2f9      	bcs.n	60005a3a <imxrt_init+0x42>
    } while(sets-- != 0U);
60005a46:	3b20      	subs	r3, #32
60005a48:	f113 0f20 	cmn.w	r3, #32
60005a4c:	d1f2      	bne.n	60005a34 <imxrt_init+0x3c>
60005a4e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
60005a52:	6953      	ldr	r3, [r2, #20]
60005a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
60005a58:	6153      	str	r3, [r2, #20]
60005a5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60005a5e:	f3bf 8f6f 	isb	sy
 *
 * @param freq The XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
60005a62:	4b38      	ldr	r3, [pc, #224]	; (60005b44 <imxrt_init+0x14c>)
60005a64:	4a38      	ldr	r2, [pc, #224]	; (60005b48 <imxrt_init+0x150>)
60005a66:	601a      	str	r2, [r3, #0]
 *
 * @param freq The RTC XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
60005a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
60005a6c:	4b37      	ldr	r3, [pc, #220]	; (60005b4c <imxrt_init+0x154>)
60005a6e:	601a      	str	r2, [r3, #0]
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60005a70:	4b37      	ldr	r3, [pc, #220]	; (60005b50 <imxrt_init+0x158>)
60005a72:	699a      	ldr	r2, [r3, #24]
60005a74:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
60005a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
60005a7c:	619a      	str	r2, [r3, #24]
60005a7e:	695a      	ldr	r2, [r3, #20]
60005a80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
60005a84:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
60005a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
60005a88:	0690      	lsls	r0, r2, #26
60005a8a:	d4fc      	bmi.n	60005a86 <imxrt_init+0x8e>
	DCDC->REG3 = (DCDC->REG3 & (~DCDC_REG3_TRG_MASK)) | DCDC_REG3_TRG(CONFIG_DCDC_VALUE);
60005a8c:	4a31      	ldr	r2, [pc, #196]	; (60005b54 <imxrt_init+0x15c>)
60005a8e:	68d3      	ldr	r3, [r2, #12]
60005a90:	f023 031f 	bic.w	r3, r3, #31
60005a94:	f043 0313 	orr.w	r3, r3, #19
60005a98:	60d3      	str	r3, [r2, #12]
			(DCDC_REG0_STS_DC_OK_MASK & DCDC->REG0)) {
60005a9a:	6813      	ldr	r3, [r2, #0]
	while (DCDC_REG0_STS_DC_OK_MASK !=
60005a9c:	2b00      	cmp	r3, #0
60005a9e:	dafc      	bge.n	60005a9a <imxrt_init+0xa2>
	CLOCK_InitArmPll(&armPllConfig); /* Configure ARM PLL to 1200M */
60005aa0:	482d      	ldr	r0, [pc, #180]	; (60005b58 <imxrt_init+0x160>)
60005aa2:	f005 fa31 	bl	6000af08 <CLOCK_InitArmPll>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005aa6:	4b2a      	ldr	r3, [pc, #168]	; (60005b50 <imxrt_init+0x158>)
60005aa8:	691a      	ldr	r2, [r3, #16]
60005aaa:	f022 0207 	bic.w	r2, r2, #7
60005aae:	f042 0201 	orr.w	r2, r2, #1
60005ab2:	611a      	str	r2, [r3, #16]
        while ((CCM->CDHIPR & ((uint32_t)(1UL << busyShift))) != 0UL)
60005ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
60005ab6:	03d1      	lsls	r1, r2, #15
60005ab8:	d4fc      	bmi.n	60005ab4 <imxrt_init+0xbc>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005aba:	695a      	ldr	r2, [r3, #20]
60005abc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
60005ac0:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((uint32_t)(1UL << busyShift))) != 0UL)
60005ac2:	4b23      	ldr	r3, [pc, #140]	; (60005b50 <imxrt_init+0x158>)
60005ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
60005ac6:	0792      	lsls	r2, r2, #30
60005ac8:	d4fc      	bmi.n	60005ac4 <imxrt_init+0xcc>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005aca:	695a      	ldr	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
60005acc:	4c20      	ldr	r4, [pc, #128]	; (60005b50 <imxrt_init+0x158>)
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005ace:	f442 7240 	orr.w	r2, r2, #768	; 0x300
60005ad2:	615a      	str	r2, [r3, #20]
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60005ad4:	699a      	ldr	r2, [r3, #24]
60005ad6:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
60005ada:	619a      	str	r2, [r3, #24]
60005adc:	695a      	ldr	r2, [r3, #20]
60005ade:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
60005ae2:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
60005ae4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
60005ae6:	f015 0520 	ands.w	r5, r5, #32
60005aea:	d1fb      	bne.n	60005ae4 <imxrt_init+0xec>
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60005aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
	CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usb480M,
60005aee:	4628      	mov	r0, r5
60005af0:	491a      	ldr	r1, [pc, #104]	; (60005b5c <imxrt_init+0x164>)
60005af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
60005af6:	6263      	str	r3, [r4, #36]	; 0x24
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
60005afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60005afe:	6263      	str	r3, [r4, #36]	; 0x24
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60005b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
60005b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
60005b06:	63a3      	str	r3, [r4, #56]	; 0x38
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60005b08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
60005b0a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
60005b0e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
60005b12:	63a3      	str	r3, [r4, #56]	; 0x38
60005b14:	f005 fa3c 	bl	6000af90 <CLOCK_EnableUsbhs0PhyPllClock>
	CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M,
60005b18:	4910      	ldr	r1, [pc, #64]	; (60005b5c <imxrt_init+0x164>)
60005b1a:	4628      	mov	r0, r5
60005b1c:	f005 f9cc 	bl	6000aeb8 <CLOCK_EnableUsbhs0Clock>
	USB_EhciPhyInit(kUSB_ControllerEhci0, CPU_XTAL_CLK_HZ, &usbPhyConfig);
60005b20:	4a0f      	ldr	r2, [pc, #60]	; (60005b60 <imxrt_init+0x168>)
60005b22:	4909      	ldr	r1, [pc, #36]	; (60005b48 <imxrt_init+0x150>)
60005b24:	2002      	movs	r0, #2
60005b26:	f00e f964 	bl	60013df2 <USB_EhciPhyInit>
    CCM->CLPCR = (CCM->CLPCR & ~CCM_CLPCR_LPM_MASK) | CCM_CLPCR_LPM((uint32_t)mode);
60005b2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
60005b2c:	f023 0303 	bic.w	r3, r3, #3
60005b30:	6563      	str	r3, [r4, #84]	; 0x54
	__asm__ volatile(
60005b32:	f386 8811 	msr	BASEPRI, r6
60005b36:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	/* restore interrupt state */
	irq_unlock(oldLevel);
	return 0;
}
60005b3a:	4628      	mov	r0, r5
60005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60005b3e:	bf00      	nop
60005b40:	e000ed00 	.word	0xe000ed00
60005b44:	20204144 	.word	0x20204144
60005b48:	016e3600 	.word	0x016e3600
60005b4c:	20204140 	.word	0x20204140
60005b50:	400fc000 	.word	0x400fc000
60005b54:	40080000 	.word	0x40080000
60005b58:	60015178 	.word	0x60015178
60005b5c:	1c9c3800 	.word	0x1c9c3800
60005b60:	20202b9c 	.word	0x20202b9c

60005b64 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
60005b64:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
60005b66:	2200      	movs	r2, #0
{
60005b68:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
60005b6a:	490f      	ldr	r1, [pc, #60]	; (60005ba8 <enable_logger+0x44>)
60005b6c:	480f      	ldr	r0, [pc, #60]	; (60005bac <enable_logger+0x48>)
60005b6e:	f00e fdfd 	bl	6001476c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
60005b72:	2200      	movs	r2, #0
60005b74:	2300      	movs	r3, #0
60005b76:	2400      	movs	r4, #0
60005b78:	4d0d      	ldr	r5, [pc, #52]	; (60005bb0 <enable_logger+0x4c>)
60005b7a:	490e      	ldr	r1, [pc, #56]	; (60005bb4 <enable_logger+0x50>)
60005b7c:	4628      	mov	r0, r5
60005b7e:	9400      	str	r4, [sp, #0]
60005b80:	e9cd 2306 	strd	r2, r3, [sp, #24]
60005b84:	230e      	movs	r3, #14
60005b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
60005b8a:	e9cd 3403 	strd	r3, r4, [sp, #12]
60005b8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
60005b92:	4b09      	ldr	r3, [pc, #36]	; (60005bb8 <enable_logger+0x54>)
60005b94:	f007 fc18 	bl	6000d3c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
60005b98:	4908      	ldr	r1, [pc, #32]	; (60005bbc <enable_logger+0x58>)
60005b9a:	4628      	mov	r0, r5
60005b9c:	f00e fd43 	bl	60014626 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
60005ba0:	4620      	mov	r0, r4
60005ba2:	b009      	add	sp, #36	; 0x24
60005ba4:	bd30      	pop	{r4, r5, pc}
60005ba6:	bf00      	nop
60005ba8:	60005d01 	.word	0x60005d01
60005bac:	20203968 	.word	0x20203968
60005bb0:	202034e0 	.word	0x202034e0
60005bb4:	20204740 	.word	0x20204740
60005bb8:	60005fe5 	.word	0x60005fe5
60005bbc:	60017202 	.word	0x60017202

60005bc0 <activate_foreach_backend>:
{
60005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60005bc4:	4604      	mov	r4, r0
	while (mask_cpy) {
60005bc6:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
60005bc8:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60005bcc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 60005c20 <activate_foreach_backend+0x60>
	while (mask_cpy) {
60005bd0:	b914      	cbnz	r4, 60005bd8 <activate_foreach_backend+0x18>
}
60005bd2:	4638      	mov	r0, r7
60005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
60005bd8:	fa94 f5a4 	rbit	r5, r4
60005bdc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
60005be0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60005be4:	012e      	lsls	r6, r5, #4
60005be6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
60005bea:	ea6f 0a03 	mvn.w	sl, r3
60005bee:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60005bf2:	7b2b      	ldrb	r3, [r5, #12]
60005bf4:	2b00      	cmp	r3, #0
60005bf6:	d0eb      	beq.n	60005bd0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
60005bf8:	f858 3006 	ldr.w	r3, [r8, r6]
60005bfc:	691b      	ldr	r3, [r3, #16]
60005bfe:	b94b      	cbnz	r3, 60005c14 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
60005c00:	4446      	add	r6, r8
			log_backend_enable(backend,
60005c02:	2204      	movs	r2, #4
60005c04:	4628      	mov	r0, r5
			mask &= ~BIT(i);
60005c06:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
60005c0a:	6873      	ldr	r3, [r6, #4]
60005c0c:	6819      	ldr	r1, [r3, #0]
60005c0e:	f000 faef 	bl	600061f0 <log_backend_enable>
60005c12:	e7dd      	b.n	60005bd0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
60005c14:	4628      	mov	r0, r5
60005c16:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60005c18:	2800      	cmp	r0, #0
60005c1a:	d1d9      	bne.n	60005bd0 <activate_foreach_backend+0x10>
60005c1c:	e7f0      	b.n	60005c00 <activate_foreach_backend+0x40>
60005c1e:	bf00      	nop
60005c20:	60015104 	.word	0x60015104

60005c24 <z_log_init>:
{
60005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
60005c28:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 60005ce0 <z_log_init+0xbc>
60005c2c:	4680      	mov	r8, r0
60005c2e:	4c2d      	ldr	r4, [pc, #180]	; (60005ce4 <z_log_init+0xc0>)
60005c30:	460f      	mov	r7, r1
60005c32:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
60005c36:	2b9f      	cmp	r3, #159	; 0x9f
60005c38:	d90b      	bls.n	60005c52 <z_log_init+0x2e>
60005c3a:	492b      	ldr	r1, [pc, #172]	; (60005ce8 <z_log_init+0xc4>)
60005c3c:	f44f 738b 	mov.w	r3, #278	; 0x116
60005c40:	4a2a      	ldr	r2, [pc, #168]	; (60005cec <z_log_init+0xc8>)
60005c42:	482b      	ldr	r0, [pc, #172]	; (60005cf0 <z_log_init+0xcc>)
60005c44:	f00d f809 	bl	60012c5a <assert_print>
60005c48:	f44f 718b 	mov.w	r1, #278	; 0x116
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005c4c:	4827      	ldr	r0, [pc, #156]	; (60005cec <z_log_init+0xc8>)
60005c4e:	f00c fffd 	bl	60012c4c <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
60005c52:	4828      	ldr	r0, [pc, #160]	; (60005cf4 <z_log_init+0xd0>)
60005c54:	f00d f92b 	bl	60012eae <atomic_inc>
60005c58:	4606      	mov	r6, r0
60005c5a:	b360      	cbz	r0, 60005cb6 <z_log_init+0x92>
	uint32_t mask = 0;
60005c5c:	2500      	movs	r5, #0
}
60005c5e:	4628      	mov	r0, r5
60005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
60005c64:	7b23      	ldrb	r3, [r4, #12]
60005c66:	b173      	cbz	r3, 60005c86 <z_log_init+0x62>
	if (backend->api->init) {
60005c68:	6823      	ldr	r3, [r4, #0]
60005c6a:	68db      	ldr	r3, [r3, #12]
60005c6c:	b10b      	cbz	r3, 60005c72 <z_log_init+0x4e>
		backend->api->init(backend);
60005c6e:	4620      	mov	r0, r4
60005c70:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
60005c72:	6823      	ldr	r3, [r4, #0]
60005c74:	691b      	ldr	r3, [r3, #16]
60005c76:	b9b3      	cbnz	r3, 60005ca6 <z_log_init+0x82>
				log_backend_enable(backend,
60005c78:	6863      	ldr	r3, [r4, #4]
60005c7a:	2204      	movs	r2, #4
60005c7c:	4620      	mov	r0, r4
60005c7e:	6819      	ldr	r1, [r3, #0]
60005c80:	f000 fab6 	bl	600061f0 <log_backend_enable>
			i++;
60005c84:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005c86:	3410      	adds	r4, #16
60005c88:	454c      	cmp	r4, r9
60005c8a:	d918      	bls.n	60005cbe <z_log_init+0x9a>
60005c8c:	491a      	ldr	r1, [pc, #104]	; (60005cf8 <z_log_init+0xd4>)
60005c8e:	f240 1323 	movw	r3, #291	; 0x123
60005c92:	4a16      	ldr	r2, [pc, #88]	; (60005cec <z_log_init+0xc8>)
60005c94:	4816      	ldr	r0, [pc, #88]	; (60005cf0 <z_log_init+0xcc>)
60005c96:	f00c ffe0 	bl	60012c5a <assert_print>
60005c9a:	4818      	ldr	r0, [pc, #96]	; (60005cfc <z_log_init+0xd8>)
60005c9c:	f00c ffdd 	bl	60012c5a <assert_print>
60005ca0:	f240 1123 	movw	r1, #291	; 0x123
60005ca4:	e7d2      	b.n	60005c4c <z_log_init+0x28>
		return backend->api->is_ready(backend);
60005ca6:	4620      	mov	r0, r4
60005ca8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
60005caa:	2800      	cmp	r0, #0
60005cac:	d0e4      	beq.n	60005c78 <z_log_init+0x54>
				mask |= BIT(i);
60005cae:	fa0a f306 	lsl.w	r3, sl, r6
60005cb2:	431d      	orrs	r5, r3
60005cb4:	e7e6      	b.n	60005c84 <z_log_init+0x60>
	uint32_t mask = 0;
60005cb6:	4605      	mov	r5, r0
				mask |= BIT(i);
60005cb8:	f04f 0a01 	mov.w	sl, #1
60005cbc:	e7e4      	b.n	60005c88 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005cbe:	d3d1      	bcc.n	60005c64 <z_log_init+0x40>
	if (blocking) {
60005cc0:	f1b8 0f00 	cmp.w	r8, #0
60005cc4:	d0cb      	beq.n	60005c5e <z_log_init+0x3a>
		while (mask) {
60005cc6:	2d00      	cmp	r5, #0
60005cc8:	d0c8      	beq.n	60005c5c <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
60005cca:	4628      	mov	r0, r5
60005ccc:	f7ff ff78 	bl	60005bc0 <activate_foreach_backend>
60005cd0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
60005cd2:	2f00      	cmp	r7, #0
60005cd4:	d0f7      	beq.n	60005cc6 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
60005cd6:	2100      	movs	r1, #0
60005cd8:	2064      	movs	r0, #100	; 0x64
60005cda:	f009 fb8b 	bl	6000f3f4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
60005cde:	e7f2      	b.n	60005cc6 <z_log_init+0xa2>
60005ce0:	60015114 	.word	0x60015114
60005ce4:	60015104 	.word	0x60015104
60005ce8:	60017237 	.word	0x60017237
60005cec:	6001720a 	.word	0x6001720a
60005cf0:	60016dfb 	.word	0x60016dfb
60005cf4:	20203c24 	.word	0x20203c24
60005cf8:	6001725b 	.word	0x6001725b
60005cfc:	6001727c 	.word	0x6001727c

60005d00 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
60005d00:	4801      	ldr	r0, [pc, #4]	; (60005d08 <log_process_thread_timer_expiry_fn+0x8>)
60005d02:	f007 bf09 	b.w	6000db18 <z_impl_k_sem_give>
60005d06:	bf00      	nop
60005d08:	20202cd8 	.word	0x20202cd8

60005d0c <log_format_func_t_get>:
}
60005d0c:	4b01      	ldr	r3, [pc, #4]	; (60005d14 <log_format_func_t_get+0x8>)
60005d0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
60005d12:	4770      	bx	lr
60005d14:	60015194 	.word	0x60015194

60005d18 <log_set_timestamp_func>:
{
60005d18:	b508      	push	{r3, lr}
60005d1a:	4603      	mov	r3, r0
60005d1c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
60005d1e:	b12b      	cbz	r3, 60005d2c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
60005d20:	4a04      	ldr	r2, [pc, #16]	; (60005d34 <log_set_timestamp_func+0x1c>)
60005d22:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
60005d24:	f000 fd70 	bl	60006808 <log_output_timestamp_freq_set>
	return 0;
60005d28:	2000      	movs	r0, #0
}
60005d2a:	bd08      	pop	{r3, pc}
		return -EINVAL;
60005d2c:	f06f 0015 	mvn.w	r0, #21
60005d30:	e7fb      	b.n	60005d2a <log_set_timestamp_func+0x12>
60005d32:	bf00      	nop
60005d34:	202029b8 	.word	0x202029b8

60005d38 <z_log_notify_backend_enabled>:
{
60005d38:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
60005d3a:	4c04      	ldr	r4, [pc, #16]	; (60005d4c <z_log_notify_backend_enabled+0x14>)
60005d3c:	7823      	ldrb	r3, [r4, #0]
60005d3e:	b913      	cbnz	r3, 60005d46 <z_log_notify_backend_enabled+0xe>
60005d40:	4803      	ldr	r0, [pc, #12]	; (60005d50 <z_log_notify_backend_enabled+0x18>)
60005d42:	f007 fee9 	bl	6000db18 <z_impl_k_sem_give>
	backend_attached = true;
60005d46:	2301      	movs	r3, #1
60005d48:	7023      	strb	r3, [r4, #0]
}
60005d4a:	bd10      	pop	{r4, pc}
60005d4c:	2020429c 	.word	0x2020429c
60005d50:	20202cd8 	.word	0x20202cd8

60005d54 <z_log_dropped>:
{
60005d54:	b510      	push	{r4, lr}
60005d56:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
60005d58:	4808      	ldr	r0, [pc, #32]	; (60005d7c <z_log_dropped+0x28>)
60005d5a:	f00d f8a8 	bl	60012eae <atomic_inc>
	if (buffered) {
60005d5e:	b15c      	cbz	r4, 60005d78 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
60005d60:	4b07      	ldr	r3, [pc, #28]	; (60005d80 <z_log_dropped+0x2c>)
60005d62:	f3bf 8f5b 	dmb	ish
60005d66:	e853 1f00 	ldrex	r1, [r3]
60005d6a:	3901      	subs	r1, #1
60005d6c:	e843 1200 	strex	r2, r1, [r3]
60005d70:	2a00      	cmp	r2, #0
60005d72:	d1f8      	bne.n	60005d66 <z_log_dropped+0x12>
60005d74:	f3bf 8f5b 	dmb	ish
}
60005d78:	bd10      	pop	{r4, pc}
60005d7a:	bf00      	nop
60005d7c:	20203c1c 	.word	0x20203c1c
60005d80:	20203c20 	.word	0x20203c20

60005d84 <z_log_dropped_read_and_clear>:
}
60005d84:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
60005d86:	4b06      	ldr	r3, [pc, #24]	; (60005da0 <z_log_dropped_read_and_clear+0x1c>)
60005d88:	f3bf 8f5b 	dmb	ish
60005d8c:	4601      	mov	r1, r0
60005d8e:	e853 0f00 	ldrex	r0, [r3]
60005d92:	e843 1200 	strex	r2, r1, [r3]
60005d96:	2a00      	cmp	r2, #0
60005d98:	d1f9      	bne.n	60005d8e <z_log_dropped_read_and_clear+0xa>
60005d9a:	f3bf 8f5b 	dmb	ish
60005d9e:	4770      	bx	lr
60005da0:	20203c1c 	.word	0x20203c1c

60005da4 <dropped_notify>:
{
60005da4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
60005da6:	f7ff ffed 	bl	60005d84 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005daa:	4c10      	ldr	r4, [pc, #64]	; (60005dec <dropped_notify+0x48>)
	uint32_t dropped = z_log_dropped_read_and_clear();
60005dac:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005dae:	4e10      	ldr	r6, [pc, #64]	; (60005df0 <dropped_notify+0x4c>)
60005db0:	42b4      	cmp	r4, r6
60005db2:	d919      	bls.n	60005de8 <dropped_notify+0x44>
60005db4:	490f      	ldr	r1, [pc, #60]	; (60005df4 <dropped_notify+0x50>)
60005db6:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
60005dba:	4a0f      	ldr	r2, [pc, #60]	; (60005df8 <dropped_notify+0x54>)
60005dbc:	480f      	ldr	r0, [pc, #60]	; (60005dfc <dropped_notify+0x58>)
60005dbe:	f00c ff4c 	bl	60012c5a <assert_print>
60005dc2:	480f      	ldr	r0, [pc, #60]	; (60005e00 <dropped_notify+0x5c>)
60005dc4:	f00c ff49 	bl	60012c5a <assert_print>
60005dc8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
60005dcc:	480a      	ldr	r0, [pc, #40]	; (60005df8 <dropped_notify+0x54>)
60005dce:	f00c ff3d 	bl	60012c4c <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
60005dd2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
60005dd4:	795b      	ldrb	r3, [r3, #5]
60005dd6:	b12b      	cbz	r3, 60005de4 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
60005dd8:	6823      	ldr	r3, [r4, #0]
60005dda:	685b      	ldr	r3, [r3, #4]
60005ddc:	b113      	cbz	r3, 60005de4 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
60005dde:	4629      	mov	r1, r5
60005de0:	4620      	mov	r0, r4
60005de2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005de4:	3410      	adds	r4, #16
60005de6:	e7e3      	b.n	60005db0 <dropped_notify+0xc>
60005de8:	d3f3      	bcc.n	60005dd2 <dropped_notify+0x2e>
}
60005dea:	bd70      	pop	{r4, r5, r6, pc}
60005dec:	60015104 	.word	0x60015104
60005df0:	60015114 	.word	0x60015114
60005df4:	6001725b 	.word	0x6001725b
60005df8:	6001720a 	.word	0x6001720a
60005dfc:	60016dfb 	.word	0x60016dfb
60005e00:	6001727c 	.word	0x6001727c

60005e04 <z_log_msg_init>:
{
60005e04:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
60005e06:	4c04      	ldr	r4, [pc, #16]	; (60005e18 <z_log_msg_init+0x14>)
60005e08:	4904      	ldr	r1, [pc, #16]	; (60005e1c <z_log_msg_init+0x18>)
60005e0a:	4620      	mov	r0, r4
60005e0c:	f7ff fbb4 	bl	60005578 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
60005e10:	4b03      	ldr	r3, [pc, #12]	; (60005e20 <z_log_msg_init+0x1c>)
60005e12:	601c      	str	r4, [r3, #0]
}
60005e14:	bd10      	pop	{r4, pc}
60005e16:	bf00      	nop
60005e18:	20202bc8 	.word	0x20202bc8
60005e1c:	60015180 	.word	0x60015180
60005e20:	20203c14 	.word	0x20203c14

60005e24 <log_core_init>:
{
60005e24:	b508      	push	{r3, lr}
	panic_mode = false;
60005e26:	4a08      	ldr	r2, [pc, #32]	; (60005e48 <log_core_init+0x24>)
60005e28:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
60005e2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
60005e2e:	4807      	ldr	r0, [pc, #28]	; (60005e4c <log_core_init+0x28>)
	panic_mode = false;
60005e30:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
60005e32:	4a07      	ldr	r2, [pc, #28]	; (60005e50 <log_core_init+0x2c>)
60005e34:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
60005e36:	4a07      	ldr	r2, [pc, #28]	; (60005e54 <log_core_init+0x30>)
60005e38:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
60005e3a:	f7ff ff6d 	bl	60005d18 <log_set_timestamp_func>
}
60005e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
60005e42:	f7ff bfdf 	b.w	60005e04 <z_log_msg_init>
60005e46:	bf00      	nop
60005e48:	2020429d 	.word	0x2020429d
60005e4c:	60012ec9 	.word	0x60012ec9
60005e50:	20203c1c 	.word	0x20203c1c
60005e54:	20203c20 	.word	0x20203c20

60005e58 <z_log_msg_alloc>:
{
60005e58:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
60005e5a:	2200      	movs	r2, #0
60005e5c:	2300      	movs	r3, #0
60005e5e:	4801      	ldr	r0, [pc, #4]	; (60005e64 <z_log_msg_alloc+0xc>)
60005e60:	f7ff bbbc 	b.w	600055dc <mpsc_pbuf_alloc>
60005e64:	20202bc8 	.word	0x20202bc8

60005e68 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
60005e68:	4801      	ldr	r0, [pc, #4]	; (60005e70 <z_log_msg_local_claim+0x8>)
60005e6a:	f7ff bccd 	b.w	60005808 <mpsc_pbuf_claim>
60005e6e:	bf00      	nop
60005e70:	20202bc8 	.word	0x20202bc8

60005e74 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
60005e74:	4b02      	ldr	r3, [pc, #8]	; (60005e80 <z_log_msg_free+0xc>)
{
60005e76:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
60005e78:	6818      	ldr	r0, [r3, #0]
60005e7a:	f7ff bd4d 	b.w	60005918 <mpsc_pbuf_free>
60005e7e:	bf00      	nop
60005e80:	20203c14 	.word	0x20203c14

60005e84 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
60005e84:	4801      	ldr	r0, [pc, #4]	; (60005e8c <z_log_msg_pending+0x8>)
60005e86:	f00c bfef 	b.w	60012e68 <mpsc_pbuf_is_pending>
60005e8a:	bf00      	nop
60005e8c:	20202bc8 	.word	0x20202bc8

60005e90 <z_impl_log_process>:
	if (!backend_attached) {
60005e90:	4b2d      	ldr	r3, [pc, #180]	; (60005f48 <z_impl_log_process+0xb8>)
{
60005e92:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
60005e94:	7818      	ldrb	r0, [r3, #0]
60005e96:	2800      	cmp	r0, #0
60005e98:	d054      	beq.n	60005f44 <z_impl_log_process+0xb4>
	return z_log_msg_local_claim();
60005e9a:	f7ff ffe5 	bl	60005e68 <z_log_msg_local_claim>
	if (msg) {
60005e9e:	4605      	mov	r5, r0
60005ea0:	b360      	cbz	r0, 60005efc <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
60005ea2:	4b2a      	ldr	r3, [pc, #168]	; (60005f4c <z_impl_log_process+0xbc>)
60005ea4:	f3bf 8f5b 	dmb	ish
60005ea8:	e853 1f00 	ldrex	r1, [r3]
60005eac:	3901      	subs	r1, #1
60005eae:	e843 1200 	strex	r2, r1, [r3]
60005eb2:	2a00      	cmp	r2, #0
60005eb4:	d1f8      	bne.n	60005ea8 <z_impl_log_process+0x18>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005eb6:	4c26      	ldr	r4, [pc, #152]	; (60005f50 <z_impl_log_process+0xc0>)
60005eb8:	f3bf 8f5b 	dmb	ish
60005ebc:	4e25      	ldr	r6, [pc, #148]	; (60005f54 <z_impl_log_process+0xc4>)
60005ebe:	42b4      	cmp	r4, r6
60005ec0:	d918      	bls.n	60005ef4 <z_impl_log_process+0x64>
60005ec2:	4925      	ldr	r1, [pc, #148]	; (60005f58 <z_impl_log_process+0xc8>)
60005ec4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
60005ec8:	4a24      	ldr	r2, [pc, #144]	; (60005f5c <z_impl_log_process+0xcc>)
60005eca:	4825      	ldr	r0, [pc, #148]	; (60005f60 <z_impl_log_process+0xd0>)
60005ecc:	f00c fec5 	bl	60012c5a <assert_print>
60005ed0:	4824      	ldr	r0, [pc, #144]	; (60005f64 <z_impl_log_process+0xd4>)
60005ed2:	f00c fec2 	bl	60012c5a <assert_print>
60005ed6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
60005eda:	4820      	ldr	r0, [pc, #128]	; (60005f5c <z_impl_log_process+0xcc>)
60005edc:	f00c feb6 	bl	60012c4c <assert_post_action>
	return backend->cb->active;
60005ee0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
60005ee2:	795b      	ldrb	r3, [r3, #5]
60005ee4:	b123      	cbz	r3, 60005ef0 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
60005ee6:	6823      	ldr	r3, [r4, #0]
60005ee8:	4629      	mov	r1, r5
60005eea:	4620      	mov	r0, r4
60005eec:	681b      	ldr	r3, [r3, #0]
60005eee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005ef0:	3410      	adds	r4, #16
60005ef2:	e7e4      	b.n	60005ebe <z_impl_log_process+0x2e>
60005ef4:	d3f4      	bcc.n	60005ee0 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
60005ef6:	4628      	mov	r0, r5
60005ef8:	f7ff ffbc 	bl	60005e74 <z_log_msg_free>
	return dropped_cnt > 0;
60005efc:	4b1a      	ldr	r3, [pc, #104]	; (60005f68 <z_impl_log_process+0xd8>)
60005efe:	4c1b      	ldr	r4, [pc, #108]	; (60005f6c <z_impl_log_process+0xdc>)
		if ((dropped_pend || unordered_pend) &&
60005f00:	681b      	ldr	r3, [r3, #0]
60005f02:	2b00      	cmp	r3, #0
60005f04:	dd12      	ble.n	60005f2c <z_impl_log_process+0x9c>
	return z_impl_k_uptime_ticks();
60005f06:	f00e fc0d 	bl	60014724 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
60005f0a:	220a      	movs	r2, #10
60005f0c:	2300      	movs	r3, #0
60005f0e:	f7fd fa39 	bl	60003384 <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
60005f12:	e9d4 3200 	ldrd	r3, r2, [r4]
60005f16:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
60005f18:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
60005f1c:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
60005f20:	4298      	cmp	r0, r3
60005f22:	f171 0100 	sbcs.w	r1, r1, #0
60005f26:	d301      	bcc.n	60005f2c <z_impl_log_process+0x9c>
				dropped_notify();
60005f28:	f7ff ff3c 	bl	60005da4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
60005f2c:	e9d4 3200 	ldrd	r3, r2, [r4]
60005f30:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
60005f34:	f142 0200 	adc.w	r2, r2, #0
60005f38:	e9c4 3200 	strd	r3, r2, [r4]
}
60005f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
60005f40:	f7ff bfa0 	b.w	60005e84 <z_log_msg_pending>
}
60005f44:	bd70      	pop	{r4, r5, r6, pc}
60005f46:	bf00      	nop
60005f48:	2020429c 	.word	0x2020429c
60005f4c:	20203c20 	.word	0x20203c20
60005f50:	60015104 	.word	0x60015104
60005f54:	60015114 	.word	0x60015114
60005f58:	6001725b 	.word	0x6001725b
60005f5c:	6001720a 	.word	0x6001720a
60005f60:	60016dfb 	.word	0x60016dfb
60005f64:	6001727c 	.word	0x6001727c
60005f68:	20203c1c 	.word	0x20203c1c
60005f6c:	20203960 	.word	0x20203960

60005f70 <z_impl_log_panic>:
{
60005f70:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
60005f72:	4d15      	ldr	r5, [pc, #84]	; (60005fc8 <z_impl_log_panic+0x58>)
60005f74:	7829      	ldrb	r1, [r5, #0]
60005f76:	bb29      	cbnz	r1, 60005fc4 <z_impl_log_panic+0x54>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005f78:	4c14      	ldr	r4, [pc, #80]	; (60005fcc <z_impl_log_panic+0x5c>)
	(void)z_log_init(true, false);
60005f7a:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005f7c:	4e14      	ldr	r6, [pc, #80]	; (60005fd0 <z_impl_log_panic+0x60>)
	(void)z_log_init(true, false);
60005f7e:	f7ff fe51 	bl	60005c24 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005f82:	42b4      	cmp	r4, r6
60005f84:	d917      	bls.n	60005fb6 <z_impl_log_panic+0x46>
60005f86:	4913      	ldr	r1, [pc, #76]	; (60005fd4 <z_impl_log_panic+0x64>)
60005f88:	f240 1385 	movw	r3, #389	; 0x185
60005f8c:	4a12      	ldr	r2, [pc, #72]	; (60005fd8 <z_impl_log_panic+0x68>)
60005f8e:	4813      	ldr	r0, [pc, #76]	; (60005fdc <z_impl_log_panic+0x6c>)
60005f90:	f00c fe63 	bl	60012c5a <assert_print>
60005f94:	4812      	ldr	r0, [pc, #72]	; (60005fe0 <z_impl_log_panic+0x70>)
60005f96:	f00c fe60 	bl	60012c5a <assert_print>
60005f9a:	f240 1185 	movw	r1, #389	; 0x185
60005f9e:	480e      	ldr	r0, [pc, #56]	; (60005fd8 <z_impl_log_panic+0x68>)
60005fa0:	f00c fe54 	bl	60012c4c <assert_post_action>
	return backend->cb->active;
60005fa4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
60005fa6:	795b      	ldrb	r3, [r3, #5]
60005fa8:	b11b      	cbz	r3, 60005fb2 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
60005faa:	6823      	ldr	r3, [r4, #0]
60005fac:	4620      	mov	r0, r4
60005fae:	689b      	ldr	r3, [r3, #8]
60005fb0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005fb2:	3410      	adds	r4, #16
60005fb4:	e7e5      	b.n	60005f82 <z_impl_log_panic+0x12>
60005fb6:	d3f5      	bcc.n	60005fa4 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
60005fb8:	f7ff ff6a 	bl	60005e90 <z_impl_log_process>
		while (log_process() == true) {
60005fbc:	2800      	cmp	r0, #0
60005fbe:	d1fb      	bne.n	60005fb8 <z_impl_log_panic+0x48>
	panic_mode = true;
60005fc0:	2301      	movs	r3, #1
60005fc2:	702b      	strb	r3, [r5, #0]
}
60005fc4:	bd70      	pop	{r4, r5, r6, pc}
60005fc6:	bf00      	nop
60005fc8:	2020429d 	.word	0x2020429d
60005fcc:	60015104 	.word	0x60015104
60005fd0:	60015114 	.word	0x60015114
60005fd4:	6001725b 	.word	0x6001725b
60005fd8:	6001720a 	.word	0x6001720a
60005fdc:	60016dfb 	.word	0x60016dfb
60005fe0:	6001727c 	.word	0x6001727c

60005fe4 <log_process_thread_func>:
	STRUCT_SECTION_COUNT(log_backend, &cnt);
60005fe4:	4b30      	ldr	r3, [pc, #192]	; (600060a8 <log_process_thread_func+0xc4>)
{
60005fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60005fea:	4f30      	ldr	r7, [pc, #192]	; (600060ac <log_process_thread_func+0xc8>)
60005fec:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
60005fee:	091b      	lsrs	r3, r3, #4
60005ff0:	d10b      	bne.n	6000600a <log_process_thread_func+0x26>
60005ff2:	492f      	ldr	r1, [pc, #188]	; (600060b0 <log_process_thread_func+0xcc>)
60005ff4:	f44f 7352 	mov.w	r3, #840	; 0x348
60005ff8:	4a2e      	ldr	r2, [pc, #184]	; (600060b4 <log_process_thread_func+0xd0>)
60005ffa:	482f      	ldr	r0, [pc, #188]	; (600060b8 <log_process_thread_func+0xd4>)
60005ffc:	f00c fe2d 	bl	60012c5a <assert_print>
60006000:	f44f 7152 	mov.w	r1, #840	; 0x348
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60006004:	482b      	ldr	r0, [pc, #172]	; (600060b4 <log_process_thread_func+0xd0>)
60006006:	f00c fe21 	bl	60012c4c <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
6000600a:	2100      	movs	r1, #0
6000600c:	4608      	mov	r0, r1
6000600e:	f7ff fe09 	bl	60005c24 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
60006012:	4604      	mov	r4, r0
60006014:	b340      	cbz	r0, 60006068 <log_process_thread_func+0x84>
60006016:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
6000601a:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
6000601e:	f009 fa1b 	bl	6000f458 <z_impl_z_current_get>
	proc_tid = process_tid;
60006022:	4b26      	ldr	r3, [pc, #152]	; (600060bc <log_process_thread_func+0xd8>)
60006024:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
60006026:	b130      	cbz	r0, 60006036 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
60006028:	4b25      	ldr	r3, [pc, #148]	; (600060c0 <log_process_thread_func+0xdc>)
	    process_tid &&
6000602a:	681b      	ldr	r3, [r3, #0]
6000602c:	2b09      	cmp	r3, #9
6000602e:	dd02      	ble.n	60006036 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
60006030:	4824      	ldr	r0, [pc, #144]	; (600060c4 <log_process_thread_func+0xe0>)
60006032:	f007 fd71 	bl	6000db18 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
60006036:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
60006038:	f8df a088 	ldr.w	sl, [pc, #136]	; 600060c4 <log_process_thread_func+0xe0>
		if (activate_mask) {
6000603c:	b144      	cbz	r4, 60006050 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
6000603e:	4620      	mov	r0, r4
60006040:	f7ff fdbe 	bl	60005bc0 <activate_foreach_backend>
			if (!activate_mask) {
60006044:	4604      	mov	r4, r0
60006046:	b918      	cbnz	r0, 60006050 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
60006048:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
6000604c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
60006050:	f7ff ff1e 	bl	60005e90 <z_impl_log_process>
		if (log_process() == false) {
60006054:	4606      	mov	r6, r0
60006056:	b928      	cbnz	r0, 60006064 <log_process_thread_func+0x80>
			if (processed_any) {
60006058:	b95d      	cbnz	r5, 60006072 <log_process_thread_func+0x8e>
6000605a:	4642      	mov	r2, r8
6000605c:	464b      	mov	r3, r9
6000605e:	4650      	mov	r0, sl
60006060:	f007 fd98 	bl	6000db94 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
60006064:	4635      	mov	r5, r6
60006066:	e7e9      	b.n	6000603c <log_process_thread_func+0x58>
60006068:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
6000606c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
60006070:	e7d5      	b.n	6000601e <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60006072:	4d0d      	ldr	r5, [pc, #52]	; (600060a8 <log_process_thread_func+0xc4>)
60006074:	e008      	b.n	60006088 <log_process_thread_func+0xa4>
60006076:	d2f0      	bcs.n	6000605a <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
60006078:	682b      	ldr	r3, [r5, #0]
6000607a:	699b      	ldr	r3, [r3, #24]
6000607c:	b11b      	cbz	r3, 60006086 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
6000607e:	2200      	movs	r2, #0
60006080:	4628      	mov	r0, r5
60006082:	4611      	mov	r1, r2
60006084:	4798      	blx	r3
60006086:	3510      	adds	r5, #16
60006088:	42bd      	cmp	r5, r7
6000608a:	d9f4      	bls.n	60006076 <log_process_thread_func+0x92>
6000608c:	490e      	ldr	r1, [pc, #56]	; (600060c8 <log_process_thread_func+0xe4>)
6000608e:	f44f 734f 	mov.w	r3, #828	; 0x33c
60006092:	4a08      	ldr	r2, [pc, #32]	; (600060b4 <log_process_thread_func+0xd0>)
60006094:	4808      	ldr	r0, [pc, #32]	; (600060b8 <log_process_thread_func+0xd4>)
60006096:	f00c fde0 	bl	60012c5a <assert_print>
6000609a:	480c      	ldr	r0, [pc, #48]	; (600060cc <log_process_thread_func+0xe8>)
6000609c:	f00c fddd 	bl	60012c5a <assert_print>
600060a0:	f44f 714f 	mov.w	r1, #828	; 0x33c
600060a4:	e7ae      	b.n	60006004 <log_process_thread_func+0x20>
600060a6:	bf00      	nop
600060a8:	60015104 	.word	0x60015104
600060ac:	60015114 	.word	0x60015114
600060b0:	6001729b 	.word	0x6001729b
600060b4:	6001720a 	.word	0x6001720a
600060b8:	60016dfb 	.word	0x60016dfb
600060bc:	20203c18 	.word	0x20203c18
600060c0:	20203c20 	.word	0x20203c20
600060c4:	20202cd8 	.word	0x20202cd8
600060c8:	6001725b 	.word	0x6001725b
600060cc:	6001727c 	.word	0x6001727c

600060d0 <z_log_msg_post_finalize>:
{
600060d0:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
600060d2:	482b      	ldr	r0, [pc, #172]	; (60006180 <z_log_msg_post_finalize+0xb0>)
600060d4:	f00c feeb 	bl	60012eae <atomic_inc>
	if (panic_mode) {
600060d8:	4b2a      	ldr	r3, [pc, #168]	; (60006184 <z_log_msg_post_finalize+0xb4>)
600060da:	781b      	ldrb	r3, [r3, #0]
600060dc:	2b00      	cmp	r3, #0
600060de:	d034      	beq.n	6000614a <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
600060e0:	f04f 0310 	mov.w	r3, #16
600060e4:	f3ef 8411 	mrs	r4, BASEPRI
600060e8:	f383 8812 	msr	BASEPRI_MAX, r3
600060ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600060f0:	4825      	ldr	r0, [pc, #148]	; (60006188 <z_log_msg_post_finalize+0xb8>)
600060f2:	f007 fa21 	bl	6000d538 <z_spin_lock_valid>
600060f6:	b968      	cbnz	r0, 60006114 <z_log_msg_post_finalize+0x44>
600060f8:	2394      	movs	r3, #148	; 0x94
600060fa:	4a24      	ldr	r2, [pc, #144]	; (6000618c <z_log_msg_post_finalize+0xbc>)
600060fc:	4924      	ldr	r1, [pc, #144]	; (60006190 <z_log_msg_post_finalize+0xc0>)
600060fe:	4825      	ldr	r0, [pc, #148]	; (60006194 <z_log_msg_post_finalize+0xc4>)
60006100:	f00c fdab 	bl	60012c5a <assert_print>
60006104:	4920      	ldr	r1, [pc, #128]	; (60006188 <z_log_msg_post_finalize+0xb8>)
60006106:	4824      	ldr	r0, [pc, #144]	; (60006198 <z_log_msg_post_finalize+0xc8>)
60006108:	f00c fda7 	bl	60012c5a <assert_print>
6000610c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000610e:	481f      	ldr	r0, [pc, #124]	; (6000618c <z_log_msg_post_finalize+0xbc>)
60006110:	f00c fd9c 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
60006114:	481c      	ldr	r0, [pc, #112]	; (60006188 <z_log_msg_post_finalize+0xb8>)
60006116:	f007 fa2b 	bl	6000d570 <z_spin_lock_set_owner>
6000611a:	f7ff feb9 	bl	60005e90 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000611e:	481a      	ldr	r0, [pc, #104]	; (60006188 <z_log_msg_post_finalize+0xb8>)
60006120:	f007 fa18 	bl	6000d554 <z_spin_unlock_valid>
60006124:	b958      	cbnz	r0, 6000613e <z_log_msg_post_finalize+0x6e>
60006126:	23c2      	movs	r3, #194	; 0xc2
60006128:	4a18      	ldr	r2, [pc, #96]	; (6000618c <z_log_msg_post_finalize+0xbc>)
6000612a:	491c      	ldr	r1, [pc, #112]	; (6000619c <z_log_msg_post_finalize+0xcc>)
6000612c:	4819      	ldr	r0, [pc, #100]	; (60006194 <z_log_msg_post_finalize+0xc4>)
6000612e:	f00c fd94 	bl	60012c5a <assert_print>
60006132:	4915      	ldr	r1, [pc, #84]	; (60006188 <z_log_msg_post_finalize+0xb8>)
60006134:	481a      	ldr	r0, [pc, #104]	; (600061a0 <z_log_msg_post_finalize+0xd0>)
60006136:	f00c fd90 	bl	60012c5a <assert_print>
6000613a:	21c2      	movs	r1, #194	; 0xc2
6000613c:	e7e7      	b.n	6000610e <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
6000613e:	f384 8811 	msr	BASEPRI, r4
60006142:	f3bf 8f6f 	isb	sy
}
60006146:	b002      	add	sp, #8
60006148:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
6000614a:	4b16      	ldr	r3, [pc, #88]	; (600061a4 <z_log_msg_post_finalize+0xd4>)
6000614c:	681b      	ldr	r3, [r3, #0]
6000614e:	2b00      	cmp	r3, #0
60006150:	d0f9      	beq.n	60006146 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
60006152:	b950      	cbnz	r0, 6000616a <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
60006154:	2200      	movs	r2, #0
60006156:	2300      	movs	r3, #0
60006158:	4813      	ldr	r0, [pc, #76]	; (600061a8 <z_log_msg_post_finalize+0xd8>)
6000615a:	e9cd 2300 	strd	r2, r3, [sp]
6000615e:	f242 7210 	movw	r2, #10000	; 0x2710
60006162:	2300      	movs	r3, #0
60006164:	f009 fe5e 	bl	6000fe24 <z_impl_k_timer_start>
60006168:	e7ed      	b.n	60006146 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
6000616a:	280a      	cmp	r0, #10
6000616c:	d1eb      	bne.n	60006146 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
6000616e:	480e      	ldr	r0, [pc, #56]	; (600061a8 <z_log_msg_post_finalize+0xd8>)
60006170:	f00e fb08 	bl	60014784 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
60006174:	480d      	ldr	r0, [pc, #52]	; (600061ac <z_log_msg_post_finalize+0xdc>)
}
60006176:	b002      	add	sp, #8
60006178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000617c:	f007 bccc 	b.w	6000db18 <z_impl_k_sem_give>
60006180:	20203c20 	.word	0x20203c20
60006184:	2020429d 	.word	0x2020429d
60006188:	20203c10 	.word	0x20203c10
6000618c:	6001717c 	.word	0x6001717c
60006190:	600171a9 	.word	0x600171a9
60006194:	60016dfb 	.word	0x60016dfb
60006198:	600171be 	.word	0x600171be
6000619c:	600171d6 	.word	0x600171d6
600061a0:	600171ed 	.word	0x600171ed
600061a4:	20203c18 	.word	0x20203c18
600061a8:	20203968 	.word	0x20203968
600061ac:	20202cd8 	.word	0x20202cd8

600061b0 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
600061b0:	4b06      	ldr	r3, [pc, #24]	; (600061cc <z_log_msg_commit+0x1c>)
{
600061b2:	b510      	push	{r4, lr}
600061b4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
600061b6:	681b      	ldr	r3, [r3, #0]
600061b8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
600061ba:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
600061bc:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
600061be:	4804      	ldr	r0, [pc, #16]	; (600061d0 <z_log_msg_commit+0x20>)
600061c0:	f7ff facc 	bl	6000575c <mpsc_pbuf_commit>
}
600061c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
600061c8:	f7ff bf82 	b.w	600060d0 <z_log_msg_post_finalize>
600061cc:	202029b8 	.word	0x202029b8
600061d0:	20202bc8 	.word	0x20202bc8

600061d4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
600061d4:	4a04      	ldr	r2, [pc, #16]	; (600061e8 <log_source_name_get+0x14>)
600061d6:	4b05      	ldr	r3, [pc, #20]	; (600061ec <log_source_name_get+0x18>)
600061d8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
600061da:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
600061de:	bf34      	ite	cc
600061e0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
600061e4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
600061e6:	4770      	bx	lr
600061e8:	6001506c 	.word	0x6001506c
600061ec:	60015104 	.word	0x60015104

600061f0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
600061f0:	4b0e      	ldr	r3, [pc, #56]	; (6000622c <log_backend_enable+0x3c>)
600061f2:	1ac3      	subs	r3, r0, r3
600061f4:	111b      	asrs	r3, r3, #4
600061f6:	3301      	adds	r3, #1
{
600061f8:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
600061fa:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
600061fc:	b948      	cbnz	r0, 60006212 <log_backend_enable+0x22>
600061fe:	490c      	ldr	r1, [pc, #48]	; (60006230 <log_backend_enable+0x40>)
60006200:	23de      	movs	r3, #222	; 0xde
60006202:	480c      	ldr	r0, [pc, #48]	; (60006234 <log_backend_enable+0x44>)
60006204:	4a0c      	ldr	r2, [pc, #48]	; (60006238 <log_backend_enable+0x48>)
60006206:	f00c fd28 	bl	60012c5a <assert_print>
6000620a:	21de      	movs	r1, #222	; 0xde
6000620c:	480a      	ldr	r0, [pc, #40]	; (60006238 <log_backend_enable+0x48>)
6000620e:	f00c fd1d 	bl	60012c4c <assert_post_action>
	backend->cb->id = id;
60006212:	6844      	ldr	r4, [r0, #4]
60006214:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
60006216:	6843      	ldr	r3, [r0, #4]
60006218:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
6000621a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
6000621c:	6843      	ldr	r3, [r0, #4]
6000621e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
60006220:	6843      	ldr	r3, [r0, #4]
60006222:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
60006224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
60006228:	f7ff bd86 	b.w	60005d38 <z_log_notify_backend_enabled>
6000622c:	60015104 	.word	0x60015104
60006230:	6001733b 	.word	0x6001733b
60006234:	60016dfb 	.word	0x60016dfb
60006238:	60017303 	.word	0x60017303

6000623c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
6000623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
60006240:	f3c1 44cb 	ubfx	r4, r1, #19, #12
60006244:	b08f      	sub	sp, #60	; 0x3c
60006246:	f3c1 2649 	ubfx	r6, r1, #9, #10
6000624a:	460d      	mov	r5, r1
6000624c:	4690      	mov	r8, r2
6000624e:	4699      	mov	r9, r3
60006250:	3417      	adds	r4, #23
60006252:	9005      	str	r0, [sp, #20]

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
60006254:	2e00      	cmp	r6, #0
60006256:	d03d      	beq.n	600062d4 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
60006258:	f04f 0b04 	mov.w	fp, #4
6000625c:	af09      	add	r7, sp, #36	; 0x24
6000625e:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
60006262:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
60006264:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
60006266:	ab0b      	add	r3, sp, #44	; 0x2c
60006268:	4640      	mov	r0, r8
6000626a:	f8cd b008 	str.w	fp, [sp, #8]
6000626e:	9701      	str	r7, [sp, #4]
60006270:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
60006274:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
60006276:	9607      	str	r6, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
60006278:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
6000627c:	f7fd fe8e 	bl	60003f9c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
60006280:	f3c0 0309 	ubfx	r3, r0, #0, #10
60006284:	1918      	adds	r0, r3, r4
60006286:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
60006288:	f363 2552 	bfi	r5, r3, #9, #10
6000628c:	9306      	str	r3, [sp, #24]
6000628e:	f020 0007 	bic.w	r0, r0, #7
60006292:	0880      	lsrs	r0, r0, #2
60006294:	f7ff fde0 	bl	60005e58 <z_log_msg_alloc>
		if (msg) {
60006298:	4604      	mov	r4, r0
6000629a:	b308      	cbz	r0, 600062e0 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
6000629c:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
6000629e:	3010      	adds	r0, #16
600062a0:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
600062a2:	9907      	ldr	r1, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
600062a4:	900b      	str	r0, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
600062a6:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
600062a8:	930c      	str	r3, [sp, #48]	; 0x30
	return cbprintf_package_convert(in_packaged, in_len,
600062aa:	ab0b      	add	r3, sp, #44	; 0x2c
	struct z_cbprintf_buf_desc buf_desc = {
600062ac:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
600062ae:	f8cd a000 	str.w	sl, [sp]
600062b2:	4a11      	ldr	r2, [pc, #68]	; (600062f8 <z_impl_z_log_msg_static_create+0xbc>)
600062b4:	e9cd 7b01 	strd	r7, fp, [sp, #4]
600062b8:	f7fd fe70 	bl	60003f9c <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
600062bc:	2800      	cmp	r0, #0
600062be:	da0f      	bge.n	600062e0 <z_impl_z_log_msg_static_create+0xa4>
600062c0:	490e      	ldr	r1, [pc, #56]	; (600062fc <z_impl_z_log_msg_static_create+0xc0>)
600062c2:	2349      	movs	r3, #73	; 0x49
600062c4:	480e      	ldr	r0, [pc, #56]	; (60006300 <z_impl_z_log_msg_static_create+0xc4>)
600062c6:	4a0f      	ldr	r2, [pc, #60]	; (60006304 <z_impl_z_log_msg_static_create+0xc8>)
600062c8:	f00c fcc7 	bl	60012c5a <assert_print>
600062cc:	2149      	movs	r1, #73	; 0x49
600062ce:	480d      	ldr	r0, [pc, #52]	; (60006304 <z_impl_z_log_msg_static_create+0xc8>)
600062d0:	f00c fcbc 	bl	60012c4c <assert_post_action>
600062d4:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
600062d8:	0880      	lsrs	r0, r0, #2
600062da:	f7ff fdbd 	bl	60005e58 <z_log_msg_alloc>
600062de:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
600062e0:	f366 2552 	bfi	r5, r6, #9, #10
600062e4:	464b      	mov	r3, r9
600062e6:	9905      	ldr	r1, [sp, #20]
600062e8:	4620      	mov	r0, r4
600062ea:	462a      	mov	r2, r5
}
600062ec:	b00f      	add	sp, #60	; 0x3c
600062ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
600062f2:	f00c be1a 	b.w	60012f2a <z_log_msg_finalize>
600062f6:	bf00      	nop
600062f8:	60012eff 	.word	0x60012eff
600062fc:	60017388 	.word	0x60017388
60006300:	60016dfb 	.word	0x60016dfb
60006304:	6001735b 	.word	0x6001735b

60006308 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
60006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000630c:	b087      	sub	sp, #28
6000630e:	4604      	mov	r4, r0
60006310:	460f      	mov	r7, r1
60006312:	4693      	mov	fp, r2
60006314:	4698      	mov	r8, r3
60006316:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
6000631a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
6000631e:	b1ae      	cbz	r6, 6000634c <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60006320:	2110      	movs	r1, #16
60006322:	4633      	mov	r3, r6
60006324:	4652      	mov	r2, sl
60006326:	2000      	movs	r0, #0
60006328:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
6000632c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60006330:	f7fd fc16 	bl	60003b60 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
60006334:	1e01      	subs	r1, r0, #0
60006336:	da0a      	bge.n	6000634e <z_impl_z_log_msg_runtime_vcreate+0x46>
60006338:	4920      	ldr	r1, [pc, #128]	; (600063bc <z_impl_z_log_msg_runtime_vcreate+0xb4>)
6000633a:	2368      	movs	r3, #104	; 0x68
6000633c:	4a20      	ldr	r2, [pc, #128]	; (600063c0 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
6000633e:	4821      	ldr	r0, [pc, #132]	; (600063c4 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
60006340:	f00c fc8b 	bl	60012c5a <assert_print>
60006344:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
60006346:	481e      	ldr	r0, [pc, #120]	; (600063c0 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
60006348:	f00c fc80 	bl	60012c4c <assert_post_action>
		plen = 0;
6000634c:	4631      	mov	r1, r6
	struct log_msg_desc desc =
6000634e:	f004 0407 	and.w	r4, r4, #7
60006352:	f00b 0b07 	and.w	fp, fp, #7
60006356:	4b1c      	ldr	r3, [pc, #112]	; (600063c8 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60006358:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
6000635c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
6000635e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
60006360:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60006364:	4408      	add	r0, r1
	struct log_msg_desc desc =
60006366:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
6000636a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
6000636e:	431c      	orrs	r4, r3
60006370:	4b16      	ldr	r3, [pc, #88]	; (600063cc <z_impl_z_log_msg_runtime_vcreate+0xc4>)
		msg = z_log_msg_alloc(msg_wlen);
60006372:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
60006374:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
60006378:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
6000637a:	f7ff fd6d 	bl	60005e58 <z_log_msg_alloc>
			pkg = msg ? msg->data : NULL;
6000637e:	4605      	mov	r5, r0
60006380:	b190      	cbz	r0, 600063a8 <z_impl_z_log_msg_runtime_vcreate+0xa0>
	if (pkg && fmt) {
60006382:	b18e      	cbz	r6, 600063a8 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
60006384:	4633      	mov	r3, r6
60006386:	4652      	mov	r2, sl
60006388:	9903      	ldr	r1, [sp, #12]
6000638a:	3010      	adds	r0, #16
6000638c:	f8cd 9000 	str.w	r9, [sp]
60006390:	f7fd fbe6 	bl	60003b60 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
60006394:	2800      	cmp	r0, #0
60006396:	da07      	bge.n	600063a8 <z_impl_z_log_msg_runtime_vcreate+0xa0>
60006398:	4908      	ldr	r1, [pc, #32]	; (600063bc <z_impl_z_log_msg_runtime_vcreate+0xb4>)
6000639a:	2382      	movs	r3, #130	; 0x82
6000639c:	4a08      	ldr	r2, [pc, #32]	; (600063c0 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
6000639e:	4809      	ldr	r0, [pc, #36]	; (600063c4 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
600063a0:	f00c fc5b 	bl	60012c5a <assert_print>
600063a4:	2182      	movs	r1, #130	; 0x82
600063a6:	e7ce      	b.n	60006346 <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
600063a8:	4643      	mov	r3, r8
600063aa:	4622      	mov	r2, r4
600063ac:	4639      	mov	r1, r7
600063ae:	4628      	mov	r0, r5
	}
}
600063b0:	b007      	add	sp, #28
600063b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
600063b6:	f00c bdb8 	b.w	60012f2a <z_log_msg_finalize>
600063ba:	bf00      	nop
600063bc:	60017387 	.word	0x60017387
600063c0:	6001735b 	.word	0x6001735b
600063c4:	60016dfb 	.word	0x60016dfb
600063c8:	0007fe00 	.word	0x0007fe00
600063cc:	7ff80000 	.word	0x7ff80000

600063d0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
600063d0:	b40e      	push	{r1, r2, r3}
600063d2:	b503      	push	{r0, r1, lr}
600063d4:	ab03      	add	r3, sp, #12
600063d6:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
600063d8:	4805      	ldr	r0, [pc, #20]	; (600063f0 <print_formatted+0x20>)
{
600063da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
600063de:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
600063e0:	f00c fdca 	bl	60012f78 <cbvprintf>
	va_end(args);

	return length;
}
600063e4:	b002      	add	sp, #8
600063e6:	f85d eb04 	ldr.w	lr, [sp], #4
600063ea:	b003      	add	sp, #12
600063ec:	4770      	bx	lr
600063ee:	bf00      	nop
600063f0:	60006411 	.word	0x60006411

600063f4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
600063f4:	06ca      	lsls	r2, r1, #27
600063f6:	d405      	bmi.n	60006404 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
600063f8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
600063fa:	bf4c      	ite	mi
600063fc:	4902      	ldrmi	r1, [pc, #8]	; (60006408 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
600063fe:	4903      	ldrpl	r1, [pc, #12]	; (6000640c <newline_print+0x18>)
60006400:	f7ff bfe6 	b.w	600063d0 <print_formatted>
	}
}
60006404:	4770      	bx	lr
60006406:	bf00      	nop
60006408:	60019351 	.word	0x60019351
6000640c:	60017391 	.word	0x60017391

60006410 <out_func>:
{
60006410:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
60006412:	684b      	ldr	r3, [r1, #4]
{
60006414:	4605      	mov	r5, r0
60006416:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
60006418:	681a      	ldr	r2, [r3, #0]
6000641a:	68cb      	ldr	r3, [r1, #12]
6000641c:	429a      	cmp	r2, r3
6000641e:	d102      	bne.n	60006426 <out_func+0x16>
		log_output_flush(out_ctx);
60006420:	4608      	mov	r0, r1
60006422:	f00c fdb0 	bl	60012f86 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
60006426:	6863      	ldr	r3, [r4, #4]
60006428:	f3bf 8f5b 	dmb	ish
6000642c:	e853 2f00 	ldrex	r2, [r3]
60006430:	1c51      	adds	r1, r2, #1
60006432:	e843 1000 	strex	r0, r1, [r3]
60006436:	2800      	cmp	r0, #0
60006438:	d1f8      	bne.n	6000642c <out_func+0x1c>
6000643a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
6000643e:	68a3      	ldr	r3, [r4, #8]
60006440:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
60006442:	6863      	ldr	r3, [r4, #4]
60006444:	681a      	ldr	r2, [r3, #0]
60006446:	68e3      	ldr	r3, [r4, #12]
60006448:	429a      	cmp	r2, r3
6000644a:	d909      	bls.n	60006460 <out_func+0x50>
6000644c:	4905      	ldr	r1, [pc, #20]	; (60006464 <out_func+0x54>)
6000644e:	2379      	movs	r3, #121	; 0x79
60006450:	4805      	ldr	r0, [pc, #20]	; (60006468 <out_func+0x58>)
60006452:	4a06      	ldr	r2, [pc, #24]	; (6000646c <out_func+0x5c>)
60006454:	f00c fc01 	bl	60012c5a <assert_print>
60006458:	2179      	movs	r1, #121	; 0x79
6000645a:	4804      	ldr	r0, [pc, #16]	; (6000646c <out_func+0x5c>)
6000645c:	f00c fbf6 	bl	60012c4c <assert_post_action>
}
60006460:	2000      	movs	r0, #0
60006462:	bd38      	pop	{r3, r4, r5, pc}
60006464:	600173c3 	.word	0x600173c3
60006468:	60016dfb 	.word	0x60016dfb
6000646c:	60017394 	.word	0x60017394

60006470 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
60006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60006474:	b089      	sub	sp, #36	; 0x24
60006476:	469a      	mov	sl, r3
60006478:	4604      	mov	r4, r0
6000647a:	460d      	mov	r5, r1
6000647c:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
60006480:	9e16      	ldr	r6, [sp, #88]	; 0x58
60006482:	9206      	str	r2, [sp, #24]
60006484:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
60006488:	9305      	str	r3, [sp, #20]
6000648a:	9b15      	ldr	r3, [sp, #84]	; 0x54
6000648c:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
6000648e:	f1bb 0f00 	cmp.w	fp, #0
60006492:	f000 8085 	beq.w	600065a0 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
60006496:	f006 0308 	and.w	r3, r6, #8
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
6000649a:	f006 0902 	and.w	r9, r6, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
6000649e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
600064a0:	f00c fd2b 	bl	60012efa <z_log_get_tag>
	if (tag) {
600064a4:	4602      	mov	r2, r0
600064a6:	2800      	cmp	r0, #0
600064a8:	d049      	beq.n	6000653e <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
600064aa:	498d      	ldr	r1, [pc, #564]	; (600066e0 <log_output_process+0x270>)
600064ac:	4620      	mov	r0, r4
600064ae:	f7ff ff8f 	bl	600063d0 <print_formatted>
600064b2:	4680      	mov	r8, r0
	if (stamp) {
600064b4:	f1b9 0f00 	cmp.w	r9, #0
600064b8:	d008      	beq.n	600064cc <log_output_process+0x5c>
	if (!format) {
600064ba:	f016 0f44 	tst.w	r6, #68	; 0x44
600064be:	d140      	bne.n	60006542 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
600064c0:	462a      	mov	r2, r5
600064c2:	4988      	ldr	r1, [pc, #544]	; (600066e4 <log_output_process+0x274>)
600064c4:	4620      	mov	r0, r4
600064c6:	f7ff ff83 	bl	600063d0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
600064ca:	4480      	add	r8, r0
	if (color) {
600064cc:	f006 0301 	and.w	r3, r6, #1
600064d0:	b153      	cbz	r3, 600064e8 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
600064d2:	4b85      	ldr	r3, [pc, #532]	; (600066e8 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
600064d4:	4620      	mov	r0, r4
600064d6:	4985      	ldr	r1, [pc, #532]	; (600066ec <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
600064d8:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
600064dc:	4b84      	ldr	r3, [pc, #528]	; (600066f0 <log_output_process+0x280>)
600064de:	2a00      	cmp	r2, #0
600064e0:	bf08      	it	eq
600064e2:	461a      	moveq	r2, r3
600064e4:	f7ff ff74 	bl	600063d0 <print_formatted>
	if (level_on) {
600064e8:	f006 0308 	and.w	r3, r6, #8
600064ec:	2b00      	cmp	r3, #0
600064ee:	d054      	beq.n	6000659a <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
600064f0:	4b80      	ldr	r3, [pc, #512]	; (600066f4 <log_output_process+0x284>)
600064f2:	4620      	mov	r0, r4
600064f4:	4980      	ldr	r1, [pc, #512]	; (600066f8 <log_output_process+0x288>)
600064f6:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
600064fa:	f7ff ff69 	bl	600063d0 <print_formatted>
600064fe:	4605      	mov	r5, r0
	if (domain) {
60006500:	9b06      	ldr	r3, [sp, #24]
60006502:	b12b      	cbz	r3, 60006510 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
60006504:	461a      	mov	r2, r3
60006506:	497d      	ldr	r1, [pc, #500]	; (600066fc <log_output_process+0x28c>)
60006508:	4620      	mov	r0, r4
6000650a:	f7ff ff61 	bl	600063d0 <print_formatted>
6000650e:	4405      	add	r5, r0
	if (source) {
60006510:	f1ba 0f00 	cmp.w	sl, #0
60006514:	d005      	beq.n	60006522 <log_output_process+0xb2>
		total += print_formatted(output,
60006516:	4652      	mov	r2, sl
60006518:	4979      	ldr	r1, [pc, #484]	; (60006700 <log_output_process+0x290>)
6000651a:	4620      	mov	r0, r4
6000651c:	f7ff ff58 	bl	600063d0 <print_formatted>
60006520:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
60006522:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
60006524:	2f00      	cmp	r7, #0
60006526:	d149      	bne.n	600065bc <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
60006528:	9b04      	ldr	r3, [sp, #16]
6000652a:	2b00      	cmp	r3, #0
6000652c:	d160      	bne.n	600065f0 <log_output_process+0x180>
	if (color) {
6000652e:	07f3      	lsls	r3, r6, #31
60006530:	f100 80cf 	bmi.w	600066d2 <log_output_process+0x262>
	newline_print(output, flags);
60006534:	4631      	mov	r1, r6
60006536:	4620      	mov	r0, r4
60006538:	f7ff ff5c 	bl	600063f4 <newline_print>
}
6000653c:	e0c3      	b.n	600066c6 <log_output_process+0x256>
	uint32_t length = 0U;
6000653e:	4680      	mov	r8, r0
60006540:	e7b8      	b.n	600064b4 <log_output_process+0x44>
	} else if (freq != 0U) {
60006542:	4b70      	ldr	r3, [pc, #448]	; (60006704 <log_output_process+0x294>)
60006544:	6818      	ldr	r0, [r3, #0]
60006546:	2800      	cmp	r0, #0
60006548:	d0bf      	beq.n	600064ca <log_output_process+0x5a>
		timestamp /= timestamp_div;
6000654a:	4b6f      	ldr	r3, [pc, #444]	; (60006708 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
6000654c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
60006550:	f44f 6161 	mov.w	r1, #3600	; 0xe10
		mins = seconds / 60U;
60006554:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		timestamp /= timestamp_div;
60006558:	681b      	ldr	r3, [r3, #0]
6000655a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
6000655e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
60006562:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
60006566:	fb09 f505 	mul.w	r5, r9, r5
6000656a:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
6000656e:	fbb5 fef0 	udiv	lr, r5, r0
60006572:	fb01 3112 	mls	r1, r1, r2, r3
60006576:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
6000657a:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
6000657e:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
60006582:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
60006586:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
6000658a:	9100      	str	r1, [sp, #0]
6000658c:	4620      	mov	r0, r4
6000658e:	495f      	ldr	r1, [pc, #380]	; (6000670c <log_output_process+0x29c>)
60006590:	e9cd e501 	strd	lr, r5, [sp, #4]
60006594:	f7ff ff1c 	bl	600063d0 <print_formatted>
60006598:	e797      	b.n	600064ca <log_output_process+0x5a>
	int total = 0;
6000659a:	f006 0508 	and.w	r5, r6, #8
6000659e:	e7af      	b.n	60006500 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
600065a0:	f1ba 0f01 	cmp.w	sl, #1
600065a4:	d106      	bne.n	600065b4 <log_output_process+0x144>
	if (package) {
600065a6:	b9ef      	cbnz	r7, 600065e4 <log_output_process+0x174>
	if (data_len) {
600065a8:	9b04      	ldr	r3, [sp, #16]
600065aa:	2b00      	cmp	r3, #0
600065ac:	f000 808b 	beq.w	600066c6 <log_output_process+0x256>
		prefix_offset = 0;
600065b0:	2500      	movs	r5, #0
600065b2:	e01d      	b.n	600065f0 <log_output_process+0x180>
	if (package) {
600065b4:	2f00      	cmp	r7, #0
600065b6:	d0f7      	beq.n	600065a8 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
600065b8:	4855      	ldr	r0, [pc, #340]	; (60006710 <log_output_process+0x2a0>)
600065ba:	e014      	b.n	600065e6 <log_output_process+0x176>
		cb = out_func;
600065bc:	4855      	ldr	r0, [pc, #340]	; (60006714 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
600065be:	463b      	mov	r3, r7
600065c0:	4622      	mov	r2, r4
600065c2:	4955      	ldr	r1, [pc, #340]	; (60006718 <log_output_process+0x2a8>)
600065c4:	f00c f831 	bl	6001262a <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
600065c8:	2800      	cmp	r0, #0
600065ca:	da0e      	bge.n	600065ea <log_output_process+0x17a>
600065cc:	4953      	ldr	r1, [pc, #332]	; (6000671c <log_output_process+0x2ac>)
600065ce:	f44f 7300 	mov.w	r3, #512	; 0x200
600065d2:	4853      	ldr	r0, [pc, #332]	; (60006720 <log_output_process+0x2b0>)
600065d4:	4a53      	ldr	r2, [pc, #332]	; (60006724 <log_output_process+0x2b4>)
600065d6:	f00c fb40 	bl	60012c5a <assert_print>
600065da:	f44f 7100 	mov.w	r1, #512	; 0x200
600065de:	4851      	ldr	r0, [pc, #324]	; (60006724 <log_output_process+0x2b4>)
600065e0:	f00c fb34 	bl	60012c4c <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
600065e4:	484b      	ldr	r0, [pc, #300]	; (60006714 <log_output_process+0x2a4>)
		prefix_offset = 0;
600065e6:	465d      	mov	r5, fp
600065e8:	e7e9      	b.n	600065be <log_output_process+0x14e>
	if (data_len) {
600065ea:	9b04      	ldr	r3, [sp, #16]
600065ec:	2b00      	cmp	r3, #0
600065ee:	d066      	beq.n	600066be <log_output_process+0x24e>
		print_formatted(output, " ");
600065f0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 60006728 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
600065f4:	f8df 9134 	ldr.w	r9, [pc, #308]	; 6000672c <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
600065f8:	9f04      	ldr	r7, [sp, #16]
	for (int i = 0; i < prefix_offset; i++) {
600065fa:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
600065fe:	4631      	mov	r1, r6
60006600:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
60006602:	2f10      	cmp	r7, #16
60006604:	bf28      	it	cs
60006606:	2710      	movcs	r7, #16
	newline_print(output, flags);
60006608:	f7ff fef4 	bl	600063f4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
6000660c:	4555      	cmp	r5, sl
6000660e:	dc43      	bgt.n	60006698 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
60006610:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60006612:	f04f 0a01 	mov.w	sl, #1
			print_formatted(output, "%02x ", data[i]);
60006616:	4649      	mov	r1, r9
60006618:	4620      	mov	r0, r4
6000661a:	781a      	ldrb	r2, [r3, #0]
6000661c:	f7ff fed8 	bl	600063d0 <print_formatted>
		if (i > 0 && !(i % 8)) {
60006620:	f01a 0f07 	tst.w	sl, #7
60006624:	d103      	bne.n	6000662e <log_output_process+0x1be>
			print_formatted(output, " ");
60006626:	4641      	mov	r1, r8
60006628:	4620      	mov	r0, r4
6000662a:	f7ff fed1 	bl	600063d0 <print_formatted>
		if (i < length) {
6000662e:	4557      	cmp	r7, sl
60006630:	d939      	bls.n	600066a6 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
60006632:	9b05      	ldr	r3, [sp, #20]
60006634:	4649      	mov	r1, r9
60006636:	4620      	mov	r0, r4
60006638:	f813 200a 	ldrb.w	r2, [r3, sl]
6000663c:	f7ff fec8 	bl	600063d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60006640:	f10a 0a01 	add.w	sl, sl, #1
60006644:	f1ba 0f10 	cmp.w	sl, #16
60006648:	d1ea      	bne.n	60006620 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
6000664a:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
6000664e:	4938      	ldr	r1, [pc, #224]	; (60006730 <log_output_process+0x2c0>)
60006650:	4620      	mov	r0, r4
60006652:	f7ff febd 	bl	600063d0 <print_formatted>
		if (i < length) {
60006656:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
60006658:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
6000665a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
6000665c:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
6000665e:	4b35      	ldr	r3, [pc, #212]	; (60006734 <log_output_process+0x2c4>)
60006660:	5c99      	ldrb	r1, [r3, r2]
60006662:	f011 0f97 	tst.w	r1, #151	; 0x97
60006666:	4934      	ldr	r1, [pc, #208]	; (60006738 <log_output_process+0x2c8>)
60006668:	bf08      	it	eq
6000666a:	222e      	moveq	r2, #46	; 0x2e
6000666c:	f7ff feb0 	bl	600063d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60006670:	f10a 0a01 	add.w	sl, sl, #1
60006674:	f1ba 0f10 	cmp.w	sl, #16
60006678:	d01a      	beq.n	600066b0 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
6000667a:	f01a 0f07 	tst.w	sl, #7
6000667e:	d103      	bne.n	60006688 <log_output_process+0x218>
			print_formatted(output, " ");
60006680:	4641      	mov	r1, r8
60006682:	4620      	mov	r0, r4
60006684:	f7ff fea4 	bl	600063d0 <print_formatted>
		if (i < length) {
60006688:	4557      	cmp	r7, sl
6000668a:	4652      	mov	r2, sl
6000668c:	d8e4      	bhi.n	60006658 <log_output_process+0x1e8>
			print_formatted(output, " ");
6000668e:	4641      	mov	r1, r8
60006690:	4620      	mov	r0, r4
60006692:	f7ff fe9d 	bl	600063d0 <print_formatted>
60006696:	e7eb      	b.n	60006670 <log_output_process+0x200>
		print_formatted(output, " ");
60006698:	4641      	mov	r1, r8
6000669a:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
6000669c:	f10a 0a01 	add.w	sl, sl, #1
		print_formatted(output, " ");
600066a0:	f7ff fe96 	bl	600063d0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
600066a4:	e7b2      	b.n	6000660c <log_output_process+0x19c>
			print_formatted(output, "   ");
600066a6:	4925      	ldr	r1, [pc, #148]	; (6000673c <log_output_process+0x2cc>)
600066a8:	4620      	mov	r0, r4
600066aa:	f7ff fe91 	bl	600063d0 <print_formatted>
600066ae:	e7c7      	b.n	60006640 <log_output_process+0x1d0>
		data += length;
600066b0:	9b05      	ldr	r3, [sp, #20]
600066b2:	443b      	add	r3, r7
600066b4:	9305      	str	r3, [sp, #20]
	} while (len);
600066b6:	9b04      	ldr	r3, [sp, #16]
600066b8:	1bdb      	subs	r3, r3, r7
600066ba:	9304      	str	r3, [sp, #16]
600066bc:	d19c      	bne.n	600065f8 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
600066be:	f1bb 0f00 	cmp.w	fp, #0
600066c2:	f47f af34 	bne.w	6000652e <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
600066c6:	4620      	mov	r0, r4
}
600066c8:	b009      	add	sp, #36	; 0x24
600066ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
600066ce:	f00c bc5a 	b.w	60012f86 <log_output_flush>
		print_formatted(output, "%s", log_color);
600066d2:	4a07      	ldr	r2, [pc, #28]	; (600066f0 <log_output_process+0x280>)
600066d4:	4620      	mov	r0, r4
600066d6:	4905      	ldr	r1, [pc, #20]	; (600066ec <log_output_process+0x27c>)
600066d8:	f7ff fe7a 	bl	600063d0 <print_formatted>
}
600066dc:	e72a      	b.n	60006534 <log_output_process+0xc4>
600066de:	bf00      	nop
600066e0:	600173f8 	.word	0x600173f8
600066e4:	600173fc 	.word	0x600173fc
600066e8:	600151a4 	.word	0x600151a4
600066ec:	60017421 	.word	0x60017421
600066f0:	600173f3 	.word	0x600173f3
600066f4:	600151b8 	.word	0x600151b8
600066f8:	60017424 	.word	0x60017424
600066fc:	6001742a 	.word	0x6001742a
60006700:	6001742e 	.word	0x6001742e
60006704:	20203c2c 	.word	0x20203c2c
60006708:	20203c28 	.word	0x20203c28
6000670c:	60017405 	.word	0x60017405
60006710:	60012fa1 	.word	0x60012fa1
60006714:	60006411 	.word	0x60006411
60006718:	60012f79 	.word	0x60012f79
6000671c:	60017433 	.word	0x60017433
60006720:	60016dfb 	.word	0x60016dfb
60006724:	60017394 	.word	0x60017394
60006728:	60017444 	.word	0x60017444
6000672c:	6001743c 	.word	0x6001743c
60006730:	60017446 	.word	0x60017446
60006734:	60016b01 	.word	0x60016b01
60006738:	60017448 	.word	0x60017448
6000673c:	60017442 	.word	0x60017442

60006740 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
60006740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
60006744:	880f      	ldrh	r7, [r1, #0]
60006746:	b086      	sub	sp, #24
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
60006748:	684b      	ldr	r3, [r1, #4]
6000674a:	4605      	mov	r5, r0
6000674c:	460c      	mov	r4, r1
6000674e:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
60006750:	688e      	ldr	r6, [r1, #8]
	return msg->hdr.desc.level;
60006752:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
60006756:	b15b      	cbz	r3, 60006770 <log_output_msg_process+0x30>
60006758:	4a14      	ldr	r2, [pc, #80]	; (600067ac <log_output_msg_process+0x6c>)
6000675a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
6000675c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
60006760:	2900      	cmp	r1, #0
60006762:	db20      	blt.n	600067a6 <log_output_msg_process+0x66>
	return msg->hdr.desc.domain;
60006764:	7820      	ldrb	r0, [r4, #0]
60006766:	f3c0 00c2 	ubfx	r0, r0, #3, #3
6000676a:	f7ff fd33 	bl	600061d4 <log_source_name_get>
6000676e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
60006770:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
60006772:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
60006774:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
60006778:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
6000677c:	9700      	str	r7, [sp, #0]
	*len = msg->hdr.desc.package_len;
6000677e:	f3c2 2249 	ubfx	r2, r2, #9, #10
60006782:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
60006784:	eb01 0402 	add.w	r4, r1, r2
60006788:	f04f 0200 	mov.w	r2, #0
6000678c:	bf08      	it	eq
6000678e:	2100      	moveq	r1, #0
60006790:	e9cd 0803 	strd	r0, r8, [sp, #12]
60006794:	e9cd 1401 	strd	r1, r4, [sp, #4]
60006798:	4628      	mov	r0, r5
6000679a:	4631      	mov	r1, r6
6000679c:	f7ff fe68 	bl	60006470 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
600067a0:	b006      	add	sp, #24
600067a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
600067a6:	2300      	movs	r3, #0
600067a8:	e7e2      	b.n	60006770 <log_output_msg_process+0x30>
600067aa:	bf00      	nop
600067ac:	6001506c 	.word	0x6001506c

600067b0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
600067b0:	f242 730f 	movw	r3, #9999	; 0x270f
600067b4:	4a11      	ldr	r2, [pc, #68]	; (600067fc <log_output_dropped_process+0x4c>)
600067b6:	428b      	cmp	r3, r1
{
600067b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
600067ba:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
600067bc:	bf28      	it	cs
600067be:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
600067c0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
600067c2:	2105      	movs	r1, #5
600067c4:	4668      	mov	r0, sp
600067c6:	f00b ffa9 	bl	6001271c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
600067ca:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
600067cc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
600067ce:	220b      	movs	r2, #11
600067d0:	4628      	mov	r0, r5
600067d2:	685b      	ldr	r3, [r3, #4]
600067d4:	490a      	ldr	r1, [pc, #40]	; (60006800 <log_output_dropped_process+0x50>)
600067d6:	f00c fbc2 	bl	60012f5e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
600067da:	6863      	ldr	r3, [r4, #4]
600067dc:	4632      	mov	r2, r6
600067de:	4669      	mov	r1, sp
600067e0:	4628      	mov	r0, r5
600067e2:	685b      	ldr	r3, [r3, #4]
600067e4:	f00c fbbb 	bl	60012f5e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
600067e8:	6863      	ldr	r3, [r4, #4]
600067ea:	221b      	movs	r2, #27
600067ec:	4905      	ldr	r1, [pc, #20]	; (60006804 <log_output_dropped_process+0x54>)
600067ee:	685b      	ldr	r3, [r3, #4]
600067f0:	4628      	mov	r0, r5
600067f2:	f00c fbb4 	bl	60012f5e <buffer_write>
		     output->control_block->ctx);
}
600067f6:	b002      	add	sp, #8
600067f8:	bd70      	pop	{r4, r5, r6, pc}
600067fa:	bf00      	nop
600067fc:	600191d0 	.word	0x600191d0
60006800:	60017467 	.word	0x60017467
60006804:	6001744b 	.word	0x6001744b

60006808 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
60006808:	2100      	movs	r1, #0
6000680a:	2301      	movs	r3, #1
6000680c:	4a06      	ldr	r2, [pc, #24]	; (60006828 <log_output_timestamp_freq_set+0x20>)
6000680e:	4290      	cmp	r0, r2
60006810:	d806      	bhi.n	60006820 <log_output_timestamp_freq_set+0x18>
60006812:	4a06      	ldr	r2, [pc, #24]	; (6000682c <log_output_timestamp_freq_set+0x24>)
60006814:	b901      	cbnz	r1, 60006818 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
60006816:	2301      	movs	r3, #1
60006818:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
6000681a:	4b05      	ldr	r3, [pc, #20]	; (60006830 <log_output_timestamp_freq_set+0x28>)
6000681c:	6018      	str	r0, [r3, #0]
}
6000681e:	4770      	bx	lr
		frequency /= 2U;
60006820:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
60006822:	2101      	movs	r1, #1
60006824:	005b      	lsls	r3, r3, #1
60006826:	e7f2      	b.n	6000680e <log_output_timestamp_freq_set+0x6>
60006828:	000f4240 	.word	0x000f4240
6000682c:	20203c28 	.word	0x20203c28
60006830:	20203c2c 	.word	0x20203c2c

60006834 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
60006834:	4b01      	ldr	r3, [pc, #4]	; (6000683c <format_set+0x8>)
	return 0;
}
60006836:	2000      	movs	r0, #0
	log_format_current = log_type;
60006838:	6019      	str	r1, [r3, #0]
}
6000683a:	4770      	bx	lr
6000683c:	20203c44 	.word	0x20203c44

60006840 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
60006840:	4b02      	ldr	r3, [pc, #8]	; (6000684c <panic+0xc>)
60006842:	2201      	movs	r2, #1
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
60006844:	4802      	ldr	r0, [pc, #8]	; (60006850 <panic+0x10>)
60006846:	701a      	strb	r2, [r3, #0]
60006848:	f00c bb9d 	b.w	60012f86 <log_output_flush>
6000684c:	2020429f 	.word	0x2020429f
60006850:	600151e8 	.word	0x600151e8

60006854 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
60006854:	4801      	ldr	r0, [pc, #4]	; (6000685c <dropped+0x8>)
60006856:	f7ff bfab 	b.w	600067b0 <log_output_dropped_process>
6000685a:	bf00      	nop
6000685c:	600151e8 	.word	0x600151e8

60006860 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
60006860:	4b06      	ldr	r3, [pc, #24]	; (6000687c <process+0x1c>)
{
60006862:	b510      	push	{r4, lr}
60006864:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
60006866:	6818      	ldr	r0, [r3, #0]
60006868:	f7ff fa50 	bl	60005d0c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
6000686c:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
6000686e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
60006870:	4621      	mov	r1, r4
60006872:	4803      	ldr	r0, [pc, #12]	; (60006880 <process+0x20>)
}
60006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
60006878:	4718      	bx	r3
6000687a:	bf00      	nop
6000687c:	20203c44 	.word	0x20203c44
60006880:	600151e8 	.word	0x600151e8

60006884 <char_out>:
{
60006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60006886:	460d      	mov	r5, r1
60006888:	4604      	mov	r4, r0
6000688a:	1846      	adds	r6, r0, r1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
6000688c:	4f05      	ldr	r7, [pc, #20]	; (600068a4 <char_out+0x20>)
		for (size_t i = 0; i < length; i++) {
6000688e:	42b4      	cmp	r4, r6
60006890:	d101      	bne.n	60006896 <char_out+0x12>
}
60006892:	4628      	mov	r0, r5
60006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
60006896:	f814 1b01 	ldrb.w	r1, [r4], #1
6000689a:	68bb      	ldr	r3, [r7, #8]
6000689c:	4801      	ldr	r0, [pc, #4]	; (600068a4 <char_out+0x20>)
6000689e:	685b      	ldr	r3, [r3, #4]
600068a0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
600068a2:	e7f4      	b.n	6000688e <char_out+0xa>
600068a4:	600148d8 	.word	0x600148d8

600068a8 <log_backend_uart_init>:
{
600068a8:	b508      	push	{r3, lr}
600068aa:	4807      	ldr	r0, [pc, #28]	; (600068c8 <log_backend_uart_init+0x20>)
600068ac:	f00d fe8b 	bl	600145c6 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
600068b0:	b948      	cbnz	r0, 600068c6 <log_backend_uart_init+0x1e>
600068b2:	4906      	ldr	r1, [pc, #24]	; (600068cc <log_backend_uart_init+0x24>)
600068b4:	2370      	movs	r3, #112	; 0x70
600068b6:	4806      	ldr	r0, [pc, #24]	; (600068d0 <log_backend_uart_init+0x28>)
600068b8:	4a06      	ldr	r2, [pc, #24]	; (600068d4 <log_backend_uart_init+0x2c>)
600068ba:	f00c f9ce 	bl	60012c5a <assert_print>
600068be:	2170      	movs	r1, #112	; 0x70
600068c0:	4804      	ldr	r0, [pc, #16]	; (600068d4 <log_backend_uart_init+0x2c>)
600068c2:	f00c f9c3 	bl	60012c4c <assert_post_action>
}
600068c6:	bd08      	pop	{r3, pc}
600068c8:	600148d8 	.word	0x600148d8
600068cc:	600174d1 	.word	0x600174d1
600068d0:	60016dfb 	.word	0x60016dfb
600068d4:	60017493 	.word	0x60017493

600068d8 <custom_handler>:
	return -ENOTSUP;
}

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
600068d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600068dc:	4605      	mov	r5, r0
600068de:	460e      	mov	r6, r1
600068e0:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600068e2:	4c1a      	ldr	r4, [pc, #104]	; (6000694c <custom_handler+0x74>)
600068e4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 60006950 <custom_handler+0x78>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
600068e8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 60006954 <custom_handler+0x7c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600068ec:	4544      	cmp	r4, r8
600068ee:	d928      	bls.n	60006942 <custom_handler+0x6a>
600068f0:	4919      	ldr	r1, [pc, #100]	; (60006958 <custom_handler+0x80>)
600068f2:	f240 53d3 	movw	r3, #1491	; 0x5d3
600068f6:	4a19      	ldr	r2, [pc, #100]	; (6000695c <custom_handler+0x84>)
600068f8:	4819      	ldr	r0, [pc, #100]	; (60006960 <custom_handler+0x88>)
600068fa:	f00c f9ae 	bl	60012c5a <assert_print>
600068fe:	4819      	ldr	r0, [pc, #100]	; (60006964 <custom_handler+0x8c>)
60006900:	f00c f9ab 	bl	60012c5a <assert_print>
60006904:	f240 51d3 	movw	r1, #1491	; 0x5d3
60006908:	4814      	ldr	r0, [pc, #80]	; (6000695c <custom_handler+0x84>)
6000690a:	f00c f99f 	bl	60012c4c <assert_post_action>
		if_descr = cfg_data->interface_descriptor;
6000690e:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60006910:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
60006914:	429a      	cmp	r2, r3
60006916:	d312      	bcc.n	6000693e <custom_handler+0x66>
			continue;
		}

		if (iface->custom_handler == NULL) {
60006918:	69a3      	ldr	r3, [r4, #24]
6000691a:	b183      	cbz	r3, 6000693e <custom_handler+0x66>
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
6000691c:	7890      	ldrb	r0, [r2, #2]
6000691e:	7929      	ldrb	r1, [r5, #4]
60006920:	4288      	cmp	r0, r1
60006922:	d105      	bne.n	60006930 <custom_handler+0x58>
			return iface->custom_handler(pSetup, len, data);
60006924:	463a      	mov	r2, r7
60006926:	4631      	mov	r1, r6
60006928:	4628      	mov	r0, r5
			}
		}
	}

	return -ENOTSUP;
}
6000692a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
6000692e:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
60006930:	7952      	ldrb	r2, [r2, #5]
60006932:	2a01      	cmp	r2, #1
60006934:	d103      	bne.n	6000693e <custom_handler+0x66>
				(void)iface->custom_handler(pSetup, len, data);
60006936:	463a      	mov	r2, r7
60006938:	4631      	mov	r1, r6
6000693a:	4628      	mov	r0, r5
6000693c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000693e:	3424      	adds	r4, #36	; 0x24
60006940:	e7d4      	b.n	600068ec <custom_handler+0x14>
60006942:	d3e4      	bcc.n	6000690e <custom_handler+0x36>
}
60006944:	f06f 0085 	mvn.w	r0, #133	; 0x85
60006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000694c:	20202db0 	.word	0x20202db0
60006950:	20202dd4 	.word	0x20202dd4
60006954:	20203c48 	.word	0x20203c48
60006958:	60017537 	.word	0x60017537
6000695c:	60017505 	.word	0x60017505
60006960:	60016dfb 	.word	0x60016dfb
60006964:	6001727c 	.word	0x6001727c

60006968 <class_handler>:
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60006968:	4b15      	ldr	r3, [pc, #84]	; (600069c0 <class_handler+0x58>)
{
6000696a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000696e:	4f15      	ldr	r7, [pc, #84]	; (600069c4 <class_handler+0x5c>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60006970:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006972:	4b15      	ldr	r3, [pc, #84]	; (600069c8 <class_handler+0x60>)
60006974:	42bb      	cmp	r3, r7
60006976:	d91e      	bls.n	600069b6 <class_handler+0x4e>
60006978:	4914      	ldr	r1, [pc, #80]	; (600069cc <class_handler+0x64>)
6000697a:	f240 53b6 	movw	r3, #1462	; 0x5b6
6000697e:	4a14      	ldr	r2, [pc, #80]	; (600069d0 <class_handler+0x68>)
60006980:	4814      	ldr	r0, [pc, #80]	; (600069d4 <class_handler+0x6c>)
60006982:	f00c f96a 	bl	60012c5a <assert_print>
60006986:	4814      	ldr	r0, [pc, #80]	; (600069d8 <class_handler+0x70>)
60006988:	f00c f967 	bl	60012c5a <assert_print>
6000698c:	f240 51b6 	movw	r1, #1462	; 0x5b6
60006990:	480f      	ldr	r0, [pc, #60]	; (600069d0 <class_handler+0x68>)
60006992:	f00c f95b 	bl	60012c4c <assert_post_action>
		if_descr = cfg_data->interface_descriptor;
60006996:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60006998:	42b5      	cmp	r5, r6
6000699a:	d30a      	bcc.n	600069b2 <class_handler+0x4a>
		if (iface->class_handler &&
6000699c:	691c      	ldr	r4, [r3, #16]
6000699e:	b144      	cbz	r4, 600069b2 <class_handler+0x4a>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
600069a0:	f895 c002 	ldrb.w	ip, [r5, #2]
600069a4:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
600069a6:	45ac      	cmp	ip, r5
600069a8:	d103      	bne.n	600069b2 <class_handler+0x4a>
			return iface->class_handler(pSetup, len, data);
600069aa:	4623      	mov	r3, r4
}
600069ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return iface->class_handler(pSetup, len, data);
600069b0:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600069b2:	3324      	adds	r3, #36	; 0x24
600069b4:	e7de      	b.n	60006974 <class_handler+0xc>
600069b6:	d3ee      	bcc.n	60006996 <class_handler+0x2e>
}
600069b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
600069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
600069c0:	20203c48 	.word	0x20203c48
600069c4:	20202dd4 	.word	0x20202dd4
600069c8:	20202db0 	.word	0x20202db0
600069cc:	60017537 	.word	0x60017537
600069d0:	60017505 	.word	0x60017505
600069d4:	60016dfb 	.word	0x60016dfb
600069d8:	6001727c 	.word	0x6001727c

600069dc <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
600069dc:	4b02      	ldr	r3, [pc, #8]	; (600069e8 <usb_reset_alt_setting+0xc>)
600069de:	2200      	movs	r2, #0
600069e0:	601a      	str	r2, [r3, #0]
600069e2:	605a      	str	r2, [r3, #4]
}
600069e4:	4770      	bx	lr
600069e6:	bf00      	nop
600069e8:	20203d03 	.word	0x20203d03

600069ec <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
600069ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600069f0:	4605      	mov	r5, r0
600069f2:	460e      	mov	r6, r1
600069f4:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600069f6:	4c12      	ldr	r4, [pc, #72]	; (60006a40 <vendor_handler+0x54>)
600069f8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 60006a44 <vendor_handler+0x58>
600069fc:	4544      	cmp	r4, r8
600069fe:	d91a      	bls.n	60006a36 <vendor_handler+0x4a>
60006a00:	4911      	ldr	r1, [pc, #68]	; (60006a48 <vendor_handler+0x5c>)
60006a02:	f240 6303 	movw	r3, #1539	; 0x603
60006a06:	4a11      	ldr	r2, [pc, #68]	; (60006a4c <vendor_handler+0x60>)
60006a08:	4811      	ldr	r0, [pc, #68]	; (60006a50 <vendor_handler+0x64>)
60006a0a:	f00c f926 	bl	60012c5a <assert_print>
60006a0e:	4811      	ldr	r0, [pc, #68]	; (60006a54 <vendor_handler+0x68>)
60006a10:	f00c f923 	bl	60012c5a <assert_print>
60006a14:	f240 6103 	movw	r1, #1539	; 0x603
60006a18:	480c      	ldr	r0, [pc, #48]	; (60006a4c <vendor_handler+0x60>)
60006a1a:	f00c f917 	bl	60012c4c <assert_post_action>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
60006a1e:	6963      	ldr	r3, [r4, #20]
60006a20:	b90b      	cbnz	r3, 60006a26 <vendor_handler+0x3a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006a22:	3424      	adds	r4, #36	; 0x24
60006a24:	e7ea      	b.n	600069fc <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
60006a26:	463a      	mov	r2, r7
60006a28:	4631      	mov	r1, r6
60006a2a:	4628      	mov	r0, r5
60006a2c:	4798      	blx	r3
60006a2e:	2800      	cmp	r0, #0
60006a30:	d1f7      	bne.n	60006a22 <vendor_handler+0x36>
			}
		}
	}

	return -ENOTSUP;
}
60006a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006a36:	d3f2      	bcc.n	60006a1e <vendor_handler+0x32>
	return -ENOTSUP;
60006a38:	f06f 0085 	mvn.w	r0, #133	; 0x85
60006a3c:	e7f9      	b.n	60006a32 <vendor_handler+0x46>
60006a3e:	bf00      	nop
60006a40:	20202db0 	.word	0x20202db0
60006a44:	20202dd4 	.word	0x20202dd4
60006a48:	60017537 	.word	0x60017537
60006a4c:	60017505 	.word	0x60017505
60006a50:	60016dfb 	.word	0x60016dfb
60006a54:	6001727c 	.word	0x6001727c

60006a58 <is_ep_valid>:
	if (USB_EP_GET_IDX(ep) == 0) {
60006a58:	0643      	lsls	r3, r0, #25
{
60006a5a:	b570      	push	{r4, r5, r6, lr}
	if (USB_EP_GET_IDX(ep) == 0) {
60006a5c:	d020      	beq.n	60006aa0 <is_ep_valid+0x48>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006a5e:	4b13      	ldr	r3, [pc, #76]	; (60006aac <is_ep_valid+0x54>)
60006a60:	4c13      	ldr	r4, [pc, #76]	; (60006ab0 <is_ep_valid+0x58>)
60006a62:	42a3      	cmp	r3, r4
60006a64:	d91e      	bls.n	60006aa4 <is_ep_valid+0x4c>
60006a66:	4913      	ldr	r1, [pc, #76]	; (60006ab4 <is_ep_valid+0x5c>)
60006a68:	f240 33ef 	movw	r3, #1007	; 0x3ef
60006a6c:	4a12      	ldr	r2, [pc, #72]	; (60006ab8 <is_ep_valid+0x60>)
60006a6e:	4813      	ldr	r0, [pc, #76]	; (60006abc <is_ep_valid+0x64>)
60006a70:	f00c f8f3 	bl	60012c5a <assert_print>
60006a74:	4812      	ldr	r0, [pc, #72]	; (60006ac0 <is_ep_valid+0x68>)
60006a76:	f00c f8f0 	bl	60012c5a <assert_print>
60006a7a:	f240 31ef 	movw	r1, #1007	; 0x3ef
60006a7e:	480e      	ldr	r0, [pc, #56]	; (60006ab8 <is_ep_valid+0x60>)
60006a80:	f00c f8e4 	bl	60012c4c <assert_post_action>
		ep_data = cfg_data->endpoint;
60006a84:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60006a86:	2200      	movs	r2, #0
60006a88:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
60006a8a:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60006a8c:	b2d5      	uxtb	r5, r2
60006a8e:	42ae      	cmp	r6, r5
60006a90:	d801      	bhi.n	60006a96 <is_ep_valid+0x3e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006a92:	3324      	adds	r3, #36	; 0x24
60006a94:	e7e5      	b.n	60006a62 <is_ep_valid+0xa>
			if (ep_data[n].ep_addr == ep) {
60006a96:	3201      	adds	r2, #1
60006a98:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
60006a9c:	4285      	cmp	r5, r0
60006a9e:	d1f5      	bne.n	60006a8c <is_ep_valid+0x34>
		return true;
60006aa0:	2001      	movs	r0, #1
60006aa2:	e001      	b.n	60006aa8 <is_ep_valid+0x50>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006aa4:	d3ee      	bcc.n	60006a84 <is_ep_valid+0x2c>
	return false;
60006aa6:	2000      	movs	r0, #0
}
60006aa8:	bd70      	pop	{r4, r5, r6, pc}
60006aaa:	bf00      	nop
60006aac:	20202db0 	.word	0x20202db0
60006ab0:	20202dd4 	.word	0x20202dd4
60006ab4:	60017537 	.word	0x60017537
60006ab8:	60017505 	.word	0x60017505
60006abc:	60016dfb 	.word	0x60016dfb
60006ac0:	6001727c 	.word	0x6001727c

60006ac4 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
60006ac4:	4809      	ldr	r0, [pc, #36]	; (60006aec <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
60006ac6:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
60006ac8:	7803      	ldrb	r3, [r0, #0]
60006aca:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
60006ace:	330a      	adds	r3, #10
60006ad0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
60006ad4:	b13b      	cbz	r3, 60006ae6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
60006ad6:	f100 0208 	add.w	r2, r0, #8
60006ada:	f100 0110 	add.w	r1, r0, #16
60006ade:	4798      	blx	r3
60006ae0:	43c0      	mvns	r0, r0
60006ae2:	0fc0      	lsrs	r0, r0, #31
}
60006ae4:	bd08      	pop	{r3, pc}
		return false;
60006ae6:	4618      	mov	r0, r3
60006ae8:	e7fc      	b.n	60006ae4 <usb_handle_request.constprop.0+0x20>
60006aea:	bf00      	nop
60006aec:	20203c48 	.word	0x20203c48

60006af0 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
60006af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
60006af2:	4b07      	ldr	r3, [pc, #28]	; (60006b10 <usb_device_init.part.0+0x20>)
60006af4:	aa04      	add	r2, sp, #16
60006af6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006afa:	4806      	ldr	r0, [pc, #24]	; (60006b14 <usb_device_init.part.0+0x24>)
60006afc:	9305      	str	r3, [sp, #20]
60006afe:	2302      	movs	r3, #2
60006b00:	9304      	str	r3, [sp, #16]
60006b02:	f00c fa5b 	bl	60012fbc <z_log_msg_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
60006b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60006b0a:	b007      	add	sp, #28
60006b0c:	f85d fb04 	ldr.w	pc, [sp], #4
60006b10:	6001755a 	.word	0x6001755a
60006b14:	600150f4 	.word	0x600150f4

60006b18 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
60006b18:	b580      	push	{r7, lr}
60006b1a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
60006b1c:	b088      	sub	sp, #32
60006b1e:	466a      	mov	r2, sp
60006b20:	4b06      	ldr	r3, [pc, #24]	; (60006b3c <get_ep_bm_from_addr.part.0+0x24>)
60006b22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006b26:	e9c2 3005 	strd	r3, r0, [r2, #20]
60006b2a:	2303      	movs	r3, #3
60006b2c:	4804      	ldr	r0, [pc, #16]	; (60006b40 <get_ep_bm_from_addr.part.0+0x28>)
60006b2e:	f842 3f10 	str.w	r3, [r2, #16]!
60006b32:	f00c fa43 	bl	60012fbc <z_log_msg_static_create.constprop.0>
}
60006b36:	2000      	movs	r0, #0
60006b38:	46bd      	mov	sp, r7
60006b3a:	bd80      	pop	{r7, pc}
60006b3c:	6001757f 	.word	0x6001757f
60006b40:	600150f4 	.word	0x600150f4

60006b44 <disable_endpoint>:
{
60006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60006b46:	af00      	add	r7, sp, #0
60006b48:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
60006b4a:	f002 fd8b 	bl	60009664 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
60006b4e:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
60006b52:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
60006b54:	d11a      	bne.n	60006b8c <disable_endpoint+0x48>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_addr);
60006b56:	466c      	mov	r4, sp
60006b58:	b088      	sub	sp, #32
60006b5a:	466a      	mov	r2, sp
60006b5c:	4b15      	ldr	r3, [pc, #84]	; (60006bb4 <disable_endpoint+0x70>)
60006b5e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60006b62:	4815      	ldr	r0, [pc, #84]	; (60006bb8 <disable_endpoint+0x74>)
60006b64:	e9c2 3505 	strd	r3, r5, [r2, #20]
60006b68:	2303      	movs	r3, #3
60006b6a:	f842 3f10 	str.w	r3, [r2, #16]!
60006b6e:	f00c fa25 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006b72:	46a5      	mov	sp, r4
	ep_bm = get_ep_bm_from_addr(ep_addr);
60006b74:	4628      	mov	r0, r5
	return 0;
60006b76:	2400      	movs	r4, #0
	ep_bm = get_ep_bm_from_addr(ep_addr);
60006b78:	f00c fa23 	bl	60012fc2 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
60006b7c:	4a0f      	ldr	r2, [pc, #60]	; (60006bbc <disable_endpoint+0x78>)
60006b7e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
60006b82:	ea23 0300 	bic.w	r3, r3, r0
60006b86:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
60006b8a:	e010      	b.n	60006bae <disable_endpoint+0x6a>
	} else if (ret) {
60006b8c:	2800      	cmp	r0, #0
60006b8e:	d0f1      	beq.n	60006b74 <disable_endpoint+0x30>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
60006b90:	466e      	mov	r6, sp
60006b92:	b088      	sub	sp, #32
60006b94:	466a      	mov	r2, sp
60006b96:	4b0a      	ldr	r3, [pc, #40]	; (60006bc0 <disable_endpoint+0x7c>)
60006b98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006b9c:	4806      	ldr	r0, [pc, #24]	; (60006bb8 <disable_endpoint+0x74>)
60006b9e:	e9c2 3505 	strd	r3, r5, [r2, #20]
60006ba2:	2303      	movs	r3, #3
60006ba4:	f842 3f10 	str.w	r3, [r2, #16]!
60006ba8:	f00c fa08 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006bac:	46b5      	mov	sp, r6
}
60006bae:	4620      	mov	r0, r4
60006bb0:	46bd      	mov	sp, r7
60006bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60006bb4:	6001759a 	.word	0x6001759a
60006bb8:	600150f4 	.word	0x600150f4
60006bbc:	20203c48 	.word	0x20203c48
60006bc0:	600175bb 	.word	0x600175bb

60006bc4 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
60006bc4:	2804      	cmp	r0, #4
{
60006bc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60006bca:	4604      	mov	r4, r0
60006bcc:	460f      	mov	r7, r1
60006bce:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 60006ca4 <forward_status_cb+0xe0>
	if (status == USB_DC_DISCONNECTED) {
60006bd2:	d01a      	beq.n	60006c0a <forward_status_cb+0x46>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
60006bd4:	2801      	cmp	r0, #1
60006bd6:	d134      	bne.n	60006c42 <forward_status_cb+0x7e>
		if (usb_dev.configured) {
60006bd8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 60006ca8 <forward_status_cb+0xe4>
60006bdc:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
60006be0:	b37b      	cbz	r3, 60006c42 <forward_status_cb+0x7e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006be2:	4d32      	ldr	r5, [pc, #200]	; (60006cac <forward_status_cb+0xe8>)
			usb_cancel_transfers();
60006be4:	f000 ffa8 	bl	60007b38 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006be8:	454d      	cmp	r5, r9
60006bea:	d93a      	bls.n	60006c62 <forward_status_cb+0x9e>
60006bec:	4930      	ldr	r1, [pc, #192]	; (60006cb0 <forward_status_cb+0xec>)
60006bee:	f240 43bd 	movw	r3, #1213	; 0x4bd
60006bf2:	4a30      	ldr	r2, [pc, #192]	; (60006cb4 <forward_status_cb+0xf0>)
60006bf4:	4830      	ldr	r0, [pc, #192]	; (60006cb8 <forward_status_cb+0xf4>)
60006bf6:	f00c f830 	bl	60012c5a <assert_print>
60006bfa:	4830      	ldr	r0, [pc, #192]	; (60006cbc <forward_status_cb+0xf8>)
60006bfc:	f00c f82d 	bl	60012c5a <assert_print>
60006c00:	f240 41bd 	movw	r1, #1213	; 0x4bd
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c04:	482b      	ldr	r0, [pc, #172]	; (60006cb4 <forward_status_cb+0xf0>)
60006c06:	f00c f821 	bl	60012c4c <assert_post_action>
		usb_reset_alt_setting();
60006c0a:	f7ff fee7 	bl	600069dc <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
60006c0e:	e7e3      	b.n	60006bd8 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
60006c10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
60006c14:	9201      	str	r2, [sp, #4]
			if (ret < 0) {
60006c16:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
60006c1a:	7930      	ldrb	r0, [r6, #4]
60006c1c:	f002 fd22 	bl	60009664 <usb_dc_ep_disable>
60006c20:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
60006c22:	7930      	ldrb	r0, [r6, #4]
60006c24:	f00c f9cd 	bl	60012fc2 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
60006c28:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
60006c2c:	f1bb 0f00 	cmp.w	fp, #0
60006c30:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
60006c32:	ea23 0300 	bic.w	r3, r3, r0
60006c36:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
60006c3a:	da16      	bge.n	60006c6a <forward_status_cb+0xa6>
			usb_dev.configured = false;
60006c3c:	2300      	movs	r3, #0
60006c3e:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c42:	4d1a      	ldr	r5, [pc, #104]	; (60006cac <forward_status_cb+0xe8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c44:	454d      	cmp	r5, r9
60006c46:	d91f      	bls.n	60006c88 <forward_status_cb+0xc4>
60006c48:	4919      	ldr	r1, [pc, #100]	; (60006cb0 <forward_status_cb+0xec>)
60006c4a:	f240 43e9 	movw	r3, #1257	; 0x4e9
60006c4e:	4a19      	ldr	r2, [pc, #100]	; (60006cb4 <forward_status_cb+0xf0>)
60006c50:	4819      	ldr	r0, [pc, #100]	; (60006cb8 <forward_status_cb+0xf4>)
60006c52:	f00c f802 	bl	60012c5a <assert_print>
60006c56:	4819      	ldr	r0, [pc, #100]	; (60006cbc <forward_status_cb+0xf8>)
60006c58:	f00b ffff 	bl	60012c5a <assert_print>
60006c5c:	f240 41e9 	movw	r1, #1257	; 0x4e9
60006c60:	e7d0      	b.n	60006c04 <forward_status_cb+0x40>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c62:	d2eb      	bcs.n	60006c3c <forward_status_cb+0x78>
		ep_data = cfg_data->endpoint;
60006c64:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60006c66:	f04f 0a00 	mov.w	sl, #0
60006c6a:	7f2b      	ldrb	r3, [r5, #28]
60006c6c:	fa5f f68a 	uxtb.w	r6, sl
60006c70:	42b3      	cmp	r3, r6
60006c72:	d8cd      	bhi.n	60006c10 <forward_status_cb+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c74:	3524      	adds	r5, #36	; 0x24
60006c76:	e7b7      	b.n	60006be8 <forward_status_cb+0x24>
		if (cfg_data->cb_usb_status) {
60006c78:	68eb      	ldr	r3, [r5, #12]
60006c7a:	b11b      	cbz	r3, 60006c84 <forward_status_cb+0xc0>
			cfg_data->cb_usb_status(cfg_data, status, param);
60006c7c:	463a      	mov	r2, r7
60006c7e:	4621      	mov	r1, r4
60006c80:	4628      	mov	r0, r5
60006c82:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60006c84:	3524      	adds	r5, #36	; 0x24
60006c86:	e7dd      	b.n	60006c44 <forward_status_cb+0x80>
60006c88:	d3f6      	bcc.n	60006c78 <forward_status_cb+0xb4>
	if (usb_dev.user_status_callback) {
60006c8a:	4b07      	ldr	r3, [pc, #28]	; (60006ca8 <forward_status_cb+0xe4>)
60006c8c:	6a1b      	ldr	r3, [r3, #32]
60006c8e:	b12b      	cbz	r3, 60006c9c <forward_status_cb+0xd8>
		usb_dev.user_status_callback(status, param);
60006c90:	4639      	mov	r1, r7
60006c92:	4620      	mov	r0, r4
}
60006c94:	b003      	add	sp, #12
60006c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
60006c9a:	4718      	bx	r3
}
60006c9c:	b003      	add	sp, #12
60006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60006ca2:	bf00      	nop
60006ca4:	20202dd4 	.word	0x20202dd4
60006ca8:	20203c48 	.word	0x20203c48
60006cac:	20202db0 	.word	0x20202db0
60006cb0:	60017537 	.word	0x60017537
60006cb4:	60017505 	.word	0x60017505
60006cb8:	60016dfb 	.word	0x60016dfb
60006cbc:	6001727c 	.word	0x6001727c

60006cc0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
60006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60006cc4:	b082      	sub	sp, #8
	uint8_t ep = setup->wIndex;
60006cc6:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
60006cc8:	4688      	mov	r8, r1
60006cca:	af00      	add	r7, sp, #0
	if (!is_ep_valid(ep)) {
60006ccc:	4620      	mov	r0, r4
	uint8_t ep = setup->wIndex;
60006cce:	71fc      	strb	r4, [r7, #7]
	if (!is_ep_valid(ep)) {
60006cd0:	f7ff fec2 	bl	60006a58 <is_ep_valid>
60006cd4:	4605      	mov	r5, r0
60006cd6:	b308      	cbz	r0, 60006d1c <usb_halt_endpoint_req.isra.0+0x5c>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
60006cd8:	f014 0f7f 	tst.w	r4, #127	; 0x7f
60006cdc:	4e1f      	ldr	r6, [pc, #124]	; (60006d5c <usb_halt_endpoint_req.isra.0+0x9c>)
60006cde:	d003      	beq.n	60006ce8 <usb_halt_endpoint_req.isra.0+0x28>
60006ce0:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
60006ce4:	2b00      	cmp	r3, #0
60006ce6:	d036      	beq.n	60006d56 <usb_halt_endpoint_req.isra.0+0x96>
		if (halt) {
60006ce8:	f1b8 0f00 	cmp.w	r8, #0
60006cec:	d01b      	beq.n	60006d26 <usb_halt_endpoint_req.isra.0+0x66>
			LOG_INF("Set halt ep 0x%02x", ep);
60006cee:	46e8      	mov	r8, sp
60006cf0:	b088      	sub	sp, #32
60006cf2:	466a      	mov	r2, sp
60006cf4:	4b1a      	ldr	r3, [pc, #104]	; (60006d60 <usb_halt_endpoint_req.isra.0+0xa0>)
60006cf6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
60006cfa:	481a      	ldr	r0, [pc, #104]	; (60006d64 <usb_halt_endpoint_req.isra.0+0xa4>)
60006cfc:	e9c2 3405 	strd	r3, r4, [r2, #20]
60006d00:	2303      	movs	r3, #3
60006d02:	f842 3f10 	str.w	r3, [r2, #16]!
60006d06:	f00c f959 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006d0a:	46c5      	mov	sp, r8
			usb_dc_ep_set_stall(ep);
60006d0c:	79f8      	ldrb	r0, [r7, #7]
60006d0e:	f002 fb51 	bl	600093b4 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
60006d12:	69f3      	ldr	r3, [r6, #28]
60006d14:	b113      	cbz	r3, 60006d1c <usb_halt_endpoint_req.isra.0+0x5c>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
60006d16:	1df9      	adds	r1, r7, #7
60006d18:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
60006d1a:	4798      	blx	r3
}
60006d1c:	4628      	mov	r0, r5
60006d1e:	3708      	adds	r7, #8
60006d20:	46bd      	mov	sp, r7
60006d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
60006d26:	46e8      	mov	r8, sp
60006d28:	b088      	sub	sp, #32
60006d2a:	466a      	mov	r2, sp
60006d2c:	4b0e      	ldr	r3, [pc, #56]	; (60006d68 <usb_halt_endpoint_req.isra.0+0xa8>)
60006d2e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
60006d32:	480c      	ldr	r0, [pc, #48]	; (60006d64 <usb_halt_endpoint_req.isra.0+0xa4>)
60006d34:	e9c2 3405 	strd	r3, r4, [r2, #20]
60006d38:	2303      	movs	r3, #3
60006d3a:	f842 3f10 	str.w	r3, [r2, #16]!
60006d3e:	f00c f93d 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006d42:	46c5      	mov	sp, r8
			usb_dc_ep_clear_stall(ep);
60006d44:	79f8      	ldrb	r0, [r7, #7]
60006d46:	f002 fb6d 	bl	60009424 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
60006d4a:	69f3      	ldr	r3, [r6, #28]
60006d4c:	2b00      	cmp	r3, #0
60006d4e:	d0e5      	beq.n	60006d1c <usb_halt_endpoint_req.isra.0+0x5c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
60006d50:	1df9      	adds	r1, r7, #7
60006d52:	2009      	movs	r0, #9
60006d54:	e7e1      	b.n	60006d1a <usb_halt_endpoint_req.isra.0+0x5a>
		return false;
60006d56:	461d      	mov	r5, r3
60006d58:	e7e0      	b.n	60006d1c <usb_halt_endpoint_req.isra.0+0x5c>
60006d5a:	bf00      	nop
60006d5c:	20203c48 	.word	0x20203c48
60006d60:	600175dd 	.word	0x600175dd
60006d64:	600150f4 	.word	0x600150f4
60006d68:	600175f0 	.word	0x600175f0

60006d6c <set_endpoint>:
{
60006d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
60006d6e:	b083      	sub	sp, #12
60006d70:	4604      	mov	r4, r0
	if (ep_bm & usb_dev.ep_bm) {
60006d72:	4d38      	ldr	r5, [pc, #224]	; (60006e54 <set_endpoint+0xe8>)
{
60006d74:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
60006d76:	7880      	ldrb	r0, [r0, #2]
60006d78:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
60006d7a:	7923      	ldrb	r3, [r4, #4]
60006d7c:	7962      	ldrb	r2, [r4, #5]
60006d7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
60006d82:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
60006d84:	78e3      	ldrb	r3, [r4, #3]
60006d86:	f003 0303 	and.w	r3, r3, #3
60006d8a:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
60006d8c:	f00c f919 	bl	60012fc2 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
60006d90:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
60006d94:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
60006d96:	4218      	tst	r0, r3
60006d98:	d009      	beq.n	60006dae <set_endpoint+0x42>
		reset_endpoint(ep_desc);
60006d9a:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
60006d9c:	4620      	mov	r0, r4
60006d9e:	f000 fead 	bl	60007afc <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
60006da2:	4620      	mov	r0, r4
60006da4:	f7ff fece 	bl	60006b44 <disable_endpoint>
	return z_impl_k_usleep(us);
60006da8:	2096      	movs	r0, #150	; 0x96
60006daa:	f00d fca7 	bl	600146fc <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
60006dae:	4638      	mov	r0, r7
60006db0:	f002 fa44 	bl	6000923c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
60006db4:	f110 0f78 	cmn.w	r0, #120	; 0x78
60006db8:	783b      	ldrb	r3, [r7, #0]
60006dba:	d12d      	bne.n	60006e18 <set_endpoint+0xac>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
60006dbc:	466c      	mov	r4, sp
60006dbe:	b088      	sub	sp, #32
60006dc0:	466a      	mov	r2, sp
60006dc2:	4925      	ldr	r1, [pc, #148]	; (60006e58 <set_endpoint+0xec>)
60006dc4:	4825      	ldr	r0, [pc, #148]	; (60006e5c <set_endpoint+0xf0>)
60006dc6:	e9c2 1305 	strd	r1, r3, [r2, #20]
60006dca:	2303      	movs	r3, #3
60006dcc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60006dd0:	f842 3f10 	str.w	r3, [r2, #16]!
60006dd4:	f00c f8f2 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006dd8:	46a5      	mov	sp, r4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
60006dda:	7838      	ldrb	r0, [r7, #0]
60006ddc:	f002 fbd0 	bl	60009580 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
60006de0:	f110 0f78 	cmn.w	r0, #120	; 0x78
60006de4:	d12d      	bne.n	60006e42 <set_endpoint+0xd6>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
60006de6:	466c      	mov	r4, sp
60006de8:	b088      	sub	sp, #32
60006dea:	783b      	ldrb	r3, [r7, #0]
60006dec:	466a      	mov	r2, sp
60006dee:	491c      	ldr	r1, [pc, #112]	; (60006e60 <set_endpoint+0xf4>)
60006df0:	481a      	ldr	r0, [pc, #104]	; (60006e5c <set_endpoint+0xf0>)
60006df2:	e9c2 1305 	strd	r1, r3, [r2, #20]
60006df6:	2303      	movs	r3, #3
60006df8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60006dfc:	f842 3f10 	str.w	r3, [r2, #16]!
60006e00:	f00c f8dc 	bl	60012fbc <z_log_msg_static_create.constprop.0>
60006e04:	46a5      	mov	sp, r4
	usb_dev.ep_bm |= ep_bm;
60006e06:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
60006e0a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
60006e0c:	4333      	orrs	r3, r6
	usb_dev.configured = true;
60006e0e:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
60006e12:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
60006e16:	e011      	b.n	60006e3c <set_endpoint+0xd0>
	} else if (ret) {
60006e18:	2800      	cmp	r0, #0
60006e1a:	d0de      	beq.n	60006dda <set_endpoint+0x6e>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
60006e1c:	466c      	mov	r4, sp
60006e1e:	b088      	sub	sp, #32
60006e20:	466a      	mov	r2, sp
60006e22:	4910      	ldr	r1, [pc, #64]	; (60006e64 <set_endpoint+0xf8>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
60006e24:	480d      	ldr	r0, [pc, #52]	; (60006e5c <set_endpoint+0xf0>)
60006e26:	e9c2 1305 	strd	r1, r3, [r2, #20]
60006e2a:	2303      	movs	r3, #3
60006e2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006e30:	f842 3f10 	str.w	r3, [r2, #16]!
60006e34:	f00c f8c2 	bl	60012fbc <z_log_msg_static_create.constprop.0>
		return false;
60006e38:	2000      	movs	r0, #0
60006e3a:	46a5      	mov	sp, r4
}
60006e3c:	370c      	adds	r7, #12
60006e3e:	46bd      	mov	sp, r7
60006e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ret) {
60006e42:	2800      	cmp	r0, #0
60006e44:	d0df      	beq.n	60006e06 <set_endpoint+0x9a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
60006e46:	466c      	mov	r4, sp
60006e48:	b088      	sub	sp, #32
60006e4a:	783b      	ldrb	r3, [r7, #0]
60006e4c:	466a      	mov	r2, sp
60006e4e:	4906      	ldr	r1, [pc, #24]	; (60006e68 <set_endpoint+0xfc>)
60006e50:	e7e8      	b.n	60006e24 <set_endpoint+0xb8>
60006e52:	bf00      	nop
60006e54:	20203c48 	.word	0x20203c48
60006e58:	60017605 	.word	0x60017605
60006e5c:	600150f4 	.word	0x600150f4
60006e60:	6001764c 	.word	0x6001764c
60006e64:	60017628 	.word	0x60017628
60006e68:	6001766c 	.word	0x6001766c

60006e6c <usb_handle_standard_request>:
{
60006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
60006e70:	4d92      	ldr	r5, [pc, #584]	; (600070bc <usb_handle_standard_request+0x250>)
{
60006e72:	4604      	mov	r4, r0
60006e74:	460e      	mov	r6, r1
60006e76:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
60006e78:	69ab      	ldr	r3, [r5, #24]
60006e7a:	b9c3      	cbnz	r3, 60006eae <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
60006e7c:	7820      	ldrb	r0, [r4, #0]
60006e7e:	f000 001f 	and.w	r0, r0, #31
60006e82:	2801      	cmp	r0, #1
60006e84:	d076      	beq.n	60006f74 <usb_handle_standard_request+0x108>
60006e86:	2802      	cmp	r0, #2
60006e88:	f000 80dc 	beq.w	60007044 <usb_handle_standard_request+0x1d8>
60006e8c:	bb00      	cbnz	r0, 60006ed0 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
60006e8e:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
60006e92:	683a      	ldr	r2, [r7, #0]
	if (usb_reqtype_is_to_host(setup)) {
60006e94:	2900      	cmp	r1, #0
		switch (setup->bRequest) {
60006e96:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
60006e98:	da2e      	bge.n	60006ef8 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
60006e9a:	2b06      	cmp	r3, #6
60006e9c:	d00c      	beq.n	60006eb8 <usb_handle_standard_request+0x4c>
60006e9e:	2b08      	cmp	r3, #8
60006ea0:	d025      	beq.n	60006eee <usb_handle_standard_request+0x82>
60006ea2:	b9ab      	cbnz	r3, 60006ed0 <usb_handle_standard_request+0x64>
	data[1] = 0U;
60006ea4:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
60006ea6:	2301      	movs	r3, #1
60006ea8:	7013      	strb	r3, [r2, #0]
		*len = 2;
60006eaa:	2302      	movs	r3, #2
60006eac:	e103      	b.n	600070b6 <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
60006eae:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
60006eb0:	2800      	cmp	r0, #0
60006eb2:	d1e3      	bne.n	60006e7c <usb_handle_standard_request+0x10>
		return 0;
60006eb4:	2000      	movs	r0, #0
60006eb6:	e00d      	b.n	60006ed4 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
60006eb8:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
60006eba:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
60006ebc:	1f0a      	subs	r2, r1, #4
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
60006ebe:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
60006ec0:	2a01      	cmp	r2, #1
60006ec2:	d905      	bls.n	60006ed0 <usb_handle_standard_request+0x64>
60006ec4:	2907      	cmp	r1, #7
60006ec6:	d803      	bhi.n	60006ed0 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
60006ec8:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
60006eca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
60006ecc:	781c      	ldrb	r4, [r3, #0]
60006ece:	b91c      	cbnz	r4, 60006ed8 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
60006ed0:	f06f 0015 	mvn.w	r0, #21
}
60006ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
60006ed8:	785d      	ldrb	r5, [r3, #1]
60006eda:	4565      	cmp	r5, ip
60006edc:	d103      	bne.n	60006ee6 <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
60006ede:	4282      	cmp	r2, r0
60006ee0:	f000 80e4 	beq.w	600070ac <usb_handle_standard_request+0x240>
			cur_index++;
60006ee4:	3001      	adds	r0, #1
		p += p[DESC_bLength];
60006ee6:	4423      	add	r3, r4
60006ee8:	e7f0      	b.n	60006ecc <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
60006eea:	781b      	ldrb	r3, [r3, #0]
60006eec:	e0e3      	b.n	600070b6 <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
60006eee:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
60006ef2:	7013      	strb	r3, [r2, #0]
				*len = 1;
60006ef4:	2301      	movs	r3, #1
60006ef6:	e0de      	b.n	600070b6 <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
60006ef8:	2b05      	cmp	r3, #5
60006efa:	d011      	beq.n	60006f20 <usb_handle_standard_request+0xb4>
60006efc:	2b09      	cmp	r3, #9
60006efe:	d1e7      	bne.n	60006ed0 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
60006f00:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
60006f02:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
60006f04:	2b00      	cmp	r3, #0
60006f06:	d132      	bne.n	60006f6e <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
60006f08:	f7ff fd68 	bl	600069dc <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
60006f0c:	8863      	ldrh	r3, [r4, #2]
60006f0e:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
60006f12:	69eb      	ldr	r3, [r5, #28]
60006f14:	2b00      	cmp	r3, #0
60006f16:	d0cd      	beq.n	60006eb4 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
60006f18:	4969      	ldr	r1, [pc, #420]	; (600070c0 <usb_handle_standard_request+0x254>)
60006f1a:	2003      	movs	r0, #3
60006f1c:	4798      	blx	r3
60006f1e:	e7c9      	b.n	60006eb4 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
60006f20:	78a0      	ldrb	r0, [r4, #2]
60006f22:	f002 f943 	bl	600091ac <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
60006f26:	2800      	cmp	r0, #0
60006f28:	d0c4      	beq.n	60006eb4 <usb_handle_standard_request+0x48>
60006f2a:	e7d1      	b.n	60006ed0 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
60006f2c:	7873      	ldrb	r3, [r6, #1]
60006f2e:	2b04      	cmp	r3, #4
60006f30:	d010      	beq.n	60006f54 <usb_handle_standard_request+0xe8>
60006f32:	2b05      	cmp	r3, #5
60006f34:	d011      	beq.n	60006f5a <usb_handle_standard_request+0xee>
60006f36:	2b02      	cmp	r3, #2
60006f38:	d104      	bne.n	60006f44 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
60006f3a:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
60006f3c:	8863      	ldrh	r3, [r4, #2]
				found = true;
60006f3e:	42bb      	cmp	r3, r7
60006f40:	bf08      	it	eq
60006f42:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
60006f44:	7833      	ldrb	r3, [r6, #0]
60006f46:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
60006f48:	7833      	ldrb	r3, [r6, #0]
60006f4a:	2b00      	cmp	r3, #0
60006f4c:	d1ee      	bne.n	60006f2c <usb_handle_standard_request+0xc0>
	if (found) {
60006f4e:	2800      	cmp	r0, #0
60006f50:	d0be      	beq.n	60006ed0 <usb_handle_standard_request+0x64>
60006f52:	e7d9      	b.n	60006f08 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
60006f54:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
60006f58:	e7f4      	b.n	60006f44 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
60006f5a:	8863      	ldrh	r3, [r4, #2]
60006f5c:	42bb      	cmp	r3, r7
60006f5e:	d1f1      	bne.n	60006f44 <usb_handle_standard_request+0xd8>
60006f60:	f1b8 0f00 	cmp.w	r8, #0
60006f64:	d1ee      	bne.n	60006f44 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
60006f66:	4630      	mov	r0, r6
60006f68:	f7ff ff00 	bl	60006d6c <set_endpoint>
			break;
60006f6c:	e7ea      	b.n	60006f44 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
60006f6e:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
60006f70:	46b8      	mov	r8, r7
60006f72:	e7e9      	b.n	60006f48 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
60006f74:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
60006f78:	f8d7 c000 	ldr.w	ip, [r7]
60006f7c:	2b00      	cmp	r3, #0
60006f7e:	d0a7      	beq.n	60006ed0 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
60006f80:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
60006f82:	88a2      	ldrh	r2, [r4, #4]
60006f84:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
60006f88:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
60006f8a:	7818      	ldrb	r0, [r3, #0]
60006f8c:	2800      	cmp	r0, #0
60006f8e:	d09f      	beq.n	60006ed0 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
60006f90:	7859      	ldrb	r1, [r3, #1]
60006f92:	2902      	cmp	r1, #2
60006f94:	d104      	bne.n	60006fa0 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
60006f96:	f893 8004 	ldrb.w	r8, [r3, #4]
60006f9a:	45f0      	cmp	r8, lr
60006f9c:	f200 8092 	bhi.w	600070c4 <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
60006fa0:	4403      	add	r3, r0
60006fa2:	e7f2      	b.n	60006f8a <usb_handle_standard_request+0x11e>
			data[0] = 0U;
60006fa4:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
60006fa8:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
60006fac:	6031      	str	r1, [r6, #0]
			return true;
60006fae:	e781      	b.n	60006eb4 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
60006fb0:	441f      	add	r7, r3
60006fb2:	e093      	b.n	600070dc <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
60006fb4:	2b0b      	cmp	r3, #11
60006fb6:	d18b      	bne.n	60006ed0 <usb_handle_standard_request+0x64>
	bool ret = false;
60006fb8:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
60006fba:	f04f 08ff 	mov.w	r8, #255	; 0xff
	const uint8_t *if_desc = NULL;
60006fbe:	46b2      	mov	sl, r6
	uint8_t cur_alt_setting = 0xFF;
60006fc0:	46c1      	mov	r9, r8
60006fc2:	e006      	b.n	60006fd2 <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
60006fc4:	787b      	ldrb	r3, [r7, #1]
60006fc6:	2b04      	cmp	r3, #4
60006fc8:	d00f      	beq.n	60006fea <usb_handle_standard_request+0x17e>
60006fca:	2b05      	cmp	r3, #5
60006fcc:	d021      	beq.n	60007012 <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
60006fce:	783b      	ldrb	r3, [r7, #0]
60006fd0:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
60006fd2:	783b      	ldrb	r3, [r7, #0]
60006fd4:	2b00      	cmp	r3, #0
60006fd6:	d1f5      	bne.n	60006fc4 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
60006fd8:	69eb      	ldr	r3, [r5, #28]
60006fda:	b113      	cbz	r3, 60006fe2 <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
60006fdc:	4651      	mov	r1, sl
60006fde:	2007      	movs	r0, #7
60006fe0:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
60006fe2:	2e00      	cmp	r6, #0
60006fe4:	f47f af66 	bne.w	60006eb4 <usb_handle_standard_request+0x48>
60006fe8:	e772      	b.n	60006ed0 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
60006fea:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
60006fee:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
60006ff0:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
60006ff4:	4598      	cmp	r8, r3
60006ff6:	d1ea      	bne.n	60006fce <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
60006ff8:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
60006ffa:	4599      	cmp	r9, r3
60006ffc:	d1e7      	bne.n	60006fce <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
60006ffe:	f1b8 0f07 	cmp.w	r8, #7
60007002:	d81c      	bhi.n	6000703e <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
60007004:	eb05 0308 	add.w	r3, r5, r8
		return true;
60007008:	46ba      	mov	sl, r7
6000700a:	2601      	movs	r6, #1
				ret = usb_set_alt_setting(setup->wIndex,
6000700c:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
60007010:	e7dd      	b.n	60006fce <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
60007012:	88a3      	ldrh	r3, [r4, #4]
60007014:	4543      	cmp	r3, r8
60007016:	d1da      	bne.n	60006fce <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
60007018:	78a3      	ldrb	r3, [r4, #2]
6000701a:	454b      	cmp	r3, r9
6000701c:	d00a      	beq.n	60007034 <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
6000701e:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
60007020:	4630      	mov	r0, r6
60007022:	f000 fd6b 	bl	60007afc <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
60007026:	4630      	mov	r0, r6
60007028:	f7ff fd8c 	bl	60006b44 <disable_endpoint>
6000702c:	fab0 f680 	clz	r6, r0
60007030:	0976      	lsrs	r6, r6, #5
60007032:	e7cc      	b.n	60006fce <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
60007034:	4638      	mov	r0, r7
60007036:	f7ff fe99 	bl	60006d6c <set_endpoint>
6000703a:	4606      	mov	r6, r0
6000703c:	e7c7      	b.n	60006fce <usb_handle_standard_request+0x162>
6000703e:	46ba      	mov	sl, r7
	return false;
60007040:	2600      	movs	r6, #0
60007042:	e7c4      	b.n	60006fce <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
60007044:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
60007048:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
6000704a:	2a00      	cmp	r2, #0
6000704c:	da18      	bge.n	60007080 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
6000704e:	2b00      	cmp	r3, #0
60007050:	f47f af3e 	bne.w	60006ed0 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
60007054:	7924      	ldrb	r4, [r4, #4]
60007056:	683f      	ldr	r7, [r7, #0]
	if (!is_ep_valid(ep)) {
60007058:	4620      	mov	r0, r4
6000705a:	f7ff fcfd 	bl	60006a58 <is_ep_valid>
6000705e:	2800      	cmp	r0, #0
60007060:	f43f af36 	beq.w	60006ed0 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
60007064:	0663      	lsls	r3, r4, #25
60007066:	d004      	beq.n	60007072 <usb_handle_standard_request+0x206>
60007068:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
6000706c:	2b00      	cmp	r3, #0
6000706e:	f43f af2f 	beq.w	60006ed0 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
60007072:	4639      	mov	r1, r7
60007074:	4620      	mov	r0, r4
60007076:	f002 fa41 	bl	600094fc <usb_dc_ep_is_stalled>
		data[1] = 0U;
6000707a:	2300      	movs	r3, #0
6000707c:	707b      	strb	r3, [r7, #1]
6000707e:	e714      	b.n	60006eaa <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
60007080:	2b01      	cmp	r3, #1
60007082:	d008      	beq.n	60007096 <usb_handle_standard_request+0x22a>
60007084:	2b03      	cmp	r3, #3
60007086:	f47f af23 	bne.w	60006ed0 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
6000708a:	8863      	ldrh	r3, [r4, #2]
6000708c:	2b00      	cmp	r3, #0
6000708e:	f47f af1f 	bne.w	60006ed0 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
60007092:	2101      	movs	r1, #1
60007094:	e003      	b.n	6000709e <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
60007096:	8861      	ldrh	r1, [r4, #2]
60007098:	2900      	cmp	r1, #0
6000709a:	f47f af19 	bne.w	60006ed0 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
6000709e:	88a0      	ldrh	r0, [r4, #4]
600070a0:	f7ff fe0e 	bl	60006cc0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
600070a4:	2800      	cmp	r0, #0
600070a6:	f47f af05 	bne.w	60006eb4 <usb_handle_standard_request+0x48>
600070aa:	e711      	b.n	60006ed0 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
600070ac:	2902      	cmp	r1, #2
		*data = p;
600070ae:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
600070b0:	f47f af1b 	bne.w	60006eea <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
600070b4:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
600070b6:	6033      	str	r3, [r6, #0]
		return true;
600070b8:	e6fc      	b.n	60006eb4 <usb_handle_standard_request+0x48>
600070ba:	bf00      	nop
600070bc:	20203c48 	.word	0x20203c48
600070c0:	20203d02 	.word	0x20203d02
	if (usb_reqtype_is_to_host(setup)) {
600070c4:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
600070c8:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
600070ca:	2800      	cmp	r0, #0
600070cc:	f6bf af72 	bge.w	60006fb4 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
600070d0:	2b00      	cmp	r3, #0
600070d2:	f43f af67 	beq.w	60006fa4 <usb_handle_standard_request+0x138>
600070d6:	2b0a      	cmp	r3, #10
600070d8:	f47f aefa 	bne.w	60006ed0 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
600070dc:	783b      	ldrb	r3, [r7, #0]
600070de:	2b00      	cmp	r3, #0
600070e0:	f43f aef6 	beq.w	60006ed0 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
600070e4:	7879      	ldrb	r1, [r7, #1]
600070e6:	2904      	cmp	r1, #4
600070e8:	f47f af62 	bne.w	60006fb0 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
600070ec:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
600070ee:	428a      	cmp	r2, r1
600070f0:	f47f af5e 	bne.w	60006fb0 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
600070f4:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
600070f6:	bf96      	itet	ls
600070f8:	1952      	addls	r2, r2, r5
	return 0;
600070fa:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
600070fc:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
60007100:	f88c 3000 	strb.w	r3, [ip]
60007104:	e6f6      	b.n	60006ef4 <usb_handle_standard_request+0x88>
60007106:	bf00      	nop

60007108 <usb_write>:
{
60007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000710c:	b083      	sub	sp, #12
6000710e:	4604      	mov	r4, r0
60007110:	4690      	mov	r8, r2
60007112:	4699      	mov	r9, r3
60007114:	2504      	movs	r5, #4
60007116:	af00      	add	r7, sp, #0
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
60007118:	4e12      	ldr	r6, [pc, #72]	; (60007164 <usb_write+0x5c>)
6000711a:	f04f 0a03 	mov.w	sl, #3
{
6000711e:	6079      	str	r1, [r7, #4]
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
60007120:	464b      	mov	r3, r9
60007122:	4642      	mov	r2, r8
60007124:	6879      	ldr	r1, [r7, #4]
60007126:	4620      	mov	r0, r4
60007128:	f002 faec 	bl	60009704 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
6000712c:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
60007130:	4683      	mov	fp, r0
		if (ret == -EAGAIN) {
60007132:	d112      	bne.n	6000715a <usb_write+0x52>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
60007134:	f8c7 d000 	str.w	sp, [r7]
60007138:	b088      	sub	sp, #32
6000713a:	466a      	mov	r2, sp
6000713c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60007140:	4809      	ldr	r0, [pc, #36]	; (60007168 <usb_write+0x60>)
60007142:	e9c2 6405 	strd	r6, r4, [r2, #20]
60007146:	f842 af10 	str.w	sl, [r2, #16]!
6000714a:	f00b ff37 	bl	60012fbc <z_log_msg_static_create.constprop.0>
6000714e:	f8d7 d000 	ldr.w	sp, [r7]
	z_impl_k_yield();
60007152:	f008 f815 	bl	6000f180 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
60007156:	3d01      	subs	r5, #1
60007158:	d1e2      	bne.n	60007120 <usb_write+0x18>
}
6000715a:	4658      	mov	r0, fp
6000715c:	370c      	adds	r7, #12
6000715e:	46bd      	mov	sp, r7
60007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60007164:	6001768d 	.word	0x6001768d
60007168:	600150f4 	.word	0x600150f4

6000716c <usb_data_to_host>:
{
6000716c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
6000716e:	4c13      	ldr	r4, [pc, #76]	; (600071bc <usb_data_to_host+0x50>)
60007170:	7d23      	ldrb	r3, [r4, #20]
60007172:	b9cb      	cbnz	r3, 600071a8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
60007174:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
60007176:	ab01      	add	r3, sp, #4
60007178:	68a1      	ldr	r1, [r4, #8]
6000717a:	2080      	movs	r0, #128	; 0x80
		uint32_t chunk = usb_dev.data_buf_residue;
6000717c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
6000717e:	f7ff ffc3 	bl	60007108 <usb_write>
		usb_dev.data_buf += chunk;
60007182:	9a01      	ldr	r2, [sp, #4]
60007184:	68a3      	ldr	r3, [r4, #8]
60007186:	4413      	add	r3, r2
60007188:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
6000718a:	68e3      	ldr	r3, [r4, #12]
6000718c:	1a9b      	subs	r3, r3, r2
6000718e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
60007190:	b943      	cbnz	r3, 600071a4 <usb_data_to_host+0x38>
60007192:	b13a      	cbz	r2, 600071a4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
60007194:	6923      	ldr	r3, [r4, #16]
60007196:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
60007198:	429a      	cmp	r2, r3
6000719a:	dd03      	ble.n	600071a4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
6000719c:	069b      	lsls	r3, r3, #26
6000719e:	d101      	bne.n	600071a4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
600071a0:	2301      	movs	r3, #1
600071a2:	7523      	strb	r3, [r4, #20]
}
600071a4:	b002      	add	sp, #8
600071a6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
600071a8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
600071aa:	2080      	movs	r0, #128	; 0x80
600071ac:	461a      	mov	r2, r3
600071ae:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
600071b0:	7523      	strb	r3, [r4, #20]
}
600071b2:	b002      	add	sp, #8
600071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
600071b8:	f002 baa4 	b.w	60009704 <usb_dc_ep_write>
600071bc:	20203c48 	.word	0x20203c48

600071c0 <usb_handle_control_transfer>:
{
600071c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t chunk = 0U;
600071c2:	2300      	movs	r3, #0
{
600071c4:	b08a      	sub	sp, #40	; 0x28
600071c6:	460d      	mov	r5, r1
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
600071c8:	4606      	mov	r6, r0
	uint32_t chunk = 0U;
600071ca:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
600071cc:	2800      	cmp	r0, #0
600071ce:	d167      	bne.n	600072a0 <usb_handle_control_transfer+0xe0>
600071d0:	2900      	cmp	r1, #0
600071d2:	d13f      	bne.n	60007254 <usb_handle_control_transfer+0x94>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
600071d4:	2208      	movs	r2, #8
600071d6:	460b      	mov	r3, r1
600071d8:	eb0d 0102 	add.w	r1, sp, r2
600071dc:	f00c f809 	bl	600131f2 <usb_dc_ep_read>
600071e0:	2800      	cmp	r0, #0
600071e2:	da03      	bge.n	600071ec <usb_handle_control_transfer+0x2c>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
600071e4:	2080      	movs	r0, #128	; 0x80
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
600071e6:	f002 f8e5 	bl	600093b4 <usb_dc_ep_set_stall>
			return;
600071ea:	e024      	b.n	60007236 <usb_handle_control_transfer+0x76>
		setup->bmRequestType = setup_raw.bmRequestType;
600071ec:	4c37      	ldr	r4, [pc, #220]	; (600072cc <usb_handle_control_transfer+0x10c>)
600071ee:	9a02      	ldr	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
600071f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->bmRequestType = setup_raw.bmRequestType;
600071f4:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
600071f6:	9a03      	ldr	r2, [sp, #12]
		usb_dev.zlp_flag = false;
600071f8:	7525      	strb	r5, [r4, #20]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
600071fa:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
600071fc:	f104 0238 	add.w	r2, r4, #56	; 0x38
60007200:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
60007202:	f99d 2008 	ldrsb.w	r2, [sp, #8]
60007206:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
60007208:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
6000720c:	db15      	blt.n	6000723a <usb_handle_control_transfer+0x7a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
6000720e:	2b80      	cmp	r3, #128	; 0x80
60007210:	d90e      	bls.n	60007230 <usb_handle_control_transfer+0x70>
				LOG_ERR("Request buffer too small");
60007212:	4b2f      	ldr	r3, [pc, #188]	; (600072d0 <usb_handle_control_transfer+0x110>)
60007214:	aa08      	add	r2, sp, #32
60007216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000721a:	482e      	ldr	r0, [pc, #184]	; (600072d4 <usb_handle_control_transfer+0x114>)
6000721c:	9309      	str	r3, [sp, #36]	; 0x24
6000721e:	2302      	movs	r3, #2
60007220:	9308      	str	r3, [sp, #32]
60007222:	f00b fecb 	bl	60012fbc <z_log_msg_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
60007226:	2080      	movs	r0, #128	; 0x80
60007228:	f002 f8c4 	bl	600093b4 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
6000722c:	4628      	mov	r0, r5
6000722e:	e7da      	b.n	600071e6 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
60007230:	b11b      	cbz	r3, 6000723a <usb_handle_control_transfer+0x7a>
				usb_dev.data_buf_residue = setup->wLength;
60007232:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
60007236:	b00a      	add	sp, #40	; 0x28
60007238:	bd70      	pop	{r4, r5, r6, pc}
		if (!usb_handle_request(setup,
6000723a:	f7ff fc43 	bl	60006ac4 <usb_handle_request.constprop.0>
6000723e:	2800      	cmp	r0, #0
60007240:	d0d0      	beq.n	600071e4 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
60007242:	88e2      	ldrh	r2, [r4, #6]
60007244:	6923      	ldr	r3, [r4, #16]
60007246:	429a      	cmp	r2, r3
60007248:	bfd4      	ite	le
6000724a:	60e2      	strle	r2, [r4, #12]
6000724c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
6000724e:	f7ff ff8d 	bl	6000716c <usb_data_to_host>
60007252:	e7f0      	b.n	60007236 <usb_handle_control_transfer+0x76>
		if (usb_dev.data_buf_residue <= 0) {
60007254:	4c1d      	ldr	r4, [pc, #116]	; (600072cc <usb_handle_control_transfer+0x10c>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
60007256:	ab01      	add	r3, sp, #4
60007258:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
6000725c:	2a00      	cmp	r2, #0
6000725e:	dc05      	bgt.n	6000726c <usb_handle_control_transfer+0xac>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
60007260:	4602      	mov	r2, r0
60007262:	f00b ffc6 	bl	600131f2 <usb_dc_ep_read>
60007266:	2800      	cmp	r0, #0
60007268:	dae5      	bge.n	60007236 <usb_handle_control_transfer+0x76>
6000726a:	e7bb      	b.n	600071e4 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
6000726c:	f00b ffc1 	bl	600131f2 <usb_dc_ep_read>
60007270:	2800      	cmp	r0, #0
60007272:	da04      	bge.n	6000727e <usb_handle_control_transfer+0xbe>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
60007274:	2080      	movs	r0, #128	; 0x80
60007276:	f002 f89d 	bl	600093b4 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
6000727a:	4630      	mov	r0, r6
6000727c:	e7b3      	b.n	600071e6 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
6000727e:	9a01      	ldr	r2, [sp, #4]
60007280:	68a3      	ldr	r3, [r4, #8]
60007282:	4413      	add	r3, r2
60007284:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
60007286:	68e3      	ldr	r3, [r4, #12]
60007288:	1a9b      	subs	r3, r3, r2
6000728a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
6000728c:	2b00      	cmp	r3, #0
6000728e:	d1d2      	bne.n	60007236 <usb_handle_control_transfer+0x76>
			usb_dev.data_buf = usb_dev.req_data;
60007290:	f104 0338 	add.w	r3, r4, #56	; 0x38
60007294:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
60007296:	f7ff fc15 	bl	60006ac4 <usb_handle_request.constprop.0>
6000729a:	2800      	cmp	r0, #0
6000729c:	d1d7      	bne.n	6000724e <usb_handle_control_transfer+0x8e>
6000729e:	e7a1      	b.n	600071e4 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
600072a0:	2880      	cmp	r0, #128	; 0x80
600072a2:	d107      	bne.n	600072b4 <usb_handle_control_transfer+0xf4>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
600072a4:	4b09      	ldr	r3, [pc, #36]	; (600072cc <usb_handle_control_transfer+0x10c>)
600072a6:	68da      	ldr	r2, [r3, #12]
600072a8:	2a00      	cmp	r2, #0
600072aa:	d1d0      	bne.n	6000724e <usb_handle_control_transfer+0x8e>
600072ac:	7d1b      	ldrb	r3, [r3, #20]
600072ae:	2b00      	cmp	r3, #0
600072b0:	d1cd      	bne.n	6000724e <usb_handle_control_transfer+0x8e>
600072b2:	e7c0      	b.n	60007236 <usb_handle_control_transfer+0x76>
		__ASSERT_NO_MSG(false);
600072b4:	4908      	ldr	r1, [pc, #32]	; (600072d8 <usb_handle_control_transfer+0x118>)
600072b6:	f240 1387 	movw	r3, #391	; 0x187
600072ba:	4808      	ldr	r0, [pc, #32]	; (600072dc <usb_handle_control_transfer+0x11c>)
600072bc:	4a08      	ldr	r2, [pc, #32]	; (600072e0 <usb_handle_control_transfer+0x120>)
600072be:	f00b fccc 	bl	60012c5a <assert_print>
600072c2:	f240 1187 	movw	r1, #391	; 0x187
600072c6:	4806      	ldr	r0, [pc, #24]	; (600072e0 <usb_handle_control_transfer+0x120>)
600072c8:	f00b fcc0 	bl	60012c4c <assert_post_action>
600072cc:	20203c48 	.word	0x20203c48
600072d0:	600176b4 	.word	0x600176b4
600072d4:	600150f4 	.word	0x600150f4
600072d8:	60017072 	.word	0x60017072
600072dc:	60016dfb 	.word	0x60016dfb
600072e0:	60017505 	.word	0x60017505

600072e4 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
600072e4:	4b05      	ldr	r3, [pc, #20]	; (600072fc <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
600072e6:	4a06      	ldr	r2, [pc, #24]	; (60007300 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
600072e8:	6258      	str	r0, [r3, #36]	; 0x24
}
600072ea:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
600072ec:	629a      	str	r2, [r3, #40]	; 0x28
600072ee:	4a05      	ldr	r2, [pc, #20]	; (60007304 <usb_set_config+0x20>)
600072f0:	62da      	str	r2, [r3, #44]	; 0x2c
600072f2:	4a05      	ldr	r2, [pc, #20]	; (60007308 <usb_set_config+0x24>)
600072f4:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
600072f6:	4a05      	ldr	r2, [pc, #20]	; (6000730c <usb_set_config+0x28>)
600072f8:	619a      	str	r2, [r3, #24]
}
600072fa:	4770      	bx	lr
600072fc:	20203c48 	.word	0x20203c48
60007300:	60006e6d 	.word	0x60006e6d
60007304:	60006969 	.word	0x60006969
60007308:	600069ed 	.word	0x600069ed
6000730c:	600068d9 	.word	0x600068d9

60007310 <usb_device_init>:
	if (usb_dev.enabled == true) {
60007310:	4b09      	ldr	r3, [pc, #36]	; (60007338 <usb_device_init+0x28>)
{
60007312:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
60007314:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
60007318:	b954      	cbnz	r4, 60007330 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
6000731a:	f000 f901 	bl	60007520 <usb_get_device_descriptor>
	if (!device_descriptor) {
6000731e:	b918      	cbnz	r0, 60007328 <usb_device_init+0x18>
}
60007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60007324:	f7ff bbe4 	b.w	60006af0 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
60007328:	f7ff ffdc 	bl	600072e4 <usb_set_config>
	return 0;
6000732c:	4620      	mov	r0, r4
}
6000732e:	bd10      	pop	{r4, pc}
		return -EALREADY;
60007330:	f06f 0077 	mvn.w	r0, #119	; 0x77
60007334:	e7fb      	b.n	6000732e <usb_device_init+0x1e>
60007336:	bf00      	nop
60007338:	20203c48 	.word	0x20203c48

6000733c <usb_enable>:
{
6000733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60007340:	4604      	mov	r4, r0
60007342:	b086      	sub	sp, #24
	if (usb_dev.enabled == true) {
60007344:	4d47      	ldr	r5, [pc, #284]	; (60007464 <usb_enable+0x128>)
	return z_impl_k_mutex_lock(mutex, timeout);
60007346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000734a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000734e:	4846      	ldr	r0, [pc, #280]	; (60007468 <usb_enable+0x12c>)
60007350:	f006 fa84 	bl	6000d85c <z_impl_k_mutex_lock>
60007354:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
60007358:	b196      	cbz	r6, 60007380 <usb_enable+0x44>
		LOG_WRN("USB device support already enabled");
6000735a:	4b44      	ldr	r3, [pc, #272]	; (6000746c <usb_enable+0x130>)
		ret = -EALREADY;
6000735c:	f06f 0477 	mvn.w	r4, #119	; 0x77
		LOG_WRN("USB device support already enabled");
60007360:	aa04      	add	r2, sp, #16
60007362:	f44f 5184 	mov.w	r1, #4224	; 0x1080
60007366:	9305      	str	r3, [sp, #20]
60007368:	2302      	movs	r3, #2
6000736a:	4841      	ldr	r0, [pc, #260]	; (60007470 <usb_enable+0x134>)
6000736c:	9304      	str	r3, [sp, #16]
6000736e:	f00b fe25 	bl	60012fbc <z_log_msg_static_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
60007372:	483d      	ldr	r0, [pc, #244]	; (60007468 <usb_enable+0x12c>)
60007374:	f006 fb42 	bl	6000d9fc <z_impl_k_mutex_unlock>
}
60007378:	4620      	mov	r0, r4
6000737a:	b006      	add	sp, #24
6000737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_dev.status_callback = cb;
60007380:	483c      	ldr	r0, [pc, #240]	; (60007474 <usb_enable+0x138>)
	usb_dev.user_status_callback = status_cb;
60007382:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
60007384:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
60007386:	f002 fb49 	bl	60009a1c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
6000738a:	f001 fecf 	bl	6000912c <usb_dc_attach>
	if (ret < 0) {
6000738e:	1e04      	subs	r4, r0, #0
60007390:	dbef      	blt.n	60007372 <usb_enable+0x36>
	ret = usb_transfer_init();
60007392:	f000 fbf5 	bl	60007b80 <usb_transfer_init>
	if (ret < 0) {
60007396:	1e04      	subs	r4, r0, #0
60007398:	dbeb      	blt.n	60007372 <usb_enable+0x36>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
6000739a:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
6000739c:	4668      	mov	r0, sp
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
6000739e:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
600073a2:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
600073a6:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
600073aa:	f001 ff47 	bl	6000923c <usb_dc_ep_configure>
	if (ret < 0) {
600073ae:	1e04      	subs	r4, r0, #0
600073b0:	dbdf      	blt.n	60007372 <usb_enable+0x36>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
600073b2:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
600073b4:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
600073b6:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
600073ba:	f001 ff3f 	bl	6000923c <usb_dc_ep_configure>
	if (ret < 0) {
600073be:	1e04      	subs	r4, r0, #0
600073c0:	dbd7      	blt.n	60007372 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
600073c2:	492d      	ldr	r1, [pc, #180]	; (60007478 <usb_enable+0x13c>)
600073c4:	4630      	mov	r0, r6
600073c6:	f002 fafd 	bl	600099c4 <usb_dc_ep_set_callback>
	if (ret < 0) {
600073ca:	1e04      	subs	r4, r0, #0
600073cc:	dbd1      	blt.n	60007372 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
600073ce:	492a      	ldr	r1, [pc, #168]	; (60007478 <usb_enable+0x13c>)
600073d0:	4638      	mov	r0, r7
600073d2:	f002 faf7 	bl	600099c4 <usb_dc_ep_set_callback>
	if (ret < 0) {
600073d6:	1e04      	subs	r4, r0, #0
600073d8:	dbcb      	blt.n	60007372 <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600073da:	4c28      	ldr	r4, [pc, #160]	; (6000747c <usb_enable+0x140>)
600073dc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 60007480 <usb_enable+0x144>
600073e0:	4544      	cmp	r4, r8
600073e2:	d923      	bls.n	6000742c <usb_enable+0xf0>
600073e4:	4927      	ldr	r1, [pc, #156]	; (60007484 <usb_enable+0x148>)
600073e6:	f240 6313 	movw	r3, #1555	; 0x613
600073ea:	4a27      	ldr	r2, [pc, #156]	; (60007488 <usb_enable+0x14c>)
600073ec:	4827      	ldr	r0, [pc, #156]	; (6000748c <usb_enable+0x150>)
600073ee:	f00b fc34 	bl	60012c5a <assert_print>
600073f2:	4827      	ldr	r0, [pc, #156]	; (60007490 <usb_enable+0x154>)
600073f4:	f00b fc31 	bl	60012c5a <assert_print>
600073f8:	f240 6113 	movw	r1, #1555	; 0x613
600073fc:	4822      	ldr	r0, [pc, #136]	; (60007488 <usb_enable+0x14c>)
600073fe:	f00b fc25 	bl	60012c4c <assert_post_action>
		ep_data = cfg_data->endpoint;
60007402:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60007404:	2600      	movs	r6, #0
60007406:	7f22      	ldrb	r2, [r4, #28]
60007408:	b2f3      	uxtb	r3, r6
6000740a:	429a      	cmp	r2, r3
6000740c:	d801      	bhi.n	60007412 <usb_enable+0xd6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000740e:	3424      	adds	r4, #36	; 0x24
60007410:	e7e6      	b.n	600073e0 <usb_enable+0xa4>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
60007412:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
60007416:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
6000741a:	3601      	adds	r6, #1
6000741c:	7910      	ldrb	r0, [r2, #4]
6000741e:	f002 fad1 	bl	600099c4 <usb_dc_ep_set_callback>
60007422:	2800      	cmp	r0, #0
60007424:	d0ef      	beq.n	60007406 <usb_enable+0xca>
60007426:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
6000742a:	e7a2      	b.n	60007372 <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000742c:	d3e9      	bcc.n	60007402 <usb_enable+0xc6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
6000742e:	2000      	movs	r0, #0
60007430:	f002 f8a6 	bl	60009580 <usb_dc_ep_enable>
	if (ret < 0) {
60007434:	1e04      	subs	r4, r0, #0
60007436:	db9c      	blt.n	60007372 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
60007438:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
6000743c:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
6000743e:	f043 0301 	orr.w	r3, r3, #1
60007442:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
60007446:	f002 f89b 	bl	60009580 <usb_dc_ep_enable>
	if (ret < 0) {
6000744a:	1e04      	subs	r4, r0, #0
6000744c:	db91      	blt.n	60007372 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
6000744e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = 0;
60007452:	2400      	movs	r4, #0
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
60007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
60007458:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
6000745c:	2301      	movs	r3, #1
6000745e:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
60007462:	e786      	b.n	60007372 <usb_enable+0x36>
60007464:	20203c48 	.word	0x20203c48
60007468:	20202c98 	.word	0x20202c98
6000746c:	600176cd 	.word	0x600176cd
60007470:	600150f4 	.word	0x600150f4
60007474:	60006bc5 	.word	0x60006bc5
60007478:	600071c1 	.word	0x600071c1
6000747c:	20202db0 	.word	0x20202db0
60007480:	20202dd4 	.word	0x20202dd4
60007484:	60017537 	.word	0x60017537
60007488:	60017505 	.word	0x60017505
6000748c:	60016dfb 	.word	0x60016dfb
60007490:	6001727c 	.word	0x6001727c

60007494 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
60007494:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
60007496:	4b20      	ldr	r3, [pc, #128]	; (60007518 <usb_update_sn_string_descriptor+0x84>)
{
60007498:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
6000749a:	f103 0510 	add.w	r5, r3, #16
6000749e:	aa05      	add	r2, sp, #20
600074a0:	6818      	ldr	r0, [r3, #0]
600074a2:	3308      	adds	r3, #8
600074a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
600074a8:	4614      	mov	r4, r2
600074aa:	42ab      	cmp	r3, r5
600074ac:	c403      	stmia	r4!, {r0, r1}
600074ae:	4622      	mov	r2, r4
600074b0:	d1f6      	bne.n	600074a0 <usb_update_sn_string_descriptor+0xc>
600074b2:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
600074b4:	2210      	movs	r2, #16
600074b6:	2100      	movs	r1, #0
600074b8:	a801      	add	r0, sp, #4
	const char hex[] = "0123456789ABCDEF";
600074ba:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
600074bc:	f009 f8a0 	bl	60010600 <memset>
	memset(sn, 0, sizeof(sn));
600074c0:	2212      	movs	r2, #18
600074c2:	2100      	movs	r1, #0
600074c4:	4815      	ldr	r0, [pc, #84]	; (6000751c <usb_update_sn_string_descriptor+0x88>)
600074c6:	f009 f89b 	bl	60010600 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
600074ca:	2110      	movs	r1, #16
600074cc:	a801      	add	r0, sp, #4
600074ce:	f003 fae9 	bl	6000aaa4 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
600074d2:	2800      	cmp	r0, #0
600074d4:	dd1d      	ble.n	60007512 <usb_update_sn_string_descriptor+0x7e>
		skip = MAX(0, hwlen - usblen);
600074d6:	2808      	cmp	r0, #8
600074d8:	ab01      	add	r3, sp, #4
600074da:	4910      	ldr	r1, [pc, #64]	; (6000751c <usb_update_sn_string_descriptor+0x88>)
600074dc:	bfb8      	it	lt
600074de:	2008      	movlt	r0, #8
600074e0:	3809      	subs	r0, #9
600074e2:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
600074e4:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
600074e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
600074ea:	ac0a      	add	r4, sp, #40	; 0x28
		for (int i = 0; i < usblen; i++) {
600074ec:	3001      	adds	r0, #1
600074ee:	3102      	adds	r1, #2
			sn[i * 2] = hex[hwid[i + skip] >> 4];
600074f0:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
600074f4:	f003 030f 	and.w	r3, r3, #15
		for (int i = 0; i < usblen; i++) {
600074f8:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
600074fa:	f103 0328 	add.w	r3, r3, #40	; 0x28
			sn[i * 2] = hex[hwid[i + skip] >> 4];
600074fe:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60007502:	446b      	add	r3, sp
			sn[i * 2] = hex[hwid[i + skip] >> 4];
60007504:	f801 4c02 	strb.w	r4, [r1, #-2]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60007508:	f813 3c14 	ldrb.w	r3, [r3, #-20]
6000750c:	f801 3c01 	strb.w	r3, [r1, #-1]
		for (int i = 0; i < usblen; i++) {
60007510:	d1e9      	bne.n	600074e6 <usb_update_sn_string_descriptor+0x52>
		}
	}

	return sn;
}
60007512:	4802      	ldr	r0, [pc, #8]	; (6000751c <usb_update_sn_string_descriptor+0x88>)
60007514:	b00b      	add	sp, #44	; 0x2c
60007516:	bd30      	pop	{r4, r5, pc}
60007518:	600176fb 	.word	0x600176fb
6000751c:	202042a0 	.word	0x202042a0

60007520 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
60007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60007524:	b08b      	sub	sp, #44	; 0x2c
60007526:	4c91      	ldr	r4, [pc, #580]	; (6000776c <usb_get_device_descriptor+0x24c>)
60007528:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
6000752a:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
6000752c:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
60007530:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
60007532:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
60007534:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
60007536:	7823      	ldrb	r3, [r4, #0]
60007538:	b943      	cbnz	r3, 6000754c <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
6000753a:	3402      	adds	r4, #2
6000753c:	4b8c      	ldr	r3, [pc, #560]	; (60007770 <usb_get_device_descriptor+0x250>)
6000753e:	429c      	cmp	r4, r3
60007540:	d1f3      	bne.n	6000752a <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
60007542:	488a      	ldr	r0, [pc, #552]	; (6000776c <usb_get_device_descriptor+0x24c>)
}
60007544:	372c      	adds	r7, #44	; 0x2c
60007546:	46bd      	mov	sp, r7
60007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
6000754c:	7863      	ldrb	r3, [r4, #1]
6000754e:	2b05      	cmp	r3, #5
60007550:	d805      	bhi.n	6000755e <usb_get_device_descriptor+0x3e>
60007552:	e8df f003 	tbb	[pc, r3]
60007556:	04b3      	.short	0x04b3
60007558:	4e07b303 	.word	0x4e07b303
6000755c:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
6000755e:	7823      	ldrb	r3, [r4, #0]
60007560:	441c      	add	r4, r3
60007562:	e7e8      	b.n	60007536 <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
60007564:	78e3      	ldrb	r3, [r4, #3]
60007566:	2b00      	cmp	r3, #0
60007568:	d1f9      	bne.n	6000755e <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
6000756a:	78a3      	ldrb	r3, [r4, #2]
6000756c:	2b00      	cmp	r3, #0
6000756e:	d13b      	bne.n	600075e8 <usb_get_device_descriptor+0xc8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60007570:	4d80      	ldr	r5, [pc, #512]	; (60007774 <usb_get_device_descriptor+0x254>)
60007572:	4b81      	ldr	r3, [pc, #516]	; (60007778 <usb_get_device_descriptor+0x258>)
60007574:	e003      	b.n	6000757e <usb_get_device_descriptor+0x5e>
		if (cfg_data->interface_descriptor == iface) {
60007576:	686a      	ldr	r2, [r5, #4]
60007578:	4294      	cmp	r4, r2
6000757a:	d030      	beq.n	600075de <usb_get_device_descriptor+0xbe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000757c:	3524      	adds	r5, #36	; 0x24
6000757e:	429d      	cmp	r5, r3
60007580:	d90e      	bls.n	600075a0 <usb_get_device_descriptor+0x80>
60007582:	497e      	ldr	r1, [pc, #504]	; (6000777c <usb_get_device_descriptor+0x25c>)
60007584:	f44f 738f 	mov.w	r3, #286	; 0x11e
60007588:	4a7d      	ldr	r2, [pc, #500]	; (60007780 <usb_get_device_descriptor+0x260>)
6000758a:	487e      	ldr	r0, [pc, #504]	; (60007784 <usb_get_device_descriptor+0x264>)
6000758c:	f00b fb65 	bl	60012c5a <assert_print>
60007590:	487d      	ldr	r0, [pc, #500]	; (60007788 <usb_get_device_descriptor+0x268>)
60007592:	f00b fb62 	bl	60012c5a <assert_print>
60007596:	f44f 718f 	mov.w	r1, #286	; 0x11e
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
6000759a:	4879      	ldr	r0, [pc, #484]	; (60007780 <usb_get_device_descriptor+0x260>)
6000759c:	f00b fb56 	bl	60012c4c <assert_post_action>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600075a0:	d3e9      	bcc.n	60007576 <usb_get_device_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
600075a2:	466d      	mov	r5, sp
600075a4:	b088      	sub	sp, #32
600075a6:	466a      	mov	r2, sp
600075a8:	4b78      	ldr	r3, [pc, #480]	; (6000778c <usb_get_device_descriptor+0x26c>)
600075aa:	e9c2 3405 	strd	r3, r4, [r2, #20]
600075ae:	2303      	movs	r3, #3
600075b0:	f842 3f10 	str.w	r3, [r2, #16]!
600075b4:	2300      	movs	r3, #0
600075b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600075ba:	4875      	ldr	r0, [pc, #468]	; (60007790 <usb_get_device_descriptor+0x270>)
600075bc:	f7fe fe3e 	bl	6000623c <z_impl_z_log_msg_static_create>
600075c0:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
600075c2:	4b74      	ldr	r3, [pc, #464]	; (60007794 <usb_get_device_descriptor+0x274>)
600075c4:	627b      	str	r3, [r7, #36]	; 0x24
600075c6:	2302      	movs	r3, #2
600075c8:	623b      	str	r3, [r7, #32]
600075ca:	4871      	ldr	r0, [pc, #452]	; (60007790 <usb_get_device_descriptor+0x270>)
600075cc:	2300      	movs	r3, #0
600075ce:	f107 0220 	add.w	r2, r7, #32
600075d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600075d6:	f7fe fe31 	bl	6000623c <z_impl_z_log_msg_static_create>
		return NULL;
600075da:	2000      	movs	r0, #0
600075dc:	e7b2      	b.n	60007544 <usb_get_device_descriptor+0x24>
				if (cfg_data->interface_config) {
600075de:	68ab      	ldr	r3, [r5, #8]
600075e0:	b113      	cbz	r3, 600075e8 <usb_get_device_descriptor+0xc8>
					cfg_data->interface_config(head,
600075e2:	4651      	mov	r1, sl
600075e4:	4620      	mov	r0, r4
600075e6:	4798      	blx	r3
			numof_ifaces++;
600075e8:	f10a 0a01 	add.w	sl, sl, #1
600075ec:	fa5f fa8a 	uxtb.w	sl, sl
			break;
600075f0:	e7b5      	b.n	6000755e <usb_get_device_descriptor+0x3e>
			if (!cfg_data) {
600075f2:	2d00      	cmp	r5, #0
600075f4:	d160      	bne.n	600076b8 <usb_get_device_descriptor+0x198>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
600075f6:	4b68      	ldr	r3, [pc, #416]	; (60007798 <usb_get_device_descriptor+0x278>)
				LOG_ERR("Failed to validate endpoints");
600075f8:	627b      	str	r3, [r7, #36]	; 0x24
600075fa:	2302      	movs	r3, #2
600075fc:	623b      	str	r3, [r7, #32]
600075fe:	2300      	movs	r3, #0
60007600:	f107 0220 	add.w	r2, r7, #32
60007604:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60007608:	4861      	ldr	r0, [pc, #388]	; (60007790 <usb_get_device_descriptor+0x270>)
6000760a:	f7fe fe17 	bl	6000623c <z_impl_z_log_msg_static_create>
				return -1;
6000760e:	e7d8      	b.n	600075c2 <usb_get_device_descriptor+0xa2>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
60007610:	6a29      	ldr	r1, [r5, #32]
60007612:	78a0      	ldrb	r0, [r4, #2]
60007614:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
60007618:	790b      	ldrb	r3, [r1, #4]
6000761a:	4298      	cmp	r0, r3
6000761c:	d005      	beq.n	6000762a <usb_get_device_descriptor+0x10a>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
6000761e:	3201      	adds	r2, #1
60007620:	7f2b      	ldrb	r3, [r5, #28]
60007622:	429a      	cmp	r2, r3
60007624:	d3f4      	bcc.n	60007610 <usb_get_device_descriptor+0xf0>
				LOG_ERR("Failed to validate endpoints");
60007626:	4b5d      	ldr	r3, [pc, #372]	; (6000779c <usb_get_device_descriptor+0x27c>)
60007628:	e7e6      	b.n	600075f8 <usb_get_device_descriptor+0xd8>
6000762a:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
6000762e:	78e0      	ldrb	r0, [r4, #3]
60007630:	fa5f f389 	uxtb.w	r3, r9
60007634:	f000 0003 	and.w	r0, r0, #3
60007638:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
6000763a:	7920      	ldrb	r0, [r4, #4]
6000763c:	f894 c005 	ldrb.w	ip, [r4, #5]
60007640:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
60007644:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
60007646:	f994 0002 	ldrsb.w	r0, [r4, #2]
6000764a:	2800      	cmp	r0, #0
6000764c:	da26      	bge.n	6000769c <usb_get_device_descriptor+0x17c>
				if ((*requested_ep & (1U << (idx + 16U)))) {
6000764e:	f109 0010 	add.w	r0, r9, #16
60007652:	f04f 0c01 	mov.w	ip, #1
60007656:	fa0c f000 	lsl.w	r0, ip, r0
6000765a:	ea10 0f0b 	tst.w	r0, fp
6000765e:	d125      	bne.n	600076ac <usb_get_device_descriptor+0x18c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
60007660:	f043 0080 	orr.w	r0, r3, #128	; 0x80
60007664:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
60007666:	f107 0010 	add.w	r0, r7, #16
6000766a:	60fa      	str	r2, [r7, #12]
6000766c:	e9c7 3101 	strd	r3, r1, [r7, #4]
60007670:	f001 fdbe 	bl	600091f0 <usb_dc_ep_check_cap>
60007674:	687b      	ldr	r3, [r7, #4]
60007676:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
6000767a:	b9b8      	cbnz	r0, 600076ac <usb_get_device_descriptor+0x18c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
6000767c:	7c3a      	ldrb	r2, [r7, #16]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
6000767e:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
60007682:	70a2      	strb	r2, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
60007684:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
60007686:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
6000768a:	bf17      	itett	ne
6000768c:	3310      	addne	r3, #16
					*requested_ep |= (1U << idx);
6000768e:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
60007692:	b2db      	uxtbne	r3, r3
60007694:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
60007696:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
6000769a:	e760      	b.n	6000755e <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
6000769c:	2001      	movs	r0, #1
6000769e:	fa00 f009 	lsl.w	r0, r0, r9
600076a2:	ea10 0f0b 	tst.w	r0, fp
600076a6:	d101      	bne.n	600076ac <usb_get_device_descriptor+0x18c>
600076a8:	4618      	mov	r0, r3
600076aa:	e7db      	b.n	60007664 <usb_get_device_descriptor+0x144>
		for (uint8_t idx = 1; idx < 16U; idx++) {
600076ac:	f109 0901 	add.w	r9, r9, #1
600076b0:	f1b9 0f10 	cmp.w	r9, #16
600076b4:	d1bb      	bne.n	6000762e <usb_get_device_descriptor+0x10e>
600076b6:	e7b2      	b.n	6000761e <usb_get_device_descriptor+0xfe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
600076b8:	2200      	movs	r2, #0
600076ba:	e7b1      	b.n	60007620 <usb_get_device_descriptor+0x100>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
600076bc:	2e03      	cmp	r6, #3
600076be:	d12a      	bne.n	60007716 <usb_get_device_descriptor+0x1f6>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
600076c0:	f7ff fee8 	bl	60007494 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
600076c4:	4681      	mov	r9, r0
600076c6:	b1a8      	cbz	r0, 600076f4 <usb_get_device_descriptor+0x1d4>
	runtime_sn_len = strlen(runtime_sn);
600076c8:	f7fa fdfa 	bl	600022c0 <strlen>
	if (!runtime_sn_len) {
600076cc:	60f8      	str	r0, [r7, #12]
600076ce:	b188      	cbz	r0, 600076f4 <usb_get_device_descriptor+0x1d4>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
600076d0:	4833      	ldr	r0, [pc, #204]	; (600077a0 <usb_get_device_descriptor+0x280>)
600076d2:	f7fa fdf5 	bl	600022c0 <strlen>
	if (runtime_sn_len != default_sn_len) {
600076d6:	68fa      	ldr	r2, [r7, #12]
600076d8:	4282      	cmp	r2, r0
600076da:	d017      	beq.n	6000770c <usb_get_device_descriptor+0x1ec>
		LOG_ERR("the new SN descriptor doesn't have the same "
600076dc:	4b31      	ldr	r3, [pc, #196]	; (600077a4 <usb_get_device_descriptor+0x284>)
600076de:	627b      	str	r3, [r7, #36]	; 0x24
600076e0:	2302      	movs	r3, #2
600076e2:	623b      	str	r3, [r7, #32]
600076e4:	2300      	movs	r3, #0
600076e6:	f107 0220 	add.w	r2, r7, #32
600076ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600076ee:	4828      	ldr	r0, [pc, #160]	; (60007790 <usb_get_device_descriptor+0x270>)
600076f0:	f7fe fda4 	bl	6000623c <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
600076f4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
600076f6:	f06f 0002 	mvn.w	r0, #2
600076fa:	18e2      	adds	r2, r4, r3
600076fc:	1b00      	subs	r0, r0, r4
600076fe:	eb04 0353 	add.w	r3, r4, r3, lsr #1
60007702:	42d0      	cmn	r0, r2
60007704:	d50e      	bpl.n	60007724 <usb_get_device_descriptor+0x204>
			str_descr_idx += 1U;
60007706:	3601      	adds	r6, #1
60007708:	b2f6      	uxtb	r6, r6
			break;
6000770a:	e728      	b.n	6000755e <usb_get_device_descriptor+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000770c:	4649      	mov	r1, r9
6000770e:	1ca0      	adds	r0, r4, #2
60007710:	f7fb fe52 	bl	600033b8 <memcpy>
			if (str_descr_idx) {
60007714:	e7ee      	b.n	600076f4 <usb_get_device_descriptor+0x1d4>
60007716:	2e00      	cmp	r6, #0
60007718:	d1ec      	bne.n	600076f4 <usb_get_device_descriptor+0x1d4>
				if (!cfg_descr) {
6000771a:	f1b8 0f00 	cmp.w	r8, #0
6000771e:	d119      	bne.n	60007754 <usb_get_device_descriptor+0x234>
					LOG_ERR("Incomplete device descriptor");
60007720:	4b21      	ldr	r3, [pc, #132]	; (600077a8 <usb_get_device_descriptor+0x288>)
60007722:	e769      	b.n	600075f8 <usb_get_device_descriptor+0xd8>
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
60007724:	7819      	ldrb	r1, [r3, #0]
60007726:	3920      	subs	r1, #32
60007728:	295e      	cmp	r1, #94	; 0x5e
6000772a:	d90a      	bls.n	60007742 <usb_get_device_descriptor+0x222>
6000772c:	491f      	ldr	r1, [pc, #124]	; (600077ac <usb_get_device_descriptor+0x28c>)
6000772e:	23b3      	movs	r3, #179	; 0xb3
60007730:	4a13      	ldr	r2, [pc, #76]	; (60007780 <usb_get_device_descriptor+0x260>)
60007732:	4814      	ldr	r0, [pc, #80]	; (60007784 <usb_get_device_descriptor+0x264>)
60007734:	f00b fa91 	bl	60012c5a <assert_print>
60007738:	481d      	ldr	r0, [pc, #116]	; (600077b0 <usb_get_device_descriptor+0x290>)
6000773a:	f00b fa8e 	bl	60012c5a <assert_print>
6000773e:	21b3      	movs	r1, #179	; 0xb3
60007740:	e72b      	b.n	6000759a <usb_get_device_descriptor+0x7a>
		buf[i] = 0U;
60007742:	f04f 0100 	mov.w	r1, #0
60007746:	f802 1c01 	strb.w	r1, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
6000774a:	f813 1901 	ldrb.w	r1, [r3], #-1
6000774e:	f802 1d02 	strb.w	r1, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
60007752:	e7d6      	b.n	60007702 <usb_get_device_descriptor+0x1e2>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
60007754:	eba4 0308 	sub.w	r3, r4, r8
				cfg_descr->bNumInterfaces = numof_ifaces;
60007758:	f888 a004 	strb.w	sl, [r8, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
6000775c:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
60007760:	f3c3 2307 	ubfx	r3, r3, #8, #8
60007764:	f888 3003 	strb.w	r3, [r8, #3]
60007768:	e7cd      	b.n	60007706 <usb_get_device_descriptor+0x1e6>
6000776a:	bf00      	nop
6000776c:	20202ce8 	.word	0x20202ce8
60007770:	20202daf 	.word	0x20202daf
60007774:	20202db0 	.word	0x20202db0
60007778:	20202dd4 	.word	0x20202dd4
6000777c:	60017537 	.word	0x60017537
60007780:	6001770c 	.word	0x6001770c
60007784:	60016dfb 	.word	0x60016dfb
60007788:	6001727c 	.word	0x6001727c
6000778c:	60017742 	.word	0x60017742
60007790:	600150ec 	.word	0x600150ec
60007794:	600178a9 	.word	0x600178a9
60007798:	60017762 	.word	0x60017762
6000779c:	600177a3 	.word	0x600177a3
600077a0:	600176fb 	.word	0x600176fb
600077a4:	600177c0 	.word	0x600177c0
600077a8:	6001788c 	.word	0x6001788c
600077ac:	6001780b 	.word	0x6001780b
600077b0:	60017842 	.word	0x60017842

600077b4 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
600077b4:	4b08      	ldr	r3, [pc, #32]	; (600077d8 <usb_ep_get_transfer+0x24>)
600077b6:	2100      	movs	r1, #0
600077b8:	461a      	mov	r2, r3
{
600077ba:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
600077bc:	781c      	ldrb	r4, [r3, #0]
600077be:	4284      	cmp	r4, r0
600077c0:	d104      	bne.n	600077cc <usb_ep_get_transfer+0x18>
600077c2:	685c      	ldr	r4, [r3, #4]
600077c4:	b114      	cbz	r4, 600077cc <usb_ep_get_transfer+0x18>
			return &ut_data[i];
600077c6:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
600077ca:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
600077cc:	3101      	adds	r1, #1
600077ce:	3340      	adds	r3, #64	; 0x40
600077d0:	2904      	cmp	r1, #4
600077d2:	d1f3      	bne.n	600077bc <usb_ep_get_transfer+0x8>
	return NULL;
600077d4:	2000      	movs	r0, #0
600077d6:	e7f8      	b.n	600077ca <usb_ep_get_transfer+0x16>
600077d8:	20203d10 	.word	0x20203d10

600077dc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
600077dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
600077e0:	b083      	sub	sp, #12
600077e2:	4604      	mov	r4, r0
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
600077e4:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
600077e8:	af00      	add	r7, sp, #0
	ep = trans->ep;
600077ea:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
600077ee:	3310      	adds	r3, #16
600077f0:	d111      	bne.n	60007816 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
600077f2:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
600077f4:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
600077f8:	f013 0602 	ands.w	r6, r3, #2
600077fc:	d04e      	beq.n	6000789c <usb_transfer_work+0xc0>
		if (!trans->bsize) {
600077fe:	bb0a      	cbnz	r2, 60007844 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
60007800:	f013 0304 	ands.w	r3, r3, #4
60007804:	d104      	bne.n	60007810 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
60007806:	461a      	mov	r2, r3
60007808:	4619      	mov	r1, r3
6000780a:	4628      	mov	r0, r5
6000780c:	f7ff fc7c 	bl	60007108 <usb_write>
			}
			trans->status = 0;
60007810:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
60007812:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
60007816:	f854 3c28 	ldr.w	r3, [r4, #-40]
6000781a:	3310      	adds	r3, #16
6000781c:	d00e      	beq.n	6000783c <usb_transfer_work+0x60>
6000781e:	f854 6c18 	ldr.w	r6, [r4, #-24]
60007822:	b15e      	cbz	r6, 6000783c <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
60007824:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
60007828:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
6000782c:	f00c fef5 	bl	6001461a <k_is_in_isr>
60007830:	2800      	cmp	r0, #0
60007832:	d06f      	beq.n	60007914 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007834:	4621      	mov	r1, r4
60007836:	483f      	ldr	r0, [pc, #252]	; (60007934 <usb_transfer_work+0x158>)
60007838:	f00c ff29 	bl	6001468e <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
6000783c:	370c      	adds	r7, #12
6000783e:	46bd      	mov	sp, r7
60007840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
60007844:	f850 1c24 	ldr.w	r1, [r0, #-36]
60007848:	1d3b      	adds	r3, r7, #4
6000784a:	4628      	mov	r0, r5
6000784c:	f7ff fc5c 	bl	60007108 <usb_write>
		if (ret) {
60007850:	b198      	cbz	r0, 6000787a <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
60007852:	466e      	mov	r6, sp
60007854:	b088      	sub	sp, #32
60007856:	466a      	mov	r2, sp
60007858:	4b37      	ldr	r3, [pc, #220]	; (60007938 <usb_transfer_work+0x15c>)
6000785a:	61d5      	str	r5, [r2, #28]
6000785c:	e9c2 3005 	strd	r3, r0, [r2, #20]
60007860:	2304      	movs	r3, #4
60007862:	f842 3f10 	str.w	r3, [r2, #16]!
60007866:	2300      	movs	r3, #0
60007868:	f44f 5101 	mov.w	r1, #8256	; 0x2040
6000786c:	4833      	ldr	r0, [pc, #204]	; (6000793c <usb_transfer_work+0x160>)
6000786e:	f7fe fce5 	bl	6000623c <z_impl_z_log_msg_static_create>
60007872:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
60007874:	f06f 0315 	mvn.w	r3, #21
60007878:	e7cb      	b.n	60007812 <usb_transfer_work+0x36>
		trans->buffer += bytes;
6000787a:	687a      	ldr	r2, [r7, #4]
6000787c:	f854 3c24 	ldr.w	r3, [r4, #-36]
60007880:	4413      	add	r3, r2
60007882:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
60007886:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000788a:	1a9b      	subs	r3, r3, r2
6000788c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
60007890:	f854 3c1c 	ldr.w	r3, [r4, #-28]
60007894:	4413      	add	r3, r2
60007896:	f844 3c1c 	str.w	r3, [r4, #-28]
6000789a:	e7bc      	b.n	60007816 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
6000789c:	f850 1c24 	ldr.w	r1, [r0, #-36]
600078a0:	1d3b      	adds	r3, r7, #4
600078a2:	4628      	mov	r0, r5
600078a4:	f001 ff84 	bl	600097b0 <usb_dc_ep_read_wait>
		if (ret) {
600078a8:	b188      	cbz	r0, 600078ce <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
600078aa:	46e8      	mov	r8, sp
600078ac:	b088      	sub	sp, #32
600078ae:	466a      	mov	r2, sp
600078b0:	4b21      	ldr	r3, [pc, #132]	; (60007938 <usb_transfer_work+0x15c>)
600078b2:	61d5      	str	r5, [r2, #28]
600078b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
600078b8:	2304      	movs	r3, #4
600078ba:	f842 3f10 	str.w	r3, [r2, #16]!
600078be:	f44f 5101 	mov.w	r1, #8256	; 0x2040
600078c2:	4633      	mov	r3, r6
600078c4:	481d      	ldr	r0, [pc, #116]	; (6000793c <usb_transfer_work+0x160>)
600078c6:	f7fe fcb9 	bl	6000623c <z_impl_z_log_msg_static_create>
600078ca:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
600078cc:	e7d2      	b.n	60007874 <usb_transfer_work+0x98>
		trans->buffer += bytes;
600078ce:	687e      	ldr	r6, [r7, #4]
600078d0:	f854 3c24 	ldr.w	r3, [r4, #-36]
600078d4:	4433      	add	r3, r6
600078d6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
600078da:	f854 3c20 	ldr.w	r3, [r4, #-32]
600078de:	1b9b      	subs	r3, r3, r6
600078e0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
600078e4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
600078e8:	4433      	add	r3, r6
600078ea:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
600078ee:	2e00      	cmp	r6, #0
600078f0:	d08e      	beq.n	60007810 <usb_transfer_work+0x34>
600078f2:	4628      	mov	r0, r5
600078f4:	f002 f898 	bl	60009a28 <usb_dc_ep_mps>
600078f8:	fbb6 f3f0 	udiv	r3, r6, r0
600078fc:	fb03 6610 	mls	r6, r3, r0, r6
60007900:	2e00      	cmp	r6, #0
60007902:	d185      	bne.n	60007810 <usb_transfer_work+0x34>
60007904:	f854 3c20 	ldr.w	r3, [r4, #-32]
60007908:	2b00      	cmp	r3, #0
6000790a:	d081      	beq.n	60007810 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
6000790c:	4628      	mov	r0, r5
6000790e:	f001 ffe7 	bl	600098e0 <usb_dc_ep_read_continue>
60007912:	e780      	b.n	60007816 <usb_transfer_work+0x3a>
		trans->cb = NULL;
60007914:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
60007918:	f1a4 0010 	sub.w	r0, r4, #16
6000791c:	f006 f8fc 	bl	6000db18 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
60007920:	f854 3c28 	ldr.w	r3, [r4, #-40]
60007924:	338c      	adds	r3, #140	; 0x8c
60007926:	d089      	beq.n	6000783c <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
60007928:	464a      	mov	r2, r9
6000792a:	4641      	mov	r1, r8
6000792c:	4628      	mov	r0, r5
6000792e:	47b0      	blx	r6
60007930:	e784      	b.n	6000783c <usb_transfer_work+0x60>
60007932:	bf00      	nop
60007934:	202039a0 	.word	0x202039a0
60007938:	600178d7 	.word	0x600178d7
6000793c:	600150fc 	.word	0x600150fc

60007940 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
60007940:	1e4b      	subs	r3, r1, #1
60007942:	2b01      	cmp	r3, #1
{
60007944:	b570      	push	{r4, r5, r6, lr}
60007946:	4606      	mov	r6, r0
60007948:	b088      	sub	sp, #32
6000794a:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
6000794c:	d818      	bhi.n	60007980 <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
6000794e:	f7ff ff31 	bl	600077b4 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
60007952:	4604      	mov	r4, r0
60007954:	b9b0      	cbnz	r0, 60007984 <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
60007956:	2d01      	cmp	r5, #1
60007958:	d112      	bne.n	60007980 <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
6000795a:	ab01      	add	r3, sp, #4
6000795c:	2201      	movs	r2, #1
6000795e:	a902      	add	r1, sp, #8
60007960:	4630      	mov	r0, r6
60007962:	f001 ff25 	bl	600097b0 <usb_dc_ep_read_wait>
			} while (bytes);
60007966:	9b01      	ldr	r3, [sp, #4]
60007968:	2b00      	cmp	r3, #0
6000796a:	d1f6      	bne.n	6000795a <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
6000796c:	4a0f      	ldr	r2, [pc, #60]	; (600079ac <usb_transfer_ep_callback+0x6c>)
6000796e:	9207      	str	r2, [sp, #28]
60007970:	2202      	movs	r2, #2
60007972:	9206      	str	r2, [sp, #24]
60007974:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60007978:	aa06      	add	r2, sp, #24
6000797a:	480d      	ldr	r0, [pc, #52]	; (600079b0 <usb_transfer_ep_callback+0x70>)
6000797c:	f7fe fc5e 	bl	6000623c <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
60007980:	b008      	add	sp, #32
60007982:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
60007984:	f00c fe49 	bl	6001461a <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007988:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
6000798c:	b108      	cbz	r0, 60007992 <usb_transfer_ep_callback+0x52>
6000798e:	2d01      	cmp	r5, #1
60007990:	d105      	bne.n	6000799e <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
60007992:	4608      	mov	r0, r1
}
60007994:	b008      	add	sp, #32
60007996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
6000799a:	f7ff bf1f 	b.w	600077dc <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000799e:	4805      	ldr	r0, [pc, #20]	; (600079b4 <usb_transfer_ep_callback+0x74>)
}
600079a0:	b008      	add	sp, #32
600079a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
600079a6:	f00c be72 	b.w	6001468e <k_work_submit_to_queue>
600079aa:	bf00      	nop
600079ac:	600178f4 	.word	0x600178f4
600079b0:	600150fc 	.word	0x600150fc
600079b4:	202039a0 	.word	0x202039a0

600079b8 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
600079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600079bc:	b08b      	sub	sp, #44	; 0x2c
600079be:	4605      	mov	r5, r0
600079c0:	4616      	mov	r6, r2
600079c2:	af00      	add	r7, sp, #0
600079c4:	60b9      	str	r1, [r7, #8]
600079c6:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
600079c8:	f00b fb38 	bl	6001303c <usb_transfer_is_busy>
600079cc:	2800      	cmp	r0, #0
600079ce:	f040 8086 	bne.w	60007ade <usb_transfer+0x126>
	__asm__ volatile(
600079d2:	f04f 0310 	mov.w	r3, #16
600079d6:	f3ef 8211 	mrs	r2, BASEPRI
600079da:	f383 8812 	msr	BASEPRI_MAX, r3
600079de:	f3bf 8f6f 	isb	sy
600079e2:	f8df a100 	ldr.w	sl, [pc, #256]	; 60007ae4 <usb_transfer+0x12c>
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
600079e6:	4681      	mov	r9, r0
600079e8:	607a      	str	r2, [r7, #4]
	return z_impl_k_sem_take(sem, timeout);
600079ea:	2300      	movs	r3, #0
600079ec:	2200      	movs	r2, #0
600079ee:	4650      	mov	r0, sl
600079f0:	f006 f8d0 	bl	6000db94 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
600079f4:	4603      	mov	r3, r0
600079f6:	b9e8      	cbnz	r0, 60007a34 <usb_transfer+0x7c>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
600079f8:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 60007ae8 <usb_transfer+0x130>
600079fc:	ea4f 1889 	mov.w	r8, r9, lsl #6
60007a00:	eb0b 1989 	add.w	r9, fp, r9, lsl #6
60007a04:	f8d9 4004 	ldr.w	r4, [r9, #4]
60007a08:	f114 0f10 	cmn.w	r4, #16
60007a0c:	d131      	bne.n	60007a72 <usb_transfer+0xba>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
60007a0e:	466e      	mov	r6, sp
60007a10:	b088      	sub	sp, #32
60007a12:	466a      	mov	r2, sp
60007a14:	4935      	ldr	r1, [pc, #212]	; (60007aec <usb_transfer+0x134>)
60007a16:	e9c2 1505 	strd	r1, r5, [r2, #20]
60007a1a:	2103      	movs	r1, #3
60007a1c:	f842 1f10 	str.w	r1, [r2, #16]!
60007a20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60007a24:	4832      	ldr	r0, [pc, #200]	; (60007af0 <usb_transfer+0x138>)
60007a26:	f7fe fc09 	bl	6000623c <z_impl_z_log_msg_static_create>
60007a2a:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
60007a2c:	4650      	mov	r0, sl
60007a2e:	f006 f873 	bl	6000db18 <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
60007a32:	e014      	b.n	60007a5e <usb_transfer+0xa6>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
60007a34:	f109 0901 	add.w	r9, r9, #1
60007a38:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
60007a3c:	f1b9 0f04 	cmp.w	r9, #4
60007a40:	d1d3      	bne.n	600079ea <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
60007a42:	4b2c      	ldr	r3, [pc, #176]	; (60007af4 <usb_transfer+0x13c>)
60007a44:	627b      	str	r3, [r7, #36]	; 0x24
60007a46:	2302      	movs	r3, #2
60007a48:	623b      	str	r3, [r7, #32]
		ret = -ENOMEM;
60007a4a:	f06f 040b 	mvn.w	r4, #11
60007a4e:	2300      	movs	r3, #0
60007a50:	f107 0220 	add.w	r2, r7, #32
60007a54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60007a58:	4825      	ldr	r0, [pc, #148]	; (60007af0 <usb_transfer+0x138>)
60007a5a:	f7fe fbef 	bl	6000623c <z_impl_z_log_msg_static_create>
	__asm__ volatile(
60007a5e:	687b      	ldr	r3, [r7, #4]
60007a60:	f383 8811 	msr	BASEPRI, r3
60007a64:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
60007a68:	4620      	mov	r0, r4
60007a6a:	372c      	adds	r7, #44	; 0x2c
60007a6c:	46bd      	mov	sp, r7
60007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
60007a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	trans->buffer = data;
60007a74:	68ba      	ldr	r2, [r7, #8]
	trans->cb = cb;
60007a76:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
60007a7a:	68fb      	ldr	r3, [r7, #12]
	trans->tsize = 0;
60007a7c:	f8c9 0010 	str.w	r0, [r9, #16]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
60007a80:	4628      	mov	r0, r5
	trans->flags = flags;
60007a82:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	trans->priv = cb_data;
60007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->ep = ep;
60007a88:	f80b 5008 	strb.w	r5, [fp, r8]
	trans->priv = cb_data;
60007a8c:	f8c9 3018 	str.w	r3, [r9, #24]
	trans->status = -EBUSY;
60007a90:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
60007a94:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->status = -EBUSY;
60007a98:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
60007a9c:	f001 ffc4 	bl	60009a28 <usb_dc_ep_mps>
60007aa0:	b168      	cbz	r0, 60007abe <usb_transfer+0x106>
60007aa2:	4628      	mov	r0, r5
60007aa4:	f001 ffc0 	bl	60009a28 <usb_dc_ep_mps>
60007aa8:	fbb6 f3f0 	udiv	r3, r6, r0
60007aac:	fb03 6610 	mls	r6, r3, r0, r6
60007ab0:	b12e      	cbz	r6, 60007abe <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
60007ab2:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
60007ab6:	f043 0304 	orr.w	r3, r3, #4
60007aba:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
60007abe:	68fb      	ldr	r3, [r7, #12]
60007ac0:	079b      	lsls	r3, r3, #30
60007ac2:	d507      	bpl.n	60007ad4 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007ac4:	f108 012c 	add.w	r1, r8, #44	; 0x2c
60007ac8:	480b      	ldr	r0, [pc, #44]	; (60007af8 <usb_transfer+0x140>)
	int i, key, ret = 0;
60007aca:	2400      	movs	r4, #0
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007acc:	4459      	add	r1, fp
60007ace:	f00c fdde 	bl	6001468e <k_work_submit_to_queue>
60007ad2:	e7c4      	b.n	60007a5e <usb_transfer+0xa6>
		ret = usb_dc_ep_read_continue(ep);
60007ad4:	4628      	mov	r0, r5
60007ad6:	f001 ff03 	bl	600098e0 <usb_dc_ep_read_continue>
60007ada:	4604      	mov	r4, r0
60007adc:	e7bf      	b.n	60007a5e <usb_transfer+0xa6>
		return -EBUSY;
60007ade:	f06f 040f 	mvn.w	r4, #15
60007ae2:	e7c1      	b.n	60007a68 <usb_transfer+0xb0>
60007ae4:	20203d2c 	.word	0x20203d2c
60007ae8:	20203d10 	.word	0x20203d10
60007aec:	60017929 	.word	0x60017929
60007af0:	600150fc 	.word	0x600150fc
60007af4:	6001790e 	.word	0x6001790e
60007af8:	202039a0 	.word	0x202039a0

60007afc <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
60007afc:	b510      	push	{r4, lr}
	__asm__ volatile(
60007afe:	f04f 0310 	mov.w	r3, #16
60007b02:	f3ef 8411 	mrs	r4, BASEPRI
60007b06:	f383 8812 	msr	BASEPRI_MAX, r3
60007b0a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
60007b0e:	f7ff fe51 	bl	600077b4 <usb_ep_get_transfer>
	if (!trans) {
60007b12:	b150      	cbz	r0, 60007b2a <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
60007b14:	6843      	ldr	r3, [r0, #4]
60007b16:	3310      	adds	r3, #16
60007b18:	d107      	bne.n	60007b2a <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
60007b1a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007b1e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
60007b22:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007b24:	4803      	ldr	r0, [pc, #12]	; (60007b34 <usb_cancel_transfer+0x38>)
60007b26:	f00c fdb2 	bl	6001468e <k_work_submit_to_queue>
	__asm__ volatile(
60007b2a:	f384 8811 	msr	BASEPRI, r4
60007b2e:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
60007b32:	bd10      	pop	{r4, pc}
60007b34:	202039a0 	.word	0x202039a0

60007b38 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
60007b38:	b570      	push	{r4, r5, r6, lr}
60007b3a:	4c0f      	ldr	r4, [pc, #60]	; (60007b78 <usb_cancel_transfers+0x40>)
60007b3c:	2504      	movs	r5, #4
	__asm__ volatile(
60007b3e:	f04f 0310 	mov.w	r3, #16
60007b42:	f3ef 8611 	mrs	r6, BASEPRI
60007b46:	f383 8812 	msr	BASEPRI_MAX, r3
60007b4a:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
60007b4e:	6863      	ldr	r3, [r4, #4]
60007b50:	3310      	adds	r3, #16
60007b52:	d107      	bne.n	60007b64 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
60007b54:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007b58:	f104 012c 	add.w	r1, r4, #44	; 0x2c
60007b5c:	4807      	ldr	r0, [pc, #28]	; (60007b7c <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
60007b5e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
60007b60:	f00c fd95 	bl	6001468e <k_work_submit_to_queue>
	__asm__ volatile(
60007b64:	f386 8811 	msr	BASEPRI, r6
60007b68:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
60007b6c:	3d01      	subs	r5, #1
60007b6e:	f104 0440 	add.w	r4, r4, #64	; 0x40
60007b72:	d1e4      	bne.n	60007b3e <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
60007b74:	bd70      	pop	{r4, r5, r6, pc}
60007b76:	bf00      	nop
60007b78:	20203d10 	.word	0x20203d10
60007b7c:	202039a0 	.word	0x202039a0

60007b80 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
60007b80:	b570      	push	{r4, r5, r6, lr}
60007b82:	4c09      	ldr	r4, [pc, #36]	; (60007ba8 <usb_transfer_init+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
60007b84:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
60007b86:	4e09      	ldr	r6, [pc, #36]	; (60007bac <usb_transfer_init+0x2c>)
60007b88:	4631      	mov	r1, r6
60007b8a:	4620      	mov	r0, r4
60007b8c:	f006 fa2e 	bl	6000dfec <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
60007b90:	2201      	movs	r2, #1
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
60007b92:	3501      	adds	r5, #1
60007b94:	f1a4 0010 	sub.w	r0, r4, #16
60007b98:	3440      	adds	r4, #64	; 0x40
60007b9a:	4611      	mov	r1, r2
60007b9c:	f00c fd59 	bl	60014652 <z_impl_k_sem_init>
60007ba0:	2d04      	cmp	r5, #4
60007ba2:	d1f1      	bne.n	60007b88 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
60007ba4:	2000      	movs	r0, #0
60007ba6:	bd70      	pop	{r4, r5, r6, pc}
60007ba8:	20203d3c 	.word	0x20203d3c
60007bac:	600077dd 	.word	0x600077dd

60007bb0 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
60007bb0:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
60007bb2:	4804      	ldr	r0, [pc, #16]	; (60007bc4 <cdc_acm_int_in+0x14>)
{
60007bb4:	b508      	push	{r3, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
60007bb6:	f00b fa2b 	bl	60013010 <usb_get_dev_data_by_ep>
	if (common == NULL) {
60007bba:	b110      	cbz	r0, 60007bc2 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
60007bbc:	2301      	movs	r3, #1
60007bbe:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
60007bc2:	bd08      	pop	{r3, pc}
60007bc4:	20203e10 	.word	0x20203e10

60007bc8 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60007bc8:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
60007bca:	2301      	movs	r3, #1
60007bcc:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
60007bd0:	680b      	ldr	r3, [r1, #0]
60007bd2:	b133      	cbz	r3, 60007be2 <cdc_acm_irq_rx_enable+0x1a>
60007bd4:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
60007bd8:	b11b      	cbz	r3, 60007be2 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007bda:	3108      	adds	r1, #8
60007bdc:	4801      	ldr	r0, [pc, #4]	; (60007be4 <cdc_acm_irq_rx_enable+0x1c>)
60007bde:	f00c bd56 	b.w	6001468e <k_work_submit_to_queue>
	}
}
60007be2:	4770      	bx	lr
60007be4:	202039a0 	.word	0x202039a0

60007be8 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60007be8:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
60007bea:	2301      	movs	r3, #1
60007bec:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
60007bf0:	680b      	ldr	r3, [r1, #0]
60007bf2:	b133      	cbz	r3, 60007c02 <cdc_acm_irq_tx_enable+0x1a>
60007bf4:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
60007bf8:	b11b      	cbz	r3, 60007c02 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007bfa:	3108      	adds	r1, #8
60007bfc:	4801      	ldr	r0, [pc, #4]	; (60007c04 <cdc_acm_irq_tx_enable+0x1c>)
60007bfe:	f00c bd46 	b.w	6001468e <k_work_submit_to_queue>
}
60007c02:	4770      	bx	lr
60007c04:	202039a0 	.word	0x202039a0

60007c08 <cdc_acm_fifo_fill>:
{
60007c08:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60007c0a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
60007c0c:	f895 025e 	ldrb.w	r0, [r5, #606]	; 0x25e
60007c10:	b188      	cbz	r0, 60007c36 <cdc_acm_fifo_fill+0x2e>
60007c12:	f895 325f 	ldrb.w	r3, [r5, #607]	; 0x25f
60007c16:	b97b      	cbnz	r3, 60007c38 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
60007c18:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
60007c1c:	f8d5 0250 	ldr.w	r0, [r5, #592]	; 0x250
60007c20:	f7fd fc48 	bl	600054b4 <ring_buf_put>
60007c24:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
60007c26:	2200      	movs	r2, #0
60007c28:	2300      	movs	r3, #0
60007c2a:	f105 0118 	add.w	r1, r5, #24
60007c2e:	4803      	ldr	r0, [pc, #12]	; (60007c3c <cdc_acm_fifo_fill+0x34>)
60007c30:	f006 fb0a 	bl	6000e248 <k_work_schedule_for_queue>
	return wrote;
60007c34:	4620      	mov	r0, r4
}
60007c36:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
60007c38:	2000      	movs	r0, #0
60007c3a:	e7fc      	b.n	60007c36 <cdc_acm_fifo_fill+0x2e>
60007c3c:	202039a0 	.word	0x202039a0

60007c40 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
60007c40:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60007c42:	6904      	ldr	r4, [r0, #16]
{
60007c44:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
60007c48:	f894 325e 	ldrb.w	r3, [r4, #606]	; 0x25e
60007c4c:	b1a3      	cbz	r3, 60007c78 <cdc_acm_poll_out+0x38>
60007c4e:	f894 325f 	ldrb.w	r3, [r4, #607]	; 0x25f
60007c52:	b98b      	cbnz	r3, 60007c78 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
60007c54:	f10d 0107 	add.w	r1, sp, #7
60007c58:	2201      	movs	r2, #1
60007c5a:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
	dev_data->tx_ready = false;
60007c5e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
60007c62:	f7fd fc27 	bl	600054b4 <ring_buf_put>
60007c66:	4601      	mov	r1, r0
60007c68:	b140      	cbz	r0, 60007c7c <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
60007c6a:	220a      	movs	r2, #10
60007c6c:	2300      	movs	r3, #0
60007c6e:	f104 0118 	add.w	r1, r4, #24
60007c72:	480b      	ldr	r0, [pc, #44]	; (60007ca0 <cdc_acm_poll_out+0x60>)
60007c74:	f006 fae8 	bl	6000e248 <k_work_schedule_for_queue>
}
60007c78:	b002      	add	sp, #8
60007c7a:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
60007c7c:	2201      	movs	r2, #1
60007c7e:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
60007c82:	f7fd fc47 	bl	60005514 <ring_buf_get>
60007c86:	2800      	cmp	r0, #0
60007c88:	d0f6      	beq.n	60007c78 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
60007c8a:	2201      	movs	r2, #1
60007c8c:	f10d 0107 	add.w	r1, sp, #7
60007c90:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
60007c94:	f7fd fc0e 	bl	600054b4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
60007c98:	2800      	cmp	r0, #0
60007c9a:	d1e6      	bne.n	60007c6a <cdc_acm_poll_out+0x2a>
60007c9c:	e7ec      	b.n	60007c78 <cdc_acm_poll_out+0x38>
60007c9e:	bf00      	nop
60007ca0:	202039a0 	.word	0x202039a0

60007ca4 <tx_work_handler>:
{
60007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
60007ca6:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
{
60007caa:	b085      	sub	sp, #20
60007cac:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
60007cae:	685b      	ldr	r3, [r3, #4]
60007cb0:	6a1b      	ldr	r3, [r3, #32]
60007cb2:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
60007cb4:	4638      	mov	r0, r7
60007cb6:	f00b f9c1 	bl	6001303c <usb_transfer_is_busy>
60007cba:	4606      	mov	r6, r0
60007cbc:	b9f0      	cbnz	r0, 60007cfc <tx_work_handler+0x58>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
60007cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
60007cc2:	a903      	add	r1, sp, #12
60007cc4:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
60007cc8:	f00a ff8c 	bl	60012be4 <ring_buf_get_claim>
	if (!len) {
60007ccc:	4604      	mov	r4, r0
60007cce:	b1a8      	cbz	r0, 60007cfc <tx_work_handler+0x58>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
60007cd0:	f3c0 0308 	ubfx	r3, r0, #0, #9
	dev_data->tx_ready = false;
60007cd4:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
60007cd8:	b903      	cbnz	r3, 60007cdc <tx_work_handler+0x38>
		len -= 1;
60007cda:	1e44      	subs	r4, r0, #1
	struct cdc_acm_dev_data_t *dev_data =
60007cdc:	f1a5 0318 	sub.w	r3, r5, #24
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
60007ce0:	9903      	ldr	r1, [sp, #12]
60007ce2:	4622      	mov	r2, r4
60007ce4:	4638      	mov	r0, r7
60007ce6:	9301      	str	r3, [sp, #4]
60007ce8:	4b05      	ldr	r3, [pc, #20]	; (60007d00 <tx_work_handler+0x5c>)
60007cea:	9300      	str	r3, [sp, #0]
60007cec:	2302      	movs	r3, #2
60007cee:	f7ff fe63 	bl	600079b8 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
60007cf2:	4621      	mov	r1, r4
60007cf4:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
60007cf8:	f00a ff93 	bl	60012c22 <ring_buf_get_finish>
}
60007cfc:	b005      	add	sp, #20
60007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
60007d00:	60007da5 	.word	0x60007da5

60007d04 <cdc_acm_class_handle_req>:
{
60007d04:	b570      	push	{r4, r5, r6, lr}
60007d06:	4604      	mov	r4, r0
60007d08:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
60007d0a:	7901      	ldrb	r1, [r0, #4]
{
60007d0c:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
60007d0e:	4815      	ldr	r0, [pc, #84]	; (60007d64 <cdc_acm_class_handle_req+0x60>)
60007d10:	f00b f971 	bl	60012ff6 <usb_get_dev_data_by_iface>
	if (common == NULL) {
60007d14:	b310      	cbz	r0, 60007d5c <cdc_acm_class_handle_req+0x58>
	if (usb_reqtype_is_to_device(setup)) {
60007d16:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
60007d1a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
60007d1c:	2a00      	cmp	r2, #0
60007d1e:	db16      	blt.n	60007d4e <cdc_acm_class_handle_req+0x4a>
		switch (setup->bRequest) {
60007d20:	2b20      	cmp	r3, #32
60007d22:	d004      	beq.n	60007d2e <cdc_acm_class_handle_req+0x2a>
60007d24:	2b22      	cmp	r3, #34	; 0x22
60007d26:	d00e      	beq.n	60007d46 <cdc_acm_class_handle_req+0x42>
	return -ENOTSUP;
60007d28:	f06f 0085 	mvn.w	r0, #133	; 0x85
60007d2c:	e00a      	b.n	60007d44 <cdc_acm_class_handle_req+0x40>
60007d2e:	682b      	ldr	r3, [r5, #0]
60007d30:	681a      	ldr	r2, [r3, #0]
60007d32:	f840 2c10 	str.w	r2, [r0, #-16]
60007d36:	889a      	ldrh	r2, [r3, #4]
60007d38:	f820 2c0c 	strh.w	r2, [r0, #-12]
60007d3c:	799b      	ldrb	r3, [r3, #6]
60007d3e:	f800 3c0a 	strb.w	r3, [r0, #-10]
			return 0;
60007d42:	2000      	movs	r0, #0
}
60007d44:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
60007d46:	8863      	ldrh	r3, [r4, #2]
60007d48:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
60007d4c:	e7f9      	b.n	60007d42 <cdc_acm_class_handle_req+0x3e>
		if (setup->bRequest == GET_LINE_CODING) {
60007d4e:	2b21      	cmp	r3, #33	; 0x21
60007d50:	d1ea      	bne.n	60007d28 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
60007d52:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
60007d54:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
60007d56:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
60007d58:	6033      	str	r3, [r6, #0]
			return 0;
60007d5a:	e7f2      	b.n	60007d42 <cdc_acm_class_handle_req+0x3e>
		return -ENODEV;
60007d5c:	f06f 0012 	mvn.w	r0, #18
60007d60:	e7f0      	b.n	60007d44 <cdc_acm_class_handle_req+0x40>
60007d62:	bf00      	nop
60007d64:	20203e10 	.word	0x20203e10

60007d68 <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
60007d68:	2100      	movs	r1, #0
	dev_data->line_coding = (struct cdc_acm_line_coding)
60007d6a:	4a0d      	ldr	r2, [pc, #52]	; (60007da0 <cdc_acm_reset_port+0x38>)
{
60007d6c:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
60007d6e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
60007d72:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
60007d74:	f883 125c 	strb.w	r1, [r3, #604]	; 0x25c
	dev_data->line_coding = (struct cdc_acm_line_coding)
60007d78:	f8c3 0254 	str.w	r0, [r3, #596]	; 0x254
60007d7c:	8890      	ldrh	r0, [r2, #4]
60007d7e:	7992      	ldrb	r2, [r2, #6]
60007d80:	f8a3 0258 	strh.w	r0, [r3, #600]	; 0x258
__ssp_bos_icheck3(memset, void *, int)
60007d84:	f103 004c 	add.w	r0, r3, #76	; 0x4c
60007d88:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
60007d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
	dev_data->line_state = 0;
60007d90:	f883 125b 	strb.w	r1, [r3, #603]	; 0x25b
	dev_data->configured = false;
60007d94:	f8a3 125e 	strh.w	r1, [r3, #606]	; 0x25e
	dev_data->rx_paused = false;
60007d98:	f883 1260 	strb.w	r1, [r3, #608]	; 0x260
60007d9c:	f008 bc30 	b.w	60010600 <memset>
60007da0:	60015120 	.word	0x60015120

60007da4 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
60007da4:	2301      	movs	r3, #1
{
60007da6:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
60007da8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
{
60007dac:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
60007dae:	6813      	ldr	r3, [r2, #0]
60007db0:	b13b      	cbz	r3, 60007dc2 <cdc_acm_write_cb+0x1e>
60007db2:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
60007db6:	b123      	cbz	r3, 60007dc2 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007db8:	f102 0108 	add.w	r1, r2, #8
60007dbc:	4809      	ldr	r0, [pc, #36]	; (60007de4 <cdc_acm_write_cb+0x40>)
60007dbe:	f00c fc66 	bl	6001468e <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
60007dc2:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
60007dc6:	689a      	ldr	r2, [r3, #8]
60007dc8:	691b      	ldr	r3, [r3, #16]
60007dca:	429a      	cmp	r2, r3
60007dcc:	d008      	beq.n	60007de0 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
60007dce:	f104 0118 	add.w	r1, r4, #24
60007dd2:	2200      	movs	r2, #0
60007dd4:	2300      	movs	r3, #0
60007dd6:	4803      	ldr	r0, [pc, #12]	; (60007de4 <cdc_acm_write_cb+0x40>)
}
60007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
60007ddc:	f006 ba34 	b.w	6000e248 <k_work_schedule_for_queue>
}
60007de0:	bd10      	pop	{r4, pc}
60007de2:	bf00      	nop
60007de4:	202039a0 	.word	0x202039a0

60007de8 <cdc_acm_init>:
{
60007de8:	b510      	push	{r4, lr}
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
60007dea:	2300      	movs	r3, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60007dec:	6904      	ldr	r4, [r0, #16]
60007dee:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
60007df2:	f504 721a 	add.w	r2, r4, #616	; 0x268
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
60007df6:	4b0b      	ldr	r3, [pc, #44]	; (60007e24 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
60007df8:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
60007dfc:	6859      	ldr	r1, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
60007dfe:	b969      	cbnz	r1, 60007e1c <cdc_acm_init+0x34>
	list->head = node;
60007e00:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
60007e04:	f104 0008 	add.w	r0, r4, #8
60007e08:	4907      	ldr	r1, [pc, #28]	; (60007e28 <cdc_acm_init+0x40>)
60007e0a:	f006 f8ef 	bl	6000dfec <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
60007e0e:	f104 0018 	add.w	r0, r4, #24
60007e12:	4906      	ldr	r1, [pc, #24]	; (60007e2c <cdc_acm_init+0x44>)
60007e14:	f006 f9ec 	bl	6000e1f0 <k_work_init_delayable>
}
60007e18:	2000      	movs	r0, #0
60007e1a:	bd10      	pop	{r4, pc}
	parent->next = child;
60007e1c:	600a      	str	r2, [r1, #0]
	list->tail = node;
60007e1e:	605a      	str	r2, [r3, #4]
}
60007e20:	e7f0      	b.n	60007e04 <cdc_acm_init+0x1c>
60007e22:	bf00      	nop
60007e24:	20203e10 	.word	0x20203e10
60007e28:	60013067 	.word	0x60013067
60007e2c:	60007ca5 	.word	0x60007ca5

60007e30 <cdc_acm_read_cb>:
{
60007e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
60007e32:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
60007e34:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
60007e38:	1e0a      	subs	r2, r1, #0
{
60007e3a:	4605      	mov	r5, r0
	if (size <= 0) {
60007e3c:	dd20      	ble.n	60007e80 <cdc_acm_read_cb+0x50>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
60007e3e:	4631      	mov	r1, r6
60007e40:	f8d4 024c 	ldr.w	r0, [r4, #588]	; 0x24c
60007e44:	f7fd fb36 	bl	600054b4 <ring_buf_put>
	dev_data->rx_ready = true;
60007e48:	2301      	movs	r3, #1
60007e4a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
60007e4e:	6823      	ldr	r3, [r4, #0]
60007e50:	b13b      	cbz	r3, 60007e62 <cdc_acm_read_cb+0x32>
60007e52:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
60007e56:	b123      	cbz	r3, 60007e62 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007e58:	f104 0108 	add.w	r1, r4, #8
60007e5c:	480e      	ldr	r0, [pc, #56]	; (60007e98 <cdc_acm_read_cb+0x68>)
60007e5e:	f00c fc16 	bl	6001468e <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
60007e62:	f8d4 124c 	ldr.w	r1, [r4, #588]	; 0x24c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
60007e66:	684b      	ldr	r3, [r1, #4]
60007e68:	694a      	ldr	r2, [r1, #20]
60007e6a:	1a9a      	subs	r2, r3, r2
60007e6c:	69cb      	ldr	r3, [r1, #28]
60007e6e:	1a9b      	subs	r3, r3, r2
60007e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
60007e74:	d204      	bcs.n	60007e80 <cdc_acm_read_cb+0x50>
		dev_data->rx_paused = true;
60007e76:	2301      	movs	r3, #1
60007e78:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
}
60007e7c:	b002      	add	sp, #8
60007e7e:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
60007e80:	4b06      	ldr	r3, [pc, #24]	; (60007e9c <cdc_acm_read_cb+0x6c>)
60007e82:	f44f 7200 	mov.w	r2, #512	; 0x200
60007e86:	4631      	mov	r1, r6
60007e88:	4628      	mov	r0, r5
60007e8a:	9300      	str	r3, [sp, #0]
60007e8c:	2301      	movs	r3, #1
60007e8e:	9401      	str	r4, [sp, #4]
60007e90:	f7ff fd92 	bl	600079b8 <usb_transfer>
60007e94:	e7f2      	b.n	60007e7c <cdc_acm_read_cb+0x4c>
60007e96:	bf00      	nop
60007e98:	202039a0 	.word	0x202039a0
60007e9c:	60007e31 	.word	0x60007e31

60007ea0 <cdc_acm_dev_status_cb>:
{
60007ea0:	b570      	push	{r4, r5, r6, lr}
60007ea2:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
60007ea4:	4601      	mov	r1, r0
60007ea6:	481e      	ldr	r0, [pc, #120]	; (60007f20 <cdc_acm_dev_status_cb+0x80>)
60007ea8:	f00b f89a 	bl	60012fe0 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
60007eac:	4606      	mov	r6, r0
60007eae:	b380      	cbz	r0, 60007f12 <cdc_acm_dev_status_cb+0x72>
	struct usb_cfg_data *cfg = (void *)dev->config;
60007eb0:	6803      	ldr	r3, [r0, #0]
	switch (status) {
60007eb2:	1e69      	subs	r1, r5, #1
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
60007eb4:	f5a0 7419 	sub.w	r4, r0, #612	; 0x264
	struct usb_cfg_data *cfg = (void *)dev->config;
60007eb8:	685b      	ldr	r3, [r3, #4]
	switch (status) {
60007eba:	2905      	cmp	r1, #5
60007ebc:	d829      	bhi.n	60007f12 <cdc_acm_dev_status_cb+0x72>
60007ebe:	e8df f001 	tbb	[pc, r1]
60007ec2:	2820      	.short	0x2820
60007ec4:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
60007ec8:	f894 125e 	ldrb.w	r1, [r4, #606]	; 0x25e
60007ecc:	b939      	cbnz	r1, 60007ede <cdc_acm_dev_status_cb+0x3e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
60007ece:	6a1b      	ldr	r3, [r3, #32]
60007ed0:	4622      	mov	r2, r4
60007ed2:	7b18      	ldrb	r0, [r3, #12]
60007ed4:	f7ff ffac 	bl	60007e30 <cdc_acm_read_cb>
			dev_data->configured = true;
60007ed8:	2301      	movs	r3, #1
60007eda:	f884 325e 	strb.w	r3, [r4, #606]	; 0x25e
		if (!dev_data->tx_ready) {
60007ede:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
60007ee2:	b9b3      	cbnz	r3, 60007f12 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
60007ee4:	2301      	movs	r3, #1
60007ee6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
60007eea:	6823      	ldr	r3, [r4, #0]
60007eec:	b18b      	cbz	r3, 60007f12 <cdc_acm_dev_status_cb+0x72>
60007eee:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
60007ef2:	b173      	cbz	r3, 60007f12 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007ef4:	f5a6 7117 	sub.w	r1, r6, #604	; 0x25c
60007ef8:	480a      	ldr	r0, [pc, #40]	; (60007f24 <cdc_acm_dev_status_cb+0x84>)
}
60007efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
60007efe:	f00c bbc6 	b.w	6001468e <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
60007f02:	4620      	mov	r0, r4
}
60007f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cdc_acm_reset_port(dev_data);
60007f08:	f7ff bf2e 	b.w	60007d68 <cdc_acm_reset_port>
		dev_data->suspended = true;
60007f0c:	2301      	movs	r3, #1
			dev_data->suspended = false;
60007f0e:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
}
60007f12:	bd70      	pop	{r4, r5, r6, pc}
		if (dev_data->suspended) {
60007f14:	f894 325f 	ldrb.w	r3, [r4, #607]	; 0x25f
60007f18:	2b00      	cmp	r3, #0
60007f1a:	d0fa      	beq.n	60007f12 <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
60007f1c:	2300      	movs	r3, #0
60007f1e:	e7f6      	b.n	60007f0e <cdc_acm_dev_status_cb+0x6e>
60007f20:	20203e10 	.word	0x20203e10
60007f24:	202039a0 	.word	0x202039a0

60007f28 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
60007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
60007f2a:	4d09      	ldr	r5, [pc, #36]	; (60007f50 <z_usb_work_q_init+0x28>)
60007f2c:	2400      	movs	r4, #0
60007f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60007f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
60007f36:	4907      	ldr	r1, [pc, #28]	; (60007f54 <z_usb_work_q_init+0x2c>)
60007f38:	4628      	mov	r0, r5
60007f3a:	9400      	str	r4, [sp, #0]
60007f3c:	f006 f8f0 	bl	6000e120 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
60007f40:	4905      	ldr	r1, [pc, #20]	; (60007f58 <z_usb_work_q_init+0x30>)
60007f42:	4628      	mov	r0, r5
60007f44:	f00c fb6f 	bl	60014626 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
60007f48:	4620      	mov	r0, r4
60007f4a:	b003      	add	sp, #12
60007f4c:	bd30      	pop	{r4, r5, pc}
60007f4e:	bf00      	nop
60007f50:	202039a0 	.word	0x202039a0
60007f54:	20204f80 	.word	0x20204f80
60007f58:	60017979 	.word	0x60017979

60007f5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
60007f5c:	4901      	ldr	r1, [pc, #4]	; (60007f64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
60007f5e:	2210      	movs	r2, #16
	str	r2, [r1]
60007f60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
60007f62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
60007f64:	e000ed10 	.word	0xe000ed10

60007f68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
60007f68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
60007f6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
60007f6c:	f380 8811 	msr	BASEPRI, r0
	isb
60007f70:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
60007f74:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
60007f78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
60007f7a:	b662      	cpsie	i
	isb
60007f7c:	f3bf 8f6f 	isb	sy

	bx	lr
60007f80:	4770      	bx	lr
60007f82:	bf00      	nop

60007f84 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
60007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60007f88:	4681      	mov	r9, r0
60007f8a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
60007f8c:	460c      	mov	r4, r1
60007f8e:	2900      	cmp	r1, #0
60007f90:	d04c      	beq.n	6000802c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
60007f92:	466e      	mov	r6, sp
60007f94:	b08a      	sub	sp, #40	; 0x28
60007f96:	68a3      	ldr	r3, [r4, #8]
60007f98:	466d      	mov	r5, sp
60007f9a:	e9d1 1200 	ldrd	r1, r2, [r1]
60007f9e:	4827      	ldr	r0, [pc, #156]	; (6000803c <z_arm_fatal_error+0xb8>)
60007fa0:	f04f 0a05 	mov.w	sl, #5
60007fa4:	46a8      	mov	r8, r5
60007fa6:	e9c5 0105 	strd	r0, r1, [r5, #20]
60007faa:	e9c5 2307 	strd	r2, r3, [r5, #28]
60007fae:	f848 af10 	str.w	sl, [r8, #16]!
60007fb2:	2300      	movs	r3, #0
60007fb4:	4642      	mov	r2, r8
60007fb6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
60007fba:	4821      	ldr	r0, [pc, #132]	; (60008040 <z_arm_fatal_error+0xbc>)
60007fbc:	f7fe f93e 	bl	6000623c <z_impl_z_log_msg_static_create>
60007fc0:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
60007fc2:	6963      	ldr	r3, [r4, #20]
60007fc4:	46ad      	mov	sp, r5
60007fc6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
60007fca:	481e      	ldr	r0, [pc, #120]	; (60008044 <z_arm_fatal_error+0xc0>)
60007fcc:	f8c5 a010 	str.w	sl, [r5, #16]
60007fd0:	e9c5 0105 	strd	r0, r1, [r5, #20]
60007fd4:	e9c5 2307 	strd	r2, r3, [r5, #28]
60007fd8:	2300      	movs	r3, #0
60007fda:	4642      	mov	r2, r8
60007fdc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
60007fe0:	4817      	ldr	r0, [pc, #92]	; (60008040 <z_arm_fatal_error+0xbc>)
60007fe2:	f7fe f92b 	bl	6000623c <z_impl_z_log_msg_static_create>
60007fe6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
60007fe8:	69e3      	ldr	r3, [r4, #28]
60007fea:	b088      	sub	sp, #32
60007fec:	466d      	mov	r5, sp
60007fee:	4a16      	ldr	r2, [pc, #88]	; (60008048 <z_arm_fatal_error+0xc4>)
60007ff0:	f04f 0a03 	mov.w	sl, #3
60007ff4:	46a8      	mov	r8, r5
60007ff6:	e9c5 2305 	strd	r2, r3, [r5, #20]
60007ffa:	f848 af10 	str.w	sl, [r8, #16]!
60007ffe:	2300      	movs	r3, #0
60008000:	4642      	mov	r2, r8
60008002:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60008006:	480e      	ldr	r0, [pc, #56]	; (60008040 <z_arm_fatal_error+0xbc>)
60008008:	f7fe f918 	bl	6000623c <z_impl_z_log_msg_static_create>
6000800c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
6000800e:	69a3      	ldr	r3, [r4, #24]
60008010:	46ad      	mov	sp, r5
60008012:	4a0e      	ldr	r2, [pc, #56]	; (6000804c <z_arm_fatal_error+0xc8>)
60008014:	f8c5 a010 	str.w	sl, [r5, #16]
60008018:	e9c5 2305 	strd	r2, r3, [r5, #20]
6000801c:	2300      	movs	r3, #0
6000801e:	4642      	mov	r2, r8
60008020:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60008024:	4806      	ldr	r0, [pc, #24]	; (60008040 <z_arm_fatal_error+0xbc>)
60008026:	f7fe f909 	bl	6000623c <z_impl_z_log_msg_static_create>
6000802a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
6000802c:	4621      	mov	r1, r4
6000802e:	4648      	mov	r0, r9
60008030:	f004 fecc 	bl	6000cdcc <z_fatal_error>
}
60008034:	46bd      	mov	sp, r7
60008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000803a:	bf00      	nop
6000803c:	60017982 	.word	0x60017982
60008040:	600150c4 	.word	0x600150c4
60008044:	600179b1 	.word	0x600179b1
60008048:	600179e0 	.word	0x600179e0
6000804c:	600179ef 	.word	0x600179ef

60008050 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
60008050:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
60008052:	2800      	cmp	r0, #0
60008054:	db07      	blt.n	60008066 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
60008056:	2301      	movs	r3, #1
60008058:	0941      	lsrs	r1, r0, #5
6000805a:	f000 001f 	and.w	r0, r0, #31
6000805e:	4a02      	ldr	r2, [pc, #8]	; (60008068 <arch_irq_enable+0x18>)
60008060:	4083      	lsls	r3, r0
60008062:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
60008066:	4770      	bx	lr
60008068:	e000e100 	.word	0xe000e100

6000806c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
6000806c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
6000806e:	1c4b      	adds	r3, r1, #1
{
60008070:	4604      	mov	r4, r0
60008072:	460d      	mov	r5, r1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
60008074:	2b0f      	cmp	r3, #15
60008076:	d90f      	bls.n	60008098 <z_arm_irq_priority_set+0x2c>
60008078:	235b      	movs	r3, #91	; 0x5b
6000807a:	4a10      	ldr	r2, [pc, #64]	; (600080bc <z_arm_irq_priority_set+0x50>)
6000807c:	4910      	ldr	r1, [pc, #64]	; (600080c0 <z_arm_irq_priority_set+0x54>)
6000807e:	4811      	ldr	r0, [pc, #68]	; (600080c4 <z_arm_irq_priority_set+0x58>)
60008080:	f00a fdeb 	bl	60012c5a <assert_print>
60008084:	4629      	mov	r1, r5
60008086:	4810      	ldr	r0, [pc, #64]	; (600080c8 <z_arm_irq_priority_set+0x5c>)
60008088:	230f      	movs	r3, #15
6000808a:	4622      	mov	r2, r4
6000808c:	f00a fde5 	bl	60012c5a <assert_print>
60008090:	215b      	movs	r1, #91	; 0x5b
60008092:	480a      	ldr	r0, [pc, #40]	; (600080bc <z_arm_irq_priority_set+0x50>)
60008094:	f00a fdda 	bl	60012c4c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
60008098:	b200      	sxth	r0, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000809a:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
6000809c:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000809e:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
600080a0:	db06      	blt.n	600080b0 <z_arm_irq_priority_set+0x44>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
600080a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
600080a6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
600080aa:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
}
600080ae:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
600080b0:	f000 000f 	and.w	r0, r0, #15
600080b4:	4a05      	ldr	r2, [pc, #20]	; (600080cc <z_arm_irq_priority_set+0x60>)
600080b6:	5413      	strb	r3, [r2, r0]
600080b8:	e7f9      	b.n	600080ae <z_arm_irq_priority_set+0x42>
600080ba:	bf00      	nop
600080bc:	60017a1d 	.word	0x60017a1d
600080c0:	60017a53 	.word	0x60017a53
600080c4:	60016dfb 	.word	0x60016dfb
600080c8:	60017a6e 	.word	0x60017a6e
600080cc:	e000ed14 	.word	0xe000ed14

600080d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
600080d0:	bf30      	wfi
    b z_SysNmiOnReset
600080d2:	f7ff bffd 	b.w	600080d0 <z_SysNmiOnReset>
600080d6:	bf00      	nop

600080d8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
600080d8:	4a0f      	ldr	r2, [pc, #60]	; (60008118 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
600080da:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
600080dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
600080e0:	4b0e      	ldr	r3, [pc, #56]	; (6000811c <z_arm_prep_c+0x44>)
600080e2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
600080e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600080e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
600080ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
600080f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
600080f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
600080f8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
600080fc:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
60008100:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
60008104:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
60008108:	f004 ff32 	bl	6000cf70 <z_bss_zero>
	z_data_copy();
6000810c:	f007 fae2 	bl	6000f6d4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
60008110:	f000 fc1a 	bl	60008948 <z_arm_interrupt_init>
	z_cstart();
60008114:	f004 ff7a 	bl	6000d00c <z_cstart>
60008118:	60002000 	.word	0x60002000
6000811c:	e000ed00 	.word	0xe000ed00

60008120 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
60008120:	4a09      	ldr	r2, [pc, #36]	; (60008148 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
60008122:	490a      	ldr	r1, [pc, #40]	; (6000814c <arch_swap+0x2c>)
	_current->arch.basepri = key;
60008124:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
60008126:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
60008128:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
6000812a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
6000812c:	4908      	ldr	r1, [pc, #32]	; (60008150 <arch_swap+0x30>)
6000812e:	684b      	ldr	r3, [r1, #4]
60008130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
60008134:	604b      	str	r3, [r1, #4]
60008136:	2300      	movs	r3, #0
60008138:	f383 8811 	msr	BASEPRI, r3
6000813c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
60008140:	6893      	ldr	r3, [r2, #8]
}
60008142:	6f98      	ldr	r0, [r3, #120]	; 0x78
60008144:	4770      	bx	lr
60008146:	bf00      	nop
60008148:	202041fc 	.word	0x202041fc
6000814c:	60016a90 	.word	0x60016a90
60008150:	e000ed00 	.word	0xe000ed00

60008154 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
60008154:	4912      	ldr	r1, [pc, #72]	; (600081a0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
60008156:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
60008158:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
6000815c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
6000815e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
60008162:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
60008166:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
60008168:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
6000816c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
60008170:	4f0c      	ldr	r7, [pc, #48]	; (600081a4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
60008172:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
60008176:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
60008178:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
6000817a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
6000817c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
6000817e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
60008180:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
60008182:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
60008186:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
60008188:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
6000818a:	f000 fc23 	bl	600089d4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
6000818e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
60008192:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
60008196:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
6000819a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
6000819e:	4770      	bx	lr
    ldr r1, =_kernel
600081a0:	202041fc 	.word	0x202041fc
    ldr v4, =_SCS_ICSR
600081a4:	e000ed04 	.word	0xe000ed04

600081a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
600081a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
600081ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
600081ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
600081b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
600081b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
600081b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
600081bc:	2902      	cmp	r1, #2
    beq _oops
600081be:	d0ff      	beq.n	600081c0 <_oops>

600081c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
600081c0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
600081c2:	f00a ffe1 	bl	60013188 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
600081c6:	bd01      	pop	{r0, pc}

600081c8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
600081c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
600081cc:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
600081ce:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
600081d0:	4907      	ldr	r1, [pc, #28]	; (600081f0 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
600081d2:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
600081d4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
600081d6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
600081da:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
600081dc:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
600081de:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
600081e0:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
600081e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
600081e6:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
600081e8:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
600081ea:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
600081ec:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
600081ee:	4770      	bx	lr
600081f0:	60012737 	.word	0x60012737

600081f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
600081f4:	4a09      	ldr	r2, [pc, #36]	; (6000821c <z_check_thread_stack_fail+0x28>)
{
600081f6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
600081f8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
600081fa:	b170      	cbz	r0, 6000821a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
600081fc:	f113 0f16 	cmn.w	r3, #22
60008200:	6e40      	ldr	r0, [r0, #100]	; 0x64
60008202:	d005      	beq.n	60008210 <z_check_thread_stack_fail+0x1c>
60008204:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
60008208:	429a      	cmp	r2, r3
6000820a:	d805      	bhi.n	60008218 <z_check_thread_stack_fail+0x24>
6000820c:	4283      	cmp	r3, r0
6000820e:	d203      	bcs.n	60008218 <z_check_thread_stack_fail+0x24>
		return 0;
60008210:	4281      	cmp	r1, r0
60008212:	bf28      	it	cs
60008214:	2000      	movcs	r0, #0
60008216:	4770      	bx	lr
60008218:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
6000821a:	4770      	bx	lr
6000821c:	202041fc 	.word	0x202041fc

60008220 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
60008220:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
60008222:	4b09      	ldr	r3, [pc, #36]	; (60008248 <arch_switch_to_main_thread+0x28>)
{
60008224:	460d      	mov	r5, r1
60008226:	4614      	mov	r4, r2
	_current = main_thread;
60008228:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
6000822a:	f000 fbd3 	bl	600089d4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
6000822e:	4620      	mov	r0, r4
60008230:	f385 8809 	msr	PSP, r5
60008234:	2100      	movs	r1, #0
60008236:	b663      	cpsie	if
60008238:	f381 8811 	msr	BASEPRI, r1
6000823c:	f3bf 8f6f 	isb	sy
60008240:	2200      	movs	r2, #0
60008242:	2300      	movs	r3, #0
60008244:	f00a fa77 	bl	60012736 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
60008248:	202041fc 	.word	0x202041fc

6000824c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
6000824c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
6000824e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
60008252:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
60008256:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
6000825a:	4904      	ldr	r1, [pc, #16]	; (6000826c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
6000825c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
6000825e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
60008260:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
60008262:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
60008266:	4902      	ldr	r1, [pc, #8]	; (60008270 <_isr_wrapper+0x24>)
	bx r1
60008268:	4708      	bx	r1
6000826a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
6000826c:	60014aa0 	.word	0x60014aa0
	ldr r1, =z_arm_int_exit
60008270:	60008275 	.word	0x60008275

60008274 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
60008274:	4b04      	ldr	r3, [pc, #16]	; (60008288 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
60008276:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
60008278:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
6000827a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
6000827c:	d003      	beq.n	60008286 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
6000827e:	4903      	ldr	r1, [pc, #12]	; (6000828c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
60008280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
60008284:	600a      	str	r2, [r1, #0]

60008286 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
60008286:	4770      	bx	lr
	ldr r3, =_kernel
60008288:	202041fc 	.word	0x202041fc
	ldr r1, =_SCS_ICSR
6000828c:	e000ed04 	.word	0xe000ed04

60008290 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
60008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60008294:	b086      	sub	sp, #24
60008296:	4606      	mov	r6, r0
60008298:	460d      	mov	r5, r1
6000829a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
6000829c:	4b47      	ldr	r3, [pc, #284]	; (600083bc <bus_fault.constprop.0+0x12c>)
6000829e:	2402      	movs	r4, #2
600082a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600082a4:	f107 0210 	add.w	r2, r7, #16
600082a8:	617b      	str	r3, [r7, #20]
600082aa:	4845      	ldr	r0, [pc, #276]	; (600083c0 <bus_fault.constprop.0+0x130>)
600082ac:	613c      	str	r4, [r7, #16]
600082ae:	f00a ff7a 	bl	600131a6 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
600082b2:	4b44      	ldr	r3, [pc, #272]	; (600083c4 <bus_fault.constprop.0+0x134>)
600082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
600082b6:	04d9      	lsls	r1, r3, #19
600082b8:	d56d      	bpl.n	60008396 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
600082ba:	4b43      	ldr	r3, [pc, #268]	; (600083c8 <bus_fault.constprop.0+0x138>)
600082bc:	f107 0210 	add.w	r2, r7, #16
600082c0:	483f      	ldr	r0, [pc, #252]	; (600083c0 <bus_fault.constprop.0+0x130>)
600082c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600082c6:	e9c7 4304 	strd	r4, r3, [r7, #16]
600082ca:	f00a ff6c 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
600082ce:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
600082d0:	4b3c      	ldr	r3, [pc, #240]	; (600083c4 <bus_fault.constprop.0+0x134>)
600082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
600082d4:	051a      	lsls	r2, r3, #20
600082d6:	d50b      	bpl.n	600082f0 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
600082d8:	4b3c      	ldr	r3, [pc, #240]	; (600083cc <bus_fault.constprop.0+0x13c>)
600082da:	f107 0210 	add.w	r2, r7, #16
600082de:	4838      	ldr	r0, [pc, #224]	; (600083c0 <bus_fault.constprop.0+0x130>)
600082e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600082e4:	617b      	str	r3, [r7, #20]
600082e6:	2302      	movs	r3, #2
600082e8:	613b      	str	r3, [r7, #16]
600082ea:	f00a ff5c 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
600082ee:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
600082f0:	4c34      	ldr	r4, [pc, #208]	; (600083c4 <bus_fault.constprop.0+0x134>)
600082f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
600082f4:	059b      	lsls	r3, r3, #22
600082f6:	d523      	bpl.n	60008340 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
600082f8:	46e8      	mov	r8, sp
600082fa:	4b35      	ldr	r3, [pc, #212]	; (600083d0 <bus_fault.constprop.0+0x140>)
600082fc:	f107 0210 	add.w	r2, r7, #16
60008300:	482f      	ldr	r0, [pc, #188]	; (600083c0 <bus_fault.constprop.0+0x130>)
60008302:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008306:	617b      	str	r3, [r7, #20]
60008308:	2302      	movs	r3, #2
6000830a:	613b      	str	r3, [r7, #16]
6000830c:	f00a ff4b 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
60008310:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
60008312:	6aa2      	ldr	r2, [r4, #40]	; 0x28
60008314:	0410      	lsls	r0, r2, #16
60008316:	d512      	bpl.n	6000833e <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
60008318:	b088      	sub	sp, #32
6000831a:	466a      	mov	r2, sp
6000831c:	492d      	ldr	r1, [pc, #180]	; (600083d4 <bus_fault.constprop.0+0x144>)
6000831e:	4828      	ldr	r0, [pc, #160]	; (600083c0 <bus_fault.constprop.0+0x130>)
60008320:	e9c2 1305 	strd	r1, r3, [r2, #20]
60008324:	2303      	movs	r3, #3
60008326:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000832a:	f842 3f10 	str.w	r3, [r2, #16]!
6000832e:	f00a ff3a 	bl	600131a6 <z_log_msg_static_create.constprop.0>
60008332:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
60008334:	b11e      	cbz	r6, 6000833e <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
60008336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
60008338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
6000833c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
6000833e:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
60008340:	4b20      	ldr	r3, [pc, #128]	; (600083c4 <bus_fault.constprop.0+0x134>)
60008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008344:	0559      	lsls	r1, r3, #21
60008346:	d50b      	bpl.n	60008360 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
60008348:	4b23      	ldr	r3, [pc, #140]	; (600083d8 <bus_fault.constprop.0+0x148>)
6000834a:	f107 0210 	add.w	r2, r7, #16
6000834e:	481c      	ldr	r0, [pc, #112]	; (600083c0 <bus_fault.constprop.0+0x130>)
60008350:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008354:	617b      	str	r3, [r7, #20]
60008356:	2302      	movs	r3, #2
60008358:	613b      	str	r3, [r7, #16]
6000835a:	f00a ff24 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
6000835e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
60008360:	4b18      	ldr	r3, [pc, #96]	; (600083c4 <bus_fault.constprop.0+0x134>)
60008362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
60008364:	05d2      	lsls	r2, r2, #23
60008366:	d518      	bpl.n	6000839a <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
60008368:	4b1c      	ldr	r3, [pc, #112]	; (600083dc <bus_fault.constprop.0+0x14c>)
6000836a:	f107 0210 	add.w	r2, r7, #16
6000836e:	4814      	ldr	r0, [pc, #80]	; (600083c0 <bus_fault.constprop.0+0x130>)
60008370:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008374:	617b      	str	r3, [r7, #20]
60008376:	2302      	movs	r3, #2
60008378:	613b      	str	r3, [r7, #16]
6000837a:	f00a ff14 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
6000837e:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
60008380:	4a10      	ldr	r2, [pc, #64]	; (600083c4 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
60008382:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
60008384:	6a93      	ldr	r3, [r2, #40]	; 0x28
60008386:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
6000838a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
6000838c:	2300      	movs	r3, #0
6000838e:	702b      	strb	r3, [r5, #0]
}
60008390:	46bd      	mov	sp, r7
60008392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
60008396:	2016      	movs	r0, #22
60008398:	e79a      	b.n	600082d0 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
6000839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000839c:	049b      	lsls	r3, r3, #18
6000839e:	d5ef      	bpl.n	60008380 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
600083a0:	4b0f      	ldr	r3, [pc, #60]	; (600083e0 <bus_fault.constprop.0+0x150>)
600083a2:	f107 0210 	add.w	r2, r7, #16
600083a6:	4806      	ldr	r0, [pc, #24]	; (600083c0 <bus_fault.constprop.0+0x130>)
600083a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600083ac:	617b      	str	r3, [r7, #20]
600083ae:	2302      	movs	r3, #2
600083b0:	613b      	str	r3, [r7, #16]
600083b2:	f00a fef8 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
600083b6:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
600083b8:	e7e2      	b.n	60008380 <bus_fault.constprop.0+0xf0>
600083ba:	bf00      	nop
600083bc:	60017aae 	.word	0x60017aae
600083c0:	600150c4 	.word	0x600150c4
600083c4:	e000ed00 	.word	0xe000ed00
600083c8:	60017ac4 	.word	0x60017ac4
600083cc:	60017ad5 	.word	0x60017ad5
600083d0:	60017ae8 	.word	0x60017ae8
600083d4:	60017b01 	.word	0x60017b01
600083d8:	60017b16 	.word	0x60017b16
600083dc:	60017b31 	.word	0x60017b31
600083e0:	60017b49 	.word	0x60017b49

600083e4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
600083e4:	b510      	push	{r4, lr}
600083e6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
600083e8:	4b36      	ldr	r3, [pc, #216]	; (600084c4 <usage_fault.constprop.0+0xe0>)
600083ea:	2402      	movs	r4, #2
600083ec:	aa04      	add	r2, sp, #16
600083ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600083f2:	4835      	ldr	r0, [pc, #212]	; (600084c8 <usage_fault.constprop.0+0xe4>)
600083f4:	9305      	str	r3, [sp, #20]
600083f6:	9404      	str	r4, [sp, #16]
600083f8:	f00a fed5 	bl	600131a6 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
600083fc:	4b33      	ldr	r3, [pc, #204]	; (600084cc <usage_fault.constprop.0+0xe8>)
600083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008400:	019a      	lsls	r2, r3, #6
60008402:	d55d      	bpl.n	600084c0 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
60008404:	4b32      	ldr	r3, [pc, #200]	; (600084d0 <usage_fault.constprop.0+0xec>)
60008406:	aa04      	add	r2, sp, #16
60008408:	482f      	ldr	r0, [pc, #188]	; (600084c8 <usage_fault.constprop.0+0xe4>)
6000840a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000840e:	e9cd 4304 	strd	r4, r3, [sp, #16]
60008412:	f00a fec8 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
60008416:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
60008418:	4b2c      	ldr	r3, [pc, #176]	; (600084cc <usage_fault.constprop.0+0xe8>)
6000841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000841c:	01db      	lsls	r3, r3, #7
6000841e:	d50a      	bpl.n	60008436 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
60008420:	4b2c      	ldr	r3, [pc, #176]	; (600084d4 <usage_fault.constprop.0+0xf0>)
60008422:	aa04      	add	r2, sp, #16
60008424:	4828      	ldr	r0, [pc, #160]	; (600084c8 <usage_fault.constprop.0+0xe4>)
60008426:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000842a:	9305      	str	r3, [sp, #20]
6000842c:	2302      	movs	r3, #2
6000842e:	9304      	str	r3, [sp, #16]
60008430:	f00a feb9 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
60008434:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
60008436:	4b25      	ldr	r3, [pc, #148]	; (600084cc <usage_fault.constprop.0+0xe8>)
60008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000843a:	031c      	lsls	r4, r3, #12
6000843c:	d50a      	bpl.n	60008454 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
6000843e:	4b26      	ldr	r3, [pc, #152]	; (600084d8 <usage_fault.constprop.0+0xf4>)
60008440:	aa04      	add	r2, sp, #16
60008442:	4821      	ldr	r0, [pc, #132]	; (600084c8 <usage_fault.constprop.0+0xe4>)
60008444:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008448:	9305      	str	r3, [sp, #20]
6000844a:	2302      	movs	r3, #2
6000844c:	9304      	str	r3, [sp, #16]
6000844e:	f00a feaa 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
60008452:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
60008454:	4b1d      	ldr	r3, [pc, #116]	; (600084cc <usage_fault.constprop.0+0xe8>)
60008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008458:	0359      	lsls	r1, r3, #13
6000845a:	d50a      	bpl.n	60008472 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
6000845c:	4b1f      	ldr	r3, [pc, #124]	; (600084dc <usage_fault.constprop.0+0xf8>)
6000845e:	aa04      	add	r2, sp, #16
60008460:	4819      	ldr	r0, [pc, #100]	; (600084c8 <usage_fault.constprop.0+0xe4>)
60008462:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008466:	9305      	str	r3, [sp, #20]
60008468:	2302      	movs	r3, #2
6000846a:	9304      	str	r3, [sp, #16]
6000846c:	f00a fe9b 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
60008470:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
60008472:	4b16      	ldr	r3, [pc, #88]	; (600084cc <usage_fault.constprop.0+0xe8>)
60008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008476:	039a      	lsls	r2, r3, #14
60008478:	d50a      	bpl.n	60008490 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
6000847a:	4b19      	ldr	r3, [pc, #100]	; (600084e0 <usage_fault.constprop.0+0xfc>)
6000847c:	aa04      	add	r2, sp, #16
6000847e:	4812      	ldr	r0, [pc, #72]	; (600084c8 <usage_fault.constprop.0+0xe4>)
60008480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008484:	9305      	str	r3, [sp, #20]
60008486:	2302      	movs	r3, #2
60008488:	9304      	str	r3, [sp, #16]
6000848a:	f00a fe8c 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
6000848e:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
60008490:	4b0e      	ldr	r3, [pc, #56]	; (600084cc <usage_fault.constprop.0+0xe8>)
60008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008494:	03db      	lsls	r3, r3, #15
60008496:	d50a      	bpl.n	600084ae <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
60008498:	4b12      	ldr	r3, [pc, #72]	; (600084e4 <usage_fault.constprop.0+0x100>)
6000849a:	aa04      	add	r2, sp, #16
6000849c:	480a      	ldr	r0, [pc, #40]	; (600084c8 <usage_fault.constprop.0+0xe4>)
6000849e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600084a2:	9305      	str	r3, [sp, #20]
600084a4:	2302      	movs	r3, #2
600084a6:	9304      	str	r3, [sp, #16]
600084a8:	f00a fe7d 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
600084ac:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
600084ae:	4a07      	ldr	r2, [pc, #28]	; (600084cc <usage_fault.constprop.0+0xe8>)
600084b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
600084b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
600084b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
600084ba:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
600084bc:	b006      	add	sp, #24
600084be:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
600084c0:	201d      	movs	r0, #29
600084c2:	e7a9      	b.n	60008418 <usage_fault.constprop.0+0x34>
600084c4:	60017b78 	.word	0x60017b78
600084c8:	600150c4 	.word	0x600150c4
600084cc:	e000ed00 	.word	0xe000ed00
600084d0:	60017b90 	.word	0x60017b90
600084d4:	60017ba3 	.word	0x60017ba3
600084d8:	60017bbd 	.word	0x60017bbd
600084dc:	60017bdb 	.word	0x60017bdb
600084e0:	60017c00 	.word	0x60017c00
600084e4:	60017c1a 	.word	0x60017c1a

600084e8 <mem_manage_fault>:
{
600084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600084ec:	b086      	sub	sp, #24
600084ee:	4681      	mov	r9, r0
600084f0:	468a      	mov	sl, r1
600084f2:	4690      	mov	r8, r2
600084f4:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
600084f6:	4b5a      	ldr	r3, [pc, #360]	; (60008660 <mem_manage_fault+0x178>)
600084f8:	2402      	movs	r4, #2
600084fa:	485a      	ldr	r0, [pc, #360]	; (60008664 <mem_manage_fault+0x17c>)
600084fc:	f107 0210 	add.w	r2, r7, #16
60008500:	617b      	str	r3, [r7, #20]
60008502:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008506:	613c      	str	r4, [r7, #16]
60008508:	f00a fe4d 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
6000850c:	4b56      	ldr	r3, [pc, #344]	; (60008668 <mem_manage_fault+0x180>)
6000850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60008510:	06d8      	lsls	r0, r3, #27
60008512:	d545      	bpl.n	600085a0 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
60008514:	4b55      	ldr	r3, [pc, #340]	; (6000866c <mem_manage_fault+0x184>)
60008516:	f107 0210 	add.w	r2, r7, #16
6000851a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000851e:	4851      	ldr	r0, [pc, #324]	; (60008664 <mem_manage_fault+0x17c>)
60008520:	e9c7 4304 	strd	r4, r3, [r7, #16]
		reason = K_ERR_ARM_MEM_STACKING;
60008524:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
60008526:	f00a fe3e 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
6000852a:	4b4f      	ldr	r3, [pc, #316]	; (60008668 <mem_manage_fault+0x180>)
6000852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000852e:	0719      	lsls	r1, r3, #28
60008530:	d50b      	bpl.n	6000854a <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
60008532:	4b4f      	ldr	r3, [pc, #316]	; (60008670 <mem_manage_fault+0x188>)
		reason = K_ERR_ARM_MEM_UNSTACKING;
60008534:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
60008536:	f107 0210 	add.w	r2, r7, #16
6000853a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000853e:	617b      	str	r3, [r7, #20]
60008540:	2302      	movs	r3, #2
60008542:	4848      	ldr	r0, [pc, #288]	; (60008664 <mem_manage_fault+0x17c>)
60008544:	613b      	str	r3, [r7, #16]
60008546:	f00a fe2e 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
6000854a:	4d47      	ldr	r5, [pc, #284]	; (60008668 <mem_manage_fault+0x180>)
6000854c:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000854e:	079a      	lsls	r2, r3, #30
60008550:	d528      	bpl.n	600085a4 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
60008552:	466c      	mov	r4, sp
60008554:	4b47      	ldr	r3, [pc, #284]	; (60008674 <mem_manage_fault+0x18c>)
60008556:	f107 0210 	add.w	r2, r7, #16
6000855a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000855e:	4841      	ldr	r0, [pc, #260]	; (60008664 <mem_manage_fault+0x17c>)
60008560:	617b      	str	r3, [r7, #20]
60008562:	2302      	movs	r3, #2
60008564:	613b      	str	r3, [r7, #16]
60008566:	f00a fe1e 	bl	600131a6 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
6000856a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
6000856c:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000856e:	061b      	lsls	r3, r3, #24
60008570:	d560      	bpl.n	60008634 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
60008572:	b088      	sub	sp, #32
60008574:	466a      	mov	r2, sp
60008576:	4b40      	ldr	r3, [pc, #256]	; (60008678 <mem_manage_fault+0x190>)
60008578:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000857c:	4839      	ldr	r0, [pc, #228]	; (60008664 <mem_manage_fault+0x17c>)
6000857e:	e9c2 3605 	strd	r3, r6, [r2, #20]
60008582:	2303      	movs	r3, #3
60008584:	f842 3f10 	str.w	r3, [r2, #16]!
60008588:	f00a fe0d 	bl	600131a6 <z_log_msg_static_create.constprop.0>
6000858c:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
6000858e:	f1ba 0f00 	cmp.w	sl, #0
60008592:	d003      	beq.n	6000859c <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
60008594:	6aab      	ldr	r3, [r5, #40]	; 0x28
60008596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
6000859a:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
6000859c:	2413      	movs	r4, #19
6000859e:	e003      	b.n	600085a8 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
600085a0:	2410      	movs	r4, #16
600085a2:	e7c2      	b.n	6000852a <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
600085a4:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
600085a8:	4b2f      	ldr	r3, [pc, #188]	; (60008668 <mem_manage_fault+0x180>)
600085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
600085ac:	07d8      	lsls	r0, r3, #31
600085ae:	d50b      	bpl.n	600085c8 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
600085b0:	4b32      	ldr	r3, [pc, #200]	; (6000867c <mem_manage_fault+0x194>)
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
600085b2:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
600085b4:	f107 0210 	add.w	r2, r7, #16
600085b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600085bc:	617b      	str	r3, [r7, #20]
600085be:	2302      	movs	r3, #2
600085c0:	4828      	ldr	r0, [pc, #160]	; (60008664 <mem_manage_fault+0x17c>)
600085c2:	613b      	str	r3, [r7, #16]
600085c4:	f00a fdef 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
600085c8:	4b27      	ldr	r3, [pc, #156]	; (60008668 <mem_manage_fault+0x180>)
600085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
600085cc:	0699      	lsls	r1, r3, #26
600085ce:	d50b      	bpl.n	600085e8 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
600085d0:	4b2b      	ldr	r3, [pc, #172]	; (60008680 <mem_manage_fault+0x198>)
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
600085d2:	2415      	movs	r4, #21
		PR_FAULT_INFO(
600085d4:	f107 0210 	add.w	r2, r7, #16
600085d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600085dc:	617b      	str	r3, [r7, #20]
600085de:	2302      	movs	r3, #2
600085e0:	4820      	ldr	r0, [pc, #128]	; (60008664 <mem_manage_fault+0x17c>)
600085e2:	613b      	str	r3, [r7, #16]
600085e4:	f00a fddf 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
600085e8:	4d1f      	ldr	r5, [pc, #124]	; (60008668 <mem_manage_fault+0x180>)
600085ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
600085ec:	06da      	lsls	r2, r3, #27
600085ee:	d402      	bmi.n	600085f6 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
600085f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
600085f2:	079b      	lsls	r3, r3, #30
600085f4:	d50a      	bpl.n	6000860c <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
600085f6:	686b      	ldr	r3, [r5, #4]
600085f8:	0518      	lsls	r0, r3, #20
600085fa:	d507      	bpl.n	6000860c <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
600085fc:	4649      	mov	r1, r9
600085fe:	4630      	mov	r0, r6
60008600:	f7ff fdf8 	bl	600081f4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
60008604:	b1c8      	cbz	r0, 6000863a <mem_manage_fault+0x152>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
60008606:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
6000860a:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
6000860c:	4b16      	ldr	r3, [pc, #88]	; (60008668 <mem_manage_fault+0x180>)
6000860e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
60008610:	0692      	lsls	r2, r2, #26
60008612:	d503      	bpl.n	6000861c <mem_manage_fault+0x134>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
60008614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
60008616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
6000861a:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
6000861c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
6000861e:	4620      	mov	r0, r4
60008620:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
60008622:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
60008626:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
60008628:	2300      	movs	r3, #0
6000862a:	f888 3000 	strb.w	r3, [r8]
}
6000862e:	46bd      	mov	sp, r7
60008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
60008634:	f06f 0615 	mvn.w	r6, #21
60008638:	e7b0      	b.n	6000859c <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
6000863a:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000863c:	06d9      	lsls	r1, r3, #27
6000863e:	d5e5      	bpl.n	6000860c <mem_manage_fault+0x124>
60008640:	4910      	ldr	r1, [pc, #64]	; (60008684 <mem_manage_fault+0x19c>)
60008642:	f240 135b 	movw	r3, #347	; 0x15b
60008646:	4a10      	ldr	r2, [pc, #64]	; (60008688 <mem_manage_fault+0x1a0>)
60008648:	4810      	ldr	r0, [pc, #64]	; (6000868c <mem_manage_fault+0x1a4>)
6000864a:	f00a fb06 	bl	60012c5a <assert_print>
6000864e:	4810      	ldr	r0, [pc, #64]	; (60008690 <mem_manage_fault+0x1a8>)
60008650:	f00a fb03 	bl	60012c5a <assert_print>
60008654:	f240 115b 	movw	r1, #347	; 0x15b
60008658:	480b      	ldr	r0, [pc, #44]	; (60008688 <mem_manage_fault+0x1a0>)
6000865a:	f00a faf7 	bl	60012c4c <assert_post_action>
6000865e:	bf00      	nop
60008660:	60017c45 	.word	0x60017c45
60008664:	600150c4 	.word	0x600150c4
60008668:	e000ed00 	.word	0xe000ed00
6000866c:	60017c5b 	.word	0x60017c5b
60008670:	60017ad5 	.word	0x60017ad5
60008674:	60017c8e 	.word	0x60017c8e
60008678:	60017ca6 	.word	0x60017ca6
6000867c:	60017cbc 	.word	0x60017cbc
60008680:	60017b49 	.word	0x60017b49
60008684:	60017d15 	.word	0x60017d15
60008688:	60017cdb 	.word	0x60017cdb
6000868c:	60016dfb 	.word	0x60016dfb
60008690:	60017d5f 	.word	0x60017d5f

60008694 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
60008694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
60008698:	4b8e      	ldr	r3, [pc, #568]	; (600088d4 <z_arm_fault+0x240>)
{
6000869a:	b08b      	sub	sp, #44	; 0x2c
6000869c:	4604      	mov	r4, r0
6000869e:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
600086a0:	6858      	ldr	r0, [r3, #4]
{
600086a2:	af00      	add	r7, sp, #0
600086a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
600086a8:	f386 8811 	msr	BASEPRI, r6
600086ac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
600086b0:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
600086b4:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
600086b8:	d10e      	bne.n	600086d8 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
600086ba:	f002 050c 	and.w	r5, r2, #12
600086be:	2d08      	cmp	r5, #8
600086c0:	d119      	bne.n	600086f6 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
600086c2:	4b85      	ldr	r3, [pc, #532]	; (600088d8 <z_arm_fault+0x244>)
600086c4:	f107 0218 	add.w	r2, r7, #24
600086c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600086cc:	4883      	ldr	r0, [pc, #524]	; (600088dc <z_arm_fault+0x248>)
600086ce:	61fb      	str	r3, [r7, #28]
600086d0:	2302      	movs	r3, #2
600086d2:	61bb      	str	r3, [r7, #24]
600086d4:	f00a fd67 	bl	600131a6 <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
600086d8:	4981      	ldr	r1, [pc, #516]	; (600088e0 <z_arm_fault+0x24c>)
600086da:	f240 433e 	movw	r3, #1086	; 0x43e
600086de:	4a81      	ldr	r2, [pc, #516]	; (600088e4 <z_arm_fault+0x250>)
600086e0:	4881      	ldr	r0, [pc, #516]	; (600088e8 <z_arm_fault+0x254>)
600086e2:	f00a faba 	bl	60012c5a <assert_print>
600086e6:	4881      	ldr	r0, [pc, #516]	; (600088ec <z_arm_fault+0x258>)
600086e8:	f00a fab7 	bl	60012c5a <assert_print>
600086ec:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
600086f0:	487c      	ldr	r0, [pc, #496]	; (600088e4 <z_arm_fault+0x250>)
600086f2:	f00a faab 	bl	60012c4c <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
600086f6:	0715      	lsls	r5, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
600086f8:	bf4c      	ite	mi
600086fa:	460c      	movmi	r4, r1
			*nested_exc = true;
600086fc:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
600086fe:	2c00      	cmp	r4, #0
60008700:	d0ea      	beq.n	600086d8 <z_arm_fault+0x44>
	*recoverable = false;
60008702:	2200      	movs	r2, #0
60008704:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
60008706:	1eda      	subs	r2, r3, #3
60008708:	2a09      	cmp	r2, #9
6000870a:	f200 80c2 	bhi.w	60008892 <z_arm_fault+0x1fe>
6000870e:	e8df f002 	tbb	[pc, r2]
60008712:	b505      	.short	0xb505
60008714:	c0c098b8 	.word	0xc0c098b8
60008718:	bbc0c0c0 	.word	0xbbc0c0c0
	PR_FAULT_INFO("***** HARD FAULT *****");
6000871c:	46e9      	mov	r9, sp
6000871e:	4b74      	ldr	r3, [pc, #464]	; (600088f0 <z_arm_fault+0x25c>)
60008720:	f04f 0802 	mov.w	r8, #2
60008724:	f107 0218 	add.w	r2, r7, #24
60008728:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000872c:	61fb      	str	r3, [r7, #28]
6000872e:	486b      	ldr	r0, [pc, #428]	; (600088dc <z_arm_fault+0x248>)
60008730:	f8c7 8018 	str.w	r8, [r7, #24]
60008734:	f00a fd37 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
60008738:	4d66      	ldr	r5, [pc, #408]	; (600088d4 <z_arm_fault+0x240>)
	*recoverable = false;
6000873a:	2300      	movs	r3, #0
6000873c:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
6000873e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
60008740:	079a      	lsls	r2, r3, #30
60008742:	d50b      	bpl.n	6000875c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
60008744:	4b6b      	ldr	r3, [pc, #428]	; (600088f4 <z_arm_fault+0x260>)
		PR_EXC("  Debug event");
60008746:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
6000874a:	f107 0218 	add.w	r2, r7, #24
6000874e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008752:	4862      	ldr	r0, [pc, #392]	; (600088dc <z_arm_fault+0x248>)
60008754:	f00a fd27 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
60008758:	2300      	movs	r3, #0
6000875a:	e038      	b.n	600087ce <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
6000875c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
6000875e:	2b00      	cmp	r3, #0
60008760:	da01      	bge.n	60008766 <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
60008762:	4b65      	ldr	r3, [pc, #404]	; (600088f8 <z_arm_fault+0x264>)
60008764:	e7ef      	b.n	60008746 <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
60008766:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
60008768:	005b      	lsls	r3, r3, #1
6000876a:	d57a      	bpl.n	60008862 <z_arm_fault+0x1ce>
		PR_EXC("  Fault escalation (see below)");
6000876c:	4b63      	ldr	r3, [pc, #396]	; (600088fc <z_arm_fault+0x268>)
6000876e:	f107 0218 	add.w	r2, r7, #24
60008772:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008776:	4859      	ldr	r0, [pc, #356]	; (600088dc <z_arm_fault+0x248>)
60008778:	e9c7 8306 	strd	r8, r3, [r7, #24]
6000877c:	f00a fd13 	bl	600131a6 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
60008780:	696b      	ldr	r3, [r5, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
60008782:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
60008784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
60008788:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000878a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000878e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
60008792:	696b      	ldr	r3, [r5, #20]
	uint16_t fault_insn = *(ret_addr - 1);
60008794:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
60008798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
6000879c:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000879e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600087a2:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
600087a6:	f64d 7302 	movw	r3, #57090	; 0xdf02
600087aa:	429a      	cmp	r2, r3
600087ac:	d132      	bne.n	60008814 <z_arm_fault+0x180>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
600087ae:	b088      	sub	sp, #32
600087b0:	6823      	ldr	r3, [r4, #0]
600087b2:	466a      	mov	r2, sp
600087b4:	4952      	ldr	r1, [pc, #328]	; (60008900 <z_arm_fault+0x26c>)
600087b6:	4849      	ldr	r0, [pc, #292]	; (600088dc <z_arm_fault+0x248>)
600087b8:	e9c2 1305 	strd	r1, r3, [r2, #20]
600087bc:	2303      	movs	r3, #3
600087be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600087c2:	f842 3f10 	str.w	r3, [r2, #16]!
600087c6:	f00a fcee 	bl	600131a6 <z_log_msg_static_create.constprop.0>
600087ca:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
600087cc:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
600087ce:	79fa      	ldrb	r2, [r7, #7]
600087d0:	b9e2      	cbnz	r2, 6000880c <z_arm_fault+0x178>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
600087d2:	f107 0508 	add.w	r5, r7, #8
600087d6:	f104 0c20 	add.w	ip, r4, #32
600087da:	6820      	ldr	r0, [r4, #0]
600087dc:	3408      	adds	r4, #8
600087de:	f854 1c04 	ldr.w	r1, [r4, #-4]
600087e2:	462a      	mov	r2, r5
600087e4:	4564      	cmp	r4, ip
600087e6:	c203      	stmia	r2!, {r0, r1}
600087e8:	4615      	mov	r5, r2
600087ea:	d1f6      	bne.n	600087da <z_arm_fault+0x146>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
600087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
600087ee:	2e00      	cmp	r6, #0
600087f0:	d06a      	beq.n	600088c8 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
600087f2:	f3c2 0108 	ubfx	r1, r2, #0, #9
600087f6:	b921      	cbnz	r1, 60008802 <z_arm_fault+0x16e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
600087f8:	ea6f 2252 	mvn.w	r2, r2, lsr #9
600087fc:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
60008800:	627a      	str	r2, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
60008802:	f107 0108 	add.w	r1, r7, #8
60008806:	4618      	mov	r0, r3
60008808:	f7ff fbbc 	bl	60007f84 <z_arm_fatal_error>
}
6000880c:	372c      	adds	r7, #44	; 0x2c
6000880e:	46bd      	mov	sp, r7
60008810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
60008814:	6aab      	ldr	r3, [r5, #40]	; 0x28
60008816:	b2db      	uxtb	r3, r3
60008818:	b133      	cbz	r3, 60008828 <z_arm_fault+0x194>
			reason = mem_manage_fault(esf, 1, recoverable);
6000881a:	1dfa      	adds	r2, r7, #7
6000881c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
6000881e:	4620      	mov	r0, r4
60008820:	f7ff fe62 	bl	600084e8 <mem_manage_fault>
60008824:	4603      	mov	r3, r0
		break;
60008826:	e7d2      	b.n	600087ce <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
60008828:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000882a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
6000882e:	d004      	beq.n	6000883a <z_arm_fault+0x1a6>
			reason = bus_fault(esf, 1, recoverable);
60008830:	1df9      	adds	r1, r7, #7
60008832:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
60008834:	f7ff fd2c 	bl	60008290 <bus_fault.constprop.0>
60008838:	e7f4      	b.n	60008824 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
6000883a:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000883c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
60008840:	d302      	bcc.n	60008848 <z_arm_fault+0x1b4>
		reason = usage_fault(esf);
60008842:	f7ff fdcf 	bl	600083e4 <usage_fault.constprop.0>
60008846:	e7ed      	b.n	60008824 <z_arm_fault+0x190>
			__ASSERT(0,
60008848:	492e      	ldr	r1, [pc, #184]	; (60008904 <z_arm_fault+0x270>)
6000884a:	f44f 7344 	mov.w	r3, #784	; 0x310
6000884e:	4a25      	ldr	r2, [pc, #148]	; (600088e4 <z_arm_fault+0x250>)
60008850:	4825      	ldr	r0, [pc, #148]	; (600088e8 <z_arm_fault+0x254>)
60008852:	f00a fa02 	bl	60012c5a <assert_print>
60008856:	482c      	ldr	r0, [pc, #176]	; (60008908 <z_arm_fault+0x274>)
60008858:	f00a f9ff 	bl	60012c5a <assert_print>
6000885c:	f44f 7144 	mov.w	r1, #784	; 0x310
60008860:	e746      	b.n	600086f0 <z_arm_fault+0x5c>
		__ASSERT(0,
60008862:	4928      	ldr	r1, [pc, #160]	; (60008904 <z_arm_fault+0x270>)
60008864:	f44f 7345 	mov.w	r3, #788	; 0x314
60008868:	4a1e      	ldr	r2, [pc, #120]	; (600088e4 <z_arm_fault+0x250>)
6000886a:	481f      	ldr	r0, [pc, #124]	; (600088e8 <z_arm_fault+0x254>)
6000886c:	f00a f9f5 	bl	60012c5a <assert_print>
60008870:	4826      	ldr	r0, [pc, #152]	; (6000890c <z_arm_fault+0x278>)
60008872:	f00a f9f2 	bl	60012c5a <assert_print>
60008876:	f44f 7145 	mov.w	r1, #788	; 0x314
6000887a:	e739      	b.n	600086f0 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
6000887c:	1dfa      	adds	r2, r7, #7
6000887e:	2100      	movs	r1, #0
60008880:	e7cd      	b.n	6000881e <z_arm_fault+0x18a>
		reason = bus_fault(esf, 0, recoverable);
60008882:	1df9      	adds	r1, r7, #7
60008884:	2000      	movs	r0, #0
60008886:	e7d5      	b.n	60008834 <z_arm_fault+0x1a0>
	PR_FAULT_INFO(
60008888:	4b21      	ldr	r3, [pc, #132]	; (60008910 <z_arm_fault+0x27c>)
6000888a:	61fb      	str	r3, [r7, #28]
6000888c:	2302      	movs	r3, #2
6000888e:	61bb      	str	r3, [r7, #24]
60008890:	e75b      	b.n	6000874a <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
60008892:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
60008896:	4a1f      	ldr	r2, [pc, #124]	; (60008914 <z_arm_fault+0x280>)
60008898:	466d      	mov	r5, sp
6000889a:	b08a      	sub	sp, #40	; 0x28
6000889c:	491e      	ldr	r1, [pc, #120]	; (60008918 <z_arm_fault+0x284>)
6000889e:	bf18      	it	ne
600088a0:	4611      	movne	r1, r2
600088a2:	466a      	mov	r2, sp
600088a4:	3b10      	subs	r3, #16
600088a6:	481d      	ldr	r0, [pc, #116]	; (6000891c <z_arm_fault+0x288>)
600088a8:	61d3      	str	r3, [r2, #28]
600088aa:	f44f 7300 	mov.w	r3, #512	; 0x200
600088ae:	8413      	strh	r3, [r2, #32]
600088b0:	4b1b      	ldr	r3, [pc, #108]	; (60008920 <z_arm_fault+0x28c>)
600088b2:	e9c2 0105 	strd	r0, r1, [r2, #20]
600088b6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
600088ba:	4808      	ldr	r0, [pc, #32]	; (600088dc <z_arm_fault+0x248>)
600088bc:	f842 3f10 	str.w	r3, [r2, #16]!
600088c0:	f00a fc71 	bl	600131a6 <z_log_msg_static_create.constprop.0>
600088c4:	46ad      	mov	sp, r5
}
600088c6:	e747      	b.n	60008758 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
600088c8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
600088cc:	f022 0201 	bic.w	r2, r2, #1
600088d0:	e796      	b.n	60008800 <z_arm_fault+0x16c>
600088d2:	bf00      	nop
600088d4:	e000ed00 	.word	0xe000ed00
600088d8:	60017db0 	.word	0x60017db0
600088dc:	600150c4 	.word	0x600150c4
600088e0:	60017ddb 	.word	0x60017ddb
600088e4:	60017cdb 	.word	0x60017cdb
600088e8:	60016dfb 	.word	0x60016dfb
600088ec:	60017dee 	.word	0x60017dee
600088f0:	60017e2c 	.word	0x60017e2c
600088f4:	60017e43 	.word	0x60017e43
600088f8:	60017e64 	.word	0x60017e64
600088fc:	60017e72 	.word	0x60017e72
60008900:	60017e91 	.word	0x60017e91
60008904:	60017072 	.word	0x60017072
60008908:	60017ead 	.word	0x60017ead
6000890c:	60017ed1 	.word	0x60017ed1
60008910:	60017f01 	.word	0x60017f01
60008914:	60017d97 	.word	0x60017d97
60008918:	60017d82 	.word	0x60017d82
6000891c:	60017f25 	.word	0x60017f25
60008920:	01000004 	.word	0x01000004

60008924 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
60008924:	4a02      	ldr	r2, [pc, #8]	; (60008930 <z_arm_fault_init+0xc>)
60008926:	6953      	ldr	r3, [r2, #20]
60008928:	f043 0310 	orr.w	r3, r3, #16
6000892c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
6000892e:	4770      	bx	lr
60008930:	e000ed00 	.word	0xe000ed00

60008934 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
60008934:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
60008938:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
6000893c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
6000893e:	4672      	mov	r2, lr
	bl z_arm_fault
60008940:	f7ff fea8 	bl	60008694 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
60008944:	bd01      	pop	{r0, pc}
60008946:	bf00      	nop

60008948 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
60008948:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000894a:	4804      	ldr	r0, [pc, #16]	; (6000895c <z_arm_interrupt_init+0x14>)
6000894c:	2110      	movs	r1, #16
6000894e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
60008950:	3301      	adds	r3, #1
60008952:	2ba0      	cmp	r3, #160	; 0xa0
60008954:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
60008958:	d1f9      	bne.n	6000894e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
6000895a:	4770      	bx	lr
6000895c:	e000e100 	.word	0xe000e100

60008960 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
60008960:	f00a fa90 	bl	60012e84 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
60008964:	2010      	movs	r0, #16
    msr BASEPRI, r0
60008966:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
6000896a:	4808      	ldr	r0, [pc, #32]	; (6000898c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
6000896c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
60008970:	1840      	adds	r0, r0, r1
    msr PSP, r0
60008972:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
60008976:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
6000897a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
6000897c:	4308      	orrs	r0, r1
    msr CONTROL, r0
6000897e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
60008982:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
60008986:	f7ff fba7 	bl	600080d8 <z_arm_prep_c>
6000898a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
6000898c:	202053c0 	.word	0x202053c0

60008990 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
60008990:	4b08      	ldr	r3, [pc, #32]	; (600089b4 <z_impl_k_thread_abort+0x24>)
60008992:	689b      	ldr	r3, [r3, #8]
60008994:	4283      	cmp	r3, r0
60008996:	d10b      	bne.n	600089b0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
60008998:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
6000899c:	b143      	cbz	r3, 600089b0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
6000899e:	4b06      	ldr	r3, [pc, #24]	; (600089b8 <z_impl_k_thread_abort+0x28>)
600089a0:	685a      	ldr	r2, [r3, #4]
600089a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
600089a6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
600089a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
600089aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
600089ae:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
600089b0:	f006 bd58 	b.w	6000f464 <z_thread_abort>
600089b4:	202041fc 	.word	0x202041fc
600089b8:	e000ed00 	.word	0xe000ed00

600089bc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
600089bc:	4b02      	ldr	r3, [pc, #8]	; (600089c8 <z_arm_configure_static_mpu_regions+0xc>)
600089be:	2102      	movs	r1, #2
600089c0:	4a02      	ldr	r2, [pc, #8]	; (600089cc <z_arm_configure_static_mpu_regions+0x10>)
600089c2:	4803      	ldr	r0, [pc, #12]	; (600089d0 <z_arm_configure_static_mpu_regions+0x14>)
600089c4:	f000 b892 	b.w	60008aec <arm_core_mpu_configure_static_mpu_regions>
600089c8:	202c0000 	.word	0x202c0000
600089cc:	20200000 	.word	0x20200000
600089d0:	60015244 	.word	0x60015244

600089d4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
600089d4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
600089d6:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
600089d8:	4b04      	ldr	r3, [pc, #16]	; (600089ec <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
600089da:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
600089dc:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
600089de:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
600089e0:	4a03      	ldr	r2, [pc, #12]	; (600089f0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
600089e2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
600089e6:	2101      	movs	r1, #1
600089e8:	f000 b8a6 	b.w	60008b38 <arm_core_mpu_configure_dynamic_mpu_regions>
600089ec:	20203e18 	.word	0x20203e18
600089f0:	150b0000 	.word	0x150b0000

600089f4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
600089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600089f8:	469c      	mov	ip, r3
600089fa:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
600089fc:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
600089fe:	2300      	movs	r3, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
60008a00:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 60008ab0 <mpu_configure_regions+0xbc>
60008a04:	428b      	cmp	r3, r1
60008a06:	da1a      	bge.n	60008a3e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
60008a08:	6844      	ldr	r4, [r0, #4]
60008a0a:	2c00      	cmp	r4, #0
60008a0c:	d04d      	beq.n	60008aaa <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
60008a0e:	f1bc 0f00 	cmp.w	ip, #0
60008a12:	d01d      	beq.n	60008a50 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
60008a14:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
60008a16:	4234      	tst	r4, r6
60008a18:	d015      	beq.n	60008a46 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
60008a1a:	466c      	mov	r4, sp
60008a1c:	b088      	sub	sp, #32
60008a1e:	466a      	mov	r2, sp
60008a20:	4924      	ldr	r1, [pc, #144]	; (60008ab4 <mpu_configure_regions+0xc0>)
60008a22:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
60008a26:	2303      	movs	r3, #3
60008a28:	f842 3f10 	str.w	r3, [r2, #16]!
60008a2c:	2300      	movs	r3, #0
60008a2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60008a32:	4821      	ldr	r0, [pc, #132]	; (60008ab8 <mpu_configure_regions+0xc4>)
			return -EINVAL;
60008a34:	f06f 0515 	mvn.w	r5, #21
60008a38:	f7fd fc00 	bl	6000623c <z_impl_z_log_msg_static_create>
60008a3c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
60008a3e:	4628      	mov	r0, r5
60008a40:	46bd      	mov	sp, r7
60008a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
60008a46:	2c1f      	cmp	r4, #31
60008a48:	d9e7      	bls.n	60008a1a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
60008a4a:	6802      	ldr	r2, [r0, #0]
		&&
60008a4c:	4216      	tst	r6, r2
60008a4e:	d1e4      	bne.n	60008a1a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
60008a50:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
60008a52:	fa5f f885 	uxtb.w	r8, r5
	region_conf.base = new_region->start;
60008a56:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
60008a58:	6886      	ldr	r6, [r0, #8]
	if (size <= 32U) {
60008a5a:	d914      	bls.n	60008a86 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
60008a5c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
60008a60:	d813      	bhi.n	60008a8a <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
60008a62:	3c01      	subs	r4, #1
60008a64:	fab4 f484 	clz	r4, r4
60008a68:	f1c4 041f 	rsb	r4, r4, #31
60008a6c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
60008a6e:	f1b8 0f0f 	cmp.w	r8, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
60008a72:	ea46 0604 	orr.w	r6, r6, r4
60008a76:	d90a      	bls.n	60008a8e <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
60008a78:	466c      	mov	r4, sp
60008a7a:	b088      	sub	sp, #32
60008a7c:	466a      	mov	r2, sp
60008a7e:	4b0f      	ldr	r3, [pc, #60]	; (60008abc <mpu_configure_regions+0xc8>)
60008a80:	e9c2 3505 	strd	r3, r5, [r2, #20]
60008a84:	e7cf      	b.n	60008a26 <mpu_configure_regions+0x32>
		return REGION_32B;
60008a86:	2408      	movs	r4, #8
60008a88:	e7f1      	b.n	60008a6e <mpu_configure_regions+0x7a>
		return REGION_4G;
60008a8a:	243e      	movs	r4, #62	; 0x3e
60008a8c:	e7ef      	b.n	60008a6e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
60008a8e:	f022 021f 	bic.w	r2, r2, #31
60008a92:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
60008a96:	f046 0601 	orr.w	r6, r6, #1
				| MPU_RBAR_VALID_Msk | index;
60008a9a:	432a      	orrs	r2, r5
		reg_index++;
60008a9c:	3501      	adds	r5, #1
60008a9e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
60008aa2:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
60008aa6:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
60008aaa:	3301      	adds	r3, #1
60008aac:	300c      	adds	r0, #12
60008aae:	e7a9      	b.n	60008a04 <mpu_configure_regions+0x10>
60008ab0:	e000ed00 	.word	0xe000ed00
60008ab4:	60017f3c 	.word	0x60017f3c
60008ab8:	600150bc 	.word	0x600150bc
60008abc:	60017f5f 	.word	0x60017f5f

60008ac0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
60008ac0:	4b04      	ldr	r3, [pc, #16]	; (60008ad4 <arm_core_mpu_enable+0x14>)
60008ac2:	2205      	movs	r2, #5
60008ac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
60008ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60008acc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
60008ad0:	4770      	bx	lr
60008ad2:	bf00      	nop
60008ad4:	e000ed00 	.word	0xe000ed00

60008ad8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
60008ad8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
60008adc:	4b02      	ldr	r3, [pc, #8]	; (60008ae8 <arm_core_mpu_disable+0x10>)
60008ade:	2200      	movs	r2, #0
60008ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
60008ae4:	4770      	bx	lr
60008ae6:	bf00      	nop
60008ae8:	e000ed00 	.word	0xe000ed00

60008aec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
60008aec:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
60008aee:	4d0d      	ldr	r5, [pc, #52]	; (60008b24 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
60008af0:	2301      	movs	r3, #1
60008af2:	460c      	mov	r4, r1
60008af4:	782a      	ldrb	r2, [r5, #0]
60008af6:	f7ff ff7d 	bl	600089f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
60008afa:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
60008afc:	3016      	adds	r0, #22
60008afe:	d10f      	bne.n	60008b20 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
60008b00:	f44f 738d 	mov.w	r3, #282	; 0x11a
60008b04:	4a08      	ldr	r2, [pc, #32]	; (60008b28 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
60008b06:	4909      	ldr	r1, [pc, #36]	; (60008b2c <arm_core_mpu_configure_static_mpu_regions+0x40>)
60008b08:	4809      	ldr	r0, [pc, #36]	; (60008b30 <arm_core_mpu_configure_static_mpu_regions+0x44>)
60008b0a:	f00a f8a6 	bl	60012c5a <assert_print>
60008b0e:	4621      	mov	r1, r4
60008b10:	4808      	ldr	r0, [pc, #32]	; (60008b34 <arm_core_mpu_configure_static_mpu_regions+0x48>)
60008b12:	f00a f8a2 	bl	60012c5a <assert_print>
60008b16:	f44f 718d 	mov.w	r1, #282	; 0x11a
60008b1a:	4803      	ldr	r0, [pc, #12]	; (60008b28 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
60008b1c:	f00a f896 	bl	60012c4c <assert_post_action>
			regions_num);
	}
}
60008b20:	bd38      	pop	{r3, r4, r5, pc}
60008b22:	bf00      	nop
60008b24:	202042b2 	.word	0x202042b2
60008b28:	60017f85 	.word	0x60017f85
60008b2c:	60017072 	.word	0x60017072
60008b30:	60016dfb 	.word	0x60016dfb
60008b34:	60017fbc 	.word	0x60017fbc

60008b38 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
60008b38:	4a12      	ldr	r2, [pc, #72]	; (60008b84 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
60008b3a:	2300      	movs	r3, #0
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
60008b3c:	b510      	push	{r4, lr}
60008b3e:	7812      	ldrb	r2, [r2, #0]
60008b40:	460c      	mov	r4, r1
60008b42:	f7ff ff57 	bl	600089f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
60008b46:	f110 0f16 	cmn.w	r0, #22
60008b4a:	d004      	beq.n	60008b56 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
60008b4c:	4b0e      	ldr	r3, [pc, #56]	; (60008b88 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
60008b4e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
60008b50:	280f      	cmp	r0, #15
60008b52:	dd10      	ble.n	60008b76 <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
60008b54:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
60008b56:	f240 1339 	movw	r3, #313	; 0x139
60008b5a:	4a0c      	ldr	r2, [pc, #48]	; (60008b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
60008b5c:	490c      	ldr	r1, [pc, #48]	; (60008b90 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
60008b5e:	480d      	ldr	r0, [pc, #52]	; (60008b94 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
60008b60:	f00a f87b 	bl	60012c5a <assert_print>
60008b64:	4621      	mov	r1, r4
60008b66:	480c      	ldr	r0, [pc, #48]	; (60008b98 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
60008b68:	f00a f877 	bl	60012c5a <assert_print>
60008b6c:	f240 1139 	movw	r1, #313	; 0x139
60008b70:	4806      	ldr	r0, [pc, #24]	; (60008b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
60008b72:	f00a f86b 	bl	60012c4c <assert_post_action>
  MPU->RNR = rnr;
60008b76:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
60008b7a:	3001      	adds	r0, #1
  MPU->RASR = 0U;
60008b7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
60008b80:	e7e6      	b.n	60008b50 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
60008b82:	bf00      	nop
60008b84:	202042b2 	.word	0x202042b2
60008b88:	e000ed00 	.word	0xe000ed00
60008b8c:	60017f85 	.word	0x60017f85
60008b90:	60017072 	.word	0x60017072
60008b94:	60016dfb 	.word	0x60016dfb
60008b98:	60017fe8 	.word	0x60017fe8

60008b9c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
60008b9c:	4837      	ldr	r0, [pc, #220]	; (60008c7c <z_arm_mpu_init+0xe0>)
{
60008b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > get_num_regions()) {
60008ba0:	6804      	ldr	r4, [r0, #0]
60008ba2:	2c10      	cmp	r4, #16
60008ba4:	d910      	bls.n	60008bc8 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
60008ba6:	f240 1351 	movw	r3, #337	; 0x151
60008baa:	4a35      	ldr	r2, [pc, #212]	; (60008c80 <z_arm_mpu_init+0xe4>)
60008bac:	4935      	ldr	r1, [pc, #212]	; (60008c84 <z_arm_mpu_init+0xe8>)
60008bae:	4836      	ldr	r0, [pc, #216]	; (60008c88 <z_arm_mpu_init+0xec>)
60008bb0:	f00a f853 	bl	60012c5a <assert_print>
60008bb4:	4621      	mov	r1, r4
60008bb6:	2210      	movs	r2, #16
60008bb8:	4834      	ldr	r0, [pc, #208]	; (60008c8c <z_arm_mpu_init+0xf0>)
60008bba:	f00a f84e 	bl	60012c5a <assert_print>
60008bbe:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
60008bc2:	482f      	ldr	r0, [pc, #188]	; (60008c80 <z_arm_mpu_init+0xe4>)
60008bc4:	f00a f842 	bl	60012c4c <assert_post_action>
	arm_core_mpu_disable();
60008bc8:	f7ff ff86 	bl	60008ad8 <arm_core_mpu_disable>
	if (SCB->CCR & SCB_CCR_DC_Msk) {
60008bcc:	4a30      	ldr	r2, [pc, #192]	; (60008c90 <z_arm_mpu_init+0xf4>)
60008bce:	6953      	ldr	r3, [r2, #20]
60008bd0:	03db      	lsls	r3, r3, #15
60008bd2:	d51e      	bpl.n	60008c12 <z_arm_mpu_init+0x76>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
60008bd4:	2300      	movs	r3, #0
60008bd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
60008bda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
60008bde:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60008be2:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60008be6:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
60008bea:	f3c3 334e 	ubfx	r3, r3, #13, #15
60008bee:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60008bf0:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60008bf4:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60008bf6:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
60008bfa:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60008bfc:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
60008c00:	d2f9      	bcs.n	60008bf6 <z_arm_mpu_init+0x5a>
    } while(sets-- != 0U);
60008c02:	3b20      	subs	r3, #32
60008c04:	f113 0f20 	cmn.w	r3, #32
60008c08:	d1f2      	bne.n	60008bf0 <z_arm_mpu_init+0x54>
60008c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60008c0e:	f3bf 8f6f 	isb	sy
60008c12:	e9d0 4000 	ldrd	r4, r0, [r0]
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
60008c16:	2200      	movs	r2, #0
60008c18:	491d      	ldr	r1, [pc, #116]	; (60008c90 <z_arm_mpu_init+0xf4>)
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
60008c1a:	42a2      	cmp	r2, r4
60008c1c:	f100 000c 	add.w	r0, r0, #12
60008c20:	d116      	bne.n	60008c50 <z_arm_mpu_init+0xb4>
	static_regions_num = mpu_config.num_regions;
60008c22:	4b1c      	ldr	r3, [pc, #112]	; (60008c94 <z_arm_mpu_init+0xf8>)
60008c24:	701a      	strb	r2, [r3, #0]
	arm_core_mpu_enable();
60008c26:	f7ff ff4b 	bl	60008ac0 <arm_core_mpu_enable>
	__ASSERT(
60008c2a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
60008c2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
60008c32:	2b10      	cmp	r3, #16
60008c34:	d01f      	beq.n	60008c76 <z_arm_mpu_init+0xda>
60008c36:	4918      	ldr	r1, [pc, #96]	; (60008c98 <z_arm_mpu_init+0xfc>)
60008c38:	f240 13bb 	movw	r3, #443	; 0x1bb
60008c3c:	4a10      	ldr	r2, [pc, #64]	; (60008c80 <z_arm_mpu_init+0xe4>)
60008c3e:	4812      	ldr	r0, [pc, #72]	; (60008c88 <z_arm_mpu_init+0xec>)
60008c40:	f00a f80b 	bl	60012c5a <assert_print>
60008c44:	4815      	ldr	r0, [pc, #84]	; (60008c9c <z_arm_mpu_init+0x100>)
60008c46:	f00a f808 	bl	60012c5a <assert_print>
60008c4a:	f240 11bb 	movw	r1, #443	; 0x1bb
60008c4e:	e7b8      	b.n	60008bc2 <z_arm_mpu_init+0x26>
60008c50:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
60008c54:	f850 3c0c 	ldr.w	r3, [r0, #-12]
60008c58:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
60008c5c:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
60008c5e:	3201      	adds	r2, #1
60008c60:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
60008c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
60008c68:	f850 3c04 	ldr.w	r3, [r0, #-4]
60008c6c:	f043 0301 	orr.w	r3, r3, #1
60008c70:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
60008c74:	e7d1      	b.n	60008c1a <z_arm_mpu_init+0x7e>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
60008c76:	2000      	movs	r0, #0
60008c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60008c7a:	bf00      	nop
60008c7c:	6001525c 	.word	0x6001525c
60008c80:	60017f85 	.word	0x60017f85
60008c84:	60017072 	.word	0x60017072
60008c88:	60016dfb 	.word	0x60016dfb
60008c8c:	60018015 	.word	0x60018015
60008c90:	e000ed00 	.word	0xe000ed00
60008c94:	202042b2 	.word	0x202042b2
60008c98:	60018049 	.word	0x60018049
60008c9c:	6001809a 	.word	0x6001809a

60008ca0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
60008ca0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
60008ca2:	4b0b      	ldr	r3, [pc, #44]	; (60008cd0 <malloc_prepare+0x30>)
60008ca4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
60008ca8:	f503 1330 	add.w	r3, r3, #2883584	; 0x2c0000
60008cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
60008cb0:	d20c      	bcs.n	60008ccc <malloc_prepare+0x2c>
60008cb2:	4908      	ldr	r1, [pc, #32]	; (60008cd4 <malloc_prepare+0x34>)
60008cb4:	2381      	movs	r3, #129	; 0x81
60008cb6:	4a08      	ldr	r2, [pc, #32]	; (60008cd8 <malloc_prepare+0x38>)
60008cb8:	4808      	ldr	r0, [pc, #32]	; (60008cdc <malloc_prepare+0x3c>)
60008cba:	f009 ffce 	bl	60012c5a <assert_print>
60008cbe:	4808      	ldr	r0, [pc, #32]	; (60008ce0 <malloc_prepare+0x40>)
60008cc0:	f009 ffcb 	bl	60012c5a <assert_print>
60008cc4:	2181      	movs	r1, #129	; 0x81
60008cc6:	4804      	ldr	r0, [pc, #16]	; (60008cd8 <malloc_prepare+0x38>)
60008cc8:	f009 ffc0 	bl	60012c4c <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
60008ccc:	2000      	movs	r0, #0
60008cce:	bd08      	pop	{r3, pc}
60008cd0:	20206f78 	.word	0x20206f78
60008cd4:	600180eb 	.word	0x600180eb
60008cd8:	600180bb 	.word	0x600180bb
60008cdc:	60016dfb 	.word	0x60016dfb
60008ce0:	60018132 	.word	0x60018132

60008ce4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
60008ce4:	4b01      	ldr	r3, [pc, #4]	; (60008cec <__stdout_hook_install+0x8>)
60008ce6:	6018      	str	r0, [r3, #0]
}
60008ce8:	4770      	bx	lr
60008cea:	bf00      	nop
60008cec:	20202a18 	.word	0x20202a18

60008cf0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
60008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60008cf2:	4606      	mov	r6, r0
60008cf4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
60008cf6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
60008cf8:	4f06      	ldr	r7, [pc, #24]	; (60008d14 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
60008cfa:	42ac      	cmp	r4, r5
60008cfc:	da08      	bge.n	60008d10 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
60008cfe:	683b      	ldr	r3, [r7, #0]
60008d00:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
60008d02:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
60008d04:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
60008d06:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
60008d0a:	d001      	beq.n	60008d10 <z_impl_zephyr_read_stdin+0x20>
60008d0c:	280d      	cmp	r0, #13
60008d0e:	d1f4      	bne.n	60008cfa <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
60008d10:	4620      	mov	r0, r4
60008d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60008d14:	20202a14 	.word	0x20202a14

60008d18 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
60008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60008d1a:	460d      	mov	r5, r1
60008d1c:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
60008d1e:	f1c0 0401 	rsb	r4, r0, #1
60008d22:	4f08      	ldr	r7, [pc, #32]	; (60008d44 <z_impl_zephyr_write_stdout+0x2c>)
60008d24:	19a3      	adds	r3, r4, r6
60008d26:	429d      	cmp	r5, r3
60008d28:	dc01      	bgt.n	60008d2e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
60008d2a:	4628      	mov	r0, r5
60008d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
60008d2e:	7873      	ldrb	r3, [r6, #1]
60008d30:	2b0a      	cmp	r3, #10
60008d32:	d102      	bne.n	60008d3a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
60008d34:	683b      	ldr	r3, [r7, #0]
60008d36:	200d      	movs	r0, #13
60008d38:	4798      	blx	r3
		_stdout_hook(*(buf + i));
60008d3a:	683b      	ldr	r3, [r7, #0]
60008d3c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
60008d40:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
60008d42:	e7ef      	b.n	60008d24 <z_impl_zephyr_write_stdout+0xc>
60008d44:	20202a18 	.word	0x20202a18

60008d48 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
60008d48:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
60008d4a:	2105      	movs	r1, #5
60008d4c:	4801      	ldr	r0, [pc, #4]	; (60008d54 <_exit+0xc>)
60008d4e:	f7ff ffe3 	bl	60008d18 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
60008d52:	e7fe      	b.n	60008d52 <_exit+0xa>
60008d54:	600181b9 	.word	0x600181b9

60008d58 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
60008d58:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
60008d5a:	4c07      	ldr	r4, [pc, #28]	; (60008d78 <_sbrk+0x20>)
60008d5c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
60008d5e:	18c2      	adds	r2, r0, r3
60008d60:	4806      	ldr	r0, [pc, #24]	; (60008d7c <_sbrk+0x24>)
60008d62:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
60008d66:	f501 1130 	add.w	r1, r1, #2883584	; 0x2c0000
60008d6a:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
60008d6c:	bf36      	itet	cc
60008d6e:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
60008d70:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
		heap_sz += count;
60008d74:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
60008d76:	bd10      	pop	{r4, pc}
60008d78:	20203e24 	.word	0x20203e24
60008d7c:	20206f78 	.word	0x20206f78

60008d80 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
60008d80:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
60008d82:	4604      	mov	r4, r0
60008d84:	b958      	cbnz	r0, 60008d9e <__retarget_lock_init_recursive+0x1e>
60008d86:	4911      	ldr	r1, [pc, #68]	; (60008dcc <__retarget_lock_init_recursive+0x4c>)
60008d88:	f240 137b 	movw	r3, #379	; 0x17b
60008d8c:	4a10      	ldr	r2, [pc, #64]	; (60008dd0 <__retarget_lock_init_recursive+0x50>)
60008d8e:	4811      	ldr	r0, [pc, #68]	; (60008dd4 <__retarget_lock_init_recursive+0x54>)
60008d90:	f009 ff63 	bl	60012c5a <assert_print>
60008d94:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
60008d98:	480d      	ldr	r0, [pc, #52]	; (60008dd0 <__retarget_lock_init_recursive+0x50>)
60008d9a:	f009 ff57 	bl	60012c4c <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
60008d9e:	2014      	movs	r0, #20
60008da0:	f007 f962 	bl	60010068 <malloc>
60008da4:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
60008da6:	b960      	cbnz	r0, 60008dc2 <__retarget_lock_init_recursive+0x42>
60008da8:	490b      	ldr	r1, [pc, #44]	; (60008dd8 <__retarget_lock_init_recursive+0x58>)
60008daa:	f240 1383 	movw	r3, #387	; 0x183
60008dae:	4a08      	ldr	r2, [pc, #32]	; (60008dd0 <__retarget_lock_init_recursive+0x50>)
60008db0:	4808      	ldr	r0, [pc, #32]	; (60008dd4 <__retarget_lock_init_recursive+0x54>)
60008db2:	f009 ff52 	bl	60012c5a <assert_print>
60008db6:	4809      	ldr	r0, [pc, #36]	; (60008ddc <__retarget_lock_init_recursive+0x5c>)
60008db8:	f009 ff4f 	bl	60012c5a <assert_print>
60008dbc:	f240 1183 	movw	r1, #387	; 0x183
60008dc0:	e7ea      	b.n	60008d98 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
60008dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
60008dc6:	f00b bc3d 	b.w	60014644 <z_impl_k_mutex_init>
60008dca:	bf00      	nop
60008dcc:	600181c0 	.word	0x600181c0
60008dd0:	600180bb 	.word	0x600180bb
60008dd4:	60016dfb 	.word	0x60016dfb
60008dd8:	600181bf 	.word	0x600181bf
60008ddc:	600181fb 	.word	0x600181fb

60008de0 <__retarget_lock_close_recursive>:
#endif /* !CONFIG_USERSPACE */
}

/* Close dynamic recursive lock */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
60008de0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
60008de2:	b958      	cbnz	r0, 60008dfc <__retarget_lock_close_recursive+0x1c>
60008de4:	4907      	ldr	r1, [pc, #28]	; (60008e04 <__retarget_lock_close_recursive+0x24>)
60008de6:	f44f 73cb 	mov.w	r3, #406	; 0x196
60008dea:	4807      	ldr	r0, [pc, #28]	; (60008e08 <__retarget_lock_close_recursive+0x28>)
60008dec:	4a07      	ldr	r2, [pc, #28]	; (60008e0c <__retarget_lock_close_recursive+0x2c>)
60008dee:	f009 ff34 	bl	60012c5a <assert_print>
60008df2:	f44f 71cb 	mov.w	r1, #406	; 0x196
60008df6:	4805      	ldr	r0, [pc, #20]	; (60008e0c <__retarget_lock_close_recursive+0x2c>)
60008df8:	f009 ff28 	bl	60012c4c <assert_post_action>
#ifndef CONFIG_USERSPACE
	free(lock);
#else
	k_object_release(lock);
#endif /* !CONFIG_USERSPACE */
}
60008dfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free(lock);
60008e00:	f007 b93a 	b.w	60010078 <free>
60008e04:	600181c0 	.word	0x600181c0
60008e08:	60016dfb 	.word	0x60016dfb
60008e0c:	600180bb 	.word	0x600180bb

60008e10 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
60008e10:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
60008e12:	b958      	cbnz	r0, 60008e2c <__retarget_lock_acquire_recursive+0x1c>
60008e14:	4909      	ldr	r1, [pc, #36]	; (60008e3c <__retarget_lock_acquire_recursive+0x2c>)
60008e16:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
60008e1a:	4809      	ldr	r0, [pc, #36]	; (60008e40 <__retarget_lock_acquire_recursive+0x30>)
60008e1c:	4a09      	ldr	r2, [pc, #36]	; (60008e44 <__retarget_lock_acquire_recursive+0x34>)
60008e1e:	f009 ff1c 	bl	60012c5a <assert_print>
60008e22:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
60008e26:	4807      	ldr	r0, [pc, #28]	; (60008e44 <__retarget_lock_acquire_recursive+0x34>)
60008e28:	f009 ff10 	bl	60012c4c <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
60008e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60008e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
60008e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60008e38:	f004 bd10 	b.w	6000d85c <z_impl_k_mutex_lock>
60008e3c:	600181c0 	.word	0x600181c0
60008e40:	60016dfb 	.word	0x60016dfb
60008e44:	600180bb 	.word	0x600180bb

60008e48 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
60008e48:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
60008e4a:	b958      	cbnz	r0, 60008e64 <__retarget_lock_release_recursive+0x1c>
60008e4c:	4907      	ldr	r1, [pc, #28]	; (60008e6c <__retarget_lock_release_recursive+0x24>)
60008e4e:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
60008e52:	4807      	ldr	r0, [pc, #28]	; (60008e70 <__retarget_lock_release_recursive+0x28>)
60008e54:	4a07      	ldr	r2, [pc, #28]	; (60008e74 <__retarget_lock_release_recursive+0x2c>)
60008e56:	f009 ff00 	bl	60012c5a <assert_print>
60008e5a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
60008e5e:	4805      	ldr	r0, [pc, #20]	; (60008e74 <__retarget_lock_release_recursive+0x2c>)
60008e60:	f009 fef4 	bl	60012c4c <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
60008e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
60008e68:	f004 bdc8 	b.w	6000d9fc <z_impl_k_mutex_unlock>
60008e6c:	600181c0 	.word	0x600181c0
60008e70:	60016dfb 	.word	0x60016dfb
60008e74:	600180bb 	.word	0x600180bb

60008e78 <usb_isr_handler>:
}

static void usb_isr_handler(void)
{
#if defined(CONFIG_USB_DC_NXP_EHCI)
	USB_DeviceEhciIsrFunction(&dev_state);
60008e78:	4801      	ldr	r0, [pc, #4]	; (60008e80 <usb_isr_handler+0x8>)
60008e7a:	f00b ba14 	b.w	600142a6 <USB_DeviceEhciIsrFunction>
60008e7e:	bf00      	nop
60008e80:	20202e00 	.word	0x20202e00

60008e84 <usb_mcux_init>:
	USB_DeviceLpcIp3511IsrFunction(&dev_state);
#endif
}

static int usb_mcux_init(const struct device *dev)
{
60008e84:	b530      	push	{r4, r5, lr}
60008e86:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
60008e88:	490d      	ldr	r1, [pc, #52]	; (60008ec0 <usb_mcux_init+0x3c>)
60008e8a:	2200      	movs	r2, #0
60008e8c:	2300      	movs	r3, #0
60008e8e:	2400      	movs	r4, #0
60008e90:	f501 6588 	add.w	r5, r1, #1088	; 0x440
60008e94:	9400      	str	r4, [sp, #0]
60008e96:	4628      	mov	r0, r5
60008e98:	e9cd 2306 	strd	r2, r3, [sp, #24]
60008e9c:	f06f 030d 	mvn.w	r3, #13
60008ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
60008ea4:	e9cd 3403 	strd	r3, r4, [sp, #12]
60008ea8:	e9cd 4401 	strd	r4, r4, [sp, #4]
60008eac:	4b05      	ldr	r3, [pc, #20]	; (60008ec4 <usb_mcux_init+0x40>)
60008eae:	f004 fa8b 	bl	6000d3c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
60008eb2:	4905      	ldr	r1, [pc, #20]	; (60008ec8 <usb_mcux_init+0x44>)
60008eb4:	4628      	mov	r0, r5
60008eb6:	f00b fbb6 	bl	60014626 <z_impl_k_thread_name_set>
			usb_mcux_thread_main, NULL, NULL, NULL,
			K_PRIO_COOP(2), 0, K_NO_WAIT);
	k_thread_name_set(&dev_state.thread, "usb_mcux");

	return 0;
}
60008eba:	4620      	mov	r0, r4
60008ebc:	b009      	add	sp, #36	; 0x24
60008ebe:	bd30      	pop	{r4, r5, pc}
60008ec0:	20202f00 	.word	0x20202f00
60008ec4:	60008ecd 	.word	0x60008ecd
60008ec8:	6001822d 	.word	0x6001822d

60008ecc <usb_mcux_thread_main>:
{
60008ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60008ed0:	b08c      	sub	sp, #48	; 0x30
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
60008ed2:	4d8c      	ldr	r5, [pc, #560]	; (60009104 <usb_mcux_thread_main+0x238>)
			memcpy(&dev_state.eps[ep_abs_idx].transfer_message, &msg,
60008ed4:	4c8c      	ldr	r4, [pc, #560]	; (60009108 <usb_mcux_thread_main+0x23c>)
{
60008ed6:	af00      	add	r7, sp, #0
60008ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60008edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60008ee0:	f107 010c 	add.w	r1, r7, #12
60008ee4:	4628      	mov	r0, r5
60008ee6:	f004 fc0d 	bl	6000d704 <z_impl_k_msgq_get>
		switch (msg.code) {
60008eea:	7d3a      	ldrb	r2, [r7, #20]
60008eec:	f1a2 0310 	sub.w	r3, r2, #16
60008ef0:	2b05      	cmp	r3, #5
60008ef2:	f200 808e 	bhi.w	60009012 <usb_mcux_thread_main+0x146>
60008ef6:	e8df f003 	tbb	[pc, r3]
60008efa:	8203      	.short	0x8203
60008efc:	7d8c8c87 	.word	0x7d8c8c87
	dev_state.dev_struct.deviceAddress = 0;
60008f00:	2200      	movs	r2, #0
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008f02:	68e3      	ldr	r3, [r4, #12]
60008f04:	210e      	movs	r1, #14
60008f06:	68a0      	ldr	r0, [r4, #8]
	dev_state.dev_struct.deviceAddress = 0;
60008f08:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008f0c:	695b      	ldr	r3, [r3, #20]
60008f0e:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
60008f10:	b150      	cbz	r0, 60008f28 <usb_mcux_thread_main+0x5c>
		LOG_ERR("Failed to set default status");
60008f12:	4b7e      	ldr	r3, [pc, #504]	; (6000910c <usb_mcux_thread_main+0x240>)
60008f14:	f107 0228 	add.w	r2, r7, #40	; 0x28
60008f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008f1c:	487c      	ldr	r0, [pc, #496]	; (60009110 <usb_mcux_thread_main+0x244>)
60008f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
60008f20:	2302      	movs	r3, #2
60008f22:	62bb      	str	r3, [r7, #40]	; 0x28
60008f24:	f00a f962 	bl	600131ec <z_log_msg_static_create.constprop.0>
{
60008f28:	2300      	movs	r3, #0
		dev_state.eps[i].ep_occupied = false;
60008f2a:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
60008f2e:	441a      	add	r2, r3
60008f30:	7e91      	ldrb	r1, [r2, #26]
60008f32:	f36f 0141 	bfc	r1, #1, #1
60008f36:	7691      	strb	r1, [r2, #26]
		dev_state.eps[i].ep_enabled = false;
60008f38:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
60008f3c:	441a      	add	r2, r3
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
60008f3e:	331c      	adds	r3, #28
		dev_state.eps[i].ep_enabled = false;
60008f40:	7e91      	ldrb	r1, [r2, #26]
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
60008f42:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
		dev_state.eps[i].ep_enabled = false;
60008f46:	f36f 0100 	bfc	r1, #0, #1
60008f4a:	7691      	strb	r1, [r2, #26]
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
60008f4c:	d1ed      	bne.n	60008f2a <usb_mcux_thread_main+0x5e>
	ep_init.zlt = 0U;
60008f4e:	2200      	movs	r2, #0
	ep_init.maxPacketSize = USB_CONTROL_EP_MPS;
60008f50:	2340      	movs	r3, #64	; 0x40
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008f52:	2102      	movs	r1, #2
60008f54:	68a0      	ldr	r0, [r4, #8]
	ep_init.zlt = 0U;
60008f56:	723a      	strb	r2, [r7, #8]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
60008f58:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
	ep_init.maxPacketSize = USB_CONTROL_EP_MPS;
60008f5c:	607b      	str	r3, [r7, #4]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
60008f5e:	8313      	strh	r3, [r2, #24]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008f60:	1d3a      	adds	r2, r7, #4
60008f62:	68e3      	ldr	r3, [r4, #12]
60008f64:	695b      	ldr	r3, [r3, #20]
60008f66:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
60008f68:	b150      	cbz	r0, 60008f80 <usb_mcux_thread_main+0xb4>
		LOG_ERR("Failed to initialize control OUT endpoint");
60008f6a:	4b6a      	ldr	r3, [pc, #424]	; (60009114 <usb_mcux_thread_main+0x248>)
60008f6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
60008f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008f74:	4866      	ldr	r0, [pc, #408]	; (60009110 <usb_mcux_thread_main+0x244>)
60008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
60008f78:	2302      	movs	r3, #2
60008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
60008f7c:	f00a f936 	bl	600131ec <z_log_msg_static_create.constprop.0>
	dev_state.eps[ep_abs_idx].ep_occupied = false;
60008f80:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008f84:	2102      	movs	r1, #2
60008f86:	68a0      	ldr	r0, [r4, #8]
	dev_state.eps[ep_abs_idx].ep_occupied = false;
60008f88:	7e9a      	ldrb	r2, [r3, #26]
60008f8a:	f36f 0241 	bfc	r2, #1, #1
60008f8e:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_enabled = true;
60008f90:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
60008f94:	7e93      	ldrb	r3, [r2, #26]
60008f96:	f043 0301 	orr.w	r3, r3, #1
60008f9a:	7693      	strb	r3, [r2, #26]
	ep_init.endpointAddress = USB_CONTROL_EP_IN;
60008f9c:	2380      	movs	r3, #128	; 0x80
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
60008f9e:	2240      	movs	r2, #64	; 0x40
	ep_init.endpointAddress = USB_CONTROL_EP_IN;
60008fa0:	71bb      	strb	r3, [r7, #6]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
60008fa2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
60008fa6:	869a      	strh	r2, [r3, #52]	; 0x34
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60008fa8:	1d3a      	adds	r2, r7, #4
60008faa:	68e3      	ldr	r3, [r4, #12]
60008fac:	695b      	ldr	r3, [r3, #20]
60008fae:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
60008fb0:	b150      	cbz	r0, 60008fc8 <usb_mcux_thread_main+0xfc>
		LOG_ERR("Failed to initialize control IN endpoint");
60008fb2:	4b59      	ldr	r3, [pc, #356]	; (60009118 <usb_mcux_thread_main+0x24c>)
60008fb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
60008fb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008fbc:	4854      	ldr	r0, [pc, #336]	; (60009110 <usb_mcux_thread_main+0x244>)
60008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
60008fc0:	2302      	movs	r3, #2
60008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
60008fc4:	f00a f912 	bl	600131ec <z_log_msg_static_create.constprop.0>
	dev_state.eps[ep_abs_idx].ep_occupied = false;
60008fc8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			dev_state.status_cb(USB_DC_RESET, NULL);
60008fcc:	2100      	movs	r1, #0
60008fce:	2001      	movs	r0, #1
	dev_state.eps[ep_abs_idx].ep_occupied = false;
60008fd0:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
60008fd4:	f36f 0241 	bfc	r2, #1, #1
60008fd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dev_state.eps[ep_abs_idx].ep_enabled = true;
60008fdc:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
60008fe0:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
60008fe4:	f043 0301 	orr.w	r3, r3, #1
60008fe8:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
			dev_state.status_cb(USB_DC_RESET, NULL);
60008fec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
			dev_state.status_cb(USB_DC_ERROR, NULL);
60008ff0:	4798      	blx	r3
			break;
60008ff2:	e771      	b.n	60008ed8 <usb_mcux_thread_main+0xc>
			dev_state.status_cb(USB_DC_ERROR, NULL);
60008ff4:	2100      	movs	r1, #0
60008ff6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
60008ffa:	4608      	mov	r0, r1
60008ffc:	e7f8      	b.n	60008ff0 <usb_mcux_thread_main+0x124>
			dev_state.status_cb(USB_DC_SUSPEND, NULL);
60008ffe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
60009002:	2100      	movs	r1, #0
60009004:	2005      	movs	r0, #5
60009006:	e7f3      	b.n	60008ff0 <usb_mcux_thread_main+0x124>
			dev_state.status_cb(USB_DC_RESUME, NULL);
60009008:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
6000900c:	2100      	movs	r1, #0
6000900e:	2006      	movs	r0, #6
60009010:	e7ee      	b.n	60008ff0 <usb_mcux_thread_main+0x124>
			ep_abs_idx = EP_ABS_IDX(msg.code);
60009012:	09d3      	lsrs	r3, r2, #7
60009014:	eb03 0342 	add.w	r3, r3, r2, lsl #1
60009018:	f003 03ff 	and.w	r3, r3, #255	; 0xff
			if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000901c:	2b0f      	cmp	r3, #15
6000901e:	d90e      	bls.n	6000903e <usb_mcux_thread_main+0x172>
				LOG_ERR("Wrong endpoint index/address");
60009020:	4b3e      	ldr	r3, [pc, #248]	; (6000911c <usb_mcux_thread_main+0x250>)
60009022:	f107 0228 	add.w	r2, r7, #40	; 0x28
60009026:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000902a:	4839      	ldr	r0, [pc, #228]	; (60009110 <usb_mcux_thread_main+0x244>)
6000902c:	62fb      	str	r3, [r7, #44]	; 0x2c
6000902e:	2302      	movs	r3, #2
60009030:	62bb      	str	r3, [r7, #40]	; 0x28
60009032:	f00a f8db 	bl	600131ec <z_log_msg_static_create.constprop.0>
}
60009036:	3730      	adds	r7, #48	; 0x30
60009038:	46bd      	mov	sp, r7
6000903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&dev_state.eps[ep_abs_idx].transfer_message, &msg,
6000903e:	f8d4 c0dc 	ldr.w	ip, [r4, #220]	; 0xdc
60009042:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
60009046:	f107 020c 	add.w	r2, r7, #12
6000904a:	eb0c 0683 	add.w	r6, ip, r3, lsl #2
6000904e:	ca03      	ldmia	r2!, {r0, r1}
60009050:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
60009054:	6071      	str	r1, [r6, #4]
60009056:	6810      	ldr	r0, [r2, #0]
60009058:	60b0      	str	r0, [r6, #8]
			handle_transfer_msg(&dev_state.eps[ep_abs_idx].transfer_message);
6000905a:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
6000905e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	uint8_t ep = cb_msg->code;
60009062:	7a1e      	ldrb	r6, [r3, #8]
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009064:	09f2      	lsrs	r2, r6, #7
60009066:	eb02 0246 	add.w	r2, r2, r6, lsl #1
6000906a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000906e:	b2d2      	uxtb	r2, r2
60009070:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
60009074:	ea4f 0882 	mov.w	r8, r2, lsl #2
60009078:	eb01 0282 	add.w	r2, r1, r2, lsl #2
6000907c:	7e91      	ldrb	r1, [r2, #26]
6000907e:	f36f 0141 	bfc	r1, #1, #1
60009082:	7691      	strb	r1, [r2, #26]
	if (cb_msg->length == UINT32_MAX) {
60009084:	685a      	ldr	r2, [r3, #4]
60009086:	3201      	adds	r2, #1
60009088:	f43f af26 	beq.w	60008ed8 <usb_mcux_thread_main+0xc>
	if (cb_msg->isSetup) {
6000908c:	7a5b      	ldrb	r3, [r3, #9]
6000908e:	bb23      	cbnz	r3, 600090da <usb_mcux_thread_main+0x20e>
		if (USB_EP_DIR_IS_IN(ep)) {
60009090:	0633      	lsls	r3, r6, #24
60009092:	d524      	bpl.n	600090de <usb_mcux_thread_main+0x212>
			if ((dev_state.dev_struct.deviceAddress != 0) && (ep_abs_idx == 1)) {
60009094:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
60009098:	b1b3      	cbz	r3, 600090c8 <usb_mcux_thread_main+0x1fc>
6000909a:	2801      	cmp	r0, #1
6000909c:	d114      	bne.n	600090c8 <usb_mcux_thread_main+0x1fc>
				status = dev_state.dev_struct.controllerInterface->deviceControl(
6000909e:	68e3      	ldr	r3, [r4, #12]
600090a0:	2108      	movs	r1, #8
600090a2:	4a1f      	ldr	r2, [pc, #124]	; (60009120 <usb_mcux_thread_main+0x254>)
600090a4:	695b      	ldr	r3, [r3, #20]
600090a6:	68a0      	ldr	r0, [r4, #8]
600090a8:	4798      	blx	r3
				if (kStatus_USB_Success != status) {
600090aa:	b158      	cbz	r0, 600090c4 <usb_mcux_thread_main+0x1f8>
					LOG_ERR("Failed to set device address");
600090ac:	4b1d      	ldr	r3, [pc, #116]	; (60009124 <usb_mcux_thread_main+0x258>)
600090ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
600090b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600090b6:	4816      	ldr	r0, [pc, #88]	; (60009110 <usb_mcux_thread_main+0x244>)
600090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
600090ba:	2302      	movs	r3, #2
600090bc:	62bb      	str	r3, [r7, #40]	; 0x28
600090be:	f00a f895 	bl	600131ec <z_log_msg_static_create.constprop.0>
					return;
600090c2:	e709      	b.n	60008ed8 <usb_mcux_thread_main+0xc>
				dev_state.dev_struct.deviceAddress = 0;
600090c4:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
			ep_status_code = USB_DC_EP_DATA_IN;
600090c8:	2102      	movs	r1, #2
	if (dev_state.eps[ep_abs_idx].callback) {
600090ca:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
600090ce:	4443      	add	r3, r8
600090d0:	695b      	ldr	r3, [r3, #20]
600090d2:	b133      	cbz	r3, 600090e2 <usb_mcux_thread_main+0x216>
		dev_state.eps[ep_abs_idx].callback(ep, ep_status_code);
600090d4:	4630      	mov	r0, r6
600090d6:	4798      	blx	r3
600090d8:	e6fe      	b.n	60008ed8 <usb_mcux_thread_main+0xc>
		ep_status_code = USB_DC_EP_SETUP;
600090da:	2100      	movs	r1, #0
600090dc:	e7f5      	b.n	600090ca <usb_mcux_thread_main+0x1fe>
			ep_status_code = USB_DC_EP_DATA_OUT;
600090de:	2101      	movs	r1, #1
600090e0:	e7f3      	b.n	600090ca <usb_mcux_thread_main+0x1fe>
		LOG_ERR("No cb pointer for endpoint 0x%02x", ep);
600090e2:	46e8      	mov	r8, sp
600090e4:	b088      	sub	sp, #32
600090e6:	466a      	mov	r2, sp
600090e8:	4b0f      	ldr	r3, [pc, #60]	; (60009128 <usb_mcux_thread_main+0x25c>)
600090ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600090ee:	4808      	ldr	r0, [pc, #32]	; (60009110 <usb_mcux_thread_main+0x244>)
600090f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
600090f4:	2303      	movs	r3, #3
600090f6:	f842 3f10 	str.w	r3, [r2, #16]!
600090fa:	f00a f877 	bl	600131ec <z_log_msg_static_create.constprop.0>
600090fe:	46c5      	mov	sp, r8
	while (1) {
60009100:	e6ea      	b.n	60008ed8 <usb_mcux_thread_main+0xc>
60009102:	bf00      	nop
60009104:	20202cac 	.word	0x20202cac
60009108:	20202e00 	.word	0x20202e00
6000910c:	60018236 	.word	0x60018236
60009110:	600150e4 	.word	0x600150e4
60009114:	60018253 	.word	0x60018253
60009118:	6001827d 	.word	0x6001827d
6000911c:	600182a6 	.word	0x600182a6
60009120:	20202ed4 	.word	0x20202ed4
60009124:	600182c3 	.word	0x600182c3
60009128:	600182e0 	.word	0x600182e0

6000912c <usb_dc_attach>:
{
6000912c:	b530      	push	{r4, r5, lr}
	dev_state.eps = &s_ep_ctrl[0];
6000912e:	4b1a      	ldr	r3, [pc, #104]	; (60009198 <usb_dc_attach+0x6c>)
{
60009130:	b087      	sub	sp, #28
	dev_state.eps = &s_ep_ctrl[0];
60009132:	4c1a      	ldr	r4, [pc, #104]	; (6000919c <usb_dc_attach+0x70>)
60009134:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	if (dev_state.attached) {
60009138:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
6000913c:	b163      	cbz	r3, 60009158 <usb_dc_attach+0x2c>
		LOG_WRN("Already attached");
6000913e:	4b18      	ldr	r3, [pc, #96]	; (600091a0 <usb_dc_attach+0x74>)
60009140:	aa04      	add	r2, sp, #16
60009142:	f44f 5184 	mov.w	r1, #4224	; 0x1080
60009146:	4817      	ldr	r0, [pc, #92]	; (600091a4 <usb_dc_attach+0x78>)
60009148:	9305      	str	r3, [sp, #20]
6000914a:	2302      	movs	r3, #2
6000914c:	9304      	str	r3, [sp, #16]
6000914e:	f00a f84d 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return 0;
60009152:	2000      	movs	r0, #0
}
60009154:	b007      	add	sp, #28
60009156:	bd30      	pop	{r4, r5, pc}
	dev_state.dev_struct.controllerInterface = &mcux_usb_iface;
60009158:	4b13      	ldr	r3, [pc, #76]	; (600091a8 <usb_dc_attach+0x7c>)
	status = dev_state.dev_struct.controllerInterface->deviceInit(CONTROLLER_ID,
6000915a:	f104 0208 	add.w	r2, r4, #8
6000915e:	4621      	mov	r1, r4
60009160:	2002      	movs	r0, #2
	dev_state.dev_struct.controllerInterface = &mcux_usb_iface;
60009162:	60e3      	str	r3, [r4, #12]
	status = dev_state.dev_struct.controllerInterface->deviceInit(CONTROLLER_ID,
60009164:	f003 fcfa 	bl	6000cb5c <USB_DeviceEhciInit>
	if (kStatus_USB_Success != status) {
60009168:	4605      	mov	r5, r0
6000916a:	b988      	cbnz	r0, 60009190 <usb_dc_attach+0x64>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
6000916c:	4602      	mov	r2, r0
6000916e:	2101      	movs	r1, #1
60009170:	2071      	movs	r0, #113	; 0x71
60009172:	f7fe ff7b 	bl	6000806c <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
60009176:	2071      	movs	r0, #113	; 0x71
60009178:	f7fe ff6a 	bl	60008050 <arch_irq_enable>
	dev_state.attached = true;
6000917c:	2301      	movs	r3, #1
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000917e:	462a      	mov	r2, r5
60009180:	4629      	mov	r1, r5
	dev_state.attached = true;
60009182:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60009186:	68e3      	ldr	r3, [r4, #12]
60009188:	68a0      	ldr	r0, [r4, #8]
6000918a:	695b      	ldr	r3, [r3, #20]
6000918c:	4798      	blx	r3
	return 0;
6000918e:	e7e0      	b.n	60009152 <usb_dc_attach+0x26>
		return -EIO;
60009190:	f06f 0004 	mvn.w	r0, #4
60009194:	e7de      	b.n	60009154 <usb_dc_attach+0x28>
60009196:	bf00      	nop
60009198:	20203e28 	.word	0x20203e28
6000919c:	20202e00 	.word	0x20202e00
600091a0:	60018302 	.word	0x60018302
600091a4:	600150e4 	.word	0x600150e4
600091a8:	6001527c 	.word	0x6001527c

600091ac <usb_dc_set_address>:
	dev_state.dev_struct.deviceAddress = addr;
600091ac:	4b0d      	ldr	r3, [pc, #52]	; (600091e4 <usb_dc_set_address+0x38>)
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600091ae:	2114      	movs	r1, #20
{
600091b0:	b510      	push	{r4, lr}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600091b2:	68da      	ldr	r2, [r3, #12]
{
600091b4:	b086      	sub	sp, #24
	dev_state.dev_struct.deviceAddress = addr;
600091b6:	f883 00d4 	strb.w	r0, [r3, #212]	; 0xd4
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600091ba:	6898      	ldr	r0, [r3, #8]
600091bc:	6954      	ldr	r4, [r2, #20]
600091be:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
600091c2:	47a0      	blx	r4
	if (kStatus_USB_Success != status) {
600091c4:	b158      	cbz	r0, 600091de <usb_dc_set_address+0x32>
		LOG_ERR("Failed to set device address");
600091c6:	4b08      	ldr	r3, [pc, #32]	; (600091e8 <usb_dc_set_address+0x3c>)
600091c8:	aa04      	add	r2, sp, #16
600091ca:	4808      	ldr	r0, [pc, #32]	; (600091ec <usb_dc_set_address+0x40>)
600091cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600091d0:	9305      	str	r3, [sp, #20]
600091d2:	2302      	movs	r3, #2
600091d4:	9304      	str	r3, [sp, #16]
600091d6:	f00a f809 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
600091da:	f06f 0015 	mvn.w	r0, #21
}
600091de:	b006      	add	sp, #24
600091e0:	bd10      	pop	{r4, pc}
600091e2:	bf00      	nop
600091e4:	20202e00 	.word	0x20202e00
600091e8:	600182c3 	.word	0x600182c3
600091ec:	600150e4 	.word	0x600150e4

600091f0 <usb_dc_ep_check_cap>:
{
600091f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
600091f2:	7803      	ldrb	r3, [r0, #0]
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
600091f4:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
600091f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
600091fa:	09db      	lsrs	r3, r3, #7
600091fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
60009200:	b2db      	uxtb	r3, r3
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
60009202:	b979      	cbnz	r1, 60009224 <usb_dc_ep_check_cap+0x34>
60009204:	b172      	cbz	r2, 60009224 <usb_dc_ep_check_cap+0x34>
		LOG_ERR("invalid endpoint configuration");
60009206:	4b0a      	ldr	r3, [pc, #40]	; (60009230 <usb_dc_ep_check_cap+0x40>)
		LOG_ERR("endpoint index/address out of range");
60009208:	9305      	str	r3, [sp, #20]
6000920a:	2302      	movs	r3, #2
6000920c:	4809      	ldr	r0, [pc, #36]	; (60009234 <usb_dc_ep_check_cap+0x44>)
6000920e:	aa04      	add	r2, sp, #16
60009210:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009214:	9304      	str	r3, [sp, #16]
60009216:	f009 ffe9 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -1;
6000921a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
6000921e:	b007      	add	sp, #28
60009220:	f85d fb04 	ldr.w	pc, [sp], #4
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009224:	2b0f      	cmp	r3, #15
60009226:	d901      	bls.n	6000922c <usb_dc_ep_check_cap+0x3c>
		LOG_ERR("endpoint index/address out of range");
60009228:	4b03      	ldr	r3, [pc, #12]	; (60009238 <usb_dc_ep_check_cap+0x48>)
6000922a:	e7ed      	b.n	60009208 <usb_dc_ep_check_cap+0x18>
	return 0;
6000922c:	2000      	movs	r0, #0
6000922e:	e7f6      	b.n	6000921e <usb_dc_ep_check_cap+0x2e>
60009230:	60018313 	.word	0x60018313
60009234:	600150e4 	.word	0x600150e4
60009238:	60018332 	.word	0x60018332

6000923c <usb_dc_ep_configure>:
{
6000923c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
60009240:	b08b      	sub	sp, #44	; 0x2c
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
60009242:	4d54      	ldr	r5, [pc, #336]	; (60009394 <usb_dc_ep_configure+0x158>)
{
60009244:	4604      	mov	r4, r0
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
60009246:	7802      	ldrb	r2, [r0, #0]
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
60009248:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
{
6000924c:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000924e:	09d3      	lsrs	r3, r2, #7
	ep_init.endpointAddress = cfg->ep_addr;
60009250:	72ba      	strb	r2, [r7, #10]
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
60009252:	eb03 0342 	add.w	r3, r3, r2, lsl #1
60009256:	f003 01ff 	and.w	r1, r3, #255	; 0xff
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
6000925a:	b2db      	uxtb	r3, r3
6000925c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009260:	290f      	cmp	r1, #15
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
60009262:	ea4f 0883 	mov.w	r8, r3, lsl #2
60009266:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	ep_init.zlt = 0U;
6000926a:	f04f 0300 	mov.w	r3, #0
6000926e:	733b      	strb	r3, [r7, #12]
	ep_init.maxPacketSize = cfg->ep_mps;
60009270:	8843      	ldrh	r3, [r0, #2]
60009272:	813b      	strh	r3, [r7, #8]
	ep_init.transferType = cfg->ep_type;
60009274:	7903      	ldrb	r3, [r0, #4]
60009276:	72fb      	strb	r3, [r7, #11]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009278:	d910      	bls.n	6000929c <usb_dc_ep_configure+0x60>
		LOG_ERR("Wrong endpoint index/address");
6000927a:	4b47      	ldr	r3, [pc, #284]	; (60009398 <usb_dc_ep_configure+0x15c>)
6000927c:	f107 0220 	add.w	r2, r7, #32
60009280:	4846      	ldr	r0, [pc, #280]	; (6000939c <usb_dc_ep_configure+0x160>)
60009282:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009286:	627b      	str	r3, [r7, #36]	; 0x24
60009288:	2302      	movs	r3, #2
6000928a:	623b      	str	r3, [r7, #32]
6000928c:	f009 ffae 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009290:	f06f 0015 	mvn.w	r0, #21
}
60009294:	372c      	adds	r7, #44	; 0x2c
60009296:	46bd      	mov	sp, r7
60009298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dev_state.eps[ep_abs_idx].ep_enabled) {
6000929c:	7eb3      	ldrb	r3, [r6, #26]
6000929e:	07d9      	lsls	r1, r3, #31
600092a0:	d50c      	bpl.n	600092bc <usb_dc_ep_configure+0x80>
		LOG_WRN("Endpoint already configured");
600092a2:	4b3f      	ldr	r3, [pc, #252]	; (600093a0 <usb_dc_ep_configure+0x164>)
600092a4:	f107 0220 	add.w	r2, r7, #32
600092a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
600092ac:	483b      	ldr	r0, [pc, #236]	; (6000939c <usb_dc_ep_configure+0x160>)
600092ae:	627b      	str	r3, [r7, #36]	; 0x24
600092b0:	2302      	movs	r3, #2
600092b2:	623b      	str	r3, [r7, #32]
600092b4:	f009 ff9a 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return 0;
600092b8:	2000      	movs	r0, #0
600092ba:	e7eb      	b.n	60009294 <usb_dc_ep_configure+0x58>
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600092bc:	68eb      	ldr	r3, [r5, #12]
600092be:	2103      	movs	r1, #3
	ep = cfg->ep_addr;
600092c0:	71fa      	strb	r2, [r7, #7]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600092c2:	1dfa      	adds	r2, r7, #7
600092c4:	695b      	ldr	r3, [r3, #20]
600092c6:	68a8      	ldr	r0, [r5, #8]
600092c8:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
600092ca:	b170      	cbz	r0, 600092ea <usb_dc_ep_configure+0xae>
		LOG_WRN("Failed to un-initialize endpoint (status=%d)", (int)status);
600092cc:	46e9      	mov	r9, sp
600092ce:	b088      	sub	sp, #32
600092d0:	466a      	mov	r2, sp
600092d2:	4b34      	ldr	r3, [pc, #208]	; (600093a4 <usb_dc_ep_configure+0x168>)
600092d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
600092d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
600092dc:	2303      	movs	r3, #3
600092de:	482f      	ldr	r0, [pc, #188]	; (6000939c <usb_dc_ep_configure+0x160>)
600092e0:	f842 3f10 	str.w	r3, [r2, #16]!
600092e4:	f009 ff82 	bl	600131ec <z_log_msg_static_create.constprop.0>
600092e8:	46cd      	mov	sp, r9
	if (USB_EP_DIR_IS_OUT(cfg->ep_addr)) {
600092ea:	f994 3000 	ldrsb.w	r3, [r4]
600092ee:	2b00      	cmp	r3, #0
600092f0:	db20      	blt.n	60009334 <usb_dc_ep_configure+0xf8>
		if (block->data) {
600092f2:	68f1      	ldr	r1, [r6, #12]
600092f4:	b121      	cbz	r1, 60009300 <usb_dc_ep_configure+0xc4>
			k_heap_free(&ep_buf_pool, block->data);
600092f6:	482c      	ldr	r0, [pc, #176]	; (600093a8 <usb_dc_ep_configure+0x16c>)
600092f8:	f003 ffbc 	bl	6000d274 <k_heap_free>
			block->data = NULL;
600092fc:	2300      	movs	r3, #0
600092fe:	60f3      	str	r3, [r6, #12]
		block->data = k_heap_alloc(&ep_buf_pool, cfg->ep_mps, K_NO_WAIT);
60009300:	2200      	movs	r2, #0
60009302:	2300      	movs	r3, #0
60009304:	8861      	ldrh	r1, [r4, #2]
60009306:	4828      	ldr	r0, [pc, #160]	; (600093a8 <usb_dc_ep_configure+0x16c>)
60009308:	f00b f97d 	bl	60014606 <k_heap_alloc>
6000930c:	60f0      	str	r0, [r6, #12]
		if (block->data == NULL) {
6000930e:	b968      	cbnz	r0, 6000932c <usb_dc_ep_configure+0xf0>
			LOG_ERR("Failed to allocate memory");
60009310:	4b26      	ldr	r3, [pc, #152]	; (600093ac <usb_dc_ep_configure+0x170>)
60009312:	f107 0220 	add.w	r2, r7, #32
60009316:	4821      	ldr	r0, [pc, #132]	; (6000939c <usb_dc_ep_configure+0x160>)
60009318:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000931c:	627b      	str	r3, [r7, #36]	; 0x24
6000931e:	2302      	movs	r3, #2
60009320:	623b      	str	r3, [r7, #32]
60009322:	f009 ff63 	bl	600131ec <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
60009326:	f06f 000b 	mvn.w	r0, #11
6000932a:	e7b3      	b.n	60009294 <usb_dc_ep_configure+0x58>
__ssp_bos_icheck3(memset, void *, int)
6000932c:	8862      	ldrh	r2, [r4, #2]
6000932e:	2100      	movs	r1, #0
60009330:	f007 f966 	bl	60010600 <memset>
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
60009334:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60009338:	2102      	movs	r1, #2
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
6000933a:	8862      	ldrh	r2, [r4, #2]
6000933c:	4443      	add	r3, r8
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000933e:	68a8      	ldr	r0, [r5, #8]
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
60009340:	831a      	strh	r2, [r3, #24]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60009342:	f107 0208 	add.w	r2, r7, #8
60009346:	68eb      	ldr	r3, [r5, #12]
60009348:	695b      	ldr	r3, [r3, #20]
6000934a:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000934c:	b168      	cbz	r0, 6000936a <usb_dc_ep_configure+0x12e>
		LOG_ERR("Failed to initialize endpoint");
6000934e:	4b18      	ldr	r3, [pc, #96]	; (600093b0 <usb_dc_ep_configure+0x174>)
60009350:	f107 0220 	add.w	r2, r7, #32
60009354:	4811      	ldr	r0, [pc, #68]	; (6000939c <usb_dc_ep_configure+0x160>)
60009356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000935a:	627b      	str	r3, [r7, #36]	; 0x24
6000935c:	2302      	movs	r3, #2
6000935e:	623b      	str	r3, [r7, #32]
60009360:	f009 ff44 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
60009364:	f06f 0004 	mvn.w	r0, #4
60009368:	e794      	b.n	60009294 <usb_dc_ep_configure+0x58>
	if ((USB_EP_GET_IDX(cfg->ep_addr) == USB_CONTROL_ENDPOINT) &&
6000936a:	7823      	ldrb	r3, [r4, #0]
6000936c:	065a      	lsls	r2, r3, #25
6000936e:	d108      	bne.n	60009382 <usb_dc_ep_configure+0x146>
60009370:	061b      	lsls	r3, r3, #24
60009372:	d406      	bmi.n	60009382 <usb_dc_ep_configure+0x146>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
60009374:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
60009378:	4443      	add	r3, r8
6000937a:	7e9a      	ldrb	r2, [r3, #26]
6000937c:	f042 0202 	orr.w	r2, r2, #2
60009380:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_enabled = true;
60009382:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
60009386:	4443      	add	r3, r8
60009388:	7e9a      	ldrb	r2, [r3, #26]
6000938a:	f042 0201 	orr.w	r2, r2, #1
6000938e:	769a      	strb	r2, [r3, #26]
	return 0;
60009390:	e792      	b.n	600092b8 <usb_dc_ep_configure+0x7c>
60009392:	bf00      	nop
60009394:	20202e00 	.word	0x20202e00
60009398:	600182a6 	.word	0x600182a6
6000939c:	600150e4 	.word	0x600150e4
600093a0:	60018356 	.word	0x60018356
600093a4:	60018372 	.word	0x60018372
600093a8:	20202c58 	.word	0x20202c58
600093ac:	6001839f 	.word	0x6001839f
600093b0:	600183b9 	.word	0x600183b9

600093b4 <usb_dc_ep_set_stall>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600093b4:	09c3      	lsrs	r3, r0, #7
600093b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
600093ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
{
600093be:	b510      	push	{r4, lr}
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
600093c0:	2b0f      	cmp	r3, #15
{
600093c2:	b088      	sub	sp, #32
	uint8_t endpoint = ep;
600093c4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
600093c8:	d90d      	bls.n	600093e6 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("Wrong endpoint index/address");
600093ca:	4b12      	ldr	r3, [pc, #72]	; (60009414 <usb_dc_ep_set_stall+0x60>)
600093cc:	aa06      	add	r2, sp, #24
600093ce:	4812      	ldr	r0, [pc, #72]	; (60009418 <usb_dc_ep_set_stall+0x64>)
600093d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600093d4:	9307      	str	r3, [sp, #28]
600093d6:	2302      	movs	r3, #2
600093d8:	9306      	str	r3, [sp, #24]
600093da:	f009 ff07 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
600093de:	f06f 0015 	mvn.w	r0, #21
}
600093e2:	b008      	add	sp, #32
600093e4:	bd10      	pop	{r4, pc}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
600093e6:	4b0d      	ldr	r3, [pc, #52]	; (6000941c <usb_dc_ep_set_stall+0x68>)
600093e8:	2104      	movs	r1, #4
600093ea:	68da      	ldr	r2, [r3, #12]
600093ec:	6898      	ldr	r0, [r3, #8]
600093ee:	6954      	ldr	r4, [r2, #20]
600093f0:	f10d 0207 	add.w	r2, sp, #7
600093f4:	47a0      	blx	r4
	if (kStatus_USB_Success != status) {
600093f6:	2800      	cmp	r0, #0
600093f8:	d0f3      	beq.n	600093e2 <usb_dc_ep_set_stall+0x2e>
		LOG_ERR("Failed to stall endpoint");
600093fa:	4b09      	ldr	r3, [pc, #36]	; (60009420 <usb_dc_ep_set_stall+0x6c>)
600093fc:	aa06      	add	r2, sp, #24
600093fe:	4806      	ldr	r0, [pc, #24]	; (60009418 <usb_dc_ep_set_stall+0x64>)
60009400:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009404:	9307      	str	r3, [sp, #28]
60009406:	2302      	movs	r3, #2
60009408:	9306      	str	r3, [sp, #24]
6000940a:	f009 feef 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
6000940e:	f06f 0004 	mvn.w	r0, #4
60009412:	e7e6      	b.n	600093e2 <usb_dc_ep_set_stall+0x2e>
60009414:	600182a6 	.word	0x600182a6
60009418:	600150e4 	.word	0x600150e4
6000941c:	20202e00 	.word	0x20202e00
60009420:	600183d7 	.word	0x600183d7

60009424 <usb_dc_ep_clear_stall>:
{
60009424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009428:	09c4      	lsrs	r4, r0, #7
{
6000942a:	b088      	sub	sp, #32
6000942c:	4605      	mov	r5, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000942e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
60009432:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009434:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	uint8_t endpoint = ep;
60009438:	71f8      	strb	r0, [r7, #7]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000943a:	2c0f      	cmp	r4, #15
6000943c:	d910      	bls.n	60009460 <usb_dc_ep_clear_stall+0x3c>
		LOG_ERR("Wrong endpoint index/address");
6000943e:	4b2a      	ldr	r3, [pc, #168]	; (600094e8 <usb_dc_ep_clear_stall+0xc4>)
60009440:	f107 0218 	add.w	r2, r7, #24
60009444:	4829      	ldr	r0, [pc, #164]	; (600094ec <usb_dc_ep_clear_stall+0xc8>)
60009446:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000944a:	61fb      	str	r3, [r7, #28]
6000944c:	2302      	movs	r3, #2
6000944e:	61bb      	str	r3, [r7, #24]
60009450:	f009 fecc 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009454:	f06f 0015 	mvn.w	r0, #21
}
60009458:	3720      	adds	r7, #32
6000945a:	46bd      	mov	sp, r7
6000945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60009460:	4e23      	ldr	r6, [pc, #140]	; (600094f0 <usb_dc_ep_clear_stall+0xcc>)
60009462:	1dfa      	adds	r2, r7, #7
60009464:	2105      	movs	r1, #5
60009466:	68f3      	ldr	r3, [r6, #12]
60009468:	68b0      	ldr	r0, [r6, #8]
6000946a:	695b      	ldr	r3, [r3, #20]
6000946c:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000946e:	b168      	cbz	r0, 6000948c <usb_dc_ep_clear_stall+0x68>
		LOG_ERR("Failed to clear stall");
60009470:	4b20      	ldr	r3, [pc, #128]	; (600094f4 <usb_dc_ep_clear_stall+0xd0>)
60009472:	f107 0218 	add.w	r2, r7, #24
60009476:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000947a:	481c      	ldr	r0, [pc, #112]	; (600094ec <usb_dc_ep_clear_stall+0xc8>)
6000947c:	61fb      	str	r3, [r7, #28]
6000947e:	2302      	movs	r3, #2
60009480:	61bb      	str	r3, [r7, #24]
60009482:	f009 feb3 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
60009486:	f06f 0004 	mvn.w	r0, #4
6000948a:	e7e5      	b.n	60009458 <usb_dc_ep_clear_stall+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
6000948c:	066a      	lsls	r2, r5, #25
6000948e:	d101      	bne.n	60009494 <usb_dc_ep_clear_stall+0x70>
	return 0;
60009490:	2000      	movs	r0, #0
60009492:	e7e1      	b.n	60009458 <usb_dc_ep_clear_stall+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
60009494:	062b      	lsls	r3, r5, #24
60009496:	d4fb      	bmi.n	60009490 <usb_dc_ep_clear_stall+0x6c>
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
60009498:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
6000949c:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
600094a0:	68f3      	ldr	r3, [r6, #12]
600094a2:	4629      	mov	r1, r5
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
600094a4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
600094a8:	68b0      	ldr	r0, [r6, #8]
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
600094aa:	ea4f 0884 	mov.w	r8, r4, lsl #2
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
600094ae:	68dc      	ldr	r4, [r3, #12]
600094b0:	8b13      	ldrh	r3, [r2, #24]
600094b2:	68d2      	ldr	r2, [r2, #12]
600094b4:	47a0      	blx	r4
		if (kStatus_USB_Success != status) {
600094b6:	b178      	cbz	r0, 600094d8 <usb_dc_ep_clear_stall+0xb4>
			LOG_ERR("Failed to enable reception on 0x%02x", ep);
600094b8:	466c      	mov	r4, sp
600094ba:	b088      	sub	sp, #32
600094bc:	466a      	mov	r2, sp
600094be:	4b0e      	ldr	r3, [pc, #56]	; (600094f8 <usb_dc_ep_clear_stall+0xd4>)
600094c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600094c4:	4809      	ldr	r0, [pc, #36]	; (600094ec <usb_dc_ep_clear_stall+0xc8>)
600094c6:	e9c2 3505 	strd	r3, r5, [r2, #20]
600094ca:	2303      	movs	r3, #3
600094cc:	f842 3f10 	str.w	r3, [r2, #16]!
600094d0:	f009 fe8c 	bl	600131ec <z_log_msg_static_create.constprop.0>
600094d4:	46a5      	mov	sp, r4
			return -EIO;
600094d6:	e7d6      	b.n	60009486 <usb_dc_ep_clear_stall+0x62>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
600094d8:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
600094dc:	4443      	add	r3, r8
600094de:	7e9a      	ldrb	r2, [r3, #26]
600094e0:	f042 0202 	orr.w	r2, r2, #2
600094e4:	769a      	strb	r2, [r3, #26]
600094e6:	e7d3      	b.n	60009490 <usb_dc_ep_clear_stall+0x6c>
600094e8:	600182a6 	.word	0x600182a6
600094ec:	600150e4 	.word	0x600150e4
600094f0:	20202e00 	.word	0x20202e00
600094f4:	600183f0 	.word	0x600183f0
600094f8:	60018406 	.word	0x60018406

600094fc <usb_dc_ep_is_stalled>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600094fc:	09c3      	lsrs	r3, r0, #7
600094fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009502:	f003 03ff 	and.w	r3, r3, #255	; 0xff
60009506:	2b0f      	cmp	r3, #15
{
60009508:	b530      	push	{r4, r5, lr}
6000950a:	460c      	mov	r4, r1
6000950c:	b089      	sub	sp, #36	; 0x24
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000950e:	d90d      	bls.n	6000952c <usb_dc_ep_is_stalled+0x30>
		LOG_ERR("Wrong endpoint index/address");
60009510:	4b17      	ldr	r3, [pc, #92]	; (60009570 <usb_dc_ep_is_stalled+0x74>)
60009512:	aa06      	add	r2, sp, #24
60009514:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009518:	4816      	ldr	r0, [pc, #88]	; (60009574 <usb_dc_ep_is_stalled+0x78>)
6000951a:	9307      	str	r3, [sp, #28]
6000951c:	2302      	movs	r3, #2
6000951e:	9306      	str	r3, [sp, #24]
60009520:	f009 fe64 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009524:	f06f 0015 	mvn.w	r0, #21
}
60009528:	b009      	add	sp, #36	; 0x24
6000952a:	bd30      	pop	{r4, r5, pc}
	if (!stalled) {
6000952c:	2900      	cmp	r1, #0
6000952e:	d0f9      	beq.n	60009524 <usb_dc_ep_is_stalled+0x28>
	*stalled = 0;
60009530:	2300      	movs	r3, #0
	ep_status.endpointAddress = ep;
60009532:	f88d 0004 	strb.w	r0, [sp, #4]
	*stalled = 0;
60009536:	700b      	strb	r3, [r1, #0]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
60009538:	2107      	movs	r1, #7
	ep_status.endpointStatus = kUSB_DeviceEndpointStateIdle;
6000953a:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000953e:	4b0e      	ldr	r3, [pc, #56]	; (60009578 <usb_dc_ep_is_stalled+0x7c>)
60009540:	68da      	ldr	r2, [r3, #12]
60009542:	6898      	ldr	r0, [r3, #8]
60009544:	6955      	ldr	r5, [r2, #20]
60009546:	aa01      	add	r2, sp, #4
60009548:	47a8      	blx	r5
	if (kStatus_USB_Success != status) {
6000954a:	b160      	cbz	r0, 60009566 <usb_dc_ep_is_stalled+0x6a>
		LOG_ERR("Failed to get endpoint status");
6000954c:	4b0b      	ldr	r3, [pc, #44]	; (6000957c <usb_dc_ep_is_stalled+0x80>)
6000954e:	aa06      	add	r2, sp, #24
60009550:	4808      	ldr	r0, [pc, #32]	; (60009574 <usb_dc_ep_is_stalled+0x78>)
60009552:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009556:	9307      	str	r3, [sp, #28]
60009558:	2302      	movs	r3, #2
6000955a:	9306      	str	r3, [sp, #24]
6000955c:	f009 fe46 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
60009560:	f06f 0004 	mvn.w	r0, #4
60009564:	e7e0      	b.n	60009528 <usb_dc_ep_is_stalled+0x2c>
	*stalled = (uint8_t)ep_status.endpointStatus;
60009566:	f8bd 3006 	ldrh.w	r3, [sp, #6]
6000956a:	7023      	strb	r3, [r4, #0]
	return 0;
6000956c:	e7dc      	b.n	60009528 <usb_dc_ep_is_stalled+0x2c>
6000956e:	bf00      	nop
60009570:	600182a6 	.word	0x600182a6
60009574:	600150e4 	.word	0x600150e4
60009578:	20202e00 	.word	0x20202e00
6000957c:	6001842b 	.word	0x6001842b

60009580 <usb_dc_ep_enable>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009580:	09c3      	lsrs	r3, r0, #7
60009582:	eb03 0340 	add.w	r3, r3, r0, lsl #1
{
60009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!ep_abs_idx) {
6000958a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
{
6000958e:	b086      	sub	sp, #24
60009590:	4604      	mov	r4, r0
60009592:	af00      	add	r7, sp, #0
	if (!ep_abs_idx) {
60009594:	d055      	beq.n	60009642 <usb_dc_ep_enable+0xc2>
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009596:	2b0f      	cmp	r3, #15
60009598:	d910      	bls.n	600095bc <usb_dc_ep_enable+0x3c>
		LOG_ERR("Wrong endpoint index/address");
6000959a:	4b2d      	ldr	r3, [pc, #180]	; (60009650 <usb_dc_ep_enable+0xd0>)
6000959c:	f107 0210 	add.w	r2, r7, #16
600095a0:	482c      	ldr	r0, [pc, #176]	; (60009654 <usb_dc_ep_enable+0xd4>)
600095a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600095a6:	617b      	str	r3, [r7, #20]
600095a8:	2302      	movs	r3, #2
600095aa:	613b      	str	r3, [r7, #16]
600095ac:	f009 fe1e 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
600095b0:	f06f 0015 	mvn.w	r0, #21
}
600095b4:	3718      	adds	r7, #24
600095b6:	46bd      	mov	sp, r7
600095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
600095bc:	4d26      	ldr	r5, [pc, #152]	; (60009658 <usb_dc_ep_enable+0xd8>)
600095be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
600095c2:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
600095c6:	009e      	lsls	r6, r3, #2
600095c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
600095cc:	7e93      	ldrb	r3, [r2, #26]
600095ce:	0798      	lsls	r0, r3, #30
600095d0:	d511      	bpl.n	600095f6 <usb_dc_ep_enable+0x76>
		LOG_WRN("endpoint 0x%x already enabled", ep);
600095d2:	466d      	mov	r5, sp
600095d4:	b088      	sub	sp, #32
600095d6:	466a      	mov	r2, sp
600095d8:	4b20      	ldr	r3, [pc, #128]	; (6000965c <usb_dc_ep_enable+0xdc>)
600095da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
600095de:	481d      	ldr	r0, [pc, #116]	; (60009654 <usb_dc_ep_enable+0xd4>)
600095e0:	e9c2 3405 	strd	r3, r4, [r2, #20]
600095e4:	2303      	movs	r3, #3
600095e6:	f842 3f10 	str.w	r3, [r2, #16]!
600095ea:	f009 fdff 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EALREADY;
600095ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
600095f2:	46ad      	mov	sp, r5
600095f4:	e7de      	b.n	600095b4 <usb_dc_ep_enable+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
600095f6:	0661      	lsls	r1, r4, #25
600095f8:	d025      	beq.n	60009646 <usb_dc_ep_enable+0xc6>
600095fa:	0623      	lsls	r3, r4, #24
600095fc:	d423      	bmi.n	60009646 <usb_dc_ep_enable+0xc6>
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
600095fe:	68eb      	ldr	r3, [r5, #12]
60009600:	4621      	mov	r1, r4
60009602:	68a8      	ldr	r0, [r5, #8]
60009604:	f8d3 800c 	ldr.w	r8, [r3, #12]
60009608:	8b13      	ldrh	r3, [r2, #24]
6000960a:	68d2      	ldr	r2, [r2, #12]
6000960c:	47c0      	blx	r8
		if (kStatus_USB_Success != status) {
6000960e:	b188      	cbz	r0, 60009634 <usb_dc_ep_enable+0xb4>
			LOG_ERR("Failed to enable reception on 0x%02x", ep);
60009610:	466d      	mov	r5, sp
60009612:	b088      	sub	sp, #32
60009614:	466a      	mov	r2, sp
60009616:	4b12      	ldr	r3, [pc, #72]	; (60009660 <usb_dc_ep_enable+0xe0>)
60009618:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000961c:	480d      	ldr	r0, [pc, #52]	; (60009654 <usb_dc_ep_enable+0xd4>)
6000961e:	e9c2 3405 	strd	r3, r4, [r2, #20]
60009622:	2303      	movs	r3, #3
60009624:	f842 3f10 	str.w	r3, [r2, #16]!
60009628:	f009 fde0 	bl	600131ec <z_log_msg_static_create.constprop.0>
			return -EIO;
6000962c:	f06f 0004 	mvn.w	r0, #4
60009630:	46ad      	mov	sp, r5
60009632:	e7bf      	b.n	600095b4 <usb_dc_ep_enable+0x34>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
60009634:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
60009638:	4433      	add	r3, r6
6000963a:	7e9a      	ldrb	r2, [r3, #26]
6000963c:	f042 0202 	orr.w	r2, r2, #2
60009640:	769a      	strb	r2, [r3, #26]
		return 0;
60009642:	2000      	movs	r0, #0
60009644:	e7b6      	b.n	600095b4 <usb_dc_ep_enable+0x34>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
60009646:	7e93      	ldrb	r3, [r2, #26]
60009648:	f043 0302 	orr.w	r3, r3, #2
6000964c:	7693      	strb	r3, [r2, #26]
6000964e:	e7f8      	b.n	60009642 <usb_dc_ep_enable+0xc2>
60009650:	600182a6 	.word	0x600182a6
60009654:	600150e4 	.word	0x600150e4
60009658:	20202e00 	.word	0x20202e00
6000965c:	60018449 	.word	0x60018449
60009660:	60018406 	.word	0x60018406

60009664 <usb_dc_ep_disable>:
{
60009664:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009666:	09c4      	lsrs	r4, r0, #7
{
60009668:	b087      	sub	sp, #28
6000966a:	4605      	mov	r5, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000966c:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
60009670:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009672:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009676:	2c0f      	cmp	r4, #15
60009678:	d90f      	bls.n	6000969a <usb_dc_ep_disable+0x36>
		LOG_ERR("Wrong endpoint index/address");
6000967a:	4b1e      	ldr	r3, [pc, #120]	; (600096f4 <usb_dc_ep_disable+0x90>)
6000967c:	f107 0210 	add.w	r2, r7, #16
60009680:	481d      	ldr	r0, [pc, #116]	; (600096f8 <usb_dc_ep_disable+0x94>)
60009682:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009686:	617b      	str	r3, [r7, #20]
60009688:	2302      	movs	r3, #2
6000968a:	613b      	str	r3, [r7, #16]
6000968c:	f009 fdae 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009690:	f06f 0015 	mvn.w	r0, #21
}
60009694:	371c      	adds	r7, #28
60009696:	46bd      	mov	sp, r7
60009698:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = dev_state.dev_struct.controllerInterface->deviceCancel(
6000969a:	4e18      	ldr	r6, [pc, #96]	; (600096fc <usb_dc_ep_disable+0x98>)
6000969c:	4601      	mov	r1, r0
6000969e:	68f3      	ldr	r3, [r6, #12]
600096a0:	68b0      	ldr	r0, [r6, #8]
600096a2:	691b      	ldr	r3, [r3, #16]
600096a4:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
600096a6:	b188      	cbz	r0, 600096cc <usb_dc_ep_disable+0x68>
		LOG_ERR("Failed to disable ep 0x%02x", ep);
600096a8:	466c      	mov	r4, sp
600096aa:	b088      	sub	sp, #32
600096ac:	466a      	mov	r2, sp
600096ae:	4b14      	ldr	r3, [pc, #80]	; (60009700 <usb_dc_ep_disable+0x9c>)
600096b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600096b4:	4810      	ldr	r0, [pc, #64]	; (600096f8 <usb_dc_ep_disable+0x94>)
600096b6:	e9c2 3505 	strd	r3, r5, [r2, #20]
600096ba:	2303      	movs	r3, #3
600096bc:	f842 3f10 	str.w	r3, [r2, #16]!
600096c0:	f009 fd94 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
600096c4:	f06f 0004 	mvn.w	r0, #4
600096c8:	46a5      	mov	sp, r4
600096ca:	e7e3      	b.n	60009694 <usb_dc_ep_disable+0x30>
	dev_state.eps[ep_abs_idx].ep_enabled = false;
600096cc:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
600096d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
600096d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
600096d8:	7e9a      	ldrb	r2, [r3, #26]
600096da:	f360 0200 	bfi	r2, r0, #0, #1
600096de:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_occupied = false;
600096e0:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
600096e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
600096e8:	7e9a      	ldrb	r2, [r3, #26]
600096ea:	f360 0241 	bfi	r2, r0, #1, #1
600096ee:	769a      	strb	r2, [r3, #26]
	return 0;
600096f0:	e7d0      	b.n	60009694 <usb_dc_ep_disable+0x30>
600096f2:	bf00      	nop
600096f4:	600182a6 	.word	0x600182a6
600096f8:	600150e4 	.word	0x600150e4
600096fc:	20202e00 	.word	0x20202e00
60009700:	60018467 	.word	0x60018467

60009704 <usb_dc_ep_write>:
{
60009704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009708:	09c6      	lsrs	r6, r0, #7
{
6000970a:	b087      	sub	sp, #28
6000970c:	4604      	mov	r4, r0
6000970e:	4689      	mov	r9, r1
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009710:	eb06 0640 	add.w	r6, r6, r0, lsl #1
{
60009714:	4615      	mov	r5, r2
60009716:	af00      	add	r7, sp, #0
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009718:	f006 06ff 	and.w	r6, r6, #255	; 0xff
{
6000971c:	4698      	mov	r8, r3
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000971e:	2e0f      	cmp	r6, #15
60009720:	d910      	bls.n	60009744 <usb_dc_ep_write+0x40>
		LOG_ERR("Wrong endpoint index/address");
60009722:	4b1e      	ldr	r3, [pc, #120]	; (6000979c <usb_dc_ep_write+0x98>)
		LOG_ERR("Wrong endpoint direction");
60009724:	617b      	str	r3, [r7, #20]
60009726:	2302      	movs	r3, #2
60009728:	481d      	ldr	r0, [pc, #116]	; (600097a0 <usb_dc_ep_write+0x9c>)
6000972a:	f107 0210 	add.w	r2, r7, #16
6000972e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009732:	613b      	str	r3, [r7, #16]
60009734:	f009 fd5a 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009738:	f06f 0015 	mvn.w	r0, #21
}
6000973c:	371c      	adds	r7, #28
6000973e:	46bd      	mov	sp, r7
60009740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (USB_EP_GET_DIR(ep) != USB_EP_DIR_IN) {
60009744:	0603      	lsls	r3, r0, #24
60009746:	d401      	bmi.n	6000974c <usb_dc_ep_write+0x48>
		LOG_ERR("Wrong endpoint direction");
60009748:	4b16      	ldr	r3, [pc, #88]	; (600097a4 <usb_dc_ep_write+0xa0>)
6000974a:	e7eb      	b.n	60009724 <usb_dc_ep_write+0x20>
	DCACHE_CleanByRange((uint32_t)data, data_len);
6000974c:	4611      	mov	r1, r2
6000974e:	4648      	mov	r0, r9
60009750:	f003 f840 	bl	6000c7d4 <DCACHE_CleanByRange>
	status = dev_state.dev_struct.controllerInterface->deviceSend(
60009754:	4814      	ldr	r0, [pc, #80]	; (600097a8 <usb_dc_ep_write+0xa4>)
60009756:	464a      	mov	r2, r9
60009758:	4621      	mov	r1, r4
6000975a:	68c3      	ldr	r3, [r0, #12]
6000975c:	6880      	ldr	r0, [r0, #8]
6000975e:	689e      	ldr	r6, [r3, #8]
60009760:	462b      	mov	r3, r5
60009762:	47b0      	blx	r6
	if (kStatus_USB_Success != status) {
60009764:	b188      	cbz	r0, 6000978a <usb_dc_ep_write+0x86>
		LOG_ERR("Failed to fill ep 0x%02x buffer", ep);
60009766:	466d      	mov	r5, sp
60009768:	b088      	sub	sp, #32
6000976a:	466a      	mov	r2, sp
6000976c:	4b0f      	ldr	r3, [pc, #60]	; (600097ac <usb_dc_ep_write+0xa8>)
6000976e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009772:	480b      	ldr	r0, [pc, #44]	; (600097a0 <usb_dc_ep_write+0x9c>)
60009774:	e9c2 3405 	strd	r3, r4, [r2, #20]
60009778:	2303      	movs	r3, #3
6000977a:	f842 3f10 	str.w	r3, [r2, #16]!
6000977e:	f009 fd35 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
60009782:	f06f 0004 	mvn.w	r0, #4
60009786:	46ad      	mov	sp, r5
60009788:	e7d8      	b.n	6000973c <usb_dc_ep_write+0x38>
	if (ret_bytes) {
6000978a:	f1b8 0f00 	cmp.w	r8, #0
6000978e:	d101      	bne.n	60009794 <usb_dc_ep_write+0x90>
	return 0;
60009790:	2000      	movs	r0, #0
60009792:	e7d3      	b.n	6000973c <usb_dc_ep_write+0x38>
		*ret_bytes = data_len;
60009794:	f8c8 5000 	str.w	r5, [r8]
60009798:	e7fa      	b.n	60009790 <usb_dc_ep_write+0x8c>
6000979a:	bf00      	nop
6000979c:	600182a6 	.word	0x600182a6
600097a0:	600150e4 	.word	0x600150e4
600097a4:	60018483 	.word	0x60018483
600097a8:	20202e00 	.word	0x20202e00
600097ac:	6001849c 	.word	0x6001849c

600097b0 <usb_dc_ep_read_wait>:
{
600097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600097b4:	09c4      	lsrs	r4, r0, #7
{
600097b6:	460f      	mov	r7, r1
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
600097b8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 600098c8 <usb_dc_ep_read_wait+0x118>
{
600097bc:	4698      	mov	r8, r3
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600097be:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
600097c2:	4615      	mov	r5, r2
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
600097c4:	f8d9 30dc 	ldr.w	r3, [r9, #220]	; 0xdc
{
600097c8:	4606      	mov	r6, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600097ca:	f004 01ff 	and.w	r1, r4, #255	; 0xff
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
600097ce:	b2e4      	uxtb	r4, r4
{
600097d0:	b086      	sub	sp, #24
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
600097d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
600097d6:	00a2      	lsls	r2, r4, #2
600097d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
600097dc:	7ea0      	ldrb	r0, [r4, #26]
600097de:	0780      	lsls	r0, r0, #30
600097e0:	d50e      	bpl.n	60009800 <usb_dc_ep_read_wait+0x50>
		LOG_ERR("Endpoint is occupied by the controller");
600097e2:	4b3a      	ldr	r3, [pc, #232]	; (600098cc <usb_dc_ep_read_wait+0x11c>)
600097e4:	aa04      	add	r2, sp, #16
600097e6:	483a      	ldr	r0, [pc, #232]	; (600098d0 <usb_dc_ep_read_wait+0x120>)
600097e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600097ec:	9305      	str	r3, [sp, #20]
600097ee:	2302      	movs	r3, #2
600097f0:	9304      	str	r3, [sp, #16]
600097f2:	f009 fcfb 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EBUSY;
600097f6:	f06f 000f 	mvn.w	r0, #15
}
600097fa:	b006      	add	sp, #24
600097fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((ep_abs_idx >= NUM_OF_EP_MAX) ||
60009800:	290f      	cmp	r1, #15
60009802:	d801      	bhi.n	60009808 <usb_dc_ep_read_wait+0x58>
60009804:	0630      	lsls	r0, r6, #24
60009806:	d50c      	bpl.n	60009822 <usb_dc_ep_read_wait+0x72>
		LOG_ERR("Wrong endpoint index/address/direction");
60009808:	4b32      	ldr	r3, [pc, #200]	; (600098d4 <usb_dc_ep_read_wait+0x124>)
		LOG_ERR("Wrong arguments");
6000980a:	9305      	str	r3, [sp, #20]
6000980c:	2302      	movs	r3, #2
6000980e:	aa04      	add	r2, sp, #16
60009810:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009814:	482e      	ldr	r0, [pc, #184]	; (600098d0 <usb_dc_ep_read_wait+0x120>)
60009816:	9304      	str	r3, [sp, #16]
60009818:	f009 fce8 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000981c:	f06f 0015 	mvn.w	r0, #21
60009820:	e7eb      	b.n	600097fa <usb_dc_ep_read_wait+0x4a>
	if (!data && max_data_len) {
60009822:	b917      	cbnz	r7, 6000982a <usb_dc_ep_read_wait+0x7a>
60009824:	b33d      	cbz	r5, 60009876 <usb_dc_ep_read_wait+0xc6>
		LOG_ERR("Wrong arguments");
60009826:	4b2c      	ldr	r3, [pc, #176]	; (600098d8 <usb_dc_ep_read_wait+0x128>)
60009828:	e7ef      	b.n	6000980a <usb_dc_ep_read_wait+0x5a>
	bufp = dev_state.eps[ep_abs_idx].transfer_message.buffer;
6000982a:	f853 a002 	ldr.w	sl, [r3, r2]
	data_len = dev_state.eps[ep_abs_idx].transfer_message.length;
6000982e:	6863      	ldr	r3, [r4, #4]
	if (data_len == USB_UNINITIALIZED_VAL_32) {
60009830:	1c59      	adds	r1, r3, #1
60009832:	d023      	beq.n	6000987c <usb_dc_ep_read_wait+0xcc>
	if (data_len > max_data_len) {
60009834:	429d      	cmp	r5, r3
60009836:	d20a      	bcs.n	6000984e <usb_dc_ep_read_wait+0x9e>
		LOG_WRN("Not enough room to copy all the data!");
60009838:	4b28      	ldr	r3, [pc, #160]	; (600098dc <usb_dc_ep_read_wait+0x12c>)
6000983a:	aa04      	add	r2, sp, #16
6000983c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
60009840:	4823      	ldr	r0, [pc, #140]	; (600098d0 <usb_dc_ep_read_wait+0x120>)
60009842:	9305      	str	r3, [sp, #20]
60009844:	2302      	movs	r3, #2
60009846:	9304      	str	r3, [sp, #16]
60009848:	f009 fcd0 	bl	600131ec <z_log_msg_static_create.constprop.0>
6000984c:	462b      	mov	r3, r5
		for (uint32_t i = 0; i < data_len; i++) {
6000984e:	2200      	movs	r2, #0
60009850:	429a      	cmp	r2, r3
60009852:	d121      	bne.n	60009898 <usb_dc_ep_read_wait+0xe8>
	if (read_bytes) {
60009854:	f1b8 0f00 	cmp.w	r8, #0
60009858:	d001      	beq.n	6000985e <usb_dc_ep_read_wait+0xae>
		*read_bytes = data_len;
6000985a:	f8c8 3000 	str.w	r3, [r8]
	if (USB_EP_GET_IDX(ep) == USB_ENDPOINT_CONTROL) {
6000985e:	b9ce      	cbnz	r6, 60009894 <usb_dc_ep_read_wait+0xe4>
		update_control_stage(&dev_state.eps[0].transfer_message,
60009860:	f8d9 20dc 	ldr.w	r2, [r9, #220]	; 0xdc
	if (cb_msg->isSetup) {
60009864:	7a50      	ldrb	r0, [r2, #9]
	usbd_setup = (struct usb_setup_packet *)cb_msg->buffer;
60009866:	6811      	ldr	r1, [r2, #0]
	if (cb_msg->isSetup) {
60009868:	b318      	cbz	r0, 600098b2 <usb_dc_ep_read_wait+0x102>
		if (usbd_setup->wLength == 0) {
6000986a:	88cb      	ldrh	r3, [r1, #6]
6000986c:	b9cb      	cbnz	r3, 600098a2 <usb_dc_ep_read_wait+0xf2>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_DONE;
6000986e:	2300      	movs	r3, #0
			dev_state.setup_data_stage = SETUP_DATA_STAGE_IN;
60009870:	f889 30e1 	strb.w	r3, [r9, #225]	; 0xe1
60009874:	e00e      	b.n	60009894 <usb_dc_ep_read_wait+0xe4>
	data_len = dev_state.eps[ep_abs_idx].transfer_message.length;
60009876:	6863      	ldr	r3, [r4, #4]
	if (data_len == USB_UNINITIALIZED_VAL_32) {
60009878:	1c5a      	adds	r2, r3, #1
6000987a:	d106      	bne.n	6000988a <usb_dc_ep_read_wait+0xda>
		if (read_bytes) {
6000987c:	f1b8 0f00 	cmp.w	r8, #0
60009880:	d0cc      	beq.n	6000981c <usb_dc_ep_read_wait+0x6c>
			*read_bytes = 0;
60009882:	2300      	movs	r3, #0
60009884:	f8c8 3000 	str.w	r3, [r8]
60009888:	e7c8      	b.n	6000981c <usb_dc_ep_read_wait+0x6c>
		if (read_bytes) {
6000988a:	f1b8 0f00 	cmp.w	r8, #0
6000988e:	d001      	beq.n	60009894 <usb_dc_ep_read_wait+0xe4>
			*read_bytes = data_len;
60009890:	f8c8 3000 	str.w	r3, [r8]
		return 0;
60009894:	2000      	movs	r0, #0
60009896:	e7b0      	b.n	600097fa <usb_dc_ep_read_wait+0x4a>
			data[i] = bufp[i];
60009898:	f81a 1002 	ldrb.w	r1, [sl, r2]
6000989c:	54b9      	strb	r1, [r7, r2]
		for (uint32_t i = 0; i < data_len; i++) {
6000989e:	3201      	adds	r2, #1
600098a0:	e7d6      	b.n	60009850 <usb_dc_ep_read_wait+0xa0>
		} else if (usb_reqtype_is_to_host(usbd_setup)) {
600098a2:	f991 3000 	ldrsb.w	r3, [r1]
600098a6:	2b00      	cmp	r3, #0
600098a8:	da01      	bge.n	600098ae <usb_dc_ep_read_wait+0xfe>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_IN;
600098aa:	2301      	movs	r3, #1
600098ac:	e7e0      	b.n	60009870 <usb_dc_ep_read_wait+0xc0>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_OUT;
600098ae:	2302      	movs	r3, #2
600098b0:	e7de      	b.n	60009870 <usb_dc_ep_read_wait+0xc0>
		if (dev_state.setup_data_stage != SETUP_DATA_STAGE_DONE) {
600098b2:	f899 10e1 	ldrb.w	r1, [r9, #225]	; 0xe1
600098b6:	2900      	cmp	r1, #0
600098b8:	d0ec      	beq.n	60009894 <usb_dc_ep_read_wait+0xe4>
			if ((data_len >= max_data_len) ||
600098ba:	42ab      	cmp	r3, r5
600098bc:	d2d7      	bcs.n	6000986e <usb_dc_ep_read_wait+0xbe>
			    (data_len < dev_state.eps[0].ep_mps)) {
600098be:	8b12      	ldrh	r2, [r2, #24]
			if ((data_len >= max_data_len) ||
600098c0:	4293      	cmp	r3, r2
600098c2:	d3d4      	bcc.n	6000986e <usb_dc_ep_read_wait+0xbe>
600098c4:	e7e6      	b.n	60009894 <usb_dc_ep_read_wait+0xe4>
600098c6:	bf00      	nop
600098c8:	20202e00 	.word	0x20202e00
600098cc:	600184bc 	.word	0x600184bc
600098d0:	600150e4 	.word	0x600150e4
600098d4:	600184e3 	.word	0x600184e3
600098d8:	6001850a 	.word	0x6001850a
600098dc:	6001851a 	.word	0x6001851a

600098e0 <usb_dc_ep_read_continue>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600098e0:	09c3      	lsrs	r3, r0, #7
600098e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
600098e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
{
600098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ep_abs_idx >= NUM_OF_EP_MAX ||
600098ee:	2b0f      	cmp	r3, #15
{
600098f0:	b086      	sub	sp, #24
600098f2:	4604      	mov	r4, r0
600098f4:	af00      	add	r7, sp, #0
	if (ep_abs_idx >= NUM_OF_EP_MAX ||
600098f6:	d801      	bhi.n	600098fc <usb_dc_ep_read_continue+0x1c>
600098f8:	0602      	lsls	r2, r0, #24
600098fa:	d510      	bpl.n	6000991e <usb_dc_ep_read_continue+0x3e>
		LOG_ERR("Wrong endpoint index/address/direction");
600098fc:	4b2c      	ldr	r3, [pc, #176]	; (600099b0 <usb_dc_ep_read_continue+0xd0>)
600098fe:	f107 0210 	add.w	r2, r7, #16
60009902:	482c      	ldr	r0, [pc, #176]	; (600099b4 <usb_dc_ep_read_continue+0xd4>)
60009904:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009908:	617b      	str	r3, [r7, #20]
6000990a:	2302      	movs	r3, #2
6000990c:	613b      	str	r3, [r7, #16]
6000990e:	f009 fc6d 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009912:	f06f 0015 	mvn.w	r0, #21
}
60009916:	3718      	adds	r7, #24
60009918:	46bd      	mov	sp, r7
6000991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000991e:	4d26      	ldr	r5, [pc, #152]	; (600099b8 <usb_dc_ep_read_continue+0xd8>)
60009920:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
60009924:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
60009928:	009e      	lsls	r6, r3, #2
6000992a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
6000992e:	7e93      	ldrb	r3, [r2, #26]
60009930:	079b      	lsls	r3, r3, #30
60009932:	d511      	bpl.n	60009958 <usb_dc_ep_read_continue+0x78>
		LOG_WRN("endpoint 0x%x already occupied", ep);
60009934:	466d      	mov	r5, sp
60009936:	b088      	sub	sp, #32
60009938:	466a      	mov	r2, sp
6000993a:	4b20      	ldr	r3, [pc, #128]	; (600099bc <usb_dc_ep_read_continue+0xdc>)
6000993c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60009940:	e9c2 3005 	strd	r3, r0, [r2, #20]
60009944:	2303      	movs	r3, #3
60009946:	481b      	ldr	r0, [pc, #108]	; (600099b4 <usb_dc_ep_read_continue+0xd4>)
60009948:	f842 3f10 	str.w	r3, [r2, #16]!
6000994c:	f009 fc4e 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EBUSY;
60009950:	f06f 000f 	mvn.w	r0, #15
60009954:	46ad      	mov	sp, r5
60009956:	e7de      	b.n	60009916 <usb_dc_ep_read_continue+0x36>
	if (USB_EP_GET_IDX(ep) == USB_ENDPOINT_CONTROL) {
60009958:	b930      	cbnz	r0, 60009968 <usb_dc_ep_read_continue+0x88>
		if (dev_state.setup_data_stage == SETUP_DATA_STAGE_DONE) {
6000995a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
6000995e:	b32b      	cbz	r3, 600099ac <usb_dc_ep_read_continue+0xcc>
		if (dev_state.setup_data_stage == SETUP_DATA_STAGE_IN) {
60009960:	2b01      	cmp	r3, #1
			dev_state.setup_data_stage = SETUP_DATA_STAGE_DONE;
60009962:	bf08      	it	eq
60009964:	f885 00e1 	strbeq.w	r0, [r5, #225]	; 0xe1
	status = dev_state.dev_struct.controllerInterface->deviceRecv(
60009968:	68eb      	ldr	r3, [r5, #12]
6000996a:	4621      	mov	r1, r4
6000996c:	68a8      	ldr	r0, [r5, #8]
6000996e:	f8d3 800c 	ldr.w	r8, [r3, #12]
60009972:	8b13      	ldrh	r3, [r2, #24]
60009974:	68d2      	ldr	r2, [r2, #12]
60009976:	47c0      	blx	r8
	if (kStatus_USB_Success != status) {
60009978:	b188      	cbz	r0, 6000999e <usb_dc_ep_read_continue+0xbe>
		LOG_ERR("Failed to enable reception on ep 0x%02x", ep);
6000997a:	466d      	mov	r5, sp
6000997c:	b088      	sub	sp, #32
6000997e:	466a      	mov	r2, sp
60009980:	4b0f      	ldr	r3, [pc, #60]	; (600099c0 <usb_dc_ep_read_continue+0xe0>)
60009982:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009986:	480b      	ldr	r0, [pc, #44]	; (600099b4 <usb_dc_ep_read_continue+0xd4>)
60009988:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000998c:	2303      	movs	r3, #3
6000998e:	f842 3f10 	str.w	r3, [r2, #16]!
60009992:	f009 fc2b 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EIO;
60009996:	f06f 0004 	mvn.w	r0, #4
6000999a:	46ad      	mov	sp, r5
6000999c:	e7bb      	b.n	60009916 <usb_dc_ep_read_continue+0x36>
	dev_state.eps[ep_abs_idx].ep_occupied = true;
6000999e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
600099a2:	4433      	add	r3, r6
600099a4:	7e9a      	ldrb	r2, [r3, #26]
600099a6:	f042 0202 	orr.w	r2, r2, #2
600099aa:	769a      	strb	r2, [r3, #26]
			return 0;
600099ac:	2000      	movs	r0, #0
600099ae:	e7b2      	b.n	60009916 <usb_dc_ep_read_continue+0x36>
600099b0:	600184e3 	.word	0x600184e3
600099b4:	600150e4 	.word	0x600150e4
600099b8:	20202e00 	.word	0x20202e00
600099bc:	60018540 	.word	0x60018540
600099c0:	6001855f 	.word	0x6001855f

600099c4 <usb_dc_ep_set_callback>:
{
600099c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
600099c6:	09c3      	lsrs	r3, r0, #7
600099c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
600099cc:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
600099d0:	280f      	cmp	r0, #15
600099d2:	d90e      	bls.n	600099f2 <usb_dc_ep_set_callback+0x2e>
		LOG_ERR("Wrong endpoint index/address");
600099d4:	4b0e      	ldr	r3, [pc, #56]	; (60009a10 <usb_dc_ep_set_callback+0x4c>)
600099d6:	aa04      	add	r2, sp, #16
600099d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600099dc:	480d      	ldr	r0, [pc, #52]	; (60009a14 <usb_dc_ep_set_callback+0x50>)
600099de:	9305      	str	r3, [sp, #20]
600099e0:	2302      	movs	r3, #2
600099e2:	9304      	str	r3, [sp, #16]
600099e4:	f009 fc02 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
600099e8:	f06f 0015 	mvn.w	r0, #21
}
600099ec:	b007      	add	sp, #28
600099ee:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!dev_state.attached) {
600099f2:	4b09      	ldr	r3, [pc, #36]	; (60009a18 <usb_dc_ep_set_callback+0x54>)
600099f4:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
600099f8:	2a00      	cmp	r2, #0
600099fa:	d0f5      	beq.n	600099e8 <usb_dc_ep_set_callback+0x24>
	dev_state.eps[ep_abs_idx].callback = cb;
600099fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
60009a00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
60009a04:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	return 0;
60009a08:	2000      	movs	r0, #0
	dev_state.eps[ep_abs_idx].callback = cb;
60009a0a:	6159      	str	r1, [r3, #20]
	return 0;
60009a0c:	e7ee      	b.n	600099ec <usb_dc_ep_set_callback+0x28>
60009a0e:	bf00      	nop
60009a10:	600182a6 	.word	0x600182a6
60009a14:	600150e4 	.word	0x600150e4
60009a18:	20202e00 	.word	0x20202e00

60009a1c <usb_dc_set_status_callback>:
	dev_state.status_cb = cb;
60009a1c:	4b01      	ldr	r3, [pc, #4]	; (60009a24 <usb_dc_set_status_callback+0x8>)
60009a1e:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
}
60009a22:	4770      	bx	lr
60009a24:	20202e00 	.word	0x20202e00

60009a28 <usb_dc_ep_mps>:
{
60009a28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
60009a2a:	09c3      	lsrs	r3, r0, #7
60009a2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
60009a30:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
60009a34:	280f      	cmp	r0, #15
60009a36:	d90e      	bls.n	60009a56 <usb_dc_ep_mps+0x2e>
		LOG_ERR("Wrong endpoint index/address");
60009a38:	4b0b      	ldr	r3, [pc, #44]	; (60009a68 <usb_dc_ep_mps+0x40>)
60009a3a:	aa04      	add	r2, sp, #16
60009a3c:	480b      	ldr	r0, [pc, #44]	; (60009a6c <usb_dc_ep_mps+0x44>)
60009a3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009a42:	9305      	str	r3, [sp, #20]
60009a44:	2302      	movs	r3, #2
60009a46:	9304      	str	r3, [sp, #16]
60009a48:	f009 fbd0 	bl	600131ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
60009a4c:	f06f 0015 	mvn.w	r0, #21
}
60009a50:	b007      	add	sp, #28
60009a52:	f85d fb04 	ldr.w	pc, [sp], #4
	return dev_state.eps[ep_abs_idx].ep_mps;
60009a56:	4b06      	ldr	r3, [pc, #24]	; (60009a70 <usb_dc_ep_mps+0x48>)
60009a58:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
60009a5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
60009a60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
60009a64:	8b18      	ldrh	r0, [r3, #24]
60009a66:	e7f3      	b.n	60009a50 <usb_dc_ep_mps+0x28>
60009a68:	600182a6 	.word	0x600182a6
60009a6c:	600150e4 	.word	0x600150e4
60009a70:	20202e00 	.word	0x20202e00

60009a74 <USB_DeviceNotificationTrigger>:
{
60009a74:	b508      	push	{r3, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
60009a76:	2200      	movs	r2, #0
60009a78:	2300      	movs	r3, #0
60009a7a:	4802      	ldr	r0, [pc, #8]	; (60009a84 <USB_DeviceNotificationTrigger+0x10>)
60009a7c:	f003 fda4 	bl	6000d5c8 <z_impl_k_msgq_put>
}
60009a80:	2000      	movs	r0, #0
60009a82:	bd08      	pop	{r3, pc}
60009a84:	20202cac 	.word	0x20202cac

60009a88 <mcux_12b1msps_sar_adc_init>:
		adc_context_on_sampling_done(&data->ctx, dev);
	}
}

static int mcux_12b1msps_sar_adc_init(const struct device *dev)
{
60009a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
60009a8c:	6845      	ldr	r5, [r0, #4]
{
60009a8e:	b08b      	sub	sp, #44	; 0x2c
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
60009a90:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
60009a94:	4606      	mov	r6, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
60009a96:	aa04      	add	r2, sp, #16
60009a98:	2100      	movs	r1, #0
60009a9a:	68e8      	ldr	r0, [r5, #12]
	ADC_Type *base = config->base;
60009a9c:	682f      	ldr	r7, [r5, #0]
60009a9e:	f00a f808 	bl	60013ab2 <pinctrl_lookup_state>
	if (ret < 0) {
60009aa2:	1e04      	subs	r4, r0, #0
60009aa4:	db42      	blt.n	60009b2c <mcux_12b1msps_sar_adc_init+0xa4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
60009aa6:	9b04      	ldr	r3, [sp, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
60009aa8:	2200      	movs	r2, #0
60009aaa:	7919      	ldrb	r1, [r3, #4]
60009aac:	6818      	ldr	r0, [r3, #0]
60009aae:	f00a f813 	bl	60013ad8 <pinctrl_configure_pins>
	adc_config_t adc_config;
	int err;

	err = pinctrl_apply_state(config->pincfg, PINCTRL_STATE_DEFAULT);
	if (err) {
60009ab2:	4604      	mov	r4, r0
60009ab4:	2800      	cmp	r0, #0
60009ab6:	d139      	bne.n	60009b2c <mcux_12b1msps_sar_adc_init+0xa4>
		return err;
	}

	ADC_GetDefaultConfig(&adc_config);
60009ab8:	a801      	add	r0, sp, #4

	adc_config.referenceVoltageSource = config->ref_src;
	adc_config.clockSource = config->clock_src;
	adc_config.clockDriver = config->clock_drv;
	adc_config.samplePeriodMode = config->sample_period_mode;
	adc_config.resolution = kADC_Resolution12Bit;
60009aba:	f04f 0902 	mov.w	r9, #2
	ADC_GetDefaultConfig(&adc_config);
60009abe:	f002 fe4b 	bl	6000c758 <ADC_GetDefaultConfig>
	adc_config.referenceVoltageSource = config->ref_src;
60009ac2:	79ab      	ldrb	r3, [r5, #6]
	adc_config.enableHighSpeed = false;
	adc_config.enableLowPower = false;
	adc_config.enableLongSample = false;
	adc_config.enableAsynchronousClockOutput = true;

	ADC_Init(base, &adc_config);
60009ac4:	4638      	mov	r0, r7
60009ac6:	a901      	add	r1, sp, #4
	adc_config.referenceVoltageSource = config->ref_src;
60009ac8:	f88d 300a 	strb.w	r3, [sp, #10]
	adc_config.clockSource = config->clock_src;
60009acc:	792b      	ldrb	r3, [r5, #4]
	adc_config.enableOverWrite = false;
60009ace:	9401      	str	r4, [sp, #4]
	adc_config.clockSource = config->clock_src;
60009ad0:	f88d 300c 	strb.w	r3, [sp, #12]
	adc_config.clockDriver = config->clock_drv;
60009ad4:	796b      	ldrb	r3, [r5, #5]
60009ad6:	f88d 300d 	strb.w	r3, [sp, #13]
	adc_config.samplePeriodMode = config->sample_period_mode;
60009ada:	79eb      	ldrb	r3, [r5, #7]
	adc_config.resolution = kADC_Resolution12Bit;
60009adc:	f88d 900e 	strb.w	r9, [sp, #14]
	adc_config.samplePeriodMode = config->sample_period_mode;
60009ae0:	f88d 300b 	strb.w	r3, [sp, #11]
	adc_config.enableLongSample = false;
60009ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
60009ae8:	f8ad 3008 	strh.w	r3, [sp, #8]
	ADC_Init(base, &adc_config);
60009aec:	f002 fde0 	bl	6000c6b0 <ADC_Init>
    {
        base->CFG |= ADC_CFG_ADTRG_MASK;
    }
    else
    {
        base->CFG &= ~ADC_CFG_ADTRG_MASK;
60009af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && \
	FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
	ADC_EnableHardwareTrigger(base, false);
#endif

	if (kStatus_Success == ADC_DoAutoCalibration(base)) {
60009af2:	4638      	mov	r0, r7
60009af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
60009af8:	647b      	str	r3, [r7, #68]	; 0x44
60009afa:	f00a f93e 	bl	60013d7a <ADC_DoAutoCalibration>
60009afe:	b148      	cbz	r0, 60009b14 <mcux_12b1msps_sar_adc_init+0x8c>
		LOG_DBG("ADC_DoAutoCalibration() Done.");
	} else {
		LOG_WRN("ADC_DoAutoCalibration() Failed.");
60009b00:	4b0c      	ldr	r3, [pc, #48]	; (60009b34 <mcux_12b1msps_sar_adc_init+0xac>)
60009b02:	e9cd 9308 	strd	r9, r3, [sp, #32]
60009b06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
60009b0a:	4623      	mov	r3, r4
60009b0c:	aa08      	add	r2, sp, #32
60009b0e:	480a      	ldr	r0, [pc, #40]	; (60009b38 <mcux_12b1msps_sar_adc_init+0xb0>)
60009b10:	f7fc fb94 	bl	6000623c <z_impl_z_log_msg_static_create>
	}

	config->irq_config_func(dev);
60009b14:	68ab      	ldr	r3, [r5, #8]
60009b16:	4630      	mov	r0, r6
60009b18:	4798      	blx	r3
	data->dev = dev;
60009b1a:	f8c8 6000 	str.w	r6, [r8]
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
60009b1e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
60009b22:	b91b      	cbnz	r3, 60009b2c <mcux_12b1msps_sar_adc_init+0xa4>
	z_impl_k_sem_give(sem);
60009b24:	f108 0048 	add.w	r0, r8, #72	; 0x48
60009b28:	f003 fff6 	bl	6000db18 <z_impl_k_sem_give>

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
60009b2c:	4620      	mov	r0, r4
60009b2e:	b00b      	add	sp, #44	; 0x2c
60009b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
60009b34:	60018593 	.word	0x60018593
60009b38:	6001507c 	.word	0x6001507c

60009b3c <mcux_12b1msps_sar_adc_channel_setup>:
{
60009b3c:	b590      	push	{r4, r7, lr}
60009b3e:	b087      	sub	sp, #28
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
60009b40:	884a      	ldrh	r2, [r1, #2]
{
60009b42:	af00      	add	r7, sp, #0
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
60009b44:	b182      	cbz	r2, 60009b68 <mcux_12b1msps_sar_adc_channel_setup+0x2c>
		LOG_ERR("Unsupported channel acquisition time");
60009b46:	4b1c      	ldr	r3, [pc, #112]	; (60009bb8 <mcux_12b1msps_sar_adc_channel_setup+0x7c>)
60009b48:	617b      	str	r3, [r7, #20]
60009b4a:	2302      	movs	r3, #2
60009b4c:	613b      	str	r3, [r7, #16]
60009b4e:	2300      	movs	r3, #0
60009b50:	f107 0210 	add.w	r2, r7, #16
60009b54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009b58:	4818      	ldr	r0, [pc, #96]	; (60009bbc <mcux_12b1msps_sar_adc_channel_setup+0x80>)
60009b5a:	f7fc fb6f 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
60009b5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
60009b62:	371c      	adds	r7, #28
60009b64:	46bd      	mov	sp, r7
60009b66:	bd90      	pop	{r4, r7, pc}
	if (channel_cfg->differential) {
60009b68:	7908      	ldrb	r0, [r1, #4]
60009b6a:	f010 0320 	ands.w	r3, r0, #32
60009b6e:	d005      	beq.n	60009b7c <mcux_12b1msps_sar_adc_channel_setup+0x40>
		LOG_ERR("Differential channels are not supported");
60009b70:	4b13      	ldr	r3, [pc, #76]	; (60009bc0 <mcux_12b1msps_sar_adc_channel_setup+0x84>)
60009b72:	617b      	str	r3, [r7, #20]
60009b74:	2302      	movs	r3, #2
60009b76:	613b      	str	r3, [r7, #16]
60009b78:	4613      	mov	r3, r2
60009b7a:	e7e9      	b.n	60009b50 <mcux_12b1msps_sar_adc_channel_setup+0x14>
	if (channel_cfg->gain != ADC_GAIN_1) {
60009b7c:	7808      	ldrb	r0, [r1, #0]
60009b7e:	2808      	cmp	r0, #8
60009b80:	d00f      	beq.n	60009ba2 <mcux_12b1msps_sar_adc_channel_setup+0x66>
		LOG_ERR("Unsupported channel gain %d", channel_cfg->gain);
60009b82:	466c      	mov	r4, sp
60009b84:	b088      	sub	sp, #32
60009b86:	466a      	mov	r2, sp
60009b88:	490e      	ldr	r1, [pc, #56]	; (60009bc4 <mcux_12b1msps_sar_adc_channel_setup+0x88>)
60009b8a:	e9c2 1005 	strd	r1, r0, [r2, #20]
60009b8e:	2103      	movs	r1, #3
60009b90:	f842 1f10 	str.w	r1, [r2, #16]!
60009b94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009b98:	4808      	ldr	r0, [pc, #32]	; (60009bbc <mcux_12b1msps_sar_adc_channel_setup+0x80>)
60009b9a:	f7fc fb4f 	bl	6000623c <z_impl_z_log_msg_static_create>
60009b9e:	46a5      	mov	sp, r4
		return -ENOTSUP;
60009ba0:	e7dd      	b.n	60009b5e <mcux_12b1msps_sar_adc_channel_setup+0x22>
	if (channel_cfg->reference != ADC_REF_INTERNAL) {
60009ba2:	784a      	ldrb	r2, [r1, #1]
60009ba4:	2a04      	cmp	r2, #4
60009ba6:	d004      	beq.n	60009bb2 <mcux_12b1msps_sar_adc_channel_setup+0x76>
		LOG_ERR("Unsupported channel reference");
60009ba8:	4a07      	ldr	r2, [pc, #28]	; (60009bc8 <mcux_12b1msps_sar_adc_channel_setup+0x8c>)
60009baa:	617a      	str	r2, [r7, #20]
60009bac:	2202      	movs	r2, #2
60009bae:	613a      	str	r2, [r7, #16]
60009bb0:	e7ce      	b.n	60009b50 <mcux_12b1msps_sar_adc_channel_setup+0x14>
	return 0;
60009bb2:	4618      	mov	r0, r3
60009bb4:	e7d5      	b.n	60009b62 <mcux_12b1msps_sar_adc_channel_setup+0x26>
60009bb6:	bf00      	nop
60009bb8:	600185b3 	.word	0x600185b3
60009bbc:	6001507c 	.word	0x6001507c
60009bc0:	600185d8 	.word	0x600185d8
60009bc4:	60018600 	.word	0x60018600
60009bc8:	6001861c 	.word	0x6001861c

60009bcc <mcux_12b1msps_sar_adc_read>:
{
60009bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
60009bd0:	b083      	sub	sp, #12
60009bd2:	4604      	mov	r4, r0
60009bd4:	460d      	mov	r5, r1
	k_sem_take(&ctx->lock, K_FOREVER);
60009bd6:	6903      	ldr	r3, [r0, #16]
60009bd8:	af02      	add	r7, sp, #8
60009bda:	f103 0848 	add.w	r8, r3, #72	; 0x48
	return z_impl_k_sem_take(sem, timeout);
60009bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60009be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009be6:	4640      	mov	r0, r8
60009be8:	f003 ffd4 	bl	6000db94 <z_impl_k_sem_take>
	switch (sequence->resolution) {
60009bec:	7c2b      	ldrb	r3, [r5, #16]
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
60009bee:	6860      	ldr	r0, [r4, #4]
	switch (sequence->resolution) {
60009bf0:	2b0a      	cmp	r3, #10
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
60009bf2:	6924      	ldr	r4, [r4, #16]
	ADC_Type *base = config->base;
60009bf4:	6801      	ldr	r1, [r0, #0]
	switch (sequence->resolution) {
60009bf6:	d01d      	beq.n	60009c34 <mcux_12b1msps_sar_adc_read+0x68>
60009bf8:	2b0c      	cmp	r3, #12
60009bfa:	d02a      	beq.n	60009c52 <mcux_12b1msps_sar_adc_read+0x86>
60009bfc:	2b08      	cmp	r3, #8
60009bfe:	d02a      	beq.n	60009c56 <mcux_12b1msps_sar_adc_read+0x8a>
		LOG_ERR("Unsupported resolution %d", sequence->resolution);
60009c00:	466c      	mov	r4, sp
60009c02:	b088      	sub	sp, #32
60009c04:	aa02      	add	r2, sp, #8
60009c06:	4940      	ldr	r1, [pc, #256]	; (60009d08 <mcux_12b1msps_sar_adc_read+0x13c>)
	switch (sequence->oversampling) {
60009c08:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unsupported oversampling value %d",
60009c0c:	2303      	movs	r3, #3
60009c0e:	f842 3f10 	str.w	r3, [r2, #16]!
60009c12:	2300      	movs	r3, #0
60009c14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009c18:	483c      	ldr	r0, [pc, #240]	; (60009d0c <mcux_12b1msps_sar_adc_read+0x140>)
60009c1a:	f7fc fb0f 	bl	6000623c <z_impl_z_log_msg_static_create>
60009c1e:	46a5      	mov	sp, r4
		return -ENOTSUP;
60009c20:	f06f 0485 	mvn.w	r4, #133	; 0x85
	z_impl_k_sem_give(sem);
60009c24:	4640      	mov	r0, r8
60009c26:	f003 ff77 	bl	6000db18 <z_impl_k_sem_give>
}
60009c2a:	4620      	mov	r0, r4
60009c2c:	3704      	adds	r7, #4
60009c2e:	46bd      	mov	sp, r7
60009c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (sequence->resolution) {
60009c34:	2201      	movs	r2, #1
	tmp32 = base->CFG & ~(ADC_CFG_MODE_MASK);
60009c36:	6c4b      	ldr	r3, [r1, #68]	; 0x44
60009c38:	f023 030c 	bic.w	r3, r3, #12
	tmp32 |= ADC_CFG_MODE(resolution);
60009c3c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
	base->CFG = tmp32;
60009c40:	644b      	str	r3, [r1, #68]	; 0x44
	switch (sequence->oversampling) {
60009c42:	7c6b      	ldrb	r3, [r5, #17]
60009c44:	2b05      	cmp	r3, #5
60009c46:	d851      	bhi.n	60009cec <mcux_12b1msps_sar_adc_read+0x120>
60009c48:	e8df f003 	tbb	[pc, r3]
60009c4c:	07575055 	.word	0x07575055
60009c50:	4e4c      	.short	0x4e4c
		resolution = kADC_Resolution12Bit;
60009c52:	2202      	movs	r2, #2
60009c54:	e7ef      	b.n	60009c36 <mcux_12b1msps_sar_adc_read+0x6a>
		resolution = kADC_Resolution8Bit;
60009c56:	2200      	movs	r2, #0
60009c58:	e7ed      	b.n	60009c36 <mcux_12b1msps_sar_adc_read+0x6a>
		mode = kADC_HardwareAverageCount8;
60009c5a:	2101      	movs	r1, #1
	ADC_SetHardwareAverageConfig(config->base, mode);
60009c5c:	6800      	ldr	r0, [r0, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
60009c5e:	f104 066c 	add.w	r6, r4, #108	; 0x6c
60009c62:	f00a f8b4 	bl	60013dce <ADC_SetHardwareAverageConfig>
	data->buffer = sequence->buffer;
60009c66:	68ab      	ldr	r3, [r5, #8]
60009c68:	46ac      	mov	ip, r5
	adc_context_start_read(&data->ctx, sequence);
60009c6a:	f104 0908 	add.w	r9, r4, #8
	data->buffer = sequence->buffer;
60009c6e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
60009c72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
60009c76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
60009c78:	f8dc 3000 	ldr.w	r3, [ip]
60009c7c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
60009c7e:	2600      	movs	r6, #0
60009c80:	66a6      	str	r6, [r4, #104]	; 0x68

	if (sequence->options) {
60009c82:	682b      	ldr	r3, [r5, #0]
60009c84:	2b00      	cmp	r3, #0
60009c86:	d03a      	beq.n	60009cfe <mcux_12b1msps_sar_adc_read+0x132>
		ctx->options = *sequence->options;
60009c88:	f104 0580 	add.w	r5, r4, #128	; 0x80
60009c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
60009c8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
60009c92:	66e5      	str	r5, [r4, #108]	; 0x6c
		ctx->sampling_index = 0U;
60009c94:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90

		if (ctx->options.interval_us != 0U) {
60009c98:	b388      	cbz	r0, 60009cfe <mcux_12b1msps_sar_adc_read+0x132>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
60009c9a:	f3bf 8f5b 	dmb	ish
60009c9e:	e859 3f00 	ldrex	r3, [r9]
60009ca2:	e849 6200 	strex	r2, r6, [r9]
60009ca6:	2a00      	cmp	r2, #0
60009ca8:	d1f9      	bne.n	60009c9e <mcux_12b1msps_sar_adc_read+0xd2>
60009caa:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
60009cae:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
60009cb2:	2264      	movs	r2, #100	; 0x64
60009cb4:	2300      	movs	r3, #0
		t += off;
60009cb6:	3063      	adds	r0, #99	; 0x63
60009cb8:	f146 0100 	adc.w	r1, r6, #0
			return t / ((uint64_t)from_hz / to_hz);
60009cbc:	f7f9 fb62 	bl	60003384 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
60009cc0:	2200      	movs	r2, #0
60009cc2:	2300      	movs	r3, #0
60009cc4:	e9cd 0100 	strd	r0, r1, [sp]
60009cc8:	f109 0008 	add.w	r0, r9, #8
60009ccc:	f006 f8aa 	bl	6000fe24 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
60009cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
60009cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60009cdc:	f003 ff5a 	bl	6000db94 <z_impl_k_sem_take>
	return ctx->status;
60009ce0:	6ea4      	ldr	r4, [r4, #104]	; 0x68
	return error;
60009ce2:	e79f      	b.n	60009c24 <mcux_12b1msps_sar_adc_read+0x58>
		mode = kADC_HardwareAverageCount16;
60009ce4:	2102      	movs	r1, #2
		break;
60009ce6:	e7b9      	b.n	60009c5c <mcux_12b1msps_sar_adc_read+0x90>
		mode = kADC_HardwareAverageCount32;
60009ce8:	2103      	movs	r1, #3
		break;
60009cea:	e7b7      	b.n	60009c5c <mcux_12b1msps_sar_adc_read+0x90>
		LOG_ERR("Unsupported oversampling value %d",
60009cec:	466c      	mov	r4, sp
60009cee:	b088      	sub	sp, #32
60009cf0:	aa02      	add	r2, sp, #8
60009cf2:	4907      	ldr	r1, [pc, #28]	; (60009d10 <mcux_12b1msps_sar_adc_read+0x144>)
60009cf4:	e788      	b.n	60009c08 <mcux_12b1msps_sar_adc_read+0x3c>
		mode = kADC_HardwareAverageDiasable;
60009cf6:	2104      	movs	r1, #4
60009cf8:	e7b0      	b.n	60009c5c <mcux_12b1msps_sar_adc_read+0x90>
	switch (sequence->oversampling) {
60009cfa:	2100      	movs	r1, #0
60009cfc:	e7ae      	b.n	60009c5c <mcux_12b1msps_sar_adc_read+0x90>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
60009cfe:	4648      	mov	r0, r9
60009d00:	f009 fa9f 	bl	60013242 <adc_context_start_sampling>
60009d04:	e7e4      	b.n	60009cd0 <mcux_12b1msps_sar_adc_read+0x104>
60009d06:	bf00      	nop
60009d08:	6001863a 	.word	0x6001863a
60009d0c:	6001507c 	.word	0x6001507c
60009d10:	60018654 	.word	0x60018654

60009d14 <mcux_ccm_get_subsys_rate>:
#else
	uint32_t clock_name = (uint32_t) sub_system;
#endif
	uint32_t mux __unused;

	switch (clock_name) {
60009d14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
60009d18:	b538      	push	{r3, r4, r5, lr}
60009d1a:	4614      	mov	r4, r2
	switch (clock_name) {
60009d1c:	d013      	beq.n	60009d46 <mcux_ccm_get_subsys_rate+0x32>
60009d1e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
60009d22:	d03f      	beq.n	60009da4 <mcux_ccm_get_subsys_rate+0x90>
60009d24:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
60009d28:	d12b      	bne.n	60009d82 <mcux_ccm_get_subsys_rate+0x6e>
    return (((uint32_t)(CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux))) >> CCM_TUPLE_SHIFT(mux));
60009d2a:	4d20      	ldr	r5, [pc, #128]	; (60009dac <mcux_ccm_get_subsys_rate+0x98>)
60009d2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24

	} break;

#else
	case IMX_CCM_LPUART_CLK:
		if (CLOCK_GetMux(kCLOCK_UartMux) == 0) {
60009d2e:	065a      	lsls	r2, r3, #25
60009d30:	d42b      	bmi.n	60009d8a <mcux_ccm_get_subsys_rate+0x76>
			*rate = CLOCK_GetPllFreq(kCLOCK_PllUsb1) / 6
60009d32:	481f      	ldr	r0, [pc, #124]	; (60009db0 <mcux_ccm_get_subsys_rate+0x9c>)
60009d34:	f001 f950 	bl	6000afd8 <CLOCK_GetPllFreq>
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60009d38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
60009d3a:	2206      	movs	r2, #6
60009d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
60009d40:	fbb0 f0f2 	udiv	r0, r0, r2
60009d44:	e00a      	b.n	60009d5c <mcux_ccm_get_subsys_rate+0x48>
    return (((uint32_t)(CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux))) >> CCM_TUPLE_SHIFT(mux));
60009d46:	4d19      	ldr	r5, [pc, #100]	; (60009dac <mcux_ccm_get_subsys_rate+0x98>)
60009d48:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (CLOCK_GetMux(kCLOCK_Lpi2cMux) == 0) {
60009d4a:	0358      	lsls	r0, r3, #13
60009d4c:	d40b      	bmi.n	60009d66 <mcux_ccm_get_subsys_rate+0x52>
			*rate = CLOCK_GetPllFreq(kCLOCK_PllUsb1) / 8
60009d4e:	4818      	ldr	r0, [pc, #96]	; (60009db0 <mcux_ccm_get_subsys_rate+0x9c>)
60009d50:	f001 f942 	bl	6000afd8 <CLOCK_GetPllFreq>
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60009d54:	6bab      	ldr	r3, [r5, #56]	; 0x38
60009d56:	08c0      	lsrs	r0, r0, #3
60009d58:	f3c3 43c5 	ubfx	r3, r3, #19, #6
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
60009d5c:	3301      	adds	r3, #1
60009d5e:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
#endif

#ifdef CONFIG_PWM_MCUX
	case IMX_CCM_PWM_CLK:
		*rate = CLOCK_GetIpgFreq();
60009d62:	6020      	str	r0, [r4, #0]
		break;
60009d64:	e00d      	b.n	60009d82 <mcux_ccm_get_subsys_rate+0x6e>
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
60009d66:	4b13      	ldr	r3, [pc, #76]	; (60009db4 <mcux_ccm_get_subsys_rate+0xa0>)
60009d68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
60009d6c:	06d9      	lsls	r1, r3, #27
60009d6e:	d40a      	bmi.n	60009d86 <mcux_ccm_get_subsys_rate+0x72>
60009d70:	4b11      	ldr	r3, [pc, #68]	; (60009db8 <mcux_ccm_get_subsys_rate+0xa4>)
60009d72:	681a      	ldr	r2, [r3, #0]
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60009d74:	6bab      	ldr	r3, [r5, #56]	; 0x38
60009d76:	f3c3 43c5 	ubfx	r3, r3, #19, #6
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
60009d7a:	3301      	adds	r3, #1
60009d7c:	fbb2 f2f3 	udiv	r2, r2, r3
			*rate = CLOCK_GetOscFreq()
60009d80:	6022      	str	r2, [r4, #0]
		break;
#endif
	}

	return 0;
}
60009d82:	2000      	movs	r0, #0
60009d84:	bd38      	pop	{r3, r4, r5, pc}
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
60009d86:	4a0d      	ldr	r2, [pc, #52]	; (60009dbc <mcux_ccm_get_subsys_rate+0xa8>)
60009d88:	e7f4      	b.n	60009d74 <mcux_ccm_get_subsys_rate+0x60>
60009d8a:	4b0a      	ldr	r3, [pc, #40]	; (60009db4 <mcux_ccm_get_subsys_rate+0xa0>)
60009d8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
60009d90:	06db      	lsls	r3, r3, #27
60009d92:	d405      	bmi.n	60009da0 <mcux_ccm_get_subsys_rate+0x8c>
60009d94:	4b08      	ldr	r3, [pc, #32]	; (60009db8 <mcux_ccm_get_subsys_rate+0xa4>)
60009d96:	681a      	ldr	r2, [r3, #0]
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60009d98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
60009d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
60009d9e:	e7ec      	b.n	60009d7a <mcux_ccm_get_subsys_rate+0x66>
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
60009da0:	4a06      	ldr	r2, [pc, #24]	; (60009dbc <mcux_ccm_get_subsys_rate+0xa8>)
60009da2:	e7f9      	b.n	60009d98 <mcux_ccm_get_subsys_rate+0x84>
		*rate = CLOCK_GetIpgFreq();
60009da4:	f001 fa9e 	bl	6000b2e4 <CLOCK_GetIpgFreq>
60009da8:	e7db      	b.n	60009d62 <mcux_ccm_get_subsys_rate+0x4e>
60009daa:	bf00      	nop
60009dac:	400fc000 	.word	0x400fc000
60009db0:	0010000d 	.word	0x0010000d
60009db4:	400d8000 	.word	0x400d8000
60009db8:	20204144 	.word	0x20204144
60009dbc:	016e3600 	.word	0x016e3600

60009dc0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
60009dc0:	b508      	push	{r3, lr}
60009dc2:	4807      	ldr	r0, [pc, #28]	; (60009de0 <uart_console_init+0x20>)
60009dc4:	f00a fbff 	bl	600145c6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
60009dc8:	b138      	cbz	r0, 60009dda <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
60009dca:	4806      	ldr	r0, [pc, #24]	; (60009de4 <uart_console_init+0x24>)
60009dcc:	f7fe ff8a 	bl	60008ce4 <__stdout_hook_install>
	__printk_hook_install(console_out);
60009dd0:	4804      	ldr	r0, [pc, #16]	; (60009de4 <uart_console_init+0x24>)
60009dd2:	f7fa fb17 	bl	60004404 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
60009dd6:	2000      	movs	r0, #0
}
60009dd8:	bd08      	pop	{r3, pc}
		return -ENODEV;
60009dda:	f06f 0012 	mvn.w	r0, #18
60009dde:	e7fb      	b.n	60009dd8 <uart_console_init+0x18>
60009de0:	600148d8 	.word	0x600148d8
60009de4:	60009de9 	.word	0x60009de9

60009de8 <console_out>:
	if ('\n' == c) {
60009de8:	280a      	cmp	r0, #10
{
60009dea:	b538      	push	{r3, r4, r5, lr}
60009dec:	4604      	mov	r4, r0
60009dee:	4d07      	ldr	r5, [pc, #28]	; (60009e0c <console_out+0x24>)
	if ('\n' == c) {
60009df0:	d104      	bne.n	60009dfc <console_out+0x14>
60009df2:	68ab      	ldr	r3, [r5, #8]
60009df4:	210d      	movs	r1, #13
60009df6:	4628      	mov	r0, r5
60009df8:	685b      	ldr	r3, [r3, #4]
60009dfa:	4798      	blx	r3
60009dfc:	68ab      	ldr	r3, [r5, #8]
60009dfe:	b2e1      	uxtb	r1, r4
60009e00:	4802      	ldr	r0, [pc, #8]	; (60009e0c <console_out+0x24>)
60009e02:	685b      	ldr	r3, [r3, #4]
60009e04:	4798      	blx	r3
}
60009e06:	4620      	mov	r0, r4
60009e08:	bd38      	pop	{r3, r4, r5, pc}
60009e0a:	bf00      	nop
60009e0c:	600148d8 	.word	0x600148d8

60009e10 <mcux_igpio_manage_callback>:
}

static int mcux_igpio_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
60009e10:	b510      	push	{r4, lr}
	struct mcux_igpio_data *data = dev->data;
60009e12:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
60009e14:	b961      	cbnz	r1, 60009e30 <mcux_igpio_manage_callback+0x20>
60009e16:	4920      	ldr	r1, [pc, #128]	; (60009e98 <mcux_igpio_manage_callback+0x88>)
60009e18:	232a      	movs	r3, #42	; 0x2a
60009e1a:	4a20      	ldr	r2, [pc, #128]	; (60009e9c <mcux_igpio_manage_callback+0x8c>)
60009e1c:	4820      	ldr	r0, [pc, #128]	; (60009ea0 <mcux_igpio_manage_callback+0x90>)
60009e1e:	f008 ff1c 	bl	60012c5a <assert_print>
60009e22:	4820      	ldr	r0, [pc, #128]	; (60009ea4 <mcux_igpio_manage_callback+0x94>)
60009e24:	f008 ff19 	bl	60012c5a <assert_print>
60009e28:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
60009e2a:	481c      	ldr	r0, [pc, #112]	; (60009e9c <mcux_igpio_manage_callback+0x8c>)
60009e2c:	f008 ff0e 	bl	60012c4c <assert_post_action>
60009e30:	6848      	ldr	r0, [r1, #4]
60009e32:	b950      	cbnz	r0, 60009e4a <mcux_igpio_manage_callback+0x3a>
60009e34:	491c      	ldr	r1, [pc, #112]	; (60009ea8 <mcux_igpio_manage_callback+0x98>)
60009e36:	232b      	movs	r3, #43	; 0x2b
60009e38:	4a18      	ldr	r2, [pc, #96]	; (60009e9c <mcux_igpio_manage_callback+0x8c>)
60009e3a:	4819      	ldr	r0, [pc, #100]	; (60009ea0 <mcux_igpio_manage_callback+0x90>)
60009e3c:	f008 ff0d 	bl	60012c5a <assert_print>
60009e40:	481a      	ldr	r0, [pc, #104]	; (60009eac <mcux_igpio_manage_callback+0x9c>)
60009e42:	f008 ff0a 	bl	60012c5a <assert_print>
60009e46:	212b      	movs	r1, #43	; 0x2b
60009e48:	e7ef      	b.n	60009e2a <mcux_igpio_manage_callback+0x1a>
	return list->head;
60009e4a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
60009e4c:	b1f8      	cbz	r0, 60009e8e <mcux_igpio_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
60009e4e:	4288      	cmp	r0, r1
60009e50:	d119      	bne.n	60009e86 <mcux_igpio_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
60009e52:	689c      	ldr	r4, [r3, #8]
	return node->next;
60009e54:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
60009e56:	42a1      	cmp	r1, r4
	list->head = node;
60009e58:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
60009e5a:	d100      	bne.n	60009e5e <mcux_igpio_manage_callback+0x4e>
	list->tail = node;
60009e5c:	6098      	str	r0, [r3, #8]
	parent->next = child;
60009e5e:	2000      	movs	r0, #0
60009e60:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
60009e62:	b12a      	cbz	r2, 60009e70 <mcux_igpio_manage_callback+0x60>
	return list->head;
60009e64:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
60009e66:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
60009e68:	689a      	ldr	r2, [r3, #8]
	list->head = node;
60009e6a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
60009e6c:	b902      	cbnz	r2, 60009e70 <mcux_igpio_manage_callback+0x60>
	list->tail = node;
60009e6e:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
60009e70:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->callbacks, callback, set);
60009e72:	e010      	b.n	60009e96 <mcux_igpio_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
60009e74:	4281      	cmp	r1, r0
60009e76:	d106      	bne.n	60009e86 <mcux_igpio_manage_callback+0x76>
	return node->next;
60009e78:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
60009e7a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
60009e7c:	6898      	ldr	r0, [r3, #8]
60009e7e:	4281      	cmp	r1, r0
60009e80:	d1ed      	bne.n	60009e5e <mcux_igpio_manage_callback+0x4e>
	list->tail = node;
60009e82:	609c      	str	r4, [r3, #8]
}
60009e84:	e7eb      	b.n	60009e5e <mcux_igpio_manage_callback+0x4e>
	return node->next;
60009e86:	4604      	mov	r4, r0
60009e88:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
60009e8a:	2800      	cmp	r0, #0
60009e8c:	d1f2      	bne.n	60009e74 <mcux_igpio_manage_callback+0x64>
			if (!set) {
60009e8e:	2a00      	cmp	r2, #0
60009e90:	d1e8      	bne.n	60009e64 <mcux_igpio_manage_callback+0x54>
				return -EINVAL;
60009e92:	f06f 0015 	mvn.w	r0, #21
}
60009e96:	bd10      	pop	{r4, pc}
60009e98:	600186f0 	.word	0x600186f0
60009e9c:	600186b4 	.word	0x600186b4
60009ea0:	60016dfb 	.word	0x60016dfb
60009ea4:	600186f9 	.word	0x600186f9
60009ea8:	60018708 	.word	0x60018708
60009eac:	6001871a 	.word	0x6001871a

60009eb0 <mcux_igpio_port_isr>:

static void mcux_igpio_port_isr(const struct device *dev)
{
60009eb0:	b570      	push	{r4, r5, r6, lr}
	const struct mcux_igpio_config *config = dev->config;
	struct mcux_igpio_data *data = dev->data;
	GPIO_Type *base = config->base;
60009eb2:	6843      	ldr	r3, [r0, #4]
{
60009eb4:	4605      	mov	r5, r0
	struct mcux_igpio_data *data = dev->data;
60009eb6:	6902      	ldr	r2, [r0, #16]
	GPIO_Type *base = config->base;
60009eb8:	685b      	ldr	r3, [r3, #4]
	uint32_t int_flags;

	int_flags = base->ISR;
60009eba:	699e      	ldr	r6, [r3, #24]
	base->ISR = int_flags;
60009ebc:	619e      	str	r6, [r3, #24]

	gpio_fire_callbacks(&data->callbacks, dev, int_flags);
60009ebe:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
60009ec0:	b109      	cbz	r1, 60009ec6 <mcux_igpio_port_isr+0x16>
	return node->next;
60009ec2:	680c      	ldr	r4, [r1, #0]
60009ec4:	b901      	cbnz	r1, 60009ec8 <mcux_igpio_port_isr+0x18>
}
60009ec6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
60009ec8:	688a      	ldr	r2, [r1, #8]
60009eca:	4032      	ands	r2, r6
60009ecc:	d010      	beq.n	60009ef0 <mcux_igpio_port_isr+0x40>
			__ASSERT(cb->handler, "No callback handler!");
60009ece:	684b      	ldr	r3, [r1, #4]
60009ed0:	b963      	cbnz	r3, 60009eec <mcux_igpio_port_isr+0x3c>
60009ed2:	490b      	ldr	r1, [pc, #44]	; (60009f00 <mcux_igpio_port_isr+0x50>)
60009ed4:	234d      	movs	r3, #77	; 0x4d
60009ed6:	4a0b      	ldr	r2, [pc, #44]	; (60009f04 <mcux_igpio_port_isr+0x54>)
60009ed8:	480b      	ldr	r0, [pc, #44]	; (60009f08 <mcux_igpio_port_isr+0x58>)
60009eda:	f008 febe 	bl	60012c5a <assert_print>
60009ede:	480b      	ldr	r0, [pc, #44]	; (60009f0c <mcux_igpio_port_isr+0x5c>)
60009ee0:	f008 febb 	bl	60012c5a <assert_print>
60009ee4:	214d      	movs	r1, #77	; 0x4d
60009ee6:	4807      	ldr	r0, [pc, #28]	; (60009f04 <mcux_igpio_port_isr+0x54>)
60009ee8:	f008 feb0 	bl	60012c4c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
60009eec:	4628      	mov	r0, r5
60009eee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
60009ef0:	b11c      	cbz	r4, 60009efa <mcux_igpio_port_isr+0x4a>
60009ef2:	6823      	ldr	r3, [r4, #0]
60009ef4:	4621      	mov	r1, r4
60009ef6:	461c      	mov	r4, r3
60009ef8:	e7e4      	b.n	60009ec4 <mcux_igpio_port_isr+0x14>
60009efa:	4623      	mov	r3, r4
60009efc:	e7fa      	b.n	60009ef4 <mcux_igpio_port_isr+0x44>
60009efe:	bf00      	nop
60009f00:	60018731 	.word	0x60018731
60009f04:	600186b4 	.word	0x600186b4
60009f08:	60016dfb 	.word	0x60016dfb
60009f0c:	6001871a 	.word	0x6001871a

60009f10 <mcux_lpi2c_transfer>:
	return flags;
}

static int mcux_lpi2c_transfer(const struct device *dev, struct i2c_msg *msgs,
			       uint8_t num_msgs, uint16_t addr)
{
60009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60009f14:	b089      	sub	sp, #36	; 0x24
	const struct mcux_lpi2c_config *config = dev->config;
60009f16:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct mcux_lpi2c_data *data = dev->data;
60009f1a:	f8d0 b010 	ldr.w	fp, [r0, #16]
{
60009f1e:	460c      	mov	r4, r1
	LPI2C_Type *base = config->base;
60009f20:	f8d9 6000 	ldr.w	r6, [r9]
	lpi2c_master_transfer_t transfer;
	status_t status;
	int ret = 0;

	ret = k_sem_take(&data->lock, K_FOREVER);
60009f24:	f10b 0834 	add.w	r8, fp, #52	; 0x34
{
60009f28:	e9cd 2300 	strd	r2, r3, [sp]
60009f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60009f34:	4640      	mov	r0, r8
60009f36:	f003 fe2d 	bl	6000db94 <z_impl_k_sem_take>
	if (ret) {
60009f3a:	4605      	mov	r5, r0
60009f3c:	bb88      	cbnz	r0, 60009fa2 <mcux_lpi2c_transfer+0x92>
60009f3e:	340c      	adds	r4, #12
		return ret;
	}

	/* Iterate over all the messages */
	for (int i = 0; i < num_msgs; i++) {
60009f40:	4607      	mov	r7, r0
		}

		transfer.slaveAddress = addr;
		transfer.direction = (msgs->flags & I2C_MSG_READ)
			? kLPI2C_Read : kLPI2C_Write;
		transfer.subaddress = 0;
60009f42:	4682      	mov	sl, r0
	for (int i = 0; i < num_msgs; i++) {
60009f44:	9b00      	ldr	r3, [sp, #0]
60009f46:	42bb      	cmp	r3, r7
60009f48:	dd28      	ble.n	60009f9c <mcux_lpi2c_transfer+0x8c>
		if (I2C_MSG_ADDR_10_BITS & msgs->flags) {
60009f4a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
60009f4e:	0710      	lsls	r0, r2, #28
60009f50:	d44d      	bmi.n	60009fee <mcux_lpi2c_transfer+0xde>
	if (!(msg_flags & I2C_MSG_STOP)) {
60009f52:	f082 0302 	eor.w	r3, r2, #2
	if (msg_flags & I2C_MSG_RESTART) {
60009f56:	0751      	lsls	r1, r2, #29
	if (!(msg_flags & I2C_MSG_STOP)) {
60009f58:	f3c3 0340 	ubfx	r3, r3, #1, #1
60009f5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
	if (msg_flags & I2C_MSG_RESTART) {
60009f60:	d423      	bmi.n	60009faa <mcux_lpi2c_transfer+0x9a>
		if (i != 0 && !(msgs->flags & I2C_MSG_RESTART)) {
60009f62:	bb2f      	cbnz	r7, 60009fb0 <mcux_lpi2c_transfer+0xa0>
		transfer.flags = mcux_lpi2c_convert_flags(msgs->flags);
60009f64:	9302      	str	r3, [sp, #8]
			? kLPI2C_Read : kLPI2C_Write;
60009f66:	f002 0201 	and.w	r2, r2, #1
		transfer.slaveAddress = addr;
60009f6a:	9b01      	ldr	r3, [sp, #4]
		transfer.subaddressSize = 0;
		transfer.data = msgs->buf;
		transfer.dataSize = msgs->len;

		/* Start the transfer */
		status = LPI2C_MasterTransferNonBlocking(base,
60009f6c:	4659      	mov	r1, fp
		transfer.direction = (msgs->flags & I2C_MSG_READ)
60009f6e:	f88d 200e 	strb.w	r2, [sp, #14]
		status = LPI2C_MasterTransferNonBlocking(base,
60009f72:	4630      	mov	r0, r6
		transfer.slaveAddress = addr;
60009f74:	f8ad 300c 	strh.w	r3, [sp, #12]
		status = LPI2C_MasterTransferNonBlocking(base,
60009f78:	aa02      	add	r2, sp, #8
		transfer.data = msgs->buf;
60009f7a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
60009f7e:	9306      	str	r3, [sp, #24]
		transfer.dataSize = msgs->len;
60009f80:	f854 3c08 	ldr.w	r3, [r4, #-8]
		transfer.subaddressSize = 0;
60009f84:	e9cd aa04 	strd	sl, sl, [sp, #16]
		transfer.dataSize = msgs->len;
60009f88:	9307      	str	r3, [sp, #28]
		status = LPI2C_MasterTransferNonBlocking(base,
60009f8a:	f001 fb85 	bl	6000b698 <LPI2C_MasterTransferNonBlocking>
				&data->handle, &transfer);

		/* Return an error if the transfer didn't start successfully
		 * e.g., if the bus was busy
		 */
		if (status != kStatus_Success) {
60009f8e:	b190      	cbz	r0, 60009fb6 <mcux_lpi2c_transfer+0xa6>
			LPI2C_MasterTransferAbort(base, &data->handle);
			ret = -EIO;
60009f90:	f06f 0504 	mvn.w	r5, #4
			break;
		}
		if (msgs->len == 0) {
			k_busy_wait(SCAN_DELAY_US(config->bitrate));
			if (0 != (base->MSR & LPI2C_MSR_NDF_MASK)) {
				LPI2C_MasterTransferAbort(base, &data->handle);
60009f94:	4659      	mov	r1, fp
60009f96:	4630      	mov	r0, r6
60009f98:	f001 fc16 	bl	6000b7c8 <LPI2C_MasterTransferAbort>
	z_impl_k_sem_give(sem);
60009f9c:	4640      	mov	r0, r8
60009f9e:	f003 fdbb 	bl	6000db18 <z_impl_k_sem_give>
	}

	k_sem_give(&data->lock);

	return ret;
}
60009fa2:	4628      	mov	r0, r5
60009fa4:	b009      	add	sp, #36	; 0x24
60009fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flags |= kLPI2C_TransferRepeatedStartFlag;
60009faa:	f043 0302 	orr.w	r3, r3, #2
		if (i != 0 && !(msgs->flags & I2C_MSG_RESTART)) {
60009fae:	e7d9      	b.n	60009f64 <mcux_lpi2c_transfer+0x54>
			transfer.flags |= kLPI2C_TransferNoStartFlag;
60009fb0:	f043 0301 	orr.w	r3, r3, #1
60009fb4:	e7d6      	b.n	60009f64 <mcux_lpi2c_transfer+0x54>
	return z_impl_k_sem_take(sem, timeout);
60009fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60009fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009fbe:	f10b 0044 	add.w	r0, fp, #68	; 0x44
60009fc2:	f003 fde7 	bl	6000db94 <z_impl_k_sem_take>
		if (data->callback_status != kStatus_Success) {
60009fc6:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
60009fca:	2b00      	cmp	r3, #0
60009fcc:	d1e0      	bne.n	60009f90 <mcux_lpi2c_transfer+0x80>
		if (msgs->len == 0) {
60009fce:	f854 3c08 	ldr.w	r3, [r4, #-8]
60009fd2:	b94b      	cbnz	r3, 60009fe8 <mcux_lpi2c_transfer+0xd8>
			k_busy_wait(SCAN_DELAY_US(config->bitrate));
60009fd4:	f8d9 0010 	ldr.w	r0, [r9, #16]
60009fd8:	4b06      	ldr	r3, [pc, #24]	; (60009ff4 <mcux_lpi2c_transfer+0xe4>)
60009fda:	fbb3 f0f0 	udiv	r0, r3, r0
	z_impl_k_busy_wait(usec_to_wait);
60009fde:	f005 fe57 	bl	6000fc90 <z_impl_k_busy_wait>
			if (0 != (base->MSR & LPI2C_MSR_NDF_MASK)) {
60009fe2:	6973      	ldr	r3, [r6, #20]
60009fe4:	055b      	lsls	r3, r3, #21
60009fe6:	d4d3      	bmi.n	60009f90 <mcux_lpi2c_transfer+0x80>
	for (int i = 0; i < num_msgs; i++) {
60009fe8:	3701      	adds	r7, #1
60009fea:	340c      	adds	r4, #12
60009fec:	e7aa      	b.n	60009f44 <mcux_lpi2c_transfer+0x34>
			ret = -ENOTSUP;
60009fee:	f06f 0585 	mvn.w	r5, #133	; 0x85
60009ff2:	e7d3      	b.n	60009f9c <mcux_lpi2c_transfer+0x8c>
60009ff4:	00b71b00 	.word	0x00b71b00

60009ff8 <mcux_lpi2c_configure>:
{
60009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct mcux_lpi2c_config *config = dev->config;
60009ffa:	6843      	ldr	r3, [r0, #4]
	struct mcux_lpi2c_data *data = dev->data;
60009ffc:	6905      	ldr	r5, [r0, #16]
	if (!(I2C_MODE_CONTROLLER & dev_config_raw)) {
60009ffe:	06c8      	lsls	r0, r1, #27
	LPI2C_Type *base = config->base;
6000a000:	681e      	ldr	r6, [r3, #0]
	if (!(I2C_MODE_CONTROLLER & dev_config_raw)) {
6000a002:	d404      	bmi.n	6000a00e <mcux_lpi2c_configure+0x16>
		return -EINVAL;
6000a004:	f06f 0415 	mvn.w	r4, #21
}
6000a008:	4620      	mov	r0, r4
6000a00a:	b003      	add	sp, #12
6000a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (I2C_ADDR_10_BITS & dev_config_raw) {
6000a00e:	07ca      	lsls	r2, r1, #31
6000a010:	d4f8      	bmi.n	6000a004 <mcux_lpi2c_configure+0xc>
	switch (I2C_SPEED_GET(dev_config_raw)) {
6000a012:	f3c1 0142 	ubfx	r1, r1, #1, #3
6000a016:	3901      	subs	r1, #1
6000a018:	2902      	cmp	r1, #2
6000a01a:	d8f3      	bhi.n	6000a004 <mcux_lpi2c_configure+0xc>
6000a01c:	4a10      	ldr	r2, [pc, #64]	; (6000a060 <mcux_lpi2c_configure+0x68>)
6000a01e:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a022:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
6000a026:	6883      	ldr	r3, [r0, #8]
6000a028:	68db      	ldr	r3, [r3, #12]
6000a02a:	2b00      	cmp	r3, #0
6000a02c:	d0ea      	beq.n	6000a004 <mcux_lpi2c_configure+0xc>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
6000a02e:	aa01      	add	r2, sp, #4
6000a030:	4798      	blx	r3
6000a032:	2800      	cmp	r0, #0
6000a034:	d1e6      	bne.n	6000a004 <mcux_lpi2c_configure+0xc>
	ret = k_sem_take(&data->lock, K_FOREVER);
6000a036:	3534      	adds	r5, #52	; 0x34
	return z_impl_k_sem_take(sem, timeout);
6000a038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000a03c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000a040:	4628      	mov	r0, r5
6000a042:	f003 fda7 	bl	6000db94 <z_impl_k_sem_take>
	if (ret) {
6000a046:	4604      	mov	r4, r0
6000a048:	2800      	cmp	r0, #0
6000a04a:	d1dd      	bne.n	6000a008 <mcux_lpi2c_configure+0x10>
	LPI2C_MasterSetBaudRate(base, clock_freq, baudrate);
6000a04c:	463a      	mov	r2, r7
6000a04e:	9901      	ldr	r1, [sp, #4]
6000a050:	4630      	mov	r0, r6
6000a052:	f009 fdb4 	bl	60013bbe <LPI2C_MasterSetBaudRate>
	z_impl_k_sem_give(sem);
6000a056:	4628      	mov	r0, r5
6000a058:	f003 fd5e 	bl	6000db18 <z_impl_k_sem_give>
}
6000a05c:	e7d4      	b.n	6000a008 <mcux_lpi2c_configure+0x10>
6000a05e:	bf00      	nop
6000a060:	60016768 	.word	0x60016768

6000a064 <mcux_lpi2c_init>:

	LPI2C_MasterTransferHandleIRQ(base, &data->handle);
}

static int mcux_lpi2c_init(const struct device *dev)
{
6000a064:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct mcux_lpi2c_config *config = dev->config;
6000a066:	6845      	ldr	r5, [r0, #4]
{
6000a068:	b091      	sub	sp, #68	; 0x44
6000a06a:	4606      	mov	r6, r0
	struct mcux_lpi2c_data *data = dev->data;
6000a06c:	6904      	ldr	r4, [r0, #16]
	LPI2C_Type *base = config->base;
6000a06e:	682f      	ldr	r7, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
6000a070:	2201      	movs	r2, #1
6000a072:	f104 0034 	add.w	r0, r4, #52	; 0x34
6000a076:	4611      	mov	r1, r2
6000a078:	f00a faeb 	bl	60014652 <z_impl_k_sem_init>
6000a07c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000a080:	2100      	movs	r1, #0
6000a082:	f104 0044 	add.w	r0, r4, #68	; 0x44
6000a086:	f00a fae4 	bl	60014652 <z_impl_k_sem_init>
	int error;

	k_sem_init(&data->lock, 1, 1);
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);

	if (!device_is_ready(config->clock_dev)) {
6000a08a:	6868      	ldr	r0, [r5, #4]
6000a08c:	f00a fa9b 	bl	600145c6 <z_device_is_ready>
6000a090:	4603      	mov	r3, r0
6000a092:	b970      	cbnz	r0, 6000a0b2 <mcux_lpi2c_init+0x4e>
		LOG_ERR("clock control device not ready");
6000a094:	4a38      	ldr	r2, [pc, #224]	; (6000a178 <mcux_lpi2c_init+0x114>)
6000a096:	920d      	str	r2, [sp, #52]	; 0x34
6000a098:	2202      	movs	r2, #2
6000a09a:	920c      	str	r2, [sp, #48]	; 0x30
		return -ENODEV;
6000a09c:	f06f 0412 	mvn.w	r4, #18
6000a0a0:	aa0c      	add	r2, sp, #48	; 0x30
6000a0a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a0a6:	4835      	ldr	r0, [pc, #212]	; (6000a17c <mcux_lpi2c_init+0x118>)
6000a0a8:	f7fc f8c8 	bl	6000623c <z_impl_z_log_msg_static_create>
#endif /* CONFIG_PINCTRL */

	config->irq_config_func(dev);

	return 0;
}
6000a0ac:	4620      	mov	r0, r4
6000a0ae:	b011      	add	sp, #68	; 0x44
6000a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a0b2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
	if (api->get_rate == NULL) {
6000a0b6:	6883      	ldr	r3, [r0, #8]
6000a0b8:	68db      	ldr	r3, [r3, #12]
6000a0ba:	b913      	cbnz	r3, 6000a0c2 <mcux_lpi2c_init+0x5e>
		return -EINVAL;
6000a0bc:	f06f 0415 	mvn.w	r4, #21
6000a0c0:	e7f4      	b.n	6000a0ac <mcux_lpi2c_init+0x48>
	return api->get_rate(dev, sys, rate);
6000a0c2:	aa01      	add	r2, sp, #4
6000a0c4:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a0c6:	2800      	cmp	r0, #0
6000a0c8:	d1f8      	bne.n	6000a0bc <mcux_lpi2c_init+0x58>
	LPI2C_MasterGetDefaultConfig(&master_config);
6000a0ca:	a808      	add	r0, sp, #32
6000a0cc:	f001 fa0e 	bl	6000b4ec <LPI2C_MasterGetDefaultConfig>
	master_config.busIdleTimeout_ns = config->bus_idle_timeout_ns;
6000a0d0:	696b      	ldr	r3, [r5, #20]
	LPI2C_MasterInit(base, &master_config, clock_freq);
6000a0d2:	9a01      	ldr	r2, [sp, #4]
6000a0d4:	a908      	add	r1, sp, #32
6000a0d6:	4638      	mov	r0, r7
	master_config.busIdleTimeout_ns = config->bus_idle_timeout_ns;
6000a0d8:	930b      	str	r3, [sp, #44]	; 0x2c
	LPI2C_MasterInit(base, &master_config, clock_freq);
6000a0da:	f001 fa1b 	bl	6000b514 <LPI2C_MasterInit>
	LPI2C_MasterTransferCreateHandle(base, &data->handle,
6000a0de:	4623      	mov	r3, r4
6000a0e0:	4a27      	ldr	r2, [pc, #156]	; (6000a180 <mcux_lpi2c_init+0x11c>)
6000a0e2:	4621      	mov	r1, r4
6000a0e4:	4638      	mov	r0, r7
6000a0e6:	f001 fa9b 	bl	6000b620 <LPI2C_MasterTransferCreateHandle>
	bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
6000a0ea:	692b      	ldr	r3, [r5, #16]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
6000a0ec:	4a25      	ldr	r2, [pc, #148]	; (6000a184 <mcux_lpi2c_init+0x120>)
6000a0ee:	4293      	cmp	r3, r2
6000a0f0:	d039      	beq.n	6000a166 <mcux_lpi2c_init+0x102>
6000a0f2:	d82d      	bhi.n	6000a150 <mcux_lpi2c_init+0xec>
6000a0f4:	4a24      	ldr	r2, [pc, #144]	; (6000a188 <mcux_lpi2c_init+0x124>)
6000a0f6:	4293      	cmp	r3, r2
6000a0f8:	d037      	beq.n	6000a16a <mcux_lpi2c_init+0x106>
6000a0fa:	4a24      	ldr	r2, [pc, #144]	; (6000a18c <mcux_lpi2c_init+0x128>)
6000a0fc:	4293      	cmp	r3, r2
6000a0fe:	d036      	beq.n	6000a16e <mcux_lpi2c_init+0x10a>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
6000a100:	4b23      	ldr	r3, [pc, #140]	; (6000a190 <mcux_lpi2c_init+0x12c>)
6000a102:	9307      	str	r3, [sp, #28]
6000a104:	2302      	movs	r3, #2
6000a106:	9306      	str	r3, [sp, #24]
6000a108:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a10c:	2300      	movs	r3, #0
6000a10e:	aa06      	add	r2, sp, #24
6000a110:	481a      	ldr	r0, [pc, #104]	; (6000a17c <mcux_lpi2c_init+0x118>)
6000a112:	f7fc f893 	bl	6000623c <z_impl_z_log_msg_static_create>

	return 0;
6000a116:	2100      	movs	r1, #0
	error = mcux_lpi2c_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
6000a118:	f041 0110 	orr.w	r1, r1, #16
6000a11c:	4630      	mov	r0, r6
6000a11e:	f7ff ff6b 	bl	60009ff8 <mcux_lpi2c_configure>
	if (error) {
6000a122:	4604      	mov	r4, r0
6000a124:	2800      	cmp	r0, #0
6000a126:	d1c1      	bne.n	6000a0ac <mcux_lpi2c_init+0x48>
	ret = pinctrl_lookup_state(config, id, &state);
6000a128:	4601      	mov	r1, r0
6000a12a:	aa02      	add	r2, sp, #8
6000a12c:	69a8      	ldr	r0, [r5, #24]
6000a12e:	f009 fcc0 	bl	60013ab2 <pinctrl_lookup_state>
	if (ret < 0) {
6000a132:	1e04      	subs	r4, r0, #0
6000a134:	dbba      	blt.n	6000a0ac <mcux_lpi2c_init+0x48>
	return pinctrl_apply_state_direct(config, state);
6000a136:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000a138:	2200      	movs	r2, #0
6000a13a:	7919      	ldrb	r1, [r3, #4]
6000a13c:	6818      	ldr	r0, [r3, #0]
6000a13e:	f009 fccb 	bl	60013ad8 <pinctrl_configure_pins>
	if (error) {
6000a142:	4604      	mov	r4, r0
6000a144:	2800      	cmp	r0, #0
6000a146:	d1b1      	bne.n	6000a0ac <mcux_lpi2c_init+0x48>
	config->irq_config_func(dev);
6000a148:	68eb      	ldr	r3, [r5, #12]
6000a14a:	4630      	mov	r0, r6
6000a14c:	4798      	blx	r3
	return 0;
6000a14e:	e7ad      	b.n	6000a0ac <mcux_lpi2c_init+0x48>
	switch (bitrate) {
6000a150:	4a10      	ldr	r2, [pc, #64]	; (6000a194 <mcux_lpi2c_init+0x130>)
6000a152:	4293      	cmp	r3, r2
6000a154:	d00d      	beq.n	6000a172 <mcux_lpi2c_init+0x10e>
6000a156:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
6000a15a:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
6000a15e:	4293      	cmp	r3, r2
6000a160:	d1ce      	bne.n	6000a100 <mcux_lpi2c_init+0x9c>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
6000a162:	210a      	movs	r1, #10
6000a164:	e7d8      	b.n	6000a118 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
6000a166:	2106      	movs	r1, #6
6000a168:	e7d6      	b.n	6000a118 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
6000a16a:	2102      	movs	r1, #2
6000a16c:	e7d4      	b.n	6000a118 <mcux_lpi2c_init+0xb4>
	switch (bitrate) {
6000a16e:	2104      	movs	r1, #4
6000a170:	e7d2      	b.n	6000a118 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
6000a172:	2108      	movs	r1, #8
6000a174:	e7d0      	b.n	6000a118 <mcux_lpi2c_init+0xb4>
6000a176:	bf00      	nop
6000a178:	600187bb 	.word	0x600187bb
6000a17c:	600150b4 	.word	0x600150b4
6000a180:	60013639 	.word	0x60013639
6000a184:	000f4240 	.word	0x000f4240
6000a188:	000186a0 	.word	0x000186a0
6000a18c:	00061a80 	.word	0x00061a80
6000a190:	600187da 	.word	0x600187da
6000a194:	0033e140 	.word	0x0033e140

6000a198 <pwm_mcux_init>:

	return 0;
}

static int pwm_mcux_init(const struct device *dev)
{
6000a198:	b570      	push	{r4, r5, r6, lr}
	const struct pwm_mcux_config *config = dev->config;
6000a19a:	6844      	ldr	r4, [r0, #4]
{
6000a19c:	b08a      	sub	sp, #40	; 0x28
	struct pwm_mcux_data *data = dev->data;
6000a19e:	6905      	ldr	r5, [r0, #16]
	pwm_config_t pwm_config;
	status_t status;
	int i, err;

	if (!device_is_ready(config->clock_dev)) {
6000a1a0:	68a0      	ldr	r0, [r4, #8]
6000a1a2:	f00a fa10 	bl	600145c6 <z_device_is_ready>
6000a1a6:	4603      	mov	r3, r0
6000a1a8:	b968      	cbnz	r0, 6000a1c6 <pwm_mcux_init+0x2e>
		LOG_ERR("clock control device not ready");
6000a1aa:	4a27      	ldr	r2, [pc, #156]	; (6000a248 <pwm_mcux_init+0xb0>)
6000a1ac:	9209      	str	r2, [sp, #36]	; 0x24
6000a1ae:	2202      	movs	r2, #2
6000a1b0:	9208      	str	r2, [sp, #32]
6000a1b2:	4826      	ldr	r0, [pc, #152]	; (6000a24c <pwm_mcux_init+0xb4>)
6000a1b4:	aa08      	add	r2, sp, #32
6000a1b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a1ba:	f7fc f83f 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -ENODEV;
6000a1be:	f06f 0012 	mvn.w	r0, #18
	data->channel[0].level = kPWM_HighTrue;
	data->channel[1].pwmChannel = kPWM_PwmB;
	data->channel[1].level = kPWM_HighTrue;

	return 0;
}
6000a1c2:	b00a      	add	sp, #40	; 0x28
6000a1c4:	bd70      	pop	{r4, r5, r6, pc}
	ret = pinctrl_lookup_state(config, id, &state);
6000a1c6:	aa04      	add	r2, sp, #16
6000a1c8:	2100      	movs	r1, #0
6000a1ca:	69a0      	ldr	r0, [r4, #24]
6000a1cc:	f009 fc71 	bl	60013ab2 <pinctrl_lookup_state>
	if (ret < 0) {
6000a1d0:	2800      	cmp	r0, #0
6000a1d2:	dbf6      	blt.n	6000a1c2 <pwm_mcux_init+0x2a>
	return pinctrl_apply_state_direct(config, state);
6000a1d4:	9b04      	ldr	r3, [sp, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000a1d6:	2200      	movs	r2, #0
6000a1d8:	7919      	ldrb	r1, [r3, #4]
6000a1da:	6818      	ldr	r0, [r3, #0]
6000a1dc:	f009 fc7c 	bl	60013ad8 <pinctrl_configure_pins>
	if (err < 0) {
6000a1e0:	2800      	cmp	r0, #0
6000a1e2:	dbee      	blt.n	6000a1c2 <pwm_mcux_init+0x2a>
	PWM_GetDefaultConfig(&pwm_config);
6000a1e4:	a801      	add	r0, sp, #4
	pwm_config.clockSource = kPWM_BusClock;
6000a1e6:	2600      	movs	r6, #0
	PWM_GetDefaultConfig(&pwm_config);
6000a1e8:	f001 fea8 	bl	6000bf3c <PWM_GetDefaultConfig>
	pwm_config.prescale = config->prescale;
6000a1ec:	7c23      	ldrb	r3, [r4, #16]
	pwm_config.clockSource = kPWM_BusClock;
6000a1ee:	f88d 6007 	strb.w	r6, [sp, #7]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000a1f2:	aa01      	add	r2, sp, #4
	pwm_config.prescale = config->prescale;
6000a1f4:	f88d 3008 	strb.w	r3, [sp, #8]
	pwm_config.reloadLogic = config->reload;
6000a1f8:	7c63      	ldrb	r3, [r4, #17]
6000a1fa:	f88d 300a 	strb.w	r3, [sp, #10]
	pwm_config.enableDebugMode = config->run_debug;
6000a1fe:	7d23      	ldrb	r3, [r4, #20]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000a200:	7921      	ldrb	r1, [r4, #4]
	pwm_config.enableDebugMode = config->run_debug;
6000a202:	f88d 3004 	strb.w	r3, [sp, #4]
	pwm_config.enableWait = config->run_wait;
6000a206:	7ce3      	ldrb	r3, [r4, #19]
6000a208:	f88d 3005 	strb.w	r3, [sp, #5]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000a20c:	6820      	ldr	r0, [r4, #0]
6000a20e:	f001 fdf3 	bl	6000bdf8 <PWM_Init>
	if (status != kStatus_Success) {
6000a212:	b168      	cbz	r0, 6000a230 <pwm_mcux_init+0x98>
		LOG_ERR("Unable to init PWM");
6000a214:	4b0e      	ldr	r3, [pc, #56]	; (6000a250 <pwm_mcux_init+0xb8>)
6000a216:	9309      	str	r3, [sp, #36]	; 0x24
6000a218:	2302      	movs	r3, #2
6000a21a:	9308      	str	r3, [sp, #32]
6000a21c:	480b      	ldr	r0, [pc, #44]	; (6000a24c <pwm_mcux_init+0xb4>)
6000a21e:	4633      	mov	r3, r6
6000a220:	aa08      	add	r2, sp, #32
6000a222:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a226:	f7fc f809 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -EIO;
6000a22a:	f06f 0004 	mvn.w	r0, #4
6000a22e:	e7c8      	b.n	6000a1c2 <pwm_mcux_init+0x2a>
		config->base->SM[config->index].DISMAP[i] = 0x0000;
6000a230:	6823      	ldr	r3, [r4, #0]
6000a232:	2160      	movs	r1, #96	; 0x60
6000a234:	7922      	ldrb	r2, [r4, #4]
6000a236:	fb01 3302 	mla	r3, r1, r2, r3
6000a23a:	8598      	strh	r0, [r3, #44]	; 0x2c
	data->channel[0].pwmChannel = kPWM_PwmA;
6000a23c:	2301      	movs	r3, #1
	data->channel[0].level = kPWM_HighTrue;
6000a23e:	72a8      	strb	r0, [r5, #10]
	data->channel[0].pwmChannel = kPWM_PwmA;
6000a240:	722b      	strb	r3, [r5, #8]
	data->channel[1].pwmChannel = kPWM_PwmB;
6000a242:	7428      	strb	r0, [r5, #16]
	data->channel[1].level = kPWM_HighTrue;
6000a244:	74a8      	strb	r0, [r5, #18]
	return 0;
6000a246:	e7bc      	b.n	6000a1c2 <pwm_mcux_init+0x2a>
6000a248:	600187bb 	.word	0x600187bb
6000a24c:	600150cc 	.word	0x600150cc
6000a250:	6001880d 	.word	0x6001880d

6000a254 <mcux_pwm_set_cycles>:
{
6000a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (channel >= CHANNEL_COUNT) {
6000a258:	2901      	cmp	r1, #1
{
6000a25a:	b08d      	sub	sp, #52	; 0x34
6000a25c:	460d      	mov	r5, r1
6000a25e:	4616      	mov	r6, r2
6000a260:	af04      	add	r7, sp, #16
	const struct pwm_mcux_config *config = dev->config;
6000a262:	6844      	ldr	r4, [r0, #4]
	struct pwm_mcux_data *data = dev->data;
6000a264:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (channel >= CHANNEL_COUNT) {
6000a268:	d90e      	bls.n	6000a288 <mcux_pwm_set_cycles+0x34>
		LOG_ERR("Invalid channel");
6000a26a:	4b60      	ldr	r3, [pc, #384]	; (6000a3ec <mcux_pwm_set_cycles+0x198>)
6000a26c:	61fb      	str	r3, [r7, #28]
6000a26e:	2302      	movs	r3, #2
6000a270:	61bb      	str	r3, [r7, #24]
6000a272:	2300      	movs	r3, #0
6000a274:	f107 0218 	add.w	r2, r7, #24
6000a278:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a27c:	485c      	ldr	r0, [pc, #368]	; (6000a3f0 <mcux_pwm_set_cycles+0x19c>)
6000a27e:	f7fb ffdd 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -EINVAL;
6000a282:	f06f 0015 	mvn.w	r0, #21
6000a286:	e00e      	b.n	6000a2a6 <mcux_pwm_set_cycles+0x52>
	if (period_cycles == 0) {
6000a288:	b98a      	cbnz	r2, 6000a2ae <mcux_pwm_set_cycles+0x5a>
		LOG_ERR("Channel can not be set to inactive level");
6000a28a:	4b5a      	ldr	r3, [pc, #360]	; (6000a3f4 <mcux_pwm_set_cycles+0x1a0>)
6000a28c:	61fb      	str	r3, [r7, #28]
6000a28e:	2302      	movs	r3, #2
6000a290:	61bb      	str	r3, [r7, #24]
6000a292:	4613      	mov	r3, r2
6000a294:	4856      	ldr	r0, [pc, #344]	; (6000a3f0 <mcux_pwm_set_cycles+0x19c>)
6000a296:	f107 0218 	add.w	r2, r7, #24
6000a29a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a29e:	f7fb ffcd 	bl	6000623c <z_impl_z_log_msg_static_create>
			return -ENOTSUP;
6000a2a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
6000a2a6:	3724      	adds	r7, #36	; 0x24
6000a2a8:	46bd      	mov	sp, r7
6000a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (period_cycles > UINT16_MAX) {
6000a2ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
6000a2b2:	d310      	bcc.n	6000a2d6 <mcux_pwm_set_cycles+0x82>
		LOG_ERR("Too long period (%u), adjust pwm prescaler!",
6000a2b4:	466c      	mov	r4, sp
6000a2b6:	b088      	sub	sp, #32
6000a2b8:	aa04      	add	r2, sp, #16
6000a2ba:	4b4f      	ldr	r3, [pc, #316]	; (6000a3f8 <mcux_pwm_set_cycles+0x1a4>)
6000a2bc:	e9c2 3605 	strd	r3, r6, [r2, #20]
6000a2c0:	2303      	movs	r3, #3
6000a2c2:	f842 3f10 	str.w	r3, [r2, #16]!
6000a2c6:	2300      	movs	r3, #0
6000a2c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000a2cc:	4848      	ldr	r0, [pc, #288]	; (6000a3f0 <mcux_pwm_set_cycles+0x19c>)
6000a2ce:	f7fb ffb5 	bl	6000623c <z_impl_z_log_msg_static_create>
6000a2d2:	46a5      	mov	sp, r4
		return -EINVAL;
6000a2d4:	e7d5      	b.n	6000a282 <mcux_pwm_set_cycles+0x2e>
	duty_cycle = 100 * pulse_cycles / period_cycles;
6000a2d6:	2264      	movs	r2, #100	; 0x64
6000a2d8:	f8b7 b048 	ldrh.w	fp, [r7, #72]	; 0x48
6000a2dc:	fb02 f803 	mul.w	r8, r2, r3
	if (period_cycles != data->period_cycles[channel]
6000a2e0:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
6000a2e4:	f00b 0b01 	and.w	fp, fp, #1
6000a2e8:	42b3      	cmp	r3, r6
	duty_cycle = 100 * pulse_cycles / period_cycles;
6000a2ea:	fbb8 f8f6 	udiv	r8, r8, r6
6000a2ee:	fa5f f888 	uxtb.w	r8, r8
	if (period_cycles != data->period_cycles[channel]
6000a2f2:	d104      	bne.n	6000a2fe <mcux_pwm_set_cycles+0xaa>
	    || level != data->channel[channel].level) {
6000a2f4:	eb0a 03c1 	add.w	r3, sl, r1, lsl #3
6000a2f8:	7a9b      	ldrb	r3, [r3, #10]
6000a2fa:	455b      	cmp	r3, fp
6000a2fc:	d05e      	beq.n	6000a3bc <mcux_pwm_set_cycles+0x168>
		data->period_cycles[channel] = period_cycles;
6000a2fe:	f84a 6025 	str.w	r6, [sl, r5, lsl #2]
		if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a302:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	if (api->get_rate == NULL) {
6000a306:	6883      	ldr	r3, [r0, #8]
6000a308:	68db      	ldr	r3, [r3, #12]
6000a30a:	2b00      	cmp	r3, #0
6000a30c:	d0b9      	beq.n	6000a282 <mcux_pwm_set_cycles+0x2e>
	return api->get_rate(dev, sys, rate);
6000a30e:	1d3a      	adds	r2, r7, #4
6000a310:	4798      	blx	r3
6000a312:	4681      	mov	r9, r0
6000a314:	2800      	cmp	r0, #0
6000a316:	d1b4      	bne.n	6000a282 <mcux_pwm_set_cycles+0x2e>
		pwm_freq = (clock_freq >> config->prescale) / period_cycles;
6000a318:	6879      	ldr	r1, [r7, #4]
6000a31a:	7c23      	ldrb	r3, [r4, #16]
6000a31c:	fa21 f303 	lsr.w	r3, r1, r3
		if (pwm_freq == 0) {
6000a320:	429e      	cmp	r6, r3
		pwm_freq = (clock_freq >> config->prescale) / period_cycles;
6000a322:	fbb3 f0f6 	udiv	r0, r3, r6
		if (pwm_freq == 0) {
6000a326:	d906      	bls.n	6000a336 <mcux_pwm_set_cycles+0xe2>
			LOG_ERR("Could not set up pwm_freq=%d", pwm_freq);
6000a328:	466c      	mov	r4, sp
6000a32a:	b088      	sub	sp, #32
6000a32c:	aa04      	add	r2, sp, #16
6000a32e:	4b33      	ldr	r3, [pc, #204]	; (6000a3fc <mcux_pwm_set_cycles+0x1a8>)
6000a330:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000a334:	e7c4      	b.n	6000a2c0 <mcux_pwm_set_cycles+0x6c>
		PWM_StopTimer(config->base, 1U << config->index);
6000a336:	7923      	ldrb	r3, [r4, #4]
6000a338:	2601      	movs	r6, #1
6000a33a:	f8d4 c000 	ldr.w	ip, [r4]
 * @param subModulesToStop PWM submodules to stop. This is a logical OR of members of the
 *                         enumeration ::pwm_module_control_t
 */
static inline void PWM_StopTimer(PWM_Type *base, uint8_t subModulesToStop)
{
    base->MCTRL &= ~(PWM_MCTRL_RUN(subModulesToStop));
6000a33e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
6000a342:	fa06 f303 	lsl.w	r3, r6, r3
6000a346:	f8bc 2188 	ldrh.w	r2, [ip, #392]	; 0x188
6000a34a:	021b      	lsls	r3, r3, #8
6000a34c:	b292      	uxth	r2, r2
6000a34e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
6000a352:	ea22 0203 	bic.w	r2, r2, r3
6000a356:	f8ac 2188 	strh.w	r2, [ip, #392]	; 0x188
		status = PWM_SetupPwm(config->base, config->index,
6000a35a:	f10a 0208 	add.w	r2, sl, #8
		data->channel[channel].dutyCyclePercent = duty_cycle;
6000a35e:	f885 8009 	strb.w	r8, [r5, #9]
		data->channel[channel].level = level;
6000a362:	f885 b00a 	strb.w	fp, [r5, #10]
		status = PWM_SetupPwm(config->base, config->index,
6000a366:	7925      	ldrb	r5, [r4, #4]
6000a368:	e9cd 0101 	strd	r0, r1, [sp, #4]
6000a36c:	7ca3      	ldrb	r3, [r4, #18]
6000a36e:	4629      	mov	r1, r5
6000a370:	9300      	str	r3, [sp, #0]
6000a372:	2302      	movs	r3, #2
6000a374:	6820      	ldr	r0, [r4, #0]
6000a376:	f001 fdfb 	bl	6000bf70 <PWM_SetupPwm>
		if (status != kStatus_Success) {
6000a37a:	b128      	cbz	r0, 6000a388 <mcux_pwm_set_cycles+0x134>
			LOG_ERR("Could not set up pwm");
6000a37c:	4b20      	ldr	r3, [pc, #128]	; (6000a400 <mcux_pwm_set_cycles+0x1ac>)
6000a37e:	61fb      	str	r3, [r7, #28]
6000a380:	2302      	movs	r3, #2
6000a382:	61bb      	str	r3, [r7, #24]
6000a384:	464b      	mov	r3, r9
6000a386:	e785      	b.n	6000a294 <mcux_pwm_set_cycles+0x40>
		PWM_SetPwmLdok(config->base, 1U << config->index, true);
6000a388:	6821      	ldr	r1, [r4, #0]
6000a38a:	7922      	ldrb	r2, [r4, #4]
 */
static inline void PWM_SetPwmLdok(PWM_Type *base, uint8_t subModulesToUpdate, bool value)
{
    if (value)
    {
        base->MCTRL |= PWM_MCTRL_LDOK(subModulesToUpdate);
6000a38c:	f8b1 3188 	ldrh.w	r3, [r1, #392]	; 0x188
6000a390:	fa06 f202 	lsl.w	r2, r6, r2
6000a394:	b29b      	uxth	r3, r3
6000a396:	f002 020f 	and.w	r2, r2, #15
6000a39a:	4313      	orrs	r3, r2
6000a39c:	f8a1 3188 	strh.w	r3, [r1, #392]	; 0x188
		PWM_StartTimer(config->base, 1U << config->index);
6000a3a0:	7921      	ldrb	r1, [r4, #4]
6000a3a2:	6822      	ldr	r2, [r4, #0]
6000a3a4:	408e      	lsls	r6, r1
    base->MCTRL |= PWM_MCTRL_RUN(subModulesToStart);
6000a3a6:	f8b2 3188 	ldrh.w	r3, [r2, #392]	; 0x188
6000a3aa:	0236      	lsls	r6, r6, #8
6000a3ac:	b29b      	uxth	r3, r3
6000a3ae:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
6000a3b2:	4333      	orrs	r3, r6
6000a3b4:	f8a2 3188 	strh.w	r3, [r2, #392]	; 0x188
	return 0;
6000a3b8:	2000      	movs	r0, #0
6000a3ba:	e774      	b.n	6000a2a6 <mcux_pwm_set_cycles+0x52>
		PWM_UpdatePwmDutycycle(config->base, config->index,
6000a3bc:	f081 0201 	eor.w	r2, r1, #1
6000a3c0:	7ca3      	ldrb	r3, [r4, #18]
6000a3c2:	7921      	ldrb	r1, [r4, #4]
6000a3c4:	b2d2      	uxtb	r2, r2
6000a3c6:	f8cd 8000 	str.w	r8, [sp]
6000a3ca:	6820      	ldr	r0, [r4, #0]
6000a3cc:	f002 f904 	bl	6000c5d8 <PWM_UpdatePwmDutycycle>
		PWM_SetPwmLdok(config->base, 1U << config->index, true);
6000a3d0:	6821      	ldr	r1, [r4, #0]
6000a3d2:	7920      	ldrb	r0, [r4, #4]
6000a3d4:	2201      	movs	r2, #1
        base->MCTRL |= PWM_MCTRL_LDOK(subModulesToUpdate);
6000a3d6:	f8b1 3188 	ldrh.w	r3, [r1, #392]	; 0x188
6000a3da:	4082      	lsls	r2, r0
6000a3dc:	b29b      	uxth	r3, r3
6000a3de:	f002 020f 	and.w	r2, r2, #15
6000a3e2:	4313      	orrs	r3, r2
6000a3e4:	f8a1 3188 	strh.w	r3, [r1, #392]	; 0x188
6000a3e8:	e7e6      	b.n	6000a3b8 <mcux_pwm_set_cycles+0x164>
6000a3ea:	bf00      	nop
6000a3ec:	60018820 	.word	0x60018820
6000a3f0:	600150cc 	.word	0x600150cc
6000a3f4:	60018830 	.word	0x60018830
6000a3f8:	60018859 	.word	0x60018859
6000a3fc:	60018885 	.word	0x60018885
6000a400:	600188a2 	.word	0x600188a2

6000a404 <ina219_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL &&
6000a404:	2939      	cmp	r1, #57	; 0x39
{
6000a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000a40a:	4605      	mov	r5, r0
6000a40c:	b088      	sub	sp, #32
6000a40e:	460e      	mov	r6, r1
	struct ina219_data *data = dev->data;
6000a410:	6907      	ldr	r7, [r0, #16]
	if (chan != SENSOR_CHAN_ALL &&
6000a412:	d004      	beq.n	6000a41e <ina219_sample_fetch+0x1a>
6000a414:	f1a1 031e 	sub.w	r3, r1, #30
6000a418:	2b02      	cmp	r3, #2
6000a41a:	f200 809d 	bhi.w	6000a558 <ina219_sample_fetch+0x154>
	rc = ina219_reg_read(dev, addr, &reg_data);
6000a41e:	aa02      	add	r2, sp, #8
6000a420:	2100      	movs	r1, #0
6000a422:	6868      	ldr	r0, [r5, #4]
6000a424:	f009 f926 	bl	60013674 <ina219_reg_read.isra.0>
	if (rc) {
6000a428:	4604      	mov	r4, r0
6000a42a:	b960      	cbnz	r0, 6000a446 <ina219_sample_fetch+0x42>
	reg_data = (reg_data & ~mask) | field;
6000a42c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	return ina219_reg_write(dev, addr, reg_data);
6000a430:	4601      	mov	r1, r0
6000a432:	6868      	ldr	r0, [r5, #4]
	reg_data = (reg_data & ~mask) | field;
6000a434:	f022 0207 	bic.w	r2, r2, #7
6000a438:	f042 0203 	orr.w	r2, r2, #3
	return ina219_reg_write(dev, addr, reg_data);
6000a43c:	b292      	uxth	r2, r2
6000a43e:	f009 f93a 	bl	600136b6 <ina219_reg_write.isra.0>
	if (rc) {
6000a442:	4604      	mov	r4, r0
6000a444:	b168      	cbz	r0, 6000a462 <ina219_sample_fetch+0x5e>
		LOG_ERR("Failed to start measurement.");
6000a446:	4b46      	ldr	r3, [pc, #280]	; (6000a560 <ina219_sample_fetch+0x15c>)
		LOG_ERR("Failed to read device status.");
6000a448:	9307      	str	r3, [sp, #28]
6000a44a:	2302      	movs	r3, #2
6000a44c:	aa06      	add	r2, sp, #24
6000a44e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a452:	4844      	ldr	r0, [pc, #272]	; (6000a564 <ina219_sample_fetch+0x160>)
6000a454:	9306      	str	r3, [sp, #24]
6000a456:	f009 f90a 	bl	6001366e <z_log_msg_static_create.constprop.0>
}
6000a45a:	4620      	mov	r0, r4
6000a45c:	b008      	add	sp, #32
6000a45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_sleep(K_USEC(data->msr_delay));
6000a462:	68f8      	ldr	r0, [r7, #12]
6000a464:	2264      	movs	r2, #100	; 0x64
6000a466:	2300      	movs	r3, #0
		t += off;
6000a468:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
6000a46a:	f144 0100 	adc.w	r1, r4, #0
6000a46e:	f7f8 ff89 	bl	60003384 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
6000a472:	f004 ffbf 	bl	6000f3f4 <z_impl_k_sleep>
	rc = ina219_reg_read(dev, INA219_REG_V_BUS, &status);
6000a476:	aa01      	add	r2, sp, #4
6000a478:	2102      	movs	r1, #2
6000a47a:	6868      	ldr	r0, [r5, #4]
6000a47c:	f009 f8fa 	bl	60013674 <ina219_reg_read.isra.0>
	if (rc) {
6000a480:	4604      	mov	r4, r0
6000a482:	b1c0      	cbz	r0, 6000a4b6 <ina219_sample_fetch+0xb2>
		LOG_ERR("Failed to read device status.");
6000a484:	4b38      	ldr	r3, [pc, #224]	; (6000a568 <ina219_sample_fetch+0x164>)
6000a486:	e7df      	b.n	6000a448 <ina219_sample_fetch+0x44>
		rc = ina219_reg_read(dev, INA219_REG_V_BUS, &status);
6000a488:	aa01      	add	r2, sp, #4
6000a48a:	2102      	movs	r1, #2
6000a48c:	6868      	ldr	r0, [r5, #4]
6000a48e:	f009 f8f1 	bl	60013674 <ina219_reg_read.isra.0>
		if (rc) {
6000a492:	4680      	mov	r8, r0
6000a494:	b158      	cbz	r0, 6000a4ae <ina219_sample_fetch+0xaa>
			LOG_ERR("Failed to read device status.");
6000a496:	4b34      	ldr	r3, [pc, #208]	; (6000a568 <ina219_sample_fetch+0x164>)
			LOG_ERR("Error reading bus voltage.");
6000a498:	9307      	str	r3, [sp, #28]
6000a49a:	2302      	movs	r3, #2
6000a49c:	aa06      	add	r2, sp, #24
6000a49e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a4a2:	4830      	ldr	r0, [pc, #192]	; (6000a564 <ina219_sample_fetch+0x160>)
			return rc;
6000a4a4:	4644      	mov	r4, r8
			LOG_ERR("Error reading bus voltage.");
6000a4a6:	9306      	str	r3, [sp, #24]
6000a4a8:	f009 f8e1 	bl	6001366e <z_log_msg_static_create.constprop.0>
			return rc;
6000a4ac:	e7d5      	b.n	6000a45a <ina219_sample_fetch+0x56>
6000a4ae:	2001      	movs	r0, #1
6000a4b0:	2100      	movs	r1, #0
6000a4b2:	f004 ff9f 	bl	6000f3f4 <z_impl_k_sleep>
	while (!(INA219_CNVR_RDY(status))) {
6000a4b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
6000a4ba:	079a      	lsls	r2, r3, #30
6000a4bc:	d5e4      	bpl.n	6000a488 <ina219_sample_fetch+0x84>
	if (INA219_OVF_STATUS(status)) {
6000a4be:	07db      	lsls	r3, r3, #31
6000a4c0:	d509      	bpl.n	6000a4d6 <ina219_sample_fetch+0xd2>
		LOG_WRN("Power and/or Current calculations are out of range.");
6000a4c2:	4b2a      	ldr	r3, [pc, #168]	; (6000a56c <ina219_sample_fetch+0x168>)
6000a4c4:	aa06      	add	r2, sp, #24
6000a4c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000a4ca:	4826      	ldr	r0, [pc, #152]	; (6000a564 <ina219_sample_fetch+0x160>)
6000a4cc:	9307      	str	r3, [sp, #28]
6000a4ce:	2302      	movs	r3, #2
6000a4d0:	9306      	str	r3, [sp, #24]
6000a4d2:	f009 f8cc 	bl	6001366e <z_log_msg_static_create.constprop.0>
	if (chan == SENSOR_CHAN_ALL ||
6000a4d6:	2e39      	cmp	r6, #57	; 0x39
6000a4d8:	d00d      	beq.n	6000a4f6 <ina219_sample_fetch+0xf2>
6000a4da:	2e1e      	cmp	r6, #30
6000a4dc:	d00b      	beq.n	6000a4f6 <ina219_sample_fetch+0xf2>
	if (chan == SENSOR_CHAN_ALL ||
6000a4de:	2e20      	cmp	r6, #32
6000a4e0:	d120      	bne.n	6000a524 <ina219_sample_fetch+0x120>
		rc = ina219_reg_read(dev, INA219_REG_POWER, &tmp);
6000a4e2:	f10d 0206 	add.w	r2, sp, #6
6000a4e6:	2103      	movs	r1, #3
6000a4e8:	6868      	ldr	r0, [r5, #4]
6000a4ea:	f009 f8c3 	bl	60013674 <ina219_reg_read.isra.0>
		if (rc) {
6000a4ee:	4680      	mov	r8, r0
6000a4f0:	b198      	cbz	r0, 6000a51a <ina219_sample_fetch+0x116>
			LOG_ERR("Error reading power register.");
6000a4f2:	4b1f      	ldr	r3, [pc, #124]	; (6000a570 <ina219_sample_fetch+0x16c>)
6000a4f4:	e7d0      	b.n	6000a498 <ina219_sample_fetch+0x94>
		rc = ina219_reg_read(dev, INA219_REG_V_BUS, &tmp);
6000a4f6:	f10d 0206 	add.w	r2, sp, #6
6000a4fa:	2102      	movs	r1, #2
6000a4fc:	6868      	ldr	r0, [r5, #4]
6000a4fe:	f009 f8b9 	bl	60013674 <ina219_reg_read.isra.0>
		if (rc) {
6000a502:	4680      	mov	r8, r0
6000a504:	b108      	cbz	r0, 6000a50a <ina219_sample_fetch+0x106>
			LOG_ERR("Error reading bus voltage.");
6000a506:	4b1b      	ldr	r3, [pc, #108]	; (6000a574 <ina219_sample_fetch+0x170>)
6000a508:	e7c6      	b.n	6000a498 <ina219_sample_fetch+0x94>
		data->v_bus = INA219_VBUS_GET(tmp);
6000a50a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (chan == SENSOR_CHAN_ALL ||
6000a50e:	2e39      	cmp	r6, #57	; 0x39
		data->v_bus = INA219_VBUS_GET(tmp);
6000a510:	ea4f 03d3 	mov.w	r3, r3, lsr #3
6000a514:	807b      	strh	r3, [r7, #2]
	if (chan == SENSOR_CHAN_ALL ||
6000a516:	d0e4      	beq.n	6000a4e2 <ina219_sample_fetch+0xde>
6000a518:	e7e1      	b.n	6000a4de <ina219_sample_fetch+0xda>
		data->power = tmp;
6000a51a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (chan == SENSOR_CHAN_ALL ||
6000a51e:	2e39      	cmp	r6, #57	; 0x39
		data->power = tmp;
6000a520:	80bb      	strh	r3, [r7, #4]
	if (chan == SENSOR_CHAN_ALL ||
6000a522:	d001      	beq.n	6000a528 <ina219_sample_fetch+0x124>
6000a524:	2e1f      	cmp	r6, #31
6000a526:	d198      	bne.n	6000a45a <ina219_sample_fetch+0x56>
		rc = ina219_reg_read(dev, INA219_REG_CURRENT, &tmp);
6000a528:	6868      	ldr	r0, [r5, #4]
6000a52a:	f10d 0206 	add.w	r2, sp, #6
6000a52e:	2104      	movs	r1, #4
6000a530:	f009 f8a0 	bl	60013674 <ina219_reg_read.isra.0>
		if (rc) {
6000a534:	4605      	mov	r5, r0
6000a536:	b158      	cbz	r0, 6000a550 <ina219_sample_fetch+0x14c>
			LOG_ERR("Error reading current register.");
6000a538:	4b0f      	ldr	r3, [pc, #60]	; (6000a578 <ina219_sample_fetch+0x174>)
6000a53a:	aa06      	add	r2, sp, #24
6000a53c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a540:	4808      	ldr	r0, [pc, #32]	; (6000a564 <ina219_sample_fetch+0x160>)
6000a542:	9307      	str	r3, [sp, #28]
6000a544:	2302      	movs	r3, #2
			return rc;
6000a546:	462c      	mov	r4, r5
			LOG_ERR("Error reading current register.");
6000a548:	9306      	str	r3, [sp, #24]
6000a54a:	f009 f890 	bl	6001366e <z_log_msg_static_create.constprop.0>
			return rc;
6000a54e:	e784      	b.n	6000a45a <ina219_sample_fetch+0x56>
		data->current = tmp;
6000a550:	f8bd 3006 	ldrh.w	r3, [sp, #6]
6000a554:	80fb      	strh	r3, [r7, #6]
6000a556:	e780      	b.n	6000a45a <ina219_sample_fetch+0x56>
		return -ENOTSUP;
6000a558:	f06f 0485 	mvn.w	r4, #133	; 0x85
6000a55c:	e77d      	b.n	6000a45a <ina219_sample_fetch+0x56>
6000a55e:	bf00      	nop
6000a560:	600188ca 	.word	0x600188ca
6000a564:	6001506c 	.word	0x6001506c
6000a568:	600188e7 	.word	0x600188e7
6000a56c:	60018905 	.word	0x60018905
6000a570:	60018954 	.word	0x60018954
6000a574:	60018939 	.word	0x60018939
6000a578:	60018972 	.word	0x60018972

6000a57c <ina219_init>:
				reg_val);
}
#endif /* CONFIG_PM_DEVICE */

static int ina219_init(const struct device *dev)
{
6000a57c:	b530      	push	{r4, r5, lr}
	const struct ina219_config *cfg = dev->config;
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
6000a57e:	6843      	ldr	r3, [r0, #4]
{
6000a580:	b087      	sub	sp, #28
6000a582:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->bus.bus)) {
6000a584:	6818      	ldr	r0, [r3, #0]
6000a586:	f00a f81e 	bl	600145c6 <z_device_is_ready>
6000a58a:	b970      	cbnz	r0, 6000a5aa <ina219_init+0x2e>
		LOG_ERR("Device not ready.");
6000a58c:	4b34      	ldr	r3, [pc, #208]	; (6000a660 <ina219_init+0xe4>)
		return -ENODEV;
6000a58e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Device not ready.");
6000a592:	aa04      	add	r2, sp, #16
6000a594:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a598:	9305      	str	r3, [sp, #20]
6000a59a:	2302      	movs	r3, #2
6000a59c:	4831      	ldr	r0, [pc, #196]	; (6000a664 <ina219_init+0xe8>)
6000a59e:	9304      	str	r3, [sp, #16]
6000a5a0:	f009 f865 	bl	6001366e <z_log_msg_static_create.constprop.0>
	}

	k_sleep(K_USEC(INA219_WAIT_STARTUP));

	return 0;
}
6000a5a4:	4620      	mov	r0, r4
6000a5a6:	b007      	add	sp, #28
6000a5a8:	bd30      	pop	{r4, r5, pc}
	rc = ina219_reg_write(dev, INA219_REG_CONF, INA219_RST);
6000a5aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
6000a5ae:	2100      	movs	r1, #0
6000a5b0:	6868      	ldr	r0, [r5, #4]
6000a5b2:	f009 f880 	bl	600136b6 <ina219_reg_write.isra.0>
	if (rc) {
6000a5b6:	4604      	mov	r4, r0
6000a5b8:	b150      	cbz	r0, 6000a5d0 <ina219_init+0x54>
		LOG_ERR("Could not reset device.");
6000a5ba:	4b2b      	ldr	r3, [pc, #172]	; (6000a668 <ina219_init+0xec>)
		LOG_ERR("Could not set configuration data.");
6000a5bc:	9305      	str	r3, [sp, #20]
6000a5be:	2302      	movs	r3, #2
6000a5c0:	aa04      	add	r2, sp, #16
6000a5c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a5c6:	4827      	ldr	r0, [pc, #156]	; (6000a664 <ina219_init+0xe8>)
6000a5c8:	9304      	str	r3, [sp, #16]
6000a5ca:	f009 f850 	bl	6001366e <z_log_msg_static_create.constprop.0>
		return rc;
6000a5ce:	e7e9      	b.n	6000a5a4 <ina219_init+0x28>
	rc = ina219_set_config(dev);
6000a5d0:	6868      	ldr	r0, [r5, #4]
	return ina219_reg_write(dev, INA219_REG_CONF, reg_data);
6000a5d2:	4621      	mov	r1, r4
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000a5d4:	7b02      	ldrb	r2, [r0, #12]
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000a5d6:	7b43      	ldrb	r3, [r0, #13]
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000a5d8:	0352      	lsls	r2, r2, #13
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000a5da:	02db      	lsls	r3, r3, #11
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000a5dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000a5e0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000a5e4:	431a      	orrs	r2, r3
		(cfg->mode & INA219_MODE_NORMAL);
6000a5e6:	7c03      	ldrb	r3, [r0, #16]
6000a5e8:	f003 0303 	and.w	r3, r3, #3
		(cfg->sadc & INA219_ADC_MASK) << INA219_SADC_SHIFT |
6000a5ec:	4313      	orrs	r3, r2
		(cfg->badc & INA219_ADC_MASK) << INA219_BADC_SHIFT |
6000a5ee:	7b82      	ldrb	r2, [r0, #14]
6000a5f0:	01d2      	lsls	r2, r2, #7
6000a5f2:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
		(cfg->sadc & INA219_ADC_MASK) << INA219_SADC_SHIFT |
6000a5f6:	4313      	orrs	r3, r2
6000a5f8:	7bc2      	ldrb	r2, [r0, #15]
6000a5fa:	00d2      	lsls	r2, r2, #3
6000a5fc:	f002 0278 	and.w	r2, r2, #120	; 0x78
	return ina219_reg_write(dev, INA219_REG_CONF, reg_data);
6000a600:	431a      	orrs	r2, r3
6000a602:	f009 f858 	bl	600136b6 <ina219_reg_write.isra.0>
	if (rc) {
6000a606:	4604      	mov	r4, r0
6000a608:	b108      	cbz	r0, 6000a60e <ina219_init+0x92>
		LOG_ERR("Could not set configuration data.");
6000a60a:	4b18      	ldr	r3, [pc, #96]	; (6000a66c <ina219_init+0xf0>)
6000a60c:	e7d6      	b.n	6000a5bc <ina219_init+0x40>
	rc = ina219_set_calib(dev);
6000a60e:	6868      	ldr	r0, [r5, #4]
	return ina219_reg_write(dev, INA219_REG_CALIB, cal);
6000a610:	2105      	movs	r1, #5
	cal = INA219_SCALING_FACTOR / ((cfg->r_shunt) * (cfg->current_lsb));
6000a612:	8902      	ldrh	r2, [r0, #8]
6000a614:	8943      	ldrh	r3, [r0, #10]
6000a616:	4353      	muls	r3, r2
6000a618:	f44f 127a 	mov.w	r2, #4096000	; 0x3e8000
6000a61c:	fbb2 f2f3 	udiv	r2, r2, r3
	return ina219_reg_write(dev, INA219_REG_CALIB, cal);
6000a620:	b292      	uxth	r2, r2
6000a622:	f009 f848 	bl	600136b6 <ina219_reg_write.isra.0>
	if (rc) {
6000a626:	4604      	mov	r4, r0
6000a628:	2800      	cmp	r0, #0
6000a62a:	d1bb      	bne.n	6000a5a4 <ina219_init+0x28>
	const struct ina219_config *cfg = dev->config;
6000a62c:	686b      	ldr	r3, [r5, #4]
	struct ina219_data *data = dev->data;
6000a62e:	6929      	ldr	r1, [r5, #16]
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000a630:	7b9a      	ldrb	r2, [r3, #14]
		ina219_conv_delay(cfg->sadc);
6000a632:	7bdb      	ldrb	r3, [r3, #15]
6000a634:	2a0f      	cmp	r2, #15
6000a636:	bf96      	itet	ls
6000a638:	480d      	ldrls	r0, [pc, #52]	; (6000a670 <ina219_init+0xf4>)
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000a63a:	f06f 0215 	mvnhi.w	r2, #21

static int ina219_init(const struct device *dev);

static inline int ina219_conv_delay(uint8_t delay_idx)
{
	switch (delay_idx) {
6000a63e:	f850 2022 	ldrls.w	r2, [r0, r2, lsl #2]
6000a642:	2b0f      	cmp	r3, #15
6000a644:	bf96      	itet	ls
6000a646:	480a      	ldrls	r0, [pc, #40]	; (6000a670 <ina219_init+0xf4>)
		ina219_conv_delay(cfg->sadc);
6000a648:	f06f 0315 	mvnhi.w	r3, #21
6000a64c:	f850 3023 	ldrls.w	r3, [r0, r3, lsl #2]
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000a650:	4413      	add	r3, r2
6000a652:	60cb      	str	r3, [r1, #12]
6000a654:	2100      	movs	r1, #0
6000a656:	2001      	movs	r0, #1
6000a658:	f004 fecc 	bl	6000f3f4 <z_impl_k_sleep>
	return 0;
6000a65c:	e7a2      	b.n	6000a5a4 <ina219_init+0x28>
6000a65e:	bf00      	nop
6000a660:	60018992 	.word	0x60018992
6000a664:	6001506c 	.word	0x6001506c
6000a668:	600189a4 	.word	0x600189a4
6000a66c:	600189bc 	.word	0x600189bc
6000a670:	60016930 	.word	0x60016930

6000a674 <mpu6050_convert_gyro>:
}

/* see "Gyroscope Measurements" section from register map description */
static void mpu6050_convert_gyro(struct sensor_value *val, int16_t raw_val,
				 uint16_t sensitivity_x10)
{
6000a674:	b570      	push	{r4, r5, r6, lr}
	int64_t conv_val;

	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
6000a676:	4d09      	ldr	r5, [pc, #36]	; (6000a69c <mpu6050_convert_gyro+0x28>)
{
6000a678:	4604      	mov	r4, r0
	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
6000a67a:	17ce      	asrs	r6, r1, #31
6000a67c:	23b4      	movs	r3, #180	; 0xb4
6000a67e:	fba1 0105 	umull	r0, r1, r1, r5
6000a682:	435a      	muls	r2, r3
6000a684:	2300      	movs	r3, #0
6000a686:	fb05 1106 	mla	r1, r5, r6, r1
6000a68a:	f7f8 fe2b 	bl	600032e4 <__aeabi_ldivmod>
6000a68e:	4a04      	ldr	r2, [pc, #16]	; (6000a6a0 <mpu6050_convert_gyro+0x2c>)
6000a690:	2300      	movs	r3, #0
6000a692:	f7f8 fe27 	bl	600032e4 <__aeabi_ldivmod>
		   (sensitivity_x10 * 180U);
	val->val1 = conv_val / 1000000;
	val->val2 = conv_val % 1000000;
6000a696:	e9c4 0200 	strd	r0, r2, [r4]
}
6000a69a:	bd70      	pop	{r4, r5, r6, pc}
6000a69c:	01df5e70 	.word	0x01df5e70
6000a6a0:	000f4240 	.word	0x000f4240

6000a6a4 <mpu6050_sample_fetch>:
	return 0;
}

static int mpu6050_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
6000a6a4:	b530      	push	{r4, r5, lr}
6000a6a6:	223b      	movs	r2, #59	; 0x3b
6000a6a8:	b08d      	sub	sp, #52	; 0x34
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
6000a6aa:	6843      	ldr	r3, [r0, #4]
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
6000a6ac:	2500      	movs	r5, #0
6000a6ae:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
6000a6b2:	f10d 0207 	add.w	r2, sp, #7
	struct mpu6050_data *drv_data = dev->data;
6000a6b6:	6904      	ldr	r4, [r0, #16]
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
6000a6b8:	6818      	ldr	r0, [r3, #0]
6000a6ba:	889b      	ldrh	r3, [r3, #4]
	msg[0].buf = (uint8_t *)write_buf;
6000a6bc:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
6000a6be:	2201      	movs	r2, #1
	msg[0].flags = I2C_MSG_WRITE;
6000a6c0:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[0].len = num_write;
6000a6c4:	9207      	str	r2, [sp, #28]
	msg[1].buf = (uint8_t *)read_buf;
6000a6c6:	aa02      	add	r2, sp, #8
6000a6c8:	9209      	str	r2, [sp, #36]	; 0x24
	msg[1].len = num_read;
6000a6ca:	220e      	movs	r2, #14
6000a6cc:	920a      	str	r2, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000a6ce:	2207      	movs	r2, #7
6000a6d0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		union { uintptr_t x; uint16_t val; } parm3 = { .val = addr };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
6000a6d4:	2202      	movs	r2, #2
6000a6d6:	a906      	add	r1, sp, #24
6000a6d8:	f009 f806 	bl	600136e8 <z_impl_i2c_transfer>
	int16_t buf[7];

	if (i2c_burst_read_dt(&cfg->i2c, MPU6050_REG_DATA_START, (uint8_t *)buf,
6000a6dc:	42a8      	cmp	r0, r5
6000a6de:	da0e      	bge.n	6000a6fe <mpu6050_sample_fetch+0x5a>
			      14) < 0) {
		LOG_ERR("Failed to read data sample.");
6000a6e0:	4b16      	ldr	r3, [pc, #88]	; (6000a73c <mpu6050_sample_fetch+0x98>)
6000a6e2:	930b      	str	r3, [sp, #44]	; 0x2c
6000a6e4:	2302      	movs	r3, #2
6000a6e6:	930a      	str	r3, [sp, #40]	; 0x28
6000a6e8:	4815      	ldr	r0, [pc, #84]	; (6000a740 <mpu6050_sample_fetch+0x9c>)
6000a6ea:	462b      	mov	r3, r5
6000a6ec:	aa0a      	add	r2, sp, #40	; 0x28
6000a6ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a6f2:	f7fb fda3 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -EIO;
6000a6f6:	f06f 0004 	mvn.w	r0, #4
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);

	return 0;
}
6000a6fa:	b00d      	add	sp, #52	; 0x34
6000a6fc:	bd30      	pop	{r4, r5, pc}
	drv_data->accel_x = sys_be16_to_cpu(buf[0]);
6000a6fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return 0;
6000a702:	4628      	mov	r0, r5
	drv_data->accel_x = sys_be16_to_cpu(buf[0]);
6000a704:	ba5b      	rev16	r3, r3
6000a706:	8023      	strh	r3, [r4, #0]
	drv_data->accel_y = sys_be16_to_cpu(buf[1]);
6000a708:	f8bd 300a 	ldrh.w	r3, [sp, #10]
6000a70c:	ba5b      	rev16	r3, r3
6000a70e:	8063      	strh	r3, [r4, #2]
	drv_data->accel_z = sys_be16_to_cpu(buf[2]);
6000a710:	f8bd 300c 	ldrh.w	r3, [sp, #12]
6000a714:	ba5b      	rev16	r3, r3
6000a716:	80a3      	strh	r3, [r4, #4]
	drv_data->temp = sys_be16_to_cpu(buf[3]);
6000a718:	f8bd 300e 	ldrh.w	r3, [sp, #14]
6000a71c:	ba5b      	rev16	r3, r3
6000a71e:	8123      	strh	r3, [r4, #8]
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
6000a720:	f8bd 3010 	ldrh.w	r3, [sp, #16]
6000a724:	ba5b      	rev16	r3, r3
6000a726:	8163      	strh	r3, [r4, #10]
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
6000a728:	f8bd 3012 	ldrh.w	r3, [sp, #18]
6000a72c:	ba5b      	rev16	r3, r3
6000a72e:	81a3      	strh	r3, [r4, #12]
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);
6000a730:	f8bd 3014 	ldrh.w	r3, [sp, #20]
6000a734:	ba5b      	rev16	r3, r3
6000a736:	81e3      	strh	r3, [r4, #14]
	return 0;
6000a738:	e7df      	b.n	6000a6fa <mpu6050_sample_fetch+0x56>
6000a73a:	bf00      	nop
6000a73c:	600189ef 	.word	0x600189ef
6000a740:	60015074 	.word	0x60015074

6000a744 <mpu6050_init>:
	.sample_fetch = mpu6050_sample_fetch,
	.channel_get = mpu6050_channel_get,
};

int mpu6050_init(const struct device *dev)
{
6000a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
6000a748:	6844      	ldr	r4, [r0, #4]
{
6000a74a:	b088      	sub	sp, #32
	struct mpu6050_data *drv_data = dev->data;
6000a74c:	6907      	ldr	r7, [r0, #16]
	uint8_t id, i;

	if (!device_is_ready(cfg->i2c.bus)) {
6000a74e:	6820      	ldr	r0, [r4, #0]
6000a750:	f009 ff39 	bl	600145c6 <z_device_is_ready>
6000a754:	4603      	mov	r3, r0
6000a756:	b970      	cbnz	r0, 6000a776 <mpu6050_init+0x32>
		LOG_ERR("Bus device is not ready");
6000a758:	4a55      	ldr	r2, [pc, #340]	; (6000a8b0 <mpu6050_init+0x16c>)
6000a75a:	9207      	str	r2, [sp, #28]
6000a75c:	2202      	movs	r2, #2
6000a75e:	9206      	str	r2, [sp, #24]
6000a760:	4854      	ldr	r0, [pc, #336]	; (6000a8b4 <mpu6050_init+0x170>)
6000a762:	aa06      	add	r2, sp, #24
6000a764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a768:	f7fb fd68 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -ENODEV;
6000a76c:	f06f 0012 	mvn.w	r0, #18
		}
	}
#endif

	return 0;
}
6000a770:	b008      	add	sp, #32
6000a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @return a value from i2c_reg_read_byte()
 */
static inline int i2c_reg_read_byte_dt(const struct i2c_dt_spec *spec,
				       uint8_t reg_addr, uint8_t *value)
{
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
6000a776:	2275      	movs	r2, #117	; 0x75
6000a778:	6820      	ldr	r0, [r4, #0]
6000a77a:	88a3      	ldrh	r3, [r4, #4]
	msg[1].buf = (uint8_t *)read_buf;
6000a77c:	f10d 0102 	add.w	r1, sp, #2
6000a780:	f88d 2004 	strb.w	r2, [sp, #4]
	msg[0].len = num_write;
6000a784:	2201      	movs	r2, #1
	msg[0].buf = (uint8_t *)write_buf;
6000a786:	ae01      	add	r6, sp, #4
	msg[0].flags = I2C_MSG_WRITE;
6000a788:	2500      	movs	r5, #0
	msg[0].len = num_write;
6000a78a:	9203      	str	r2, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
6000a78c:	9602      	str	r6, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
6000a78e:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].len = num_read;
6000a792:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000a796:	2207      	movs	r2, #7
6000a798:	f88d 201c 	strb.w	r2, [sp, #28]
6000a79c:	2202      	movs	r2, #2
6000a79e:	a902      	add	r1, sp, #8
6000a7a0:	f008 ffa2 	bl	600136e8 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&cfg->i2c, MPU6050_REG_CHIP_ID, &id) < 0) {
6000a7a4:	42a8      	cmp	r0, r5
6000a7a6:	da0d      	bge.n	6000a7c4 <mpu6050_init+0x80>
		LOG_ERR("Failed to read chip ID.");
6000a7a8:	4b43      	ldr	r3, [pc, #268]	; (6000a8b8 <mpu6050_init+0x174>)
		LOG_ERR("Failed to wake up chip.");
6000a7aa:	9307      	str	r3, [sp, #28]
6000a7ac:	2302      	movs	r3, #2
6000a7ae:	9306      	str	r3, [sp, #24]
6000a7b0:	4840      	ldr	r0, [pc, #256]	; (6000a8b4 <mpu6050_init+0x170>)
6000a7b2:	2300      	movs	r3, #0
6000a7b4:	aa06      	add	r2, sp, #24
6000a7b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a7ba:	f7fb fd3f 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -EIO;
6000a7be:	f06f 0004 	mvn.w	r0, #4
		return -EIO;
6000a7c2:	e7d5      	b.n	6000a770 <mpu6050_init+0x2c>
	if (id != MPU6050_CHIP_ID && id != MPU9250_CHIP_ID) {
6000a7c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
6000a7c8:	2b68      	cmp	r3, #104	; 0x68
6000a7ca:	d00f      	beq.n	6000a7ec <mpu6050_init+0xa8>
6000a7cc:	2b71      	cmp	r3, #113	; 0x71
6000a7ce:	d00d      	beq.n	6000a7ec <mpu6050_init+0xa8>
		LOG_ERR("Invalid chip ID.");
6000a7d0:	4b3a      	ldr	r3, [pc, #232]	; (6000a8bc <mpu6050_init+0x178>)
6000a7d2:	9307      	str	r3, [sp, #28]
6000a7d4:	2302      	movs	r3, #2
6000a7d6:	9306      	str	r3, [sp, #24]
6000a7d8:	4836      	ldr	r0, [pc, #216]	; (6000a8b4 <mpu6050_init+0x170>)
6000a7da:	462b      	mov	r3, r5
6000a7dc:	aa06      	add	r2, sp, #24
6000a7de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a7e2:	f7fb fd2b 	bl	6000623c <z_impl_z_log_msg_static_create>
		return -EINVAL;
6000a7e6:	f06f 0015 	mvn.w	r0, #21
6000a7ea:	e7c1      	b.n	6000a770 <mpu6050_init+0x2c>
	msg[0].flags = I2C_MSG_WRITE;
6000a7ec:	2300      	movs	r3, #0
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
6000a7ee:	f8d4 8000 	ldr.w	r8, [r4]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
6000a7f2:	f894 a004 	ldrb.w	sl, [r4, #4]
	msg[0].len = num_write;
6000a7f6:	2501      	movs	r5, #1
	msg[0].flags = I2C_MSG_WRITE;
6000a7f8:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
6000a7fc:	f10d 0303 	add.w	r3, sp, #3
6000a800:	f04f 096b 	mov.w	r9, #107	; 0x6b
	msg[0].buf = (uint8_t *)write_buf;
6000a804:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
6000a806:	9503      	str	r5, [sp, #12]
6000a808:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[1].len = num_read;
6000a80c:	e9cd 3505 	strd	r3, r5, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000a810:	2307      	movs	r3, #7
6000a812:	f88d 301c 	strb.w	r3, [sp, #28]
6000a816:	2202      	movs	r2, #2
6000a818:	4653      	mov	r3, sl
6000a81a:	a902      	add	r1, sp, #8
6000a81c:	4640      	mov	r0, r8
6000a81e:	f008 ff63 	bl	600136e8 <z_impl_i2c_transfer>
	if (rc != 0) {
6000a822:	b9a0      	cbnz	r0, 6000a84e <mpu6050_init+0x10a>
	new_value = (old_value & ~mask) | (value & mask);
6000a824:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if (new_value == old_value) {
6000a828:	065a      	lsls	r2, r3, #25
6000a82a:	d514      	bpl.n	6000a856 <mpu6050_init+0x112>
	uint8_t tx_buf[2] = {reg_addr, value};
6000a82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
6000a830:	f88d 9004 	strb.w	r9, [sp, #4]
	msg.buf = (uint8_t *)buf;
6000a834:	9602      	str	r6, [sp, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
6000a836:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.len = num_bytes;
6000a83a:	2302      	movs	r3, #2
6000a83c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000a83e:	f88d 3010 	strb.w	r3, [sp, #16]
6000a842:	4653      	mov	r3, sl
6000a844:	462a      	mov	r2, r5
6000a846:	a902      	add	r1, sp, #8
6000a848:	4640      	mov	r0, r8
6000a84a:	f008 ff4d 	bl	600136e8 <z_impl_i2c_transfer>
	if (i2c_reg_update_byte_dt(&cfg->i2c, MPU6050_REG_PWR_MGMT1,
6000a84e:	2800      	cmp	r0, #0
6000a850:	da01      	bge.n	6000a856 <mpu6050_init+0x112>
		LOG_ERR("Failed to wake up chip.");
6000a852:	4b1b      	ldr	r3, [pc, #108]	; (6000a8c0 <mpu6050_init+0x17c>)
6000a854:	e7a9      	b.n	6000a7aa <mpu6050_init+0x66>
	msg.len = num_bytes;
6000a856:	2502      	movs	r5, #2
	uint8_t tx_buf[2] = {reg_addr, value};
6000a858:	221c      	movs	r2, #28
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
6000a85a:	6820      	ldr	r0, [r4, #0]
6000a85c:	88a3      	ldrh	r3, [r4, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
6000a85e:	f8ad 2004 	strh.w	r2, [sp, #4]
	msg.buf = (uint8_t *)buf;
6000a862:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
6000a864:	9503      	str	r5, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000a866:	f88d 5010 	strb.w	r5, [sp, #16]
6000a86a:	2201      	movs	r2, #1
6000a86c:	a902      	add	r1, sp, #8
6000a86e:	f008 ff3b 	bl	600136e8 <z_impl_i2c_transfer>
	if (i2c_reg_write_byte_dt(&cfg->i2c, MPU6050_REG_ACCEL_CFG,
6000a872:	2800      	cmp	r0, #0
6000a874:	da03      	bge.n	6000a87e <mpu6050_init+0x13a>
		LOG_ERR("Failed to write accel full-scale range.");
6000a876:	4b13      	ldr	r3, [pc, #76]	; (6000a8c4 <mpu6050_init+0x180>)
		LOG_ERR("Failed to write gyro full-scale range.");
6000a878:	e9cd 5306 	strd	r5, r3, [sp, #24]
	compiler_barrier();
6000a87c:	e798      	b.n	6000a7b0 <mpu6050_init+0x6c>
	drv_data->accel_sensitivity_shift = 14 - i;
6000a87e:	230e      	movs	r3, #14
	uint8_t tx_buf[2] = {reg_addr, value};
6000a880:	221b      	movs	r2, #27
6000a882:	80fb      	strh	r3, [r7, #6]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
6000a884:	6820      	ldr	r0, [r4, #0]
6000a886:	88a3      	ldrh	r3, [r4, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
6000a888:	f8ad 2004 	strh.w	r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000a88c:	f88d 5010 	strb.w	r5, [sp, #16]
	msg.len = num_bytes;
6000a890:	e9cd 6502 	strd	r6, r5, [sp, #8]
6000a894:	2201      	movs	r2, #1
6000a896:	a902      	add	r1, sp, #8
6000a898:	f008 ff26 	bl	600136e8 <z_impl_i2c_transfer>
	if (i2c_reg_write_byte_dt(&cfg->i2c, MPU6050_REG_GYRO_CFG,
6000a89c:	2800      	cmp	r0, #0
6000a89e:	da01      	bge.n	6000a8a4 <mpu6050_init+0x160>
		LOG_ERR("Failed to write gyro full-scale range.");
6000a8a0:	4b09      	ldr	r3, [pc, #36]	; (6000a8c8 <mpu6050_init+0x184>)
6000a8a2:	e7e9      	b.n	6000a878 <mpu6050_init+0x134>
	drv_data->gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];
6000a8a4:	f240 531e 	movw	r3, #1310	; 0x51e
	return 0;
6000a8a8:	2000      	movs	r0, #0
	drv_data->gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];
6000a8aa:	823b      	strh	r3, [r7, #16]
	return 0;
6000a8ac:	e760      	b.n	6000a770 <mpu6050_init+0x2c>
6000a8ae:	bf00      	nop
6000a8b0:	60018a0b 	.word	0x60018a0b
6000a8b4:	60015074 	.word	0x60015074
6000a8b8:	60018a23 	.word	0x60018a23
6000a8bc:	60018a3b 	.word	0x60018a3b
6000a8c0:	60018a4c 	.word	0x60018a4c
6000a8c4:	60018a64 	.word	0x60018a64
6000a8c8:	60018a8c 	.word	0x60018a8c

6000a8cc <mpu6050_channel_get>:
{
6000a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000a8ce:	4614      	mov	r4, r2
	struct mpu6050_data *drv_data = dev->data;
6000a8d0:	6905      	ldr	r5, [r0, #16]
	switch (chan) {
6000a8d2:	2907      	cmp	r1, #7
6000a8d4:	f200 80ac 	bhi.w	6000aa30 <mpu6050_channel_get+0x164>
6000a8d8:	e8df f001 	tbb	[pc, r1]
6000a8dc:	04858261 	.word	0x04858261
6000a8e0:	88a6a29d 	.word	0x88a6a29d
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000a8e4:	4e6b      	ldr	r6, [pc, #428]	; (6000aa94 <mpu6050_channel_get+0x1c8>)
6000a8e6:	f9b5 0000 	ldrsh.w	r0, [r5]
6000a8ea:	88e9      	ldrh	r1, [r5, #6]
6000a8ec:	17c3      	asrs	r3, r0, #31
6000a8ee:	fba0 0c06 	umull	r0, ip, r0, r6
6000a8f2:	f1c1 0220 	rsb	r2, r1, #32
6000a8f6:	fb06 cc03 	mla	ip, r6, r3, ip
6000a8fa:	40c8      	lsrs	r0, r1
6000a8fc:	f1b1 0320 	subs.w	r3, r1, #32
6000a900:	fa0c f202 	lsl.w	r2, ip, r2
6000a904:	fa4c f101 	asr.w	r1, ip, r1
6000a908:	bf58      	it	pl
6000a90a:	fa4c f303 	asrpl.w	r3, ip, r3
6000a90e:	ea40 0002 	orr.w	r0, r0, r2
6000a912:	4a61      	ldr	r2, [pc, #388]	; (6000aa98 <mpu6050_channel_get+0x1cc>)
6000a914:	bf58      	it	pl
6000a916:	4318      	orrpl	r0, r3
6000a918:	2300      	movs	r3, #0
6000a91a:	f7f8 fce3 	bl	600032e4 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000a91e:	e9c4 0200 	strd	r0, r2, [r4]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000a922:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
6000a926:	88e9      	ldrh	r1, [r5, #6]
6000a928:	17c3      	asrs	r3, r0, #31
6000a92a:	fba0 0c06 	umull	r0, ip, r0, r6
6000a92e:	f1c1 0220 	rsb	r2, r1, #32
6000a932:	fb06 cc03 	mla	ip, r6, r3, ip
6000a936:	40c8      	lsrs	r0, r1
6000a938:	f1b1 0320 	subs.w	r3, r1, #32
6000a93c:	fa0c f202 	lsl.w	r2, ip, r2
6000a940:	fa4c f101 	asr.w	r1, ip, r1
6000a944:	bf58      	it	pl
6000a946:	fa4c f303 	asrpl.w	r3, ip, r3
6000a94a:	ea40 0002 	orr.w	r0, r0, r2
6000a94e:	4a52      	ldr	r2, [pc, #328]	; (6000aa98 <mpu6050_channel_get+0x1cc>)
6000a950:	bf58      	it	pl
6000a952:	4318      	orrpl	r0, r3
6000a954:	2300      	movs	r3, #0
6000a956:	f7f8 fcc5 	bl	600032e4 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000a95a:	e9c4 0202 	strd	r0, r2, [r4, #8]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000a95e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
6000a962:	88e9      	ldrh	r1, [r5, #6]
6000a964:	17c3      	asrs	r3, r0, #31
6000a966:	fba0 0706 	umull	r0, r7, r0, r6
6000a96a:	f1c1 0220 	rsb	r2, r1, #32
6000a96e:	fb06 7703 	mla	r7, r6, r3, r7
6000a972:	40c8      	lsrs	r0, r1
6000a974:	f1b1 0320 	subs.w	r3, r1, #32
6000a978:	fa07 f202 	lsl.w	r2, r7, r2
6000a97c:	fa47 f101 	asr.w	r1, r7, r1
6000a980:	bf58      	it	pl
6000a982:	fa47 f303 	asrpl.w	r3, r7, r3
6000a986:	ea40 0002 	orr.w	r0, r0, r2
6000a98a:	4a43      	ldr	r2, [pc, #268]	; (6000aa98 <mpu6050_channel_get+0x1cc>)
6000a98c:	bf58      	it	pl
6000a98e:	4318      	orrpl	r0, r3
6000a990:	2300      	movs	r3, #0
6000a992:	f7f8 fca7 	bl	600032e4 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000a996:	e9c4 0204 	strd	r0, r2, [r4, #16]
}
6000a99a:	2000      	movs	r0, #0
6000a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000a99e:	f9b5 0000 	ldrsh.w	r0, [r5]
6000a9a2:	4b3c      	ldr	r3, [pc, #240]	; (6000aa94 <mpu6050_channel_get+0x1c8>)
6000a9a4:	17c2      	asrs	r2, r0, #31
6000a9a6:	88e9      	ldrh	r1, [r5, #6]
6000a9a8:	fba0 0603 	umull	r0, r6, r0, r3
6000a9ac:	fb03 6602 	mla	r6, r3, r2, r6
6000a9b0:	f1c1 0220 	rsb	r2, r1, #32
6000a9b4:	f1b1 0320 	subs.w	r3, r1, #32
6000a9b8:	fa20 f001 	lsr.w	r0, r0, r1
6000a9bc:	fa06 f202 	lsl.w	r2, r6, r2
6000a9c0:	fa46 f101 	asr.w	r1, r6, r1
6000a9c4:	bf58      	it	pl
6000a9c6:	fa46 f303 	asrpl.w	r3, r6, r3
6000a9ca:	ea40 0002 	orr.w	r0, r0, r2
6000a9ce:	4a32      	ldr	r2, [pc, #200]	; (6000aa98 <mpu6050_channel_get+0x1cc>)
6000a9d0:	bf58      	it	pl
6000a9d2:	4318      	orrpl	r0, r3
6000a9d4:	2300      	movs	r3, #0
6000a9d6:	f7f8 fc85 	bl	600032e4 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000a9da:	e9c4 0200 	strd	r0, r2, [r4]
}
6000a9de:	e7dc      	b.n	6000a99a <mpu6050_channel_get+0xce>
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000a9e0:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
6000a9e4:	e7dd      	b.n	6000a9a2 <mpu6050_channel_get+0xd6>
6000a9e6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
6000a9ea:	e7da      	b.n	6000a9a2 <mpu6050_channel_get+0xd6>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
6000a9ec:	8a2a      	ldrh	r2, [r5, #16]
6000a9ee:	4620      	mov	r0, r4
6000a9f0:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
6000a9f4:	f7ff fe3e 	bl	6000a674 <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 1, drv_data->gyro_y,
6000a9f8:	8a2a      	ldrh	r2, [r5, #16]
6000a9fa:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
6000a9fe:	f104 0008 	add.w	r0, r4, #8
6000aa02:	f7ff fe37 	bl	6000a674 <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 2, drv_data->gyro_z,
6000aa06:	8a2a      	ldrh	r2, [r5, #16]
6000aa08:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
6000aa0c:	f104 0010 	add.w	r0, r4, #16
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000aa10:	f7ff fe30 	bl	6000a674 <mpu6050_convert_gyro>
		break;
6000aa14:	e7c1      	b.n	6000a99a <mpu6050_channel_get+0xce>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
6000aa16:	8a2a      	ldrh	r2, [r5, #16]
6000aa18:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000aa1c:	4620      	mov	r0, r4
6000aa1e:	e7f7      	b.n	6000aa10 <mpu6050_channel_get+0x144>
		mpu6050_convert_gyro(val, drv_data->gyro_y,
6000aa20:	8a2a      	ldrh	r2, [r5, #16]
6000aa22:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
6000aa26:	e7f9      	b.n	6000aa1c <mpu6050_channel_get+0x150>
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000aa28:	8a2a      	ldrh	r2, [r5, #16]
6000aa2a:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
6000aa2e:	e7f5      	b.n	6000aa1c <mpu6050_channel_get+0x150>
		mpu6050_convert_temp(val, drv_data->temp);
6000aa30:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
	val->val1 = raw_val / 340 + 36;
6000aa34:	f44f 72aa 	mov.w	r2, #340	; 0x154
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000aa38:	4e17      	ldr	r6, [pc, #92]	; (6000aa98 <mpu6050_channel_get+0x1cc>)
	val->val1 = raw_val / 340 + 36;
6000aa3a:	fb91 f3f2 	sdiv	r3, r1, r2
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000aa3e:	fb02 1113 	mls	r1, r2, r3, r1
	val->val1 = raw_val / 340 + 36;
6000aa42:	f103 0024 	add.w	r0, r3, #36	; 0x24
6000aa46:	b21d      	sxth	r5, r3
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000aa48:	f44f 72aa 	mov.w	r2, #340	; 0x154
	val->val1 = raw_val / 340 + 36;
6000aa4c:	6020      	str	r0, [r4, #0]
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000aa4e:	b208      	sxth	r0, r1
6000aa50:	f341 31c0 	sbfx	r1, r1, #15, #1
6000aa54:	2300      	movs	r3, #0
6000aa56:	fba0 0706 	umull	r0, r7, r0, r6
6000aa5a:	fb06 7101 	mla	r1, r6, r1, r7
6000aa5e:	f7f8 fc41 	bl	600032e4 <__aeabi_ldivmod>
6000aa62:	f500 2301 	add.w	r3, r0, #528384	; 0x81000
6000aa66:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
	if (val->val2 < 0) {
6000aa6a:	2b00      	cmp	r3, #0
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000aa6c:	6063      	str	r3, [r4, #4]
	if (val->val2 < 0) {
6000aa6e:	da05      	bge.n	6000aa7c <mpu6050_channel_get+0x1b0>
		val->val2 += 1000000;
6000aa70:	4b0a      	ldr	r3, [pc, #40]	; (6000aa9c <mpu6050_channel_get+0x1d0>)
		val->val1--;
6000aa72:	3523      	adds	r5, #35	; 0x23
		val->val2 += 1000000;
6000aa74:	4403      	add	r3, r0
		val->val1--;
6000aa76:	6025      	str	r5, [r4, #0]
		val->val2 += 1000000;
6000aa78:	6063      	str	r3, [r4, #4]
6000aa7a:	e78e      	b.n	6000a99a <mpu6050_channel_get+0xce>
	} else if (val->val2 >= 1000000) {
6000aa7c:	4a08      	ldr	r2, [pc, #32]	; (6000aaa0 <mpu6050_channel_get+0x1d4>)
6000aa7e:	4293      	cmp	r3, r2
6000aa80:	dd8b      	ble.n	6000a99a <mpu6050_channel_get+0xce>
		val->val2 -= 1000000;
6000aa82:	f5a0 20e5 	sub.w	r0, r0, #468992	; 0x72800
		val->val1++;
6000aa86:	3525      	adds	r5, #37	; 0x25
		val->val2 -= 1000000;
6000aa88:	f5a0 707c 	sub.w	r0, r0, #1008	; 0x3f0
		val->val1++;
6000aa8c:	6025      	str	r5, [r4, #0]
		val->val2 -= 1000000;
6000aa8e:	6060      	str	r0, [r4, #4]
6000aa90:	e783      	b.n	6000a99a <mpu6050_channel_get+0xce>
6000aa92:	bf00      	nop
6000aa94:	0095a33a 	.word	0x0095a33a
6000aa98:	000f4240 	.word	0x000f4240
6000aa9c:	00175890 	.word	0x00175890
6000aaa0:	000f423f 	.word	0x000f423f

6000aaa4 <z_impl_hwinfo_get_device_id>:
struct imxrt_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
6000aaa4:	b573      	push	{r0, r1, r4, r5, r6, lr}

#ifdef CONFIG_SOC_SERIES_IMX_RT11XX
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->FUSEN[17].FUSE);
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->FUSEN[16].FUSE);
#else
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000aaa6:	4c1a      	ldr	r4, [pc, #104]	; (6000ab10 <z_impl_hwinfo_get_device_id+0x6c>)
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
#endif

	if (length > sizeof(dev_id.id)) {
6000aaa8:	2908      	cmp	r1, #8
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000aaaa:	f8d4 6430 	ldr.w	r6, [r4, #1072]	; 0x430
	if (length > sizeof(dev_id.id)) {
6000aaae:	bf28      	it	cs
6000aab0:	2108      	movcs	r1, #8
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000aab2:	f8d4 5430 	ldr.w	r5, [r4, #1072]	; 0x430
6000aab6:	f8d4 2430 	ldr.w	r2, [r4, #1072]	; 0x430
6000aaba:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
6000aabe:	0a2d      	lsrs	r5, r5, #8
6000aac0:	0212      	lsls	r2, r2, #8
6000aac2:	061b      	lsls	r3, r3, #24
6000aac4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
6000aac8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
6000aacc:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
6000aad0:	432b      	orrs	r3, r5
6000aad2:	4313      	orrs	r3, r2
6000aad4:	9300      	str	r3, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
6000aad6:	f8d4 6420 	ldr.w	r6, [r4, #1056]	; 0x420
6000aada:	f8d4 5420 	ldr.w	r5, [r4, #1056]	; 0x420
6000aade:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
6000aae2:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
6000aae6:	0a2c      	lsrs	r4, r5, #8
6000aae8:	061b      	lsls	r3, r3, #24
6000aaea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
6000aaee:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
6000aaf2:	4323      	orrs	r3, r4
6000aaf4:	0214      	lsls	r4, r2, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000aaf6:	460a      	mov	r2, r1
6000aaf8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
6000aafc:	4323      	orrs	r3, r4
	if (length > sizeof(dev_id.id)) {
6000aafe:	460c      	mov	r4, r1
6000ab00:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
6000ab02:	9301      	str	r3, [sp, #4]
6000ab04:	f7f8 fc58 	bl	600033b8 <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
6000ab08:	4620      	mov	r0, r4
6000ab0a:	b002      	add	sp, #8
6000ab0c:	bd70      	pop	{r4, r5, r6, pc}
6000ab0e:	bf00      	nop
6000ab10:	401f4000 	.word	0x401f4000

6000ab14 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
6000ab14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
6000ab18:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
6000ab1a:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
6000ab1c:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
6000ab1e:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
6000ab20:	f411 3f80 	tst.w	r1, #65536	; 0x10000
6000ab24:	4b08      	ldr	r3, [pc, #32]	; (6000ab48 <elapsed+0x34>)
6000ab26:	4909      	ldr	r1, [pc, #36]	; (6000ab4c <elapsed+0x38>)
6000ab28:	d101      	bne.n	6000ab2e <elapsed+0x1a>
	    || (val1 < val2)) {
6000ab2a:	4282      	cmp	r2, r0
6000ab2c:	d206      	bcs.n	6000ab3c <elapsed+0x28>
		overflow_cyc += last_load;
6000ab2e:	681a      	ldr	r2, [r3, #0]
6000ab30:	680c      	ldr	r4, [r1, #0]
6000ab32:	4422      	add	r2, r4
6000ab34:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
6000ab36:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
6000ab3a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
6000ab3c:	681b      	ldr	r3, [r3, #0]
6000ab3e:	680a      	ldr	r2, [r1, #0]
6000ab40:	4413      	add	r3, r2
}
6000ab42:	1a18      	subs	r0, r3, r0
6000ab44:	bd10      	pop	{r4, pc}
6000ab46:	bf00      	nop
6000ab48:	2020412c 	.word	0x2020412c
6000ab4c:	20204138 	.word	0x20204138

6000ab50 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000ab50:	4b09      	ldr	r3, [pc, #36]	; (6000ab78 <sys_clock_driver_init+0x28>)
6000ab52:	2210      	movs	r2, #16
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
6000ab54:	2000      	movs	r0, #0
6000ab56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
6000ab5a:	f64e 225f 	movw	r2, #59999	; 0xea5f
6000ab5e:	4b07      	ldr	r3, [pc, #28]	; (6000ab7c <sys_clock_driver_init+0x2c>)
6000ab60:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
6000ab62:	4b07      	ldr	r3, [pc, #28]	; (6000ab80 <sys_clock_driver_init+0x30>)
6000ab64:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
6000ab66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000ab6a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
6000ab6c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
6000ab6e:	691a      	ldr	r2, [r3, #16]
6000ab70:	f042 0207 	orr.w	r2, r2, #7
6000ab74:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
6000ab76:	4770      	bx	lr
6000ab78:	e000ed00 	.word	0xe000ed00
6000ab7c:	20204138 	.word	0x20204138
6000ab80:	2020412c 	.word	0x2020412c

6000ab84 <sys_clock_isr>:
{
6000ab84:	b508      	push	{r3, lr}
	elapsed();
6000ab86:	f7ff ffc5 	bl	6000ab14 <elapsed>
	cycle_count += overflow_cyc;
6000ab8a:	4b0c      	ldr	r3, [pc, #48]	; (6000abbc <sys_clock_isr+0x38>)
6000ab8c:	4a0c      	ldr	r2, [pc, #48]	; (6000abc0 <sys_clock_isr+0x3c>)
6000ab8e:	6818      	ldr	r0, [r3, #0]
6000ab90:	6811      	ldr	r1, [r2, #0]
6000ab92:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
6000ab94:	f64e 2160 	movw	r1, #60000	; 0xea60
	cycle_count += overflow_cyc;
6000ab98:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
6000ab9a:	2200      	movs	r2, #0
6000ab9c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
6000ab9e:	4a09      	ldr	r2, [pc, #36]	; (6000abc4 <sys_clock_isr+0x40>)
6000aba0:	6813      	ldr	r3, [r2, #0]
6000aba2:	1ac0      	subs	r0, r0, r3
6000aba4:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
6000aba8:	fb01 3300 	mla	r3, r1, r0, r3
6000abac:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
6000abae:	f004 ff73 	bl	6000fa98 <sys_clock_announce>
}
6000abb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
6000abb6:	f7fd bb5d 	b.w	60008274 <z_arm_exc_exit>
6000abba:	bf00      	nop
6000abbc:	2020412c 	.word	0x2020412c
6000abc0:	20204134 	.word	0x20204134
6000abc4:	20204130 	.word	0x20204130

6000abc8 <sys_clock_set_timeout>:
{
6000abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000abcc:	4e44      	ldr	r6, [pc, #272]	; (6000ace0 <sys_clock_set_timeout+0x118>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
6000abce:	b371      	cbz	r1, 6000ac2e <sys_clock_set_timeout+0x66>
6000abd0:	1c42      	adds	r2, r0, #1
6000abd2:	d10a      	bne.n	6000abea <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
6000abd4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
6000abd8:	6913      	ldr	r3, [r2, #16]
6000abda:	f023 0301 	bic.w	r3, r3, #1
6000abde:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
6000abe0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
6000abe4:	6033      	str	r3, [r6, #0]
}
6000abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
6000abea:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
6000abec:	2801      	cmp	r0, #1
6000abee:	dd24      	ble.n	6000ac3a <sys_clock_set_timeout+0x72>
6000abf0:	f5b0 7f8b 	cmp.w	r0, #278	; 0x116
6000abf4:	dc24      	bgt.n	6000ac40 <sys_clock_set_timeout+0x78>
6000abf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
6000abfa:	f04f 0310 	mov.w	r3, #16
6000abfe:	f3ef 8511 	mrs	r5, BASEPRI
6000ac02:	f383 8812 	msr	BASEPRI_MAX, r3
6000ac06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ac0a:	4836      	ldr	r0, [pc, #216]	; (6000ace4 <sys_clock_set_timeout+0x11c>)
6000ac0c:	f002 fc94 	bl	6000d538 <z_spin_lock_valid>
6000ac10:	b9c8      	cbnz	r0, 6000ac46 <sys_clock_set_timeout+0x7e>
6000ac12:	2394      	movs	r3, #148	; 0x94
6000ac14:	4a34      	ldr	r2, [pc, #208]	; (6000ace8 <sys_clock_set_timeout+0x120>)
6000ac16:	4935      	ldr	r1, [pc, #212]	; (6000acec <sys_clock_set_timeout+0x124>)
6000ac18:	4835      	ldr	r0, [pc, #212]	; (6000acf0 <sys_clock_set_timeout+0x128>)
6000ac1a:	f008 f81e 	bl	60012c5a <assert_print>
6000ac1e:	4931      	ldr	r1, [pc, #196]	; (6000ace4 <sys_clock_set_timeout+0x11c>)
6000ac20:	4834      	ldr	r0, [pc, #208]	; (6000acf4 <sys_clock_set_timeout+0x12c>)
6000ac22:	f008 f81a 	bl	60012c5a <assert_print>
6000ac26:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ac28:	482f      	ldr	r0, [pc, #188]	; (6000ace8 <sys_clock_set_timeout+0x120>)
6000ac2a:	f008 f80f 	bl	60012c4c <assert_post_action>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
6000ac2e:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
6000ac30:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
6000ac32:	d1db      	bne.n	6000abec <sys_clock_set_timeout+0x24>
6000ac34:	f44f 708b 	mov.w	r0, #278	; 0x116
6000ac38:	e7dd      	b.n	6000abf6 <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
6000ac3a:	f04f 0800 	mov.w	r8, #0
6000ac3e:	e7dc      	b.n	6000abfa <sys_clock_set_timeout+0x32>
6000ac40:	f44f 788b 	mov.w	r8, #278	; 0x116
6000ac44:	e7d9      	b.n	6000abfa <sys_clock_set_timeout+0x32>
	z_spin_lock_set_owner(l);
6000ac46:	4827      	ldr	r0, [pc, #156]	; (6000ace4 <sys_clock_set_timeout+0x11c>)
6000ac48:	f002 fc92 	bl	6000d570 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
6000ac4c:	f7ff ff62 	bl	6000ab14 <elapsed>
	val1 = SysTick->VAL;
6000ac50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
6000ac54:	4928      	ldr	r1, [pc, #160]	; (6000acf8 <sys_clock_set_timeout+0x130>)
	overflow_cyc = 0U;
6000ac56:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
6000ac58:	699f      	ldr	r7, [r3, #24]
	cycle_count += pending;
6000ac5a:	680b      	ldr	r3, [r1, #0]
6000ac5c:	4418      	add	r0, r3
	overflow_cyc = 0U;
6000ac5e:	4b27      	ldr	r3, [pc, #156]	; (6000acfc <sys_clock_set_timeout+0x134>)
6000ac60:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
6000ac62:	4b27      	ldr	r3, [pc, #156]	; (6000ad00 <sys_clock_set_timeout+0x138>)
6000ac64:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
6000ac66:	1ac2      	subs	r2, r0, r3
6000ac68:	d432      	bmi.n	6000acd0 <sys_clock_set_timeout+0x108>
		delay = ticks * CYC_PER_TICK;
6000ac6a:	f64e 2c60 	movw	ip, #60000	; 0xea60
		delay -= unannounced;
6000ac6e:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
6000ac70:	fb0c 2208 	mla	r2, ip, r8, r2
6000ac74:	f502 426a 	add.w	r2, r2, #59904	; 0xea00
6000ac78:	325f      	adds	r2, #95	; 0x5f
6000ac7a:	fbb2 f2fc 	udiv	r2, r2, ip
		delay -= unannounced;
6000ac7e:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
6000ac82:	f640 62a6 	movw	r2, #3750	; 0xea6
6000ac86:	4293      	cmp	r3, r2
6000ac88:	d922      	bls.n	6000acd0 <sys_clock_set_timeout+0x108>
		if (delay > MAX_CYCLES) {
6000ac8a:	4a1e      	ldr	r2, [pc, #120]	; (6000ad04 <sys_clock_set_timeout+0x13c>)
6000ac8c:	4293      	cmp	r3, r2
6000ac8e:	bf28      	it	cs
6000ac90:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
6000ac92:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
6000ac96:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
6000ac98:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
6000ac9a:	6996      	ldr	r6, [r2, #24]
	SysTick->LOAD = last_load - 1;
6000ac9c:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
6000ac9e:	2300      	movs	r3, #0
	if (val1 < val2) {
6000aca0:	42b7      	cmp	r7, r6
6000aca2:	eba7 0706 	sub.w	r7, r7, r6
	SysTick->VAL = 0; /* resets timer to last_load */
6000aca6:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 + (last_load_ - val2));
6000aca8:	bf38      	it	cc
6000acaa:	193f      	addcc	r7, r7, r4
		cycle_count += (val1 - val2);
6000acac:	4438      	add	r0, r7
6000acae:	6008      	str	r0, [r1, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000acb0:	480c      	ldr	r0, [pc, #48]	; (6000ace4 <sys_clock_set_timeout+0x11c>)
6000acb2:	f002 fc4f 	bl	6000d554 <z_spin_unlock_valid>
6000acb6:	b970      	cbnz	r0, 6000acd6 <sys_clock_set_timeout+0x10e>
6000acb8:	23c2      	movs	r3, #194	; 0xc2
6000acba:	4a0b      	ldr	r2, [pc, #44]	; (6000ace8 <sys_clock_set_timeout+0x120>)
6000acbc:	4912      	ldr	r1, [pc, #72]	; (6000ad08 <sys_clock_set_timeout+0x140>)
6000acbe:	480c      	ldr	r0, [pc, #48]	; (6000acf0 <sys_clock_set_timeout+0x128>)
6000acc0:	f007 ffcb 	bl	60012c5a <assert_print>
6000acc4:	4907      	ldr	r1, [pc, #28]	; (6000ace4 <sys_clock_set_timeout+0x11c>)
6000acc6:	4811      	ldr	r0, [pc, #68]	; (6000ad0c <sys_clock_set_timeout+0x144>)
6000acc8:	f007 ffc7 	bl	60012c5a <assert_print>
6000accc:	21c2      	movs	r1, #194	; 0xc2
6000acce:	e7ab      	b.n	6000ac28 <sys_clock_set_timeout+0x60>
6000acd0:	f640 63a6 	movw	r3, #3750	; 0xea6
6000acd4:	e7dd      	b.n	6000ac92 <sys_clock_set_timeout+0xca>
	__asm__ volatile(
6000acd6:	f385 8811 	msr	BASEPRI, r5
6000acda:	f3bf 8f6f 	isb	sy
6000acde:	e782      	b.n	6000abe6 <sys_clock_set_timeout+0x1e>
6000ace0:	20204138 	.word	0x20204138
6000ace4:	2020413c 	.word	0x2020413c
6000ace8:	6001717c 	.word	0x6001717c
6000acec:	600171a9 	.word	0x600171a9
6000acf0:	60016dfb 	.word	0x60016dfb
6000acf4:	600171be 	.word	0x600171be
6000acf8:	20204134 	.word	0x20204134
6000acfc:	2020412c 	.word	0x2020412c
6000ad00:	20204130 	.word	0x20204130
6000ad04:	00fe8440 	.word	0x00fe8440
6000ad08:	600171d6 	.word	0x600171d6
6000ad0c:	600171ed 	.word	0x600171ed

6000ad10 <sys_clock_elapsed>:
{
6000ad10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
6000ad12:	f04f 0310 	mov.w	r3, #16
6000ad16:	f3ef 8511 	mrs	r5, BASEPRI
6000ad1a:	f383 8812 	msr	BASEPRI_MAX, r3
6000ad1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ad22:	481b      	ldr	r0, [pc, #108]	; (6000ad90 <sys_clock_elapsed+0x80>)
6000ad24:	f002 fc08 	bl	6000d538 <z_spin_lock_valid>
6000ad28:	b968      	cbnz	r0, 6000ad46 <sys_clock_elapsed+0x36>
6000ad2a:	2394      	movs	r3, #148	; 0x94
6000ad2c:	4a19      	ldr	r2, [pc, #100]	; (6000ad94 <sys_clock_elapsed+0x84>)
6000ad2e:	491a      	ldr	r1, [pc, #104]	; (6000ad98 <sys_clock_elapsed+0x88>)
6000ad30:	481a      	ldr	r0, [pc, #104]	; (6000ad9c <sys_clock_elapsed+0x8c>)
6000ad32:	f007 ff92 	bl	60012c5a <assert_print>
6000ad36:	4916      	ldr	r1, [pc, #88]	; (6000ad90 <sys_clock_elapsed+0x80>)
6000ad38:	4819      	ldr	r0, [pc, #100]	; (6000ada0 <sys_clock_elapsed+0x90>)
6000ad3a:	f007 ff8e 	bl	60012c5a <assert_print>
6000ad3e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ad40:	4814      	ldr	r0, [pc, #80]	; (6000ad94 <sys_clock_elapsed+0x84>)
6000ad42:	f007 ff83 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000ad46:	4812      	ldr	r0, [pc, #72]	; (6000ad90 <sys_clock_elapsed+0x80>)
6000ad48:	f002 fc12 	bl	6000d570 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
6000ad4c:	f7ff fee2 	bl	6000ab14 <elapsed>
6000ad50:	4b14      	ldr	r3, [pc, #80]	; (6000ada4 <sys_clock_elapsed+0x94>)
6000ad52:	681c      	ldr	r4, [r3, #0]
6000ad54:	4b14      	ldr	r3, [pc, #80]	; (6000ada8 <sys_clock_elapsed+0x98>)
6000ad56:	681b      	ldr	r3, [r3, #0]
6000ad58:	1ae4      	subs	r4, r4, r3
6000ad5a:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ad5c:	480c      	ldr	r0, [pc, #48]	; (6000ad90 <sys_clock_elapsed+0x80>)
6000ad5e:	f002 fbf9 	bl	6000d554 <z_spin_unlock_valid>
6000ad62:	b958      	cbnz	r0, 6000ad7c <sys_clock_elapsed+0x6c>
6000ad64:	23c2      	movs	r3, #194	; 0xc2
6000ad66:	4a0b      	ldr	r2, [pc, #44]	; (6000ad94 <sys_clock_elapsed+0x84>)
6000ad68:	4910      	ldr	r1, [pc, #64]	; (6000adac <sys_clock_elapsed+0x9c>)
6000ad6a:	480c      	ldr	r0, [pc, #48]	; (6000ad9c <sys_clock_elapsed+0x8c>)
6000ad6c:	f007 ff75 	bl	60012c5a <assert_print>
6000ad70:	4907      	ldr	r1, [pc, #28]	; (6000ad90 <sys_clock_elapsed+0x80>)
6000ad72:	480f      	ldr	r0, [pc, #60]	; (6000adb0 <sys_clock_elapsed+0xa0>)
6000ad74:	f007 ff71 	bl	60012c5a <assert_print>
6000ad78:	21c2      	movs	r1, #194	; 0xc2
6000ad7a:	e7e1      	b.n	6000ad40 <sys_clock_elapsed+0x30>
	__asm__ volatile(
6000ad7c:	f385 8811 	msr	BASEPRI, r5
6000ad80:	f3bf 8f6f 	isb	sy
}
6000ad84:	f64e 2060 	movw	r0, #60000	; 0xea60
6000ad88:	fbb4 f0f0 	udiv	r0, r4, r0
6000ad8c:	bd38      	pop	{r3, r4, r5, pc}
6000ad8e:	bf00      	nop
6000ad90:	2020413c 	.word	0x2020413c
6000ad94:	6001717c 	.word	0x6001717c
6000ad98:	600171a9 	.word	0x600171a9
6000ad9c:	60016dfb 	.word	0x60016dfb
6000ada0:	600171be 	.word	0x600171be
6000ada4:	20204134 	.word	0x20204134
6000ada8:	20204130 	.word	0x20204130
6000adac:	600171d6 	.word	0x600171d6
6000adb0:	600171ed 	.word	0x600171ed

6000adb4 <sys_clock_cycle_get_32>:
{
6000adb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
6000adb6:	f04f 0310 	mov.w	r3, #16
6000adba:	f3ef 8511 	mrs	r5, BASEPRI
6000adbe:	f383 8812 	msr	BASEPRI_MAX, r3
6000adc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000adc6:	4818      	ldr	r0, [pc, #96]	; (6000ae28 <sys_clock_cycle_get_32+0x74>)
6000adc8:	f002 fbb6 	bl	6000d538 <z_spin_lock_valid>
6000adcc:	b968      	cbnz	r0, 6000adea <sys_clock_cycle_get_32+0x36>
6000adce:	2394      	movs	r3, #148	; 0x94
6000add0:	4a16      	ldr	r2, [pc, #88]	; (6000ae2c <sys_clock_cycle_get_32+0x78>)
6000add2:	4917      	ldr	r1, [pc, #92]	; (6000ae30 <sys_clock_cycle_get_32+0x7c>)
6000add4:	4817      	ldr	r0, [pc, #92]	; (6000ae34 <sys_clock_cycle_get_32+0x80>)
6000add6:	f007 ff40 	bl	60012c5a <assert_print>
6000adda:	4913      	ldr	r1, [pc, #76]	; (6000ae28 <sys_clock_cycle_get_32+0x74>)
6000addc:	4816      	ldr	r0, [pc, #88]	; (6000ae38 <sys_clock_cycle_get_32+0x84>)
6000adde:	f007 ff3c 	bl	60012c5a <assert_print>
6000ade2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ade4:	4811      	ldr	r0, [pc, #68]	; (6000ae2c <sys_clock_cycle_get_32+0x78>)
6000ade6:	f007 ff31 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000adea:	480f      	ldr	r0, [pc, #60]	; (6000ae28 <sys_clock_cycle_get_32+0x74>)
6000adec:	f002 fbc0 	bl	6000d570 <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
6000adf0:	f7ff fe90 	bl	6000ab14 <elapsed>
6000adf4:	4b11      	ldr	r3, [pc, #68]	; (6000ae3c <sys_clock_cycle_get_32+0x88>)
6000adf6:	681c      	ldr	r4, [r3, #0]
6000adf8:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000adfa:	480b      	ldr	r0, [pc, #44]	; (6000ae28 <sys_clock_cycle_get_32+0x74>)
6000adfc:	f002 fbaa 	bl	6000d554 <z_spin_unlock_valid>
6000ae00:	b958      	cbnz	r0, 6000ae1a <sys_clock_cycle_get_32+0x66>
6000ae02:	23c2      	movs	r3, #194	; 0xc2
6000ae04:	4a09      	ldr	r2, [pc, #36]	; (6000ae2c <sys_clock_cycle_get_32+0x78>)
6000ae06:	490e      	ldr	r1, [pc, #56]	; (6000ae40 <sys_clock_cycle_get_32+0x8c>)
6000ae08:	480a      	ldr	r0, [pc, #40]	; (6000ae34 <sys_clock_cycle_get_32+0x80>)
6000ae0a:	f007 ff26 	bl	60012c5a <assert_print>
6000ae0e:	4906      	ldr	r1, [pc, #24]	; (6000ae28 <sys_clock_cycle_get_32+0x74>)
6000ae10:	480c      	ldr	r0, [pc, #48]	; (6000ae44 <sys_clock_cycle_get_32+0x90>)
6000ae12:	f007 ff22 	bl	60012c5a <assert_print>
6000ae16:	21c2      	movs	r1, #194	; 0xc2
6000ae18:	e7e4      	b.n	6000ade4 <sys_clock_cycle_get_32+0x30>
	__asm__ volatile(
6000ae1a:	f385 8811 	msr	BASEPRI, r5
6000ae1e:	f3bf 8f6f 	isb	sy
}
6000ae22:	4620      	mov	r0, r4
6000ae24:	bd38      	pop	{r3, r4, r5, pc}
6000ae26:	bf00      	nop
6000ae28:	2020413c 	.word	0x2020413c
6000ae2c:	6001717c 	.word	0x6001717c
6000ae30:	600171a9 	.word	0x600171a9
6000ae34:	60016dfb 	.word	0x60016dfb
6000ae38:	600171be 	.word	0x600171be
6000ae3c:	20204134 	.word	0x20204134
6000ae40:	600171d6 	.word	0x600171d6
6000ae44:	600171ed 	.word	0x600171ed

6000ae48 <imx_pinctrl_init>:
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000ae48:	4b12      	ldr	r3, [pc, #72]	; (6000ae94 <imx_pinctrl_init+0x4c>)
6000ae4a:	f103 0278 	add.w	r2, r3, #120	; 0x78
6000ae4e:	e852 2f00 	ldrex	r2, [r2]

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000ae52:	f042 020c 	orr.w	r2, r2, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000ae56:	f103 0078 	add.w	r0, r3, #120	; 0x78
6000ae5a:	e840 2100 	strex	r1, r2, [r0]
6000ae5e:	2900      	cmp	r1, #0
6000ae60:	d1f3      	bne.n	6000ae4a <imx_pinctrl_init+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000ae62:	f103 0270 	add.w	r2, r3, #112	; 0x70
6000ae66:	e852 2f00 	ldrex	r2, [r2]
6000ae6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000ae6e:	f103 0070 	add.w	r0, r3, #112	; 0x70
6000ae72:	e840 2100 	strex	r1, r2, [r0]
6000ae76:	2900      	cmp	r1, #0
6000ae78:	d1f3      	bne.n	6000ae62 <imx_pinctrl_init+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000ae7a:	f103 0278 	add.w	r2, r3, #120	; 0x78
6000ae7e:	e852 2f00 	ldrex	r2, [r2]
6000ae82:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000ae86:	f103 0178 	add.w	r1, r3, #120	; 0x78
6000ae8a:	e841 2000 	strex	r0, r2, [r1]
6000ae8e:	2800      	cmp	r0, #0
6000ae90:	d1f3      	bne.n	6000ae7a <imx_pinctrl_init+0x32>
#elif defined(CONFIG_SOC_MIMX8MQ6)
	CLOCK_EnableClock(kCLOCK_Iomux);
#endif /* CONFIG_SOC_SERIES_IMX_RT */

	return 0;
}
6000ae92:	4770      	bx	lr
6000ae94:	400fc000 	.word	0x400fc000

6000ae98 <CLOCK_GetOscFreq>:
6000ae98:	4b04      	ldr	r3, [pc, #16]	; (6000aeac <CLOCK_GetOscFreq+0x14>)
6000ae9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
6000ae9e:	06db      	lsls	r3, r3, #27
6000aea0:	d402      	bmi.n	6000aea8 <CLOCK_GetOscFreq+0x10>
6000aea2:	4b03      	ldr	r3, [pc, #12]	; (6000aeb0 <CLOCK_GetOscFreq+0x18>)
6000aea4:	6818      	ldr	r0, [r3, #0]
6000aea6:	4770      	bx	lr
6000aea8:	4802      	ldr	r0, [pc, #8]	; (6000aeb4 <CLOCK_GetOscFreq+0x1c>)
}
6000aeaa:	4770      	bx	lr
6000aeac:	400d8000 	.word	0x400d8000
6000aeb0:	20204144 	.word	0x20204144
6000aeb4:	016e3600 	.word	0x016e3600

6000aeb8 <CLOCK_EnableUsbhs0Clock>:
 * retval false The clock source is invalid to get proper USB HS clock.
 */
bool CLOCK_EnableUsbhs0Clock(clock_usb_src_t src, uint32_t freq)
{
    uint32_t i;
    CCM->CCGR6 |= CCM_CCGR6_CG0_MASK;
6000aeb8:	4a10      	ldr	r2, [pc, #64]	; (6000aefc <CLOCK_EnableUsbhs0Clock+0x44>)
6000aeba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000aebe:	f043 0303 	orr.w	r3, r3, #3
6000aec2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    USB1->USBCMD |= USBHS_USBCMD_RST_MASK;
6000aec6:	f502 12f2 	add.w	r2, r2, #1982464	; 0x1e4000
6000aeca:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000aece:	f043 0302 	orr.w	r3, r3, #2
6000aed2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
6000aed6:	4b0a      	ldr	r3, [pc, #40]	; (6000af00 <CLOCK_EnableUsbhs0Clock+0x48>)

    /* Add a delay between RST and RS so make sure there is a DP pullup sequence*/
    for (i = 0; i < 400000U; i++)
    {
        __ASM("nop");
6000aed8:	bf00      	nop
    for (i = 0; i < 400000U; i++)
6000aeda:	3b01      	subs	r3, #1
6000aedc:	d1fc      	bne.n	6000aed8 <CLOCK_EnableUsbhs0Clock+0x20>
    }
    PMU->REG_3P0 = (PMU->REG_3P0 & (~PMU_REG_3P0_OUTPUT_TRG_MASK)) |
6000aede:	4a09      	ldr	r2, [pc, #36]	; (6000af04 <CLOCK_EnableUsbhs0Clock+0x4c>)
                   (PMU_REG_3P0_OUTPUT_TRG(0x17) | PMU_REG_3P0_ENABLE_LINREG_MASK);
    return true;
}
6000aee0:	2001      	movs	r0, #1
    PMU->REG_3P0 = (PMU->REG_3P0 & (~PMU_REG_3P0_OUTPUT_TRG_MASK)) |
6000aee2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
6000aee6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
6000aeea:	f023 0301 	bic.w	r3, r3, #1
6000aeee:	f443 53b8 	orr.w	r3, r3, #5888	; 0x1700
6000aef2:	f043 0301 	orr.w	r3, r3, #1
6000aef6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
6000aefa:	4770      	bx	lr
6000aefc:	400fc000 	.word	0x400fc000
6000af00:	00061a80 	.word	0x00061a80
6000af04:	400d8000 	.word	0x400d8000

6000af08 <CLOCK_InitArmPll>:
 * param config   configuration to set to PLL.
 */
void CLOCK_InitArmPll(const clock_arm_pll_config_t *config)
{
    /* Bypass PLL first */
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000af08:	4a0f      	ldr	r2, [pc, #60]	; (6000af48 <CLOCK_InitArmPll+0x40>)
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000af0a:	7903      	ldrb	r3, [r0, #4]
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000af0c:	6811      	ldr	r1, [r2, #0]
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000af0e:	039b      	lsls	r3, r3, #14
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000af10:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000af14:	b29b      	uxth	r3, r3
6000af16:	430b      	orrs	r3, r1
6000af18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000af1c:	6013      	str	r3, [r2, #0]

    CCM_ANALOG->PLL_ARM =
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000af1e:	6811      	ldr	r1, [r2, #0]
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000af20:	6803      	ldr	r3, [r0, #0]
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000af22:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000af26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000af2a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000af2e:	430b      	orrs	r3, r1
6000af30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    CCM_ANALOG->PLL_ARM =
6000af34:	6013      	str	r3, [r2, #0]

    while ((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK_MASK) == 0UL)
6000af36:	6813      	ldr	r3, [r2, #0]
6000af38:	2b00      	cmp	r3, #0
6000af3a:	dafc      	bge.n	6000af36 <CLOCK_InitArmPll+0x2e>
    {
    }

    /* Disable Bypass */
    CCM_ANALOG->PLL_ARM &= ~CCM_ANALOG_PLL_ARM_BYPASS_MASK;
6000af3c:	6813      	ldr	r3, [r2, #0]
6000af3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
6000af42:	6013      	str	r3, [r2, #0]
}
6000af44:	4770      	bx	lr
6000af46:	bf00      	nop
6000af48:	400d8000 	.word	0x400d8000

6000af4c <CLOCK_InitUsb1Pll>:
 * param config Configuration to set to PLL.
 */
void CLOCK_InitUsb1Pll(const clock_usb_pll_config_t *config)
{
    /* Bypass PLL first */
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000af4c:	4a0f      	ldr	r2, [pc, #60]	; (6000af8c <CLOCK_InitUsb1Pll+0x40>)
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000af4e:	7843      	ldrb	r3, [r0, #1]
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000af50:	6911      	ldr	r1, [r2, #16]
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000af52:	039b      	lsls	r3, r3, #14
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000af54:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000af58:	b29b      	uxth	r3, r3
6000af5a:	430b      	orrs	r3, r1
6000af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000af60:	6113      	str	r3, [r2, #16]

    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK)) |
6000af62:	6911      	ldr	r1, [r2, #16]
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000af64:	7803      	ldrb	r3, [r0, #0]
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
6000af66:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000af6a:	005b      	lsls	r3, r3, #1
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
6000af6c:	f021 0102 	bic.w	r1, r1, #2
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000af70:	f003 0302 	and.w	r3, r3, #2
6000af74:	430b      	orrs	r3, r1
6000af76:	f443 5341 	orr.w	r3, r3, #12352	; 0x3040
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK)) |
6000af7a:	6113      	str	r3, [r2, #16]

    while ((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_LOCK_MASK) == 0UL)
6000af7c:	6913      	ldr	r3, [r2, #16]
6000af7e:	2b00      	cmp	r3, #0
6000af80:	dafc      	bge.n	6000af7c <CLOCK_InitUsb1Pll+0x30>
    {
    }

    /* Disable Bypass */
    CCM_ANALOG->PLL_USB1 &= ~CCM_ANALOG_PLL_USB1_BYPASS_MASK;
6000af82:	6913      	ldr	r3, [r2, #16]
6000af84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
6000af88:	6113      	str	r3, [r2, #16]
}
6000af8a:	4770      	bx	lr
6000af8c:	400d8000 	.word	0x400d8000

6000af90 <CLOCK_EnableUsbhs0PhyPllClock>:
{
6000af90:	b508      	push	{r3, lr}
    if ((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_ENABLE_MASK) != 0U)
6000af92:	4b0e      	ldr	r3, [pc, #56]	; (6000afcc <CLOCK_EnableUsbhs0PhyPllClock+0x3c>)
6000af94:	691a      	ldr	r2, [r3, #16]
6000af96:	0492      	lsls	r2, r2, #18
6000af98:	d514      	bpl.n	6000afc4 <CLOCK_EnableUsbhs0PhyPllClock+0x34>
        CCM_ANALOG->PLL_USB1 |= CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK;
6000af9a:	691a      	ldr	r2, [r3, #16]
6000af9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
6000afa0:	611a      	str	r2, [r3, #16]
    USBPHY1->CTRL &= ~USBPHY_CTRL_SFTRST_MASK; /* release PHY from reset */
6000afa2:	4b0b      	ldr	r3, [pc, #44]	; (6000afd0 <CLOCK_EnableUsbhs0PhyPllClock+0x40>)
}
6000afa4:	2001      	movs	r0, #1
    USBPHY1->CTRL &= ~USBPHY_CTRL_SFTRST_MASK; /* release PHY from reset */
6000afa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000afa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
6000afac:	631a      	str	r2, [r3, #48]	; 0x30
    USBPHY1->CTRL &= ~USBPHY_CTRL_CLKGATE_MASK;
6000afae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000afb0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
6000afb4:	631a      	str	r2, [r3, #48]	; 0x30
    USBPHY1->PWD = 0;
6000afb6:	2200      	movs	r2, #0
6000afb8:	601a      	str	r2, [r3, #0]
    USBPHY1->CTRL |= USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK | USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK |
6000afba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000afbc:	f442 12c6 	orr.w	r2, r2, #1622016	; 0x18c000
6000afc0:	631a      	str	r2, [r3, #48]	; 0x30
}
6000afc2:	bd08      	pop	{r3, pc}
        CLOCK_InitUsb1Pll(&g_ccmConfigUsbPll);
6000afc4:	4803      	ldr	r0, [pc, #12]	; (6000afd4 <CLOCK_EnableUsbhs0PhyPllClock+0x44>)
6000afc6:	f7ff ffc1 	bl	6000af4c <CLOCK_InitUsb1Pll>
6000afca:	e7ea      	b.n	6000afa2 <CLOCK_EnableUsbhs0PhyPllClock+0x12>
6000afcc:	400d8000 	.word	0x400d8000
6000afd0:	400d9000 	.word	0x400d9000
6000afd4:	60018b5c 	.word	0x60018b5c

6000afd8 <CLOCK_GetPllFreq>:
 *         - true: The PLL is enabled.
 *         - false: The PLL is not enabled.
 */
static inline bool CLOCK_IsPllEnabled(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return ((CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_TUPLE_SHIFT(pll))) != 0U);
6000afd8:	f3c0 410b 	ubfx	r1, r0, #16, #12
 *
 * param pll   pll name to get frequency.
 * return The PLL output frequency in hertz.
 */
uint32_t CLOCK_GetPllFreq(clock_pll_t pll)
{
6000afdc:	4602      	mov	r2, r0
6000afde:	f000 001f 	and.w	r0, r0, #31
6000afe2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
6000afe6:	f501 2158 	add.w	r1, r1, #884736	; 0xd8000
6000afea:	b570      	push	{r4, r5, r6, lr}
6000afec:	680b      	ldr	r3, [r1, #0]
6000afee:	40c3      	lsrs	r3, r0
        100000000U, /* 100M */
        125000000U  /* 125M */
    };

    /* check if PLL is enabled */
    if (!CLOCK_IsPllEnabled(CCM_ANALOG, pll))
6000aff0:	07d8      	lsls	r0, r3, #31
6000aff2:	d519      	bpl.n	6000b028 <CLOCK_GetPllFreq+0x50>
 * @param pll PLL control name (see @ref ccm_analog_pll_control_t enumeration)
 * @retval bypass reference clock frequency value.
 */
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return (((CCM_ANALOG_TUPLE_REG(base, pll) & CCM_ANALOG_PLL_BYPASS_CLK_SRC_MASK) >>
6000aff4:	680b      	ldr	r3, [r1, #0]
             CCM_ANALOG_PLL_BYPASS_CLK_SRC_SHIFT) == (uint32_t)kCLOCK_PllClkSrc24M) ?
               CLOCK_GetOscFreq() :
6000aff6:	f413 4f40 	tst.w	r3, #49152	; 0xc000
6000affa:	d118      	bne.n	6000b02e <CLOCK_GetPllFreq+0x56>
6000affc:	f7ff ff4c 	bl	6000ae98 <CLOCK_GetOscFreq>
6000b000:	4604      	mov	r4, r0
    return (bool)(CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_PLL_BYPASS_SHIFT));
6000b002:	680b      	ldr	r3, [r1, #0]

    /* get pll reference clock */
    freq = CLOCK_GetPllBypassRefClk(CCM_ANALOG, pll);

    /* check if pll is bypassed */
    if (CLOCK_IsPllBypassed(CCM_ANALOG, pll))
6000b004:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
6000b008:	d10f      	bne.n	6000b02a <CLOCK_GetPllFreq+0x52>
    {
        return freq;
    }

    switch (pll)
6000b00a:	4966      	ldr	r1, [pc, #408]	; (6000b1a4 <CLOCK_GetPllFreq+0x1cc>)
6000b00c:	428a      	cmp	r2, r1
6000b00e:	d04b      	beq.n	6000b0a8 <CLOCK_GetPllFreq+0xd0>
6000b010:	d821      	bhi.n	6000b056 <CLOCK_GetPllFreq+0x7e>
6000b012:	f5a1 01a0 	sub.w	r1, r1, #5242880	; 0x500000
6000b016:	428a      	cmp	r2, r1
6000b018:	f000 80c0 	beq.w	6000b19c <CLOCK_GetPllFreq+0x1c4>
6000b01c:	d809      	bhi.n	6000b032 <CLOCK_GetPllFreq+0x5a>
6000b01e:	2a0d      	cmp	r2, #13
6000b020:	d032      	beq.n	6000b088 <CLOCK_GetPllFreq+0xb0>
6000b022:	4b61      	ldr	r3, [pc, #388]	; (6000b1a8 <CLOCK_GetPllFreq+0x1d0>)
6000b024:	429a      	cmp	r2, r3
6000b026:	d036      	beq.n	6000b096 <CLOCK_GetPllFreq+0xbe>
            /* ref_enetpll1 if fixed at 25MHz. */
            freq = 25000000UL;
            break;

        case kCLOCK_PllUsb2:
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000b028:	2400      	movs	r4, #0
            freq = 0U;
            break;
    }

    return freq;
}
6000b02a:	4620      	mov	r0, r4
6000b02c:	bd70      	pop	{r4, r5, r6, pc}
               CLOCK_GetOscFreq() :
6000b02e:	2400      	movs	r4, #0
6000b030:	e7e7      	b.n	6000b002 <CLOCK_GetPllFreq+0x2a>
    switch (pll)
6000b032:	495e      	ldr	r1, [pc, #376]	; (6000b1ac <CLOCK_GetPllFreq+0x1d4>)
6000b034:	428a      	cmp	r2, r1
6000b036:	d1f7      	bne.n	6000b028 <CLOCK_GetPllFreq+0x50>
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_SYS_NUM)));
6000b038:	4d5d      	ldr	r5, [pc, #372]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b03a:	6d28      	ldr	r0, [r5, #80]	; 0x50
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_SYS_DENOM));
6000b03c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
6000b03e:	fba4 0100 	umull	r0, r1, r4, r0
6000b042:	f7f8 f99f 	bl	60003384 <__aeabi_uldivmod>
            if ((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK) != 0U)
6000b046:	6b2b      	ldr	r3, [r5, #48]	; 0x30
6000b048:	07db      	lsls	r3, r3, #31
                freq *= 22U;
6000b04a:	bf4c      	ite	mi
6000b04c:	2316      	movmi	r3, #22
                freq *= 20U;
6000b04e:	2314      	movpl	r3, #20
6000b050:	4363      	muls	r3, r4
            freq += (uint32_t)freqTmp;
6000b052:	181c      	adds	r4, r3, r0
            break;
6000b054:	e7e9      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
    switch (pll)
6000b056:	4957      	ldr	r1, [pc, #348]	; (6000b1b4 <CLOCK_GetPllFreq+0x1dc>)
6000b058:	428a      	cmp	r2, r1
6000b05a:	f000 8099 	beq.w	6000b190 <CLOCK_GetPllFreq+0x1b8>
6000b05e:	d80e      	bhi.n	6000b07e <CLOCK_GetPllFreq+0xa6>
6000b060:	4955      	ldr	r1, [pc, #340]	; (6000b1b8 <CLOCK_GetPllFreq+0x1e0>)
6000b062:	428a      	cmp	r2, r1
6000b064:	d058      	beq.n	6000b118 <CLOCK_GetPllFreq+0x140>
6000b066:	4b55      	ldr	r3, [pc, #340]	; (6000b1bc <CLOCK_GetPllFreq+0x1e4>)
6000b068:	429a      	cmp	r2, r3
6000b06a:	d1dd      	bne.n	6000b028 <CLOCK_GetPllFreq+0x50>
                (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_ENET_DIV_SELECT_SHIFT;
6000b06c:	4b50      	ldr	r3, [pc, #320]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b06e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
            divSelect =
6000b072:	f003 0303 	and.w	r3, r3, #3
            freq = enetRefClkFreq[divSelect];
6000b076:	4a52      	ldr	r2, [pc, #328]	; (6000b1c0 <CLOCK_GetPllFreq+0x1e8>)
6000b078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
            break;
6000b07c:	e7d5      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
    switch (pll)
6000b07e:	4b51      	ldr	r3, [pc, #324]	; (6000b1c4 <CLOCK_GetPllFreq+0x1ec>)
6000b080:	429a      	cmp	r2, r3
6000b082:	d1d1      	bne.n	6000b028 <CLOCK_GetPllFreq+0x50>
            freq = 25000000UL;
6000b084:	4c50      	ldr	r4, [pc, #320]	; (6000b1c8 <CLOCK_GetPllFreq+0x1f0>)
6000b086:	e7d0      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
            freq = ((freq * ((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK) >>
6000b088:	4b49      	ldr	r3, [pc, #292]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b08a:	681b      	ldr	r3, [r3, #0]
6000b08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6000b090:	4363      	muls	r3, r4
6000b092:	085c      	lsrs	r4, r3, #1
            break;
6000b094:	e7c9      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
            freq = (freq * (((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK) != 0UL) ? 22U : 20U));
6000b096:	4b46      	ldr	r3, [pc, #280]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b098:	691b      	ldr	r3, [r3, #16]
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000b09a:	f013 0f02 	tst.w	r3, #2
6000b09e:	bf0c      	ite	eq
6000b0a0:	2314      	moveq	r3, #20
6000b0a2:	2316      	movne	r3, #22
6000b0a4:	435c      	muls	r4, r3
            break;
6000b0a6:	e7c0      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT;
6000b0a8:	4d41      	ldr	r5, [pc, #260]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b0aa:	6f2e      	ldr	r6, [r5, #112]	; 0x70
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_NUM)));
6000b0ac:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
6000b0b0:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
            divSelect =
6000b0b4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
6000b0b8:	fba4 0100 	umull	r0, r1, r4, r0
6000b0bc:	f7f8 f962 	bl	60003384 <__aeabi_uldivmod>
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000b0c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
            freq = freq * divSelect + (uint32_t)freqTmp;
6000b0c2:	4366      	muls	r6, r4
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000b0c4:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
            freq = freq * divSelect + (uint32_t)freqTmp;
6000b0c8:	1834      	adds	r4, r6, r0
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000b0ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000b0ce:	d016      	beq.n	6000b0fe <CLOCK_GetPllFreq+0x126>
6000b0d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
6000b0d4:	d001      	beq.n	6000b0da <CLOCK_GetPllFreq+0x102>
6000b0d6:	b9a3      	cbnz	r3, 6000b102 <CLOCK_GetPllFreq+0x12a>
                    freq = freq >> 2U;
6000b0d8:	08a4      	lsrs	r4, r4, #2
            switch (CCM_ANALOG->MISC2 & (CCM_ANALOG_MISC2_AUDIO_DIV_MSB_MASK | CCM_ANALOG_MISC2_AUDIO_DIV_LSB_MASK))
6000b0da:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
6000b0de:	4a3b      	ldr	r2, [pc, #236]	; (6000b1cc <CLOCK_GetPllFreq+0x1f4>)
6000b0e0:	4013      	ands	r3, r2
6000b0e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
6000b0e6:	d0a0      	beq.n	6000b02a <CLOCK_GetPllFreq+0x52>
6000b0e8:	d812      	bhi.n	6000b110 <CLOCK_GetPllFreq+0x138>
6000b0ea:	2b00      	cmp	r3, #0
6000b0ec:	d09d      	beq.n	6000b02a <CLOCK_GetPllFreq+0x52>
6000b0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
6000b0f2:	d04b      	beq.n	6000b18c <CLOCK_GetPllFreq+0x1b4>
                    assert(false);
6000b0f4:	4b36      	ldr	r3, [pc, #216]	; (6000b1d0 <CLOCK_GetPllFreq+0x1f8>)
6000b0f6:	f240 412b 	movw	r1, #1067	; 0x42b
6000b0fa:	4a36      	ldr	r2, [pc, #216]	; (6000b1d4 <CLOCK_GetPllFreq+0x1fc>)
6000b0fc:	e005      	b.n	6000b10a <CLOCK_GetPllFreq+0x132>
                    freq = freq >> 1U;
6000b0fe:	0864      	lsrs	r4, r4, #1
                    break;
6000b100:	e7eb      	b.n	6000b0da <CLOCK_GetPllFreq+0x102>
                    assert(false);
6000b102:	4b33      	ldr	r3, [pc, #204]	; (6000b1d0 <CLOCK_GetPllFreq+0x1f8>)
6000b104:	f240 4117 	movw	r1, #1047	; 0x417
6000b108:	4a32      	ldr	r2, [pc, #200]	; (6000b1d4 <CLOCK_GetPllFreq+0x1fc>)
                    assert(false);
6000b10a:	4833      	ldr	r0, [pc, #204]	; (6000b1d8 <CLOCK_GetPllFreq+0x200>)
6000b10c:	f004 ff78 	bl	60010000 <__assert_func>
6000b110:	4293      	cmp	r3, r2
6000b112:	d1ef      	bne.n	6000b0f4 <CLOCK_GetPllFreq+0x11c>
                    freq >>= 2U;
6000b114:	08a4      	lsrs	r4, r4, #2
                    break;
6000b116:	e788      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT;
6000b118:	4d25      	ldr	r5, [pc, #148]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b11a:	f8d5 60a0 	ldr.w	r6, [r5, #160]	; 0xa0
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_NUM)));
6000b11e:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_DENOM));
6000b122:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
            divSelect =
6000b126:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_DENOM));
6000b12a:	fba4 0100 	umull	r0, r1, r4, r0
6000b12e:	f7f8 f929 	bl	60003384 <__aeabi_uldivmod>
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000b132:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            freq = freq * divSelect + (uint32_t)freqTmp;
6000b136:	4366      	muls	r6, r4
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000b138:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
            freq = freq * divSelect + (uint32_t)freqTmp;
6000b13c:	1834      	adds	r4, r6, r0
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000b13e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000b142:	d018      	beq.n	6000b176 <CLOCK_GetPllFreq+0x19e>
6000b144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
6000b148:	d001      	beq.n	6000b14e <CLOCK_GetPllFreq+0x176>
6000b14a:	b9b3      	cbnz	r3, 6000b17a <CLOCK_GetPllFreq+0x1a2>
                    freq = freq >> 2U;
6000b14c:	08a4      	lsrs	r4, r4, #2
            switch (CCM_ANALOG->MISC2 & CCM_ANALOG_MISC2_VIDEO_DIV_MASK)
6000b14e:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
6000b152:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
6000b156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
6000b15a:	f43f af66 	beq.w	6000b02a <CLOCK_GetPllFreq+0x52>
6000b15e:	d811      	bhi.n	6000b184 <CLOCK_GetPllFreq+0x1ac>
6000b160:	2b00      	cmp	r3, #0
6000b162:	f43f af62 	beq.w	6000b02a <CLOCK_GetPllFreq+0x52>
6000b166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
6000b16a:	d00f      	beq.n	6000b18c <CLOCK_GetPllFreq+0x1b4>
                    assert(false);
6000b16c:	4b18      	ldr	r3, [pc, #96]	; (6000b1d0 <CLOCK_GetPllFreq+0x1f8>)
6000b16e:	f240 416c 	movw	r1, #1132	; 0x46c
6000b172:	4a18      	ldr	r2, [pc, #96]	; (6000b1d4 <CLOCK_GetPllFreq+0x1fc>)
6000b174:	e7c9      	b.n	6000b10a <CLOCK_GetPllFreq+0x132>
                    freq = freq >> 1U;
6000b176:	0864      	lsrs	r4, r4, #1
                    break;
6000b178:	e7e9      	b.n	6000b14e <CLOCK_GetPllFreq+0x176>
                    assert(false);
6000b17a:	4b15      	ldr	r3, [pc, #84]	; (6000b1d0 <CLOCK_GetPllFreq+0x1f8>)
6000b17c:	f44f 618b 	mov.w	r1, #1112	; 0x458
6000b180:	4a14      	ldr	r2, [pc, #80]	; (6000b1d4 <CLOCK_GetPllFreq+0x1fc>)
6000b182:	e7c2      	b.n	6000b10a <CLOCK_GetPllFreq+0x132>
6000b184:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
6000b188:	d0c4      	beq.n	6000b114 <CLOCK_GetPllFreq+0x13c>
6000b18a:	e7ef      	b.n	6000b16c <CLOCK_GetPllFreq+0x194>
                    freq >>= 1U;
6000b18c:	0864      	lsrs	r4, r4, #1
                    break;
6000b18e:	e74c      	b.n	6000b02a <CLOCK_GetPllFreq+0x52>
            divSelect = (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_ENET2_DIV_SELECT_MASK) >>
6000b190:	4b07      	ldr	r3, [pc, #28]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
6000b196:	f3c3 0381 	ubfx	r3, r3, #2, #2
6000b19a:	e76c      	b.n	6000b076 <CLOCK_GetPllFreq+0x9e>
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000b19c:	4b04      	ldr	r3, [pc, #16]	; (6000b1b0 <CLOCK_GetPllFreq+0x1d8>)
6000b19e:	6a1b      	ldr	r3, [r3, #32]
6000b1a0:	e77b      	b.n	6000b09a <CLOCK_GetPllFreq+0xc2>
6000b1a2:	bf00      	nop
6000b1a4:	0070000d 	.word	0x0070000d
6000b1a8:	0010000d 	.word	0x0010000d
6000b1ac:	0030000d 	.word	0x0030000d
6000b1b0:	400d8000 	.word	0x400d8000
6000b1b4:	00e00014 	.word	0x00e00014
6000b1b8:	00a0000d 	.word	0x00a0000d
6000b1bc:	00e0000d 	.word	0x00e0000d
6000b1c0:	60016a5c 	.word	0x60016a5c
6000b1c4:	00e00015 	.word	0x00e00015
6000b1c8:	017d7840 	.word	0x017d7840
6000b1cc:	00808000 	.word	0x00808000
6000b1d0:	60018b45 	.word	0x60018b45
6000b1d4:	60018b4b 	.word	0x60018b4b
6000b1d8:	60018af4 	.word	0x60018af4

6000b1dc <CLOCK_GetSysPfdFreq>:
 *
 * param pfd   pfd name to get frequency.
 * return The PFD output frequency in hertz.
 */
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd)
{
6000b1dc:	b510      	push	{r4, lr}
6000b1de:	4604      	mov	r4, r0
    uint32_t freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000b1e0:	4813      	ldr	r0, [pc, #76]	; (6000b230 <CLOCK_GetSysPfdFreq+0x54>)
6000b1e2:	f7ff fef9 	bl	6000afd8 <CLOCK_GetPllFreq>

    switch (pfd)
6000b1e6:	2c03      	cmp	r4, #3
6000b1e8:	d81f      	bhi.n	6000b22a <CLOCK_GetSysPfdFreq+0x4e>
6000b1ea:	e8df f004 	tbb	[pc, r4]
6000b1ee:	0c02      	.short	0x0c02
6000b1f0:	1812      	.short	0x1812
    {
        case kCLOCK_Pfd0:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD0_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT);
6000b1f2:	4b10      	ldr	r3, [pc, #64]	; (6000b234 <CLOCK_GetSysPfdFreq+0x58>)
6000b1f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000b1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        case kCLOCK_Pfd2:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
            break;

        case kCLOCK_Pfd3:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
6000b1fc:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    }
    freq *= 18U;

    return freq;
}
6000b200:	2312      	movs	r3, #18
6000b202:	4358      	muls	r0, r3
6000b204:	bd10      	pop	{r4, pc}
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD1_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT);
6000b206:	4b0b      	ldr	r3, [pc, #44]	; (6000b234 <CLOCK_GetSysPfdFreq+0x58>)
6000b208:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000b20c:	f3c3 2305 	ubfx	r3, r3, #8, #6
6000b210:	e7f4      	b.n	6000b1fc <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
6000b212:	4b08      	ldr	r3, [pc, #32]	; (6000b234 <CLOCK_GetSysPfdFreq+0x58>)
6000b214:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000b218:	f3c3 4305 	ubfx	r3, r3, #16, #6
6000b21c:	e7ee      	b.n	6000b1fc <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
6000b21e:	4b05      	ldr	r3, [pc, #20]	; (6000b234 <CLOCK_GetSysPfdFreq+0x58>)
6000b220:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000b224:	f3c3 6305 	ubfx	r3, r3, #24, #6
6000b228:	e7e8      	b.n	6000b1fc <CLOCK_GetSysPfdFreq+0x20>
    switch (pfd)
6000b22a:	2000      	movs	r0, #0
6000b22c:	e7e8      	b.n	6000b200 <CLOCK_GetSysPfdFreq+0x24>
6000b22e:	bf00      	nop
6000b230:	0030000d 	.word	0x0030000d
6000b234:	400d8000 	.word	0x400d8000

6000b238 <CLOCK_GetPeriphClkFreq>:
{
6000b238:	b510      	push	{r4, lr}
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0U)
6000b23a:	4c20      	ldr	r4, [pc, #128]	; (6000b2bc <CLOCK_GetPeriphClkFreq+0x84>)
6000b23c:	6960      	ldr	r0, [r4, #20]
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000b23e:	69a3      	ldr	r3, [r4, #24]
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0U)
6000b240:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
6000b244:	d01a      	beq.n	6000b27c <CLOCK_GetPeriphClkFreq+0x44>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000b246:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
6000b24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
6000b24e:	d007      	beq.n	6000b260 <CLOCK_GetPeriphClkFreq+0x28>
6000b250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
6000b254:	d00e      	beq.n	6000b274 <CLOCK_GetPeriphClkFreq+0x3c>
6000b256:	b97b      	cbnz	r3, 6000b278 <CLOCK_GetPeriphClkFreq+0x40>
                freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
6000b258:	4819      	ldr	r0, [pc, #100]	; (6000b2c0 <CLOCK_GetPeriphClkFreq+0x88>)
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000b25a:	f7ff febd 	bl	6000afd8 <CLOCK_GetPllFreq>
                break;
6000b25e:	e001      	b.n	6000b264 <CLOCK_GetPeriphClkFreq+0x2c>
                freq = CLOCK_GetOscFreq();
6000b260:	f7ff fe1a 	bl	6000ae98 <CLOCK_GetOscFreq>
        freq /= (((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) >> CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT) + 1U);
6000b264:	4b15      	ldr	r3, [pc, #84]	; (6000b2bc <CLOCK_GetPeriphClkFreq+0x84>)
6000b266:	695b      	ldr	r3, [r3, #20]
6000b268:	f3c3 63c2 	ubfx	r3, r3, #27, #3
                       (((CCM->CACRR & CCM_CACRR_ARM_PODF_MASK) >> CCM_CACRR_ARM_PODF_SHIFT) + 1U);
6000b26c:	3301      	adds	r3, #1
                freq = CLOCK_GetPllFreq(kCLOCK_PllArm) /
6000b26e:	fbb0 f0f3 	udiv	r0, r0, r3
    return freq;
6000b272:	e00d      	b.n	6000b290 <CLOCK_GetPeriphClkFreq+0x58>
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000b274:	4813      	ldr	r0, [pc, #76]	; (6000b2c4 <CLOCK_GetPeriphClkFreq+0x8c>)
6000b276:	e7f0      	b.n	6000b25a <CLOCK_GetPeriphClkFreq+0x22>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000b278:	2000      	movs	r0, #0
6000b27a:	e7f3      	b.n	6000b264 <CLOCK_GetPeriphClkFreq+0x2c>
        switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
6000b27c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
6000b280:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000b284:	d015      	beq.n	6000b2b2 <CLOCK_GetPeriphClkFreq+0x7a>
6000b286:	d804      	bhi.n	6000b292 <CLOCK_GetPeriphClkFreq+0x5a>
6000b288:	b16b      	cbz	r3, 6000b2a6 <CLOCK_GetPeriphClkFreq+0x6e>
6000b28a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
6000b28e:	d00f      	beq.n	6000b2b0 <CLOCK_GetPeriphClkFreq+0x78>
}
6000b290:	bd10      	pop	{r4, pc}
        switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
6000b292:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
6000b296:	d1fb      	bne.n	6000b290 <CLOCK_GetPeriphClkFreq+0x58>
                freq = CLOCK_GetPllFreq(kCLOCK_PllArm) /
6000b298:	200d      	movs	r0, #13
6000b29a:	f7ff fe9d 	bl	6000afd8 <CLOCK_GetPllFreq>
                       (((CCM->CACRR & CCM_CACRR_ARM_PODF_MASK) >> CCM_CACRR_ARM_PODF_SHIFT) + 1U);
6000b29e:	6923      	ldr	r3, [r4, #16]
6000b2a0:	f003 0307 	and.w	r3, r3, #7
6000b2a4:	e7e2      	b.n	6000b26c <CLOCK_GetPeriphClkFreq+0x34>
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000b2a6:	4807      	ldr	r0, [pc, #28]	; (6000b2c4 <CLOCK_GetPeriphClkFreq+0x8c>)
}
6000b2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000b2ac:	f7ff be94 	b.w	6000afd8 <CLOCK_GetPllFreq>
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd2);
6000b2b0:	2002      	movs	r0, #2
}
6000b2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd0);
6000b2b6:	f7ff bf91 	b.w	6000b1dc <CLOCK_GetSysPfdFreq>
6000b2ba:	bf00      	nop
6000b2bc:	400fc000 	.word	0x400fc000
6000b2c0:	0010000d 	.word	0x0010000d
6000b2c4:	0030000d 	.word	0x0030000d

6000b2c8 <CLOCK_GetAhbFreq>:
{
6000b2c8:	b508      	push	{r3, lr}
    return CLOCK_GetPeriphClkFreq() / (((CCM->CBCDR & CCM_CBCDR_AHB_PODF_MASK) >> CCM_CBCDR_AHB_PODF_SHIFT) + 1U);
6000b2ca:	f7ff ffb5 	bl	6000b238 <CLOCK_GetPeriphClkFreq>
6000b2ce:	4b04      	ldr	r3, [pc, #16]	; (6000b2e0 <CLOCK_GetAhbFreq+0x18>)
6000b2d0:	695b      	ldr	r3, [r3, #20]
6000b2d2:	f3c3 2382 	ubfx	r3, r3, #10, #3
6000b2d6:	3301      	adds	r3, #1
}
6000b2d8:	fbb0 f0f3 	udiv	r0, r0, r3
6000b2dc:	bd08      	pop	{r3, pc}
6000b2de:	bf00      	nop
6000b2e0:	400fc000 	.word	0x400fc000

6000b2e4 <CLOCK_GetIpgFreq>:
{
6000b2e4:	b508      	push	{r3, lr}
    return CLOCK_GetAhbFreq() / (((CCM->CBCDR & CCM_CBCDR_IPG_PODF_MASK) >> CCM_CBCDR_IPG_PODF_SHIFT) + 1U);
6000b2e6:	f7ff ffef 	bl	6000b2c8 <CLOCK_GetAhbFreq>
6000b2ea:	4b04      	ldr	r3, [pc, #16]	; (6000b2fc <CLOCK_GetIpgFreq+0x18>)
6000b2ec:	695b      	ldr	r3, [r3, #20]
6000b2ee:	f3c3 2301 	ubfx	r3, r3, #8, #2
6000b2f2:	3301      	adds	r3, #1
}
6000b2f4:	fbb0 f0f3 	udiv	r0, r0, r3
6000b2f8:	bd08      	pop	{r3, pc}
6000b2fa:	bf00      	nop
6000b2fc:	400fc000 	.word	0x400fc000

6000b300 <SystemInit>:
    extern uint32_t g_pfnVectors[];  // Vector table defined in startup code
    SCB->VTOR = (uint32_t)g_pfnVectors;
#endif

/* Disable Watchdog Power Down Counter */
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000b300:	492d      	ldr	r1, [pc, #180]	; (6000b3b8 <SystemInit+0xb8>)
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000b302:	4a2e      	ldr	r2, [pc, #184]	; (6000b3bc <SystemInit+0xbc>)
void SystemInit (void) {
6000b304:	b508      	push	{r3, lr}
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000b306:	890b      	ldrh	r3, [r1, #8]
6000b308:	f023 0301 	bic.w	r3, r3, #1
6000b30c:	041b      	lsls	r3, r3, #16
6000b30e:	0c1b      	lsrs	r3, r3, #16
6000b310:	810b      	strh	r3, [r1, #8]
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000b312:	8913      	ldrh	r3, [r2, #8]
6000b314:	f023 0301 	bic.w	r3, r3, #1
6000b318:	041b      	lsls	r3, r3, #16
6000b31a:	0c1b      	lsrs	r3, r3, #16
6000b31c:	8113      	strh	r3, [r2, #8]

/* Watchdog disable */

#if (DISABLE_WDOG)
    if ((WDOG1->WCR & WDOG_WCR_WDE_MASK) != 0U)
6000b31e:	880b      	ldrh	r3, [r1, #0]
6000b320:	0758      	lsls	r0, r3, #29
6000b322:	d505      	bpl.n	6000b330 <SystemInit+0x30>
    {
        WDOG1->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
6000b324:	880b      	ldrh	r3, [r1, #0]
6000b326:	f023 0304 	bic.w	r3, r3, #4
6000b32a:	041b      	lsls	r3, r3, #16
6000b32c:	0c1b      	lsrs	r3, r3, #16
6000b32e:	800b      	strh	r3, [r1, #0]
    }
    if ((WDOG2->WCR & WDOG_WCR_WDE_MASK) != 0U)
6000b330:	8813      	ldrh	r3, [r2, #0]
6000b332:	075b      	lsls	r3, r3, #29
6000b334:	d505      	bpl.n	6000b342 <SystemInit+0x42>
    {
        WDOG2->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
6000b336:	8813      	ldrh	r3, [r2, #0]
6000b338:	f023 0304 	bic.w	r3, r3, #4
6000b33c:	041b      	lsls	r3, r3, #16
6000b33e:	0c1b      	lsrs	r3, r3, #16
6000b340:	8013      	strh	r3, [r2, #0]
    }
    if ((RTWDOG->CS & RTWDOG_CS_CMD32EN_MASK) != 0U)
6000b342:	4b1f      	ldr	r3, [pc, #124]	; (6000b3c0 <SystemInit+0xc0>)
6000b344:	681a      	ldr	r2, [r3, #0]
6000b346:	0490      	lsls	r0, r2, #18
6000b348:	d530      	bpl.n	6000b3ac <SystemInit+0xac>
    {
        RTWDOG->CNT = 0xD928C520U; /* 0xD928C520U is the update key */
6000b34a:	4a1e      	ldr	r2, [pc, #120]	; (6000b3c4 <SystemInit+0xc4>)
    }
    else
    {
        RTWDOG->CNT = 0xC520U;
        RTWDOG->CNT = 0xD928U;
6000b34c:	605a      	str	r2, [r3, #4]
    }
    RTWDOG->TOVAL = 0xFFFF;
6000b34e:	f64f 72ff 	movw	r2, #65535	; 0xffff
6000b352:	609a      	str	r2, [r3, #8]
    RTWDOG->CS = (uint32_t) ((RTWDOG->CS) & ~RTWDOG_CS_EN_MASK) | RTWDOG_CS_UPDATE_MASK;
6000b354:	681a      	ldr	r2, [r3, #0]
6000b356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
6000b35a:	f042 0220 	orr.w	r2, r2, #32
6000b35e:	601a      	str	r2, [r3, #0]
#endif /* (DISABLE_WDOG) */

    /* Disable Systick which might be enabled by bootrom */
    if ((SysTick->CTRL & SysTick_CTRL_ENABLE_Msk) != 0U)
6000b360:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000b364:	691a      	ldr	r2, [r3, #16]
6000b366:	07d1      	lsls	r1, r2, #31
6000b368:	d503      	bpl.n	6000b372 <SystemInit+0x72>
    {
        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
6000b36a:	691a      	ldr	r2, [r3, #16]
6000b36c:	f022 0201 	bic.w	r2, r2, #1
6000b370:	611a      	str	r2, [r3, #16]
    }

/* Enable instruction and data caches */
#if defined(__ICACHE_PRESENT) && __ICACHE_PRESENT
    if (SCB_CCR_IC_Msk != (SCB_CCR_IC_Msk & SCB->CCR)) {
6000b372:	4b15      	ldr	r3, [pc, #84]	; (6000b3c8 <SystemInit+0xc8>)
6000b374:	695a      	ldr	r2, [r3, #20]
6000b376:	0392      	lsls	r2, r2, #14
6000b378:	d415      	bmi.n	6000b3a6 <SystemInit+0xa6>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
6000b37a:	695a      	ldr	r2, [r3, #20]
6000b37c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
6000b380:	d111      	bne.n	6000b3a6 <SystemInit+0xa6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
6000b382:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b386:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
6000b38a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
6000b38e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b392:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
6000b396:	695a      	ldr	r2, [r3, #20]
6000b398:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
6000b39c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000b39e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b3a2:	f3bf 8f6f 	isb	sy
        SCB_EnableICache();
    }
#endif

  SystemInitHook();
6000b3a6:	f008 fbdc 	bl	60013b62 <SystemInitHook>
}
6000b3aa:	bd08      	pop	{r3, pc}
        RTWDOG->CNT = 0xC520U;
6000b3ac:	f24c 5220 	movw	r2, #50464	; 0xc520
6000b3b0:	605a      	str	r2, [r3, #4]
        RTWDOG->CNT = 0xD928U;
6000b3b2:	f64d 1228 	movw	r2, #55592	; 0xd928
6000b3b6:	e7c9      	b.n	6000b34c <SystemInit+0x4c>
6000b3b8:	400b8000 	.word	0x400b8000
6000b3bc:	400d0000 	.word	0x400d0000
6000b3c0:	400bc000 	.word	0x400bc000
6000b3c4:	d928c520 	.word	0xd928c520
6000b3c8:	e000ed00 	.word	0xe000ed00

6000b3cc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
6000b3cc:	2800      	cmp	r0, #0
6000b3ce:	db07      	blt.n	6000b3e0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
6000b3d0:	2301      	movs	r3, #1
6000b3d2:	0941      	lsrs	r1, r0, #5
6000b3d4:	f000 001f 	and.w	r0, r0, #31
6000b3d8:	4a02      	ldr	r2, [pc, #8]	; (6000b3e4 <__NVIC_EnableIRQ+0x18>)
6000b3da:	4083      	lsls	r3, r0
6000b3dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    __COMPILER_BARRIER();
  }
}
6000b3e0:	4770      	bx	lr
6000b3e2:	bf00      	nop
6000b3e4:	e000e100 	.word	0xe000e100

6000b3e8 <CLOCK_ControlGate>:
{
    uint32_t index = ((uint32_t)name) >> 8UL;
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
    volatile uint32_t *reg;

    assert(index <= 7UL);
6000b3e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000b3ec:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000b3f0:	f000 031f 	and.w	r3, r0, #31
{
6000b3f4:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000b3f6:	d306      	bcc.n	6000b406 <CLOCK_ControlGate+0x1e>
6000b3f8:	4b0b      	ldr	r3, [pc, #44]	; (6000b428 <CLOCK_ControlGate+0x40>)
6000b3fa:	f240 51de 	movw	r1, #1502	; 0x5de
6000b3fe:	4a0b      	ldr	r2, [pc, #44]	; (6000b42c <CLOCK_ControlGate+0x44>)
6000b400:	480b      	ldr	r0, [pc, #44]	; (6000b430 <CLOCK_ControlGate+0x48>)
6000b402:	f004 fdfd 	bl	60010000 <__assert_func>

    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000b406:	480b      	ldr	r0, [pc, #44]	; (6000b434 <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000b408:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000b40a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000b40e:	2203      	movs	r2, #3
6000b410:	409a      	lsls	r2, r3

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000b412:	43d2      	mvns	r2, r2
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000b414:	e850 3f00 	ldrex	r3, [r0]
6000b418:	4013      	ands	r3, r2
6000b41a:	430b      	orrs	r3, r1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000b41c:	e840 3400 	strex	r4, r3, [r0]
6000b420:	2c00      	cmp	r4, #0
6000b422:	d1f7      	bne.n	6000b414 <CLOCK_ControlGate+0x2c>
}
6000b424:	bd10      	pop	{r4, pc}
6000b426:	bf00      	nop
6000b428:	60018b5e 	.word	0x60018b5e
6000b42c:	60018d41 	.word	0x60018d41
6000b430:	60018b6b 	.word	0x60018b6b
6000b434:	400fc068 	.word	0x400fc068

6000b438 <LPI2C_GetCyclesForWidth>:
 * @param maxCycles Maximum cycle count.
 * @param prescaler LPI2C prescaler setting. If the cycle period is not affected by the prescaler value, set it to 0.
 */
static uint32_t LPI2C_GetCyclesForWidth(
    uint32_t sourceClock_Hz, uint32_t width_ns, uint32_t minCycles, uint32_t maxCycles, uint32_t prescaler)
{
6000b438:	b570      	push	{r4, r5, r6, lr}
6000b43a:	9e04      	ldr	r6, [sp, #16]
6000b43c:	4615      	mov	r5, r2
    assert(sourceClock_Hz > 0U);
6000b43e:	4604      	mov	r4, r0
6000b440:	bb08      	cbnz	r0, 6000b486 <LPI2C_GetCyclesForWidth+0x4e>
6000b442:	4b12      	ldr	r3, [pc, #72]	; (6000b48c <LPI2C_GetCyclesForWidth+0x54>)
6000b444:	2193      	movs	r1, #147	; 0x93
6000b446:	4a12      	ldr	r2, [pc, #72]	; (6000b490 <LPI2C_GetCyclesForWidth+0x58>)
6000b448:	4812      	ldr	r0, [pc, #72]	; (6000b494 <LPI2C_GetCyclesForWidth+0x5c>)
6000b44a:	f004 fdd9 	bl	60010000 <__assert_func>

    uint32_t divider = 1U;

    while (prescaler != 0U)
    {
        divider *= 2U;
6000b44e:	0052      	lsls	r2, r2, #1
        prescaler--;
6000b450:	3e01      	subs	r6, #1
    while (prescaler != 0U)
6000b452:	2e00      	cmp	r6, #0
6000b454:	d1fb      	bne.n	6000b44e <LPI2C_GetCyclesForWidth+0x16>
    }

    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
    /* Calculate the cycle count, round up the calculated value. */
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000b456:	200a      	movs	r0, #10
    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
6000b458:	fbb4 f4f2 	udiv	r4, r4, r2
6000b45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000b460:	4341      	muls	r1, r0
    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
6000b462:	fbb4 f4f2 	udiv	r4, r4, r2
6000b466:	4a0c      	ldr	r2, [pc, #48]	; (6000b498 <LPI2C_GetCyclesForWidth+0x60>)
6000b468:	fbb2 f2f4 	udiv	r2, r2, r4
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000b46c:	fbb1 f2f2 	udiv	r2, r1, r2
6000b470:	3205      	adds	r2, #5
6000b472:	fbb2 f2f0 	udiv	r2, r2, r0
    if (cycles > maxCycles)
    {
        cycles = maxCycles;
    }

    return cycles;
6000b476:	42aa      	cmp	r2, r5
6000b478:	bf38      	it	cc
6000b47a:	462a      	movcc	r2, r5
}
6000b47c:	429a      	cmp	r2, r3
6000b47e:	bf28      	it	cs
6000b480:	461a      	movcs	r2, r3
6000b482:	4610      	mov	r0, r2
6000b484:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t divider = 1U;
6000b486:	2201      	movs	r2, #1
6000b488:	e7e3      	b.n	6000b452 <LPI2C_GetCyclesForWidth+0x1a>
6000b48a:	bf00      	nop
6000b48c:	60018bbe 	.word	0x60018bbe
6000b490:	60018d29 	.word	0x60018d29
6000b494:	60018bd2 	.word	0x60018bd2
6000b498:	000f4240 	.word	0x000f4240

6000b49c <LPI2C_GetInstance>:
{
6000b49c:	b508      	push	{r3, lr}
        if (kLpi2cBases[instance] == base)
6000b49e:	b1a8      	cbz	r0, 6000b4cc <LPI2C_GetInstance+0x30>
6000b4a0:	4b0e      	ldr	r3, [pc, #56]	; (6000b4dc <LPI2C_GetInstance+0x40>)
6000b4a2:	4298      	cmp	r0, r3
6000b4a4:	d011      	beq.n	6000b4ca <LPI2C_GetInstance+0x2e>
6000b4a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000b4aa:	4298      	cmp	r0, r3
6000b4ac:	d00f      	beq.n	6000b4ce <LPI2C_GetInstance+0x32>
6000b4ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000b4b2:	4298      	cmp	r0, r3
6000b4b4:	d00d      	beq.n	6000b4d2 <LPI2C_GetInstance+0x36>
6000b4b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000b4ba:	4298      	cmp	r0, r3
6000b4bc:	d00b      	beq.n	6000b4d6 <LPI2C_GetInstance+0x3a>
    assert(instance < ARRAY_SIZE(kLpi2cBases));
6000b4be:	4b08      	ldr	r3, [pc, #32]	; (6000b4e0 <LPI2C_GetInstance+0x44>)
6000b4c0:	2184      	movs	r1, #132	; 0x84
6000b4c2:	4a08      	ldr	r2, [pc, #32]	; (6000b4e4 <LPI2C_GetInstance+0x48>)
6000b4c4:	4808      	ldr	r0, [pc, #32]	; (6000b4e8 <LPI2C_GetInstance+0x4c>)
6000b4c6:	f004 fd9b 	bl	60010000 <__assert_func>
    for (instance = 0U; instance < ARRAY_SIZE(kLpi2cBases); ++instance)
6000b4ca:	2001      	movs	r0, #1
}
6000b4cc:	bd08      	pop	{r3, pc}
    for (instance = 0U; instance < ARRAY_SIZE(kLpi2cBases); ++instance)
6000b4ce:	2002      	movs	r0, #2
6000b4d0:	e7fc      	b.n	6000b4cc <LPI2C_GetInstance+0x30>
6000b4d2:	2003      	movs	r0, #3
6000b4d4:	e7fa      	b.n	6000b4cc <LPI2C_GetInstance+0x30>
6000b4d6:	2004      	movs	r0, #4
    return instance;
6000b4d8:	e7f8      	b.n	6000b4cc <LPI2C_GetInstance+0x30>
6000b4da:	bf00      	nop
6000b4dc:	403f0000 	.word	0x403f0000
6000b4e0:	60018c16 	.word	0x60018c16
6000b4e4:	60018d53 	.word	0x60018d53
6000b4e8:	60018bd2 	.word	0x60018bd2

6000b4ec <LPI2C_MasterGetDefaultConfig>:
 * prior to initializing the master driver with LPI2C_MasterInit().
 *
 * param[out] masterConfig User provided configuration structure for default values. Refer to #lpi2c_master_config_t.
 */
void LPI2C_MasterGetDefaultConfig(lpi2c_master_config_t *masterConfig)
{
6000b4ec:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
6000b4ee:	2217      	movs	r2, #23
6000b4f0:	4604      	mov	r4, r0
6000b4f2:	2100      	movs	r1, #0
6000b4f4:	3005      	adds	r0, #5
6000b4f6:	f005 f883 	bl	60010600 <memset>
    /* Initializes the configure structure to zero. */
    (void)memset(masterConfig, 0, sizeof(*masterConfig));

    masterConfig->enableMaster            = true;
6000b4fa:	f240 1301 	movw	r3, #257	; 0x101
6000b4fe:	6023      	str	r3, [r4, #0]
    masterConfig->debugEnable             = false;
    masterConfig->enableDoze              = true;
    masterConfig->ignoreAck               = false;
    masterConfig->pinConfig               = kLPI2C_2PinOpenDrain;
6000b500:	2300      	movs	r3, #0
6000b502:	7123      	strb	r3, [r4, #4]
    masterConfig->baudRate_Hz             = 100000U;
6000b504:	4b02      	ldr	r3, [pc, #8]	; (6000b510 <LPI2C_MasterGetDefaultConfig+0x24>)
6000b506:	60a3      	str	r3, [r4, #8]
    masterConfig->pinLowTimeout_ns        = 0U; /* Set to 0 to disable the function */
    masterConfig->sdaGlitchFilterWidth_ns = 0U; /* Set to 0 to disable the function */
    masterConfig->sclGlitchFilterWidth_ns = 0U; /* Set to 0 to disable the function */
    masterConfig->hostRequest.enable      = false;
    masterConfig->hostRequest.source      = kLPI2C_HostRequestExternalPin;
    masterConfig->hostRequest.polarity    = kLPI2C_HostRequestPinActiveHigh;
6000b508:	2301      	movs	r3, #1
6000b50a:	7623      	strb	r3, [r4, #24]
}
6000b50c:	bd10      	pop	{r4, pc}
6000b50e:	bf00      	nop
6000b510:	000186a0 	.word	0x000186a0

6000b514 <LPI2C_MasterInit>:
 *      that you can override.
 * param sourceClock_Hz Frequency in Hertz of the LPI2C functional clock. Used to calculate the baud rate divisors,
 *      filter widths, and timeout periods.
 */
void LPI2C_MasterInit(LPI2C_Type *base, const lpi2c_master_config_t *masterConfig, uint32_t sourceClock_Hz)
{
6000b514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
6000b518:	4604      	mov	r4, r0
6000b51a:	460d      	mov	r5, r1
6000b51c:	4616      	mov	r6, r2
    uint32_t cfgr2;
    uint32_t value;

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

    uint32_t instance = LPI2C_GetInstance(base);
6000b51e:	f7ff ffbd 	bl	6000b49c <LPI2C_GetInstance>
 *
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000b522:	4b3d      	ldr	r3, [pc, #244]	; (6000b618 <LPI2C_MasterInit+0x104>)
6000b524:	2103      	movs	r1, #3
6000b526:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000b52a:	f7ff ff5d 	bl	6000b3e8 <CLOCK_ControlGate>
 *
 * @param base The LPI2C peripheral base address.
 */
static inline void LPI2C_MasterReset(LPI2C_Type *base)
{
    base->MCR = LPI2C_MCR_RST_MASK;
6000b52e:	2302      	movs	r3, #2
    base->MCR = 0;
6000b530:	2000      	movs	r0, #0
    base->MCR = LPI2C_MCR_RST_MASK;
6000b532:	6123      	str	r3, [r4, #16]
    base->MCR = 0;
6000b534:	6120      	str	r0, [r4, #16]

    /* Reset peripheral before configuring it. */
    LPI2C_MasterReset(base);

    /* Doze bit: 0 is enable, 1 is disable */
    base->MCR = LPI2C_MCR_DBGEN(masterConfig->debugEnable) | LPI2C_MCR_DOZEN(!(masterConfig->enableDoze));
6000b536:	786a      	ldrb	r2, [r5, #1]
6000b538:	78ab      	ldrb	r3, [r5, #2]
6000b53a:	f082 0201 	eor.w	r2, r2, #1
6000b53e:	00db      	lsls	r3, r3, #3
6000b540:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
6000b544:	6123      	str	r3, [r4, #16]

    /* host request */
    value = base->MCFGR0;
6000b546:	6a21      	ldr	r1, [r4, #32]
    value &= (~(LPI2C_MCFGR0_HREN_MASK | LPI2C_MCFGR0_HRPOL_MASK | LPI2C_MCFGR0_HRSEL_MASK));
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
             LPI2C_MCFGR0_HRPOL(masterConfig->hostRequest.polarity) |
6000b548:	7e2a      	ldrb	r2, [r5, #24]
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
6000b54a:	7dab      	ldrb	r3, [r5, #22]
    value &= (~(LPI2C_MCFGR0_HREN_MASK | LPI2C_MCFGR0_HRPOL_MASK | LPI2C_MCFGR0_HRSEL_MASK));
6000b54c:	f021 0107 	bic.w	r1, r1, #7
             LPI2C_MCFGR0_HRPOL(masterConfig->hostRequest.polarity) |
6000b550:	0052      	lsls	r2, r2, #1
6000b552:	430b      	orrs	r3, r1
6000b554:	f002 0202 	and.w	r2, r2, #2
6000b558:	431a      	orrs	r2, r3
             LPI2C_MCFGR0_HRSEL(masterConfig->hostRequest.source);
6000b55a:	7deb      	ldrb	r3, [r5, #23]
6000b55c:	009b      	lsls	r3, r3, #2
6000b55e:	f003 0304 	and.w	r3, r3, #4
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
6000b562:	4313      	orrs	r3, r2
    base->MCFGR0 = value;
6000b564:	6223      	str	r3, [r4, #32]

    /* pin config and ignore ack */
    value = base->MCFGR1;
6000b566:	6a63      	ldr	r3, [r4, #36]	; 0x24
    value &= ~(LPI2C_MCFGR1_PINCFG_MASK | LPI2C_MCFGR1_IGNACK_MASK);
    value |= LPI2C_MCFGR1_PINCFG(masterConfig->pinConfig);
    value |= LPI2C_MCFGR1_IGNACK(masterConfig->ignoreAck);
6000b568:	78ea      	ldrb	r2, [r5, #3]
    value &= ~(LPI2C_MCFGR1_PINCFG_MASK | LPI2C_MCFGR1_IGNACK_MASK);
6000b56a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
6000b56e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
6000b572:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
    value |= LPI2C_MCFGR1_PINCFG(masterConfig->pinConfig);
6000b576:	792b      	ldrb	r3, [r5, #4]
6000b578:	061b      	lsls	r3, r3, #24
6000b57a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    value |= LPI2C_MCFGR1_IGNACK(masterConfig->ignoreAck);
6000b57e:	4313      	orrs	r3, r2
    base->MCFGR1 = value;
6000b580:	6263      	str	r3, [r4, #36]	; 0x24
 *      the number of words in the receive FIFO is greater than @a rxWords. Writing a value equal or greater
 *      than the FIFO size is truncated.
 */
static inline void LPI2C_MasterSetWatermarks(LPI2C_Type *base, size_t txWords, size_t rxWords)
{
    base->MFCR = LPI2C_MFCR_TXWATER(txWords) | LPI2C_MFCR_RXWATER(rxWords);
6000b582:	65a0      	str	r0, [r4, #88]	; 0x58

    LPI2C_MasterSetWatermarks(base, (size_t)kDefaultTxWatermark, (size_t)kDefaultRxWatermark);

    /* Configure glitch filters. */
    cfgr2 = base->MCFGR2;
    if (0U != (masterConfig->sdaGlitchFilterWidth_ns))
6000b584:	7d29      	ldrb	r1, [r5, #20]
    cfgr2 = base->MCFGR2;
6000b586:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    if (0U != (masterConfig->sdaGlitchFilterWidth_ns))
6000b588:	b139      	cbz	r1, 6000b59a <LPI2C_MasterInit+0x86>
    {
        /* Calculate SDA filter width. The width is equal to FILTSDA cycles of functional clock.
           And set FILTSDA to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->sdaGlitchFilterWidth_ns, 1U,
6000b58a:	9000      	str	r0, [sp, #0]
6000b58c:	230f      	movs	r3, #15
6000b58e:	2201      	movs	r2, #1
6000b590:	4630      	mov	r0, r6
6000b592:	f7ff ff51 	bl	6000b438 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_FILTSDA_MASK >> LPI2C_MCFGR2_FILTSDA_SHIFT), 0U);
        cfgr2 &= ~LPI2C_MCFGR2_FILTSDA_MASK;
        cfgr2 |= LPI2C_MCFGR2_FILTSDA(cycles);
6000b596:	f360 671b 	bfi	r7, r0, #24, #4
    }
    if (0U != masterConfig->sclGlitchFilterWidth_ns)
6000b59a:	7d69      	ldrb	r1, [r5, #21]
6000b59c:	b141      	cbz	r1, 6000b5b0 <LPI2C_MasterInit+0x9c>
    {
        /* Calculate SDL filter width. The width is equal to FILTSCL cycles of functional clock.
           And set FILTSCL to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->sclGlitchFilterWidth_ns, 1U,
6000b59e:	2300      	movs	r3, #0
6000b5a0:	2201      	movs	r2, #1
6000b5a2:	4630      	mov	r0, r6
6000b5a4:	9300      	str	r3, [sp, #0]
6000b5a6:	230f      	movs	r3, #15
6000b5a8:	f7ff ff46 	bl	6000b438 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_FILTSCL_MASK >> LPI2C_MCFGR2_FILTSCL_SHIFT), 0U);
        cfgr2 &= ~LPI2C_MCFGR2_FILTSCL_MASK;
        cfgr2 |= LPI2C_MCFGR2_FILTSCL(cycles);
6000b5ac:	f360 4713 	bfi	r7, r0, #16, #4
    }
    base->MCFGR2 = cfgr2;

    /* Configure baudrate after the SDA/SCL glitch filter setting,
       since the baudrate calculation needs them as parameter. */
    LPI2C_MasterSetBaudRate(base, sourceClock_Hz, masterConfig->baudRate_Hz);
6000b5b0:	4631      	mov	r1, r6
    base->MCFGR2 = cfgr2;
6000b5b2:	62a7      	str	r7, [r4, #40]	; 0x28
    LPI2C_MasterSetBaudRate(base, sourceClock_Hz, masterConfig->baudRate_Hz);
6000b5b4:	4620      	mov	r0, r4
6000b5b6:	68aa      	ldr	r2, [r5, #8]
6000b5b8:	f008 fb01 	bl	60013bbe <LPI2C_MasterSetBaudRate>

    /* Configure bus idle and pin low timeouts after baudrate setting,
       since the timeout calculation needs prescaler as parameter. */
    prescaler = (base->MCFGR1 & LPI2C_MCFGR1_PRESCALE_MASK) >> LPI2C_MCFGR1_PRESCALE_SHIFT;
6000b5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24

    if (0U != (masterConfig->busIdleTimeout_ns))
6000b5be:	68e9      	ldr	r1, [r5, #12]
    prescaler = (base->MCFGR1 & LPI2C_MCFGR1_PRESCALE_MASK) >> LPI2C_MCFGR1_PRESCALE_SHIFT;
6000b5c0:	f003 0807 	and.w	r8, r3, #7
    if (0U != (masterConfig->busIdleTimeout_ns))
6000b5c4:	b149      	cbz	r1, 6000b5da <LPI2C_MasterInit+0xc6>
    {
        /* Calculate bus idle timeout value. The value is equal to BUSIDLE cycles of functional clock divided by
           prescaler. And set BUSIDLE to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->busIdleTimeout_ns, 1U,
6000b5c6:	f640 73ff 	movw	r3, #4095	; 0xfff
6000b5ca:	2201      	movs	r2, #1
6000b5cc:	4630      	mov	r0, r6
6000b5ce:	f8cd 8000 	str.w	r8, [sp]
6000b5d2:	f7ff ff31 	bl	6000b438 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_BUSIDLE_MASK >> LPI2C_MCFGR2_BUSIDLE_SHIFT), prescaler);
        cfgr2 &= ~LPI2C_MCFGR2_BUSIDLE_MASK;
        cfgr2 |= LPI2C_MCFGR2_BUSIDLE(cycles);
6000b5d6:	f360 070b 	bfi	r7, r0, #0, #12
    }
    base->MCFGR2 = cfgr2;
6000b5da:	62a7      	str	r7, [r4, #40]	; 0x28
    if (0U != masterConfig->pinLowTimeout_ns)
6000b5dc:	6929      	ldr	r1, [r5, #16]
6000b5de:	b191      	cbz	r1, 6000b606 <LPI2C_MasterInit+0xf2>
    {
        /* Calculate bus pin low timeout value. The value is equal to PINLOW cycles of functional clock divided by
           prescaler. And set PINLOW to 0 disables the fileter, so the min value is 1. */
        cycles       = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->pinLowTimeout_ns / 256U, 1U,
6000b5e0:	f640 73ff 	movw	r3, #4095	; 0xfff
6000b5e4:	2201      	movs	r2, #1
6000b5e6:	0a09      	lsrs	r1, r1, #8
6000b5e8:	4630      	mov	r0, r6
6000b5ea:	f8cd 8000 	str.w	r8, [sp]
6000b5ee:	f7ff ff23 	bl	6000b438 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_BUSIDLE_MASK >> LPI2C_MCFGR2_BUSIDLE_SHIFT), prescaler);
        base->MCFGR3 = (base->MCFGR3 & ~LPI2C_MCFGR3_PINLOW_MASK) | LPI2C_MCFGR3_PINLOW(cycles);
6000b5f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
6000b5f4:	4b09      	ldr	r3, [pc, #36]	; (6000b61c <LPI2C_MasterInit+0x108>)
6000b5f6:	f422 227f 	bic.w	r2, r2, #1044480	; 0xff000
6000b5fa:	ea03 2300 	and.w	r3, r3, r0, lsl #8
6000b5fe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
6000b602:	4313      	orrs	r3, r2
6000b604:	62e3      	str	r3, [r4, #44]	; 0x2c
    base->MCR = (base->MCR & ~LPI2C_MCR_MEN_MASK) | LPI2C_MCR_MEN(enable);
6000b606:	6923      	ldr	r3, [r4, #16]
6000b608:	782a      	ldrb	r2, [r5, #0]
6000b60a:	f023 0301 	bic.w	r3, r3, #1
6000b60e:	4313      	orrs	r3, r2
6000b610:	6123      	str	r3, [r4, #16]
    }

    LPI2C_MasterEnable(base, masterConfig->enableMaster);
}
6000b612:	b002      	add	sp, #8
6000b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
6000b618:	60016c62 	.word	0x60016c62
6000b61c:	000fff00 	.word	0x000fff00

6000b620 <LPI2C_MasterTransferCreateHandle>:
 */
void LPI2C_MasterTransferCreateHandle(LPI2C_Type *base,
                                      lpi2c_master_handle_t *handle,
                                      lpi2c_master_transfer_callback_t callback,
                                      void *userData)
{
6000b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000b622:	4605      	mov	r5, r0
6000b624:	4617      	mov	r7, r2
6000b626:	461e      	mov	r6, r3
    uint32_t instance;

    assert(NULL != handle);
6000b628:	460c      	mov	r4, r1
6000b62a:	b931      	cbnz	r1, 6000b63a <LPI2C_MasterTransferCreateHandle+0x1a>
6000b62c:	4b13      	ldr	r3, [pc, #76]	; (6000b67c <LPI2C_MasterTransferCreateHandle+0x5c>)
6000b62e:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
6000b632:	4a13      	ldr	r2, [pc, #76]	; (6000b680 <LPI2C_MasterTransferCreateHandle+0x60>)
6000b634:	4813      	ldr	r0, [pc, #76]	; (6000b684 <LPI2C_MasterTransferCreateHandle+0x64>)
6000b636:	f004 fce3 	bl	60010000 <__assert_func>
6000b63a:	2234      	movs	r2, #52	; 0x34
6000b63c:	2100      	movs	r1, #0
6000b63e:	4620      	mov	r0, r4
6000b640:	f004 ffde 	bl	60010600 <memset>

    /* Clear out the handle. */
    (void)memset(handle, 0, sizeof(*handle));

    /* Look up instance number */
    instance = LPI2C_GetInstance(base);
6000b644:	4628      	mov	r0, r5
6000b646:	f7ff ff29 	bl	6000b49c <LPI2C_GetInstance>
    /* Save base and instance. */
    handle->completionCallback = callback;
    handle->userData           = userData;

    /* Save this handle for IRQ use. */
    s_lpi2cMasterHandle[instance] = handle;
6000b64a:	4b0f      	ldr	r3, [pc, #60]	; (6000b688 <LPI2C_MasterTransferCreateHandle+0x68>)

    /* Set irq handler. */
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000b64c:	4a0f      	ldr	r2, [pc, #60]	; (6000b68c <LPI2C_MasterTransferCreateHandle+0x6c>)
    s_lpi2cMasterHandle[instance] = handle;
6000b64e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000b652:	4b0f      	ldr	r3, [pc, #60]	; (6000b690 <LPI2C_MasterTransferCreateHandle+0x70>)
    handle->userData           = userData;
6000b654:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000b658:	601a      	str	r2, [r3, #0]
    base->MIER &= ~interruptMask;
6000b65a:	69ab      	ldr	r3, [r5, #24]
6000b65c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000b660:	f023 0303 	bic.w	r3, r3, #3
6000b664:	61ab      	str	r3, [r5, #24]
    LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

    /* Enable NVIC IRQ, this only enables the IRQ directly connected to the NVIC.
     In some cases the LPI2C IRQ is configured through INTMUX, user needs to enable
     INTMUX IRQ in application code. */
    (void)EnableIRQ(kLpi2cIrqs[instance]);
6000b666:	4b0b      	ldr	r3, [pc, #44]	; (6000b694 <LPI2C_MasterTransferCreateHandle+0x74>)
6000b668:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 */
static inline status_t EnableIRQ(IRQn_Type interrupt)
{
    status_t status = kStatus_Success;

    if (NotAvail_IRQn == interrupt)
6000b66c:	f110 0f80 	cmn.w	r0, #128	; 0x80
6000b670:	d003      	beq.n	6000b67a <LPI2C_MasterTransferCreateHandle+0x5a>
}
6000b672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else
    {
#if defined(__GIC_PRIO_BITS)
        GIC_EnableIRQ(interrupt);
#else
        NVIC_EnableIRQ(interrupt);
6000b676:	f7ff bea9 	b.w	6000b3cc <__NVIC_EnableIRQ>
6000b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000b67c:	60018c83 	.word	0x60018c83
6000b680:	60018d08 	.word	0x60018d08
6000b684:	60018bd2 	.word	0x60018bd2
6000b688:	20204148 	.word	0x20204148
6000b68c:	6000b7fd 	.word	0x6000b7fd
6000b690:	2020415c 	.word	0x2020415c
6000b694:	60016c6c 	.word	0x60016c6c

6000b698 <LPI2C_MasterTransferNonBlocking>:
 *      transaction is already in progress.
 */
status_t LPI2C_MasterTransferNonBlocking(LPI2C_Type *base,
                                         lpi2c_master_handle_t *handle,
                                         lpi2c_master_transfer_t *transfer)
{
6000b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000b69a:	4606      	mov	r6, r0
6000b69c:	4615      	mov	r5, r2
    assert(NULL != handle);
6000b69e:	460c      	mov	r4, r1
6000b6a0:	b931      	cbnz	r1, 6000b6b0 <LPI2C_MasterTransferNonBlocking+0x18>
6000b6a2:	4b44      	ldr	r3, [pc, #272]	; (6000b7b4 <LPI2C_MasterTransferNonBlocking+0x11c>)
6000b6a4:	f240 5151 	movw	r1, #1361	; 0x551
6000b6a8:	4a43      	ldr	r2, [pc, #268]	; (6000b7b8 <LPI2C_MasterTransferNonBlocking+0x120>)
    assert(NULL != transfer);
6000b6aa:	4844      	ldr	r0, [pc, #272]	; (6000b7bc <LPI2C_MasterTransferNonBlocking+0x124>)
6000b6ac:	f004 fca8 	bl	60010000 <__assert_func>
6000b6b0:	b922      	cbnz	r2, 6000b6bc <LPI2C_MasterTransferNonBlocking+0x24>
6000b6b2:	4b43      	ldr	r3, [pc, #268]	; (6000b7c0 <LPI2C_MasterTransferNonBlocking+0x128>)
6000b6b4:	f240 5152 	movw	r1, #1362	; 0x552
6000b6b8:	4a3f      	ldr	r2, [pc, #252]	; (6000b7b8 <LPI2C_MasterTransferNonBlocking+0x120>)
6000b6ba:	e7f6      	b.n	6000b6aa <LPI2C_MasterTransferNonBlocking+0x12>
    assert(transfer->subaddressSize <= sizeof(transfer->subaddress));
6000b6bc:	68d3      	ldr	r3, [r2, #12]
6000b6be:	2b04      	cmp	r3, #4
6000b6c0:	d904      	bls.n	6000b6cc <LPI2C_MasterTransferNonBlocking+0x34>
6000b6c2:	4b40      	ldr	r3, [pc, #256]	; (6000b7c4 <LPI2C_MasterTransferNonBlocking+0x12c>)
6000b6c4:	f240 5153 	movw	r1, #1363	; 0x553
6000b6c8:	4a3b      	ldr	r2, [pc, #236]	; (6000b7b8 <LPI2C_MasterTransferNonBlocking+0x120>)
6000b6ca:	e7ee      	b.n	6000b6aa <LPI2C_MasterTransferNonBlocking+0x12>

    status_t result;

    /* Check transfer data size in read operation. */
    if ((transfer->direction == kLPI2C_Read) &&
6000b6cc:	7993      	ldrb	r3, [r2, #6]
6000b6ce:	2b01      	cmp	r3, #1
6000b6d0:	d103      	bne.n	6000b6da <LPI2C_MasterTransferNonBlocking+0x42>
6000b6d2:	6953      	ldr	r3, [r2, #20]
6000b6d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
6000b6d8:	d867      	bhi.n	6000b7aa <LPI2C_MasterTransferNonBlocking+0x112>
    {
        return kStatus_InvalidArgument;
    }

    /* Return busy if another transaction is in progress. */
    if (handle->state != (uint8_t)kIdleState)
6000b6da:	7823      	ldrb	r3, [r4, #0]
6000b6dc:	2b00      	cmp	r3, #0
6000b6de:	d166      	bne.n	6000b7ae <LPI2C_MasterTransferNonBlocking+0x116>
    {
        result = kStatus_LPI2C_Busy;
    }
    else
    {
        result = LPI2C_CheckForBusyBus(base);
6000b6e0:	4630      	mov	r0, r6
6000b6e2:	f008 fa62 	bl	60013baa <LPI2C_CheckForBusyBus>
    }

    if ((status_t)kStatus_Success == result)
6000b6e6:	4607      	mov	r7, r0
6000b6e8:	2800      	cmp	r0, #0
6000b6ea:	d12c      	bne.n	6000b746 <LPI2C_MasterTransferNonBlocking+0xae>
6000b6ec:	69b3      	ldr	r3, [r6, #24]

        /* Reset FIFO in case there are data. */
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;

        /* Save transfer into handle. */
        handle->transfer = *transfer;
6000b6ee:	f104 0c14 	add.w	ip, r4, #20
6000b6f2:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000b6f6:	f023 0303 	bic.w	r3, r3, #3
6000b6fa:	61b3      	str	r3, [r6, #24]
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
6000b6fc:	6933      	ldr	r3, [r6, #16]
6000b6fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
6000b702:	6133      	str	r3, [r6, #16]
        handle->transfer = *transfer;
6000b704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
6000b706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
6000b70a:	e895 0003 	ldmia.w	r5, {r0, r1}
6000b70e:	e88c 0003 	stmia.w	ip, {r0, r1}
    if (0U != (xfer->flags & (uint32_t)kLPI2C_TransferNoStartFlag))
6000b712:	6963      	ldr	r3, [r4, #20]
6000b714:	07db      	lsls	r3, r3, #31
6000b716:	d518      	bpl.n	6000b74a <LPI2C_MasterTransferNonBlocking+0xb2>
        if (xfer->direction == kLPI2C_Read)
6000b718:	7ea3      	ldrb	r3, [r4, #26]
            handle->state = (uint8_t)kIssueReadCommandState;
6000b71a:	2b01      	cmp	r3, #1
6000b71c:	bf14      	ite	ne
6000b71e:	2303      	movne	r3, #3
6000b720:	2302      	moveq	r3, #2
6000b722:	7023      	strb	r3, [r4, #0]
        handle->buf            = (uint8_t *)xfer->data;
6000b724:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000b726:	6063      	str	r3, [r4, #4]
        handle->remainingBytes = (uint16_t)xfer->dataSize;
6000b728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000b72a:	8063      	strh	r3, [r4, #2]
    base->MSR = statusMask;
6000b72c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
6000b730:	6173      	str	r3, [r6, #20]

        /* Clear all flags. */
        LPI2C_MasterClearStatusFlags(base, (uint32_t)kLPI2C_MasterClearFlags);

        /* Turn off auto-stop option. */
        base->MCFGR1 &= ~LPI2C_MCFGR1_AUTOSTOP_MASK;
6000b732:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000b734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
6000b738:	6273      	str	r3, [r6, #36]	; 0x24
    base->MIER |= interruptMask;
6000b73a:	69b3      	ldr	r3, [r6, #24]
6000b73c:	f443 5378 	orr.w	r3, r3, #15872	; 0x3e00
6000b740:	f043 0303 	orr.w	r3, r3, #3
6000b744:	61b3      	str	r3, [r6, #24]
        /* Enable LPI2C internal IRQ sources. NVIC IRQ was enabled in CreateHandle() */
        LPI2C_MasterEnableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);
    }

    return result;
}
6000b746:	4638      	mov	r0, r7
6000b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000b74a:	8b23      	ldrh	r3, [r4, #24]
        uint16_t *cmd     = (uint16_t *)&handle->commandBuffer;
6000b74c:	f104 0208 	add.w	r2, r4, #8
        lpi2c_direction_t direction = (0U != xfer->subaddressSize) ? kLPI2C_Write : xfer->direction;
6000b750:	6a21      	ldr	r1, [r4, #32]
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000b752:	005b      	lsls	r3, r3, #1
6000b754:	b29b      	uxth	r3, r3
        lpi2c_direction_t direction = (0U != xfer->subaddressSize) ? kLPI2C_Write : xfer->direction;
6000b756:	b1e9      	cbz	r1, 6000b794 <LPI2C_MasterTransferNonBlocking+0xfc>
        cmd[cmdCount++] =
6000b758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            while (0U != (subaddressRemaining--))
6000b75c:	1e48      	subs	r0, r1, #1
6000b75e:	4615      	mov	r5, r2
        cmd[cmdCount++] =
6000b760:	8123      	strh	r3, [r4, #8]
                uint8_t subaddressByte = (uint8_t)((xfer->subaddress >> (8U * subaddressRemaining)) & 0xffU);
6000b762:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
6000b766:	69e3      	ldr	r3, [r4, #28]
            while (0U != (subaddressRemaining--))
6000b768:	3801      	subs	r0, #1
                uint8_t subaddressByte = (uint8_t)((xfer->subaddress >> (8U * subaddressRemaining)) & 0xffU);
6000b76a:	fa23 f30c 	lsr.w	r3, r3, ip
                cmd[cmdCount++]        = subaddressByte;
6000b76e:	b2db      	uxtb	r3, r3
6000b770:	f825 3f02 	strh.w	r3, [r5, #2]!
            while (0U != (subaddressRemaining--))
6000b774:	d2f5      	bcs.n	6000b762 <LPI2C_MasterTransferNonBlocking+0xca>
        if ((0U != xfer->dataSize) && (xfer->direction == kLPI2C_Read))
6000b776:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                cmd[cmdCount++]        = subaddressByte;
6000b778:	1c4b      	adds	r3, r1, #1
        if ((0U != xfer->dataSize) && (xfer->direction == kLPI2C_Read))
6000b77a:	b188      	cbz	r0, 6000b7a0 <LPI2C_MasterTransferNonBlocking+0x108>
6000b77c:	7ea0      	ldrb	r0, [r4, #26]
6000b77e:	2801      	cmp	r0, #1
6000b780:	d10e      	bne.n	6000b7a0 <LPI2C_MasterTransferNonBlocking+0x108>
                                  (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)kLPI2C_Read);
6000b782:	8b25      	ldrh	r5, [r4, #24]
                cmd[cmdCount++] = (uint16_t)kStartCmd |
6000b784:	f240 4001 	movw	r0, #1025	; 0x401
6000b788:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
6000b78c:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
6000b790:	1c8b      	adds	r3, r1, #2
6000b792:	e005      	b.n	6000b7a0 <LPI2C_MasterTransferNonBlocking+0x108>
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000b794:	7ea1      	ldrb	r1, [r4, #26]
6000b796:	430b      	orrs	r3, r1
        cmd[cmdCount++] =
6000b798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
6000b79c:	8123      	strh	r3, [r4, #8]
6000b79e:	2301      	movs	r3, #1
        handle->state          = (uint8_t)kSendCommandState;
6000b7a0:	2101      	movs	r1, #1
        handle->remainingBytes = (uint16_t)cmdCount;
6000b7a2:	8063      	strh	r3, [r4, #2]
        handle->buf            = (uint8_t *)&handle->commandBuffer;
6000b7a4:	6062      	str	r2, [r4, #4]
        handle->state          = (uint8_t)kSendCommandState;
6000b7a6:	7021      	strb	r1, [r4, #0]
        handle->buf            = (uint8_t *)&handle->commandBuffer;
6000b7a8:	e7c0      	b.n	6000b72c <LPI2C_MasterTransferNonBlocking+0x94>
        return kStatus_InvalidArgument;
6000b7aa:	2704      	movs	r7, #4
6000b7ac:	e7cb      	b.n	6000b746 <LPI2C_MasterTransferNonBlocking+0xae>
        result = kStatus_LPI2C_Busy;
6000b7ae:	f44f 7761 	mov.w	r7, #900	; 0x384
6000b7b2:	e7c8      	b.n	6000b746 <LPI2C_MasterTransferNonBlocking+0xae>
6000b7b4:	60018c83 	.word	0x60018c83
6000b7b8:	60018ce8 	.word	0x60018ce8
6000b7bc:	60018bd2 	.word	0x60018bd2
6000b7c0:	60018c39 	.word	0x60018c39
6000b7c4:	60018c4a 	.word	0x60018c4a

6000b7c8 <LPI2C_MasterTransferAbort>:
 * retval #kStatus_Success A transaction was successfully aborted.
 * retval #kStatus_LPI2C_Idle There is not a non-blocking transaction currently in progress.
 */
void LPI2C_MasterTransferAbort(LPI2C_Type *base, lpi2c_master_handle_t *handle)
{
    if (handle->state != (uint8_t)kIdleState)
6000b7c8:	780b      	ldrb	r3, [r1, #0]
6000b7ca:	b1a3      	cbz	r3, 6000b7f6 <LPI2C_MasterTransferAbort+0x2e>
    base->MIER &= ~interruptMask;
6000b7cc:	6983      	ldr	r3, [r0, #24]
6000b7ce:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000b7d2:	f023 0303 	bic.w	r3, r3, #3
6000b7d6:	6183      	str	r3, [r0, #24]
    {
        /* Disable internal IRQ enables. */
        LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

        /* Reset fifos. */
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
6000b7d8:	6903      	ldr	r3, [r0, #16]
6000b7da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
6000b7de:	6103      	str	r3, [r0, #16]

        /* If master is still busy and has not send out stop signal yet. */
        if ((LPI2C_MasterGetStatusFlags(base) & ((uint32_t)kLPI2C_MasterStopDetectFlag |
6000b7e0:	4b05      	ldr	r3, [pc, #20]	; (6000b7f8 <LPI2C_MasterTransferAbort+0x30>)
    return base->MSR;
6000b7e2:	6942      	ldr	r2, [r0, #20]
6000b7e4:	4013      	ands	r3, r2
6000b7e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
6000b7ea:	d102      	bne.n	6000b7f2 <LPI2C_MasterTransferAbort+0x2a>
                                                 (uint32_t)kLPI2C_MasterBusyFlag)) == (uint32_t)kLPI2C_MasterBusyFlag)
        {
            /* Send a stop command to finalize the transfer. */
            base->MTDR = (uint32_t)kStopCmd;
6000b7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
6000b7f0:	6603      	str	r3, [r0, #96]	; 0x60
        }

        /* Reset handle. */
        handle->state = (uint8_t)kIdleState;
6000b7f2:	2300      	movs	r3, #0
6000b7f4:	700b      	strb	r3, [r1, #0]
    }
}
6000b7f6:	4770      	bx	lr
6000b7f8:	01000200 	.word	0x01000200

6000b7fc <LPI2C_MasterTransferHandleIRQ>:
 *  nonblocking API's interrupt handler routines to add special functionality.
 * param base The LPI2C peripheral base address.
 * param lpi2cMasterHandle Pointer to the LPI2C master driver handle.
 */
void LPI2C_MasterTransferHandleIRQ(LPI2C_Type *base, void *lpi2cMasterHandle)
{
6000b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000b800:	4605      	mov	r5, r0
    assert(lpi2cMasterHandle != NULL);
6000b802:	460c      	mov	r4, r1
6000b804:	b931      	cbnz	r1, 6000b814 <LPI2C_MasterTransferHandleIRQ+0x18>
6000b806:	4b6c      	ldr	r3, [pc, #432]	; (6000b9b8 <LPI2C_MasterTransferHandleIRQ+0x1bc>)
6000b808:	f240 51ef 	movw	r1, #1519	; 0x5ef
6000b80c:	4a6b      	ldr	r2, [pc, #428]	; (6000b9bc <LPI2C_MasterTransferHandleIRQ+0x1c0>)
                    assert(false);
6000b80e:	486c      	ldr	r0, [pc, #432]	; (6000b9c0 <LPI2C_MasterTransferHandleIRQ+0x1c4>)
6000b810:	f004 fbf6 	bl	60010000 <__assert_func>
    status_t result;

    /* Don't do anything if we don't have a valid handle. */
    if (NULL != handle)
    {
        if (handle->state != (uint8_t)kIdleState)
6000b814:	780a      	ldrb	r2, [r1, #0]
6000b816:	2a00      	cmp	r2, #0
6000b818:	f000 8098 	beq.w	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
6000b81c:	6941      	ldr	r1, [r0, #20]
    if (handle->remainingBytes == 0U)
6000b81e:	8863      	ldrh	r3, [r4, #2]
 */
static inline void LPI2C_MasterGetFifoCounts(LPI2C_Type *base, size_t *rxCount, size_t *txCount)
{
    if (NULL != txCount)
    {
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000b820:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
    }
    if (NULL != rxCount)
    {
        *rxCount = (base->MFSR & LPI2C_MFSR_RXCOUNT_MASK) >> LPI2C_MFSR_RXCOUNT_SHIFT;
6000b822:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000b826:	f006 0607 	and.w	r6, r6, #7
6000b82a:	b95b      	cbnz	r3, 6000b844 <LPI2C_MasterTransferHandleIRQ+0x48>
        if ((xfer->dataSize != 0U) &&
6000b82c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000b82e:	b14b      	cbz	r3, 6000b844 <LPI2C_MasterTransferHandleIRQ+0x48>
6000b830:	b136      	cbz	r6, 6000b840 <LPI2C_MasterTransferHandleIRQ+0x44>
            ((txCount == 0U) || ((txCount == 1U) && (handle->state == (uint8_t)kWaitForCompletionState) &&
6000b832:	2e01      	cmp	r6, #1
6000b834:	d106      	bne.n	6000b844 <LPI2C_MasterTransferHandleIRQ+0x48>
6000b836:	2a05      	cmp	r2, #5
6000b838:	d104      	bne.n	6000b844 <LPI2C_MasterTransferHandleIRQ+0x48>
                                 ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U))))
6000b83a:	6963      	ldr	r3, [r4, #20]
            ((txCount == 0U) || ((txCount == 1U) && (handle->state == (uint8_t)kWaitForCompletionState) &&
6000b83c:	075f      	lsls	r7, r3, #29
6000b83e:	d401      	bmi.n	6000b844 <LPI2C_MasterTransferHandleIRQ+0x48>
            status &= ~(uint32_t)kLPI2C_MasterNackDetectFlag;
6000b840:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    result = LPI2C_MasterCheckAndClearError(base, status);
6000b844:	4628      	mov	r0, r5
6000b846:	f008 f98d 	bl	60013b64 <LPI2C_MasterCheckAndClearError>
    if (kStatus_Success == result)
6000b84a:	4607      	mov	r7, r0
6000b84c:	b1b0      	cbz	r0, 6000b87c <LPI2C_MasterTransferHandleIRQ+0x80>
            if ((result != kStatus_Success) || isDone)
            {
                /* Handle error, terminate xfer */
                if (result != kStatus_Success)
                {
                    LPI2C_MasterTransferAbort(base, handle);
6000b84e:	4621      	mov	r1, r4
6000b850:	4628      	mov	r0, r5
6000b852:	f7ff ffb9 	bl	6000b7c8 <LPI2C_MasterTransferAbort>
    base->MIER &= ~interruptMask;
6000b856:	69ab      	ldr	r3, [r5, #24]
6000b858:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000b85c:	f023 0303 	bic.w	r3, r3, #3
6000b860:	61ab      	str	r3, [r5, #24]

                /* Disable internal IRQ enables. */
                LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

                /* Set handle to idle state. */
                handle->state = (uint8_t)kIdleState;
6000b862:	2300      	movs	r3, #0

                /* Invoke callback. */
                if (NULL != handle->completionCallback)
6000b864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                handle->state = (uint8_t)kIdleState;
6000b866:	7023      	strb	r3, [r4, #0]
                if (NULL != handle->completionCallback)
6000b868:	2e00      	cmp	r6, #0
6000b86a:	d06f      	beq.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                {
                    handle->completionCallback(base, handle, result, handle->userData);
6000b86c:	6b23      	ldr	r3, [r4, #48]	; 0x30
6000b86e:	463a      	mov	r2, r7
6000b870:	4621      	mov	r1, r4
6000b872:	4628      	mov	r0, r5
6000b874:	46b4      	mov	ip, r6
                }
            }
        }
    }
}
6000b876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    handle->completionCallback(base, handle, result, handle->userData);
6000b87a:	4760      	bx	ip
        *rxCount = (base->MFSR & LPI2C_MFSR_RXCOUNT_MASK) >> LPI2C_MFSR_RXCOUNT_SHIFT;
6000b87c:	f3c8 4002 	ubfx	r0, r8, #16, #3
        txCount = txFifoSize - txCount;
6000b880:	f1c6 0304 	rsb	r3, r6, #4
            switch (handle->state)
6000b884:	7822      	ldrb	r2, [r4, #0]
6000b886:	3a01      	subs	r2, #1
6000b888:	2a04      	cmp	r2, #4
6000b88a:	f200 8090 	bhi.w	6000b9ae <LPI2C_MasterTransferHandleIRQ+0x1b2>
6000b88e:	e8df f002 	tbb	[pc, r2]
6000b892:	3703      	.short	0x3703
6000b894:	6b48      	.short	0x6b48
6000b896:	7f          	.byte	0x7f
6000b897:	00          	.byte	0x00
                    if (0U == txCount--)
6000b898:	2b00      	cmp	r3, #0
6000b89a:	d057      	beq.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                    base->MTDR = sendval;
6000b89c:	6862      	ldr	r2, [r4, #4]
6000b89e:	8812      	ldrh	r2, [r2, #0]
6000b8a0:	662a      	str	r2, [r5, #96]	; 0x60
                    handle->buf++;
6000b8a2:	6862      	ldr	r2, [r4, #4]
6000b8a4:	3202      	adds	r2, #2
6000b8a6:	6062      	str	r2, [r4, #4]
                    if (--handle->remainingBytes == 0U)
6000b8a8:	8862      	ldrh	r2, [r4, #2]
6000b8aa:	3a01      	subs	r2, #1
6000b8ac:	b292      	uxth	r2, r2
6000b8ae:	8062      	strh	r2, [r4, #2]
6000b8b0:	bb22      	cbnz	r2, 6000b8fc <LPI2C_MasterTransferHandleIRQ+0x100>
                        if (0U != xfer->dataSize)
6000b8b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
6000b8b4:	b302      	cbz	r2, 6000b8f8 <LPI2C_MasterTransferHandleIRQ+0xfc>
                            handle->state          = (uint8_t)kTransferDataState;
6000b8b6:	2603      	movs	r6, #3
                            handle->remainingBytes = (uint16_t)xfer->dataSize;
6000b8b8:	8062      	strh	r2, [r4, #2]
                            if (xfer->direction == kLPI2C_Read)
6000b8ba:	7ea2      	ldrb	r2, [r4, #26]
                            handle->state          = (uint8_t)kTransferDataState;
6000b8bc:	7026      	strb	r6, [r4, #0]
                            if (xfer->direction == kLPI2C_Read)
6000b8be:	2a01      	cmp	r2, #1
                            handle->buf            = (uint8_t *)xfer->data;
6000b8c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
6000b8c2:	6066      	str	r6, [r4, #4]
                            if (xfer->direction == kLPI2C_Read)
6000b8c4:	d11a      	bne.n	6000b8fc <LPI2C_MasterTransferHandleIRQ+0x100>
    base->MIER &= ~interruptMask;
6000b8c6:	69aa      	ldr	r2, [r5, #24]
6000b8c8:	f022 0201 	bic.w	r2, r2, #1
6000b8cc:	61aa      	str	r2, [r5, #24]
                                size_t tmpRxSize = xfer->dataSize;
6000b8ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
                                while (tmpRxSize != 0U)
6000b8d0:	b1a6      	cbz	r6, 6000b8fc <LPI2C_MasterTransferHandleIRQ+0x100>
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(0xFFU);
6000b8d2:	f240 12ff 	movw	r2, #511	; 0x1ff
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000b8d6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
6000b8d8:	f003 0307 	and.w	r3, r3, #7
                                    while (txFifoSize == txCount)
6000b8dc:	2b04      	cmp	r3, #4
6000b8de:	d0fa      	beq.n	6000b8d6 <LPI2C_MasterTransferHandleIRQ+0xda>
                                    if (tmpRxSize > 256U)
6000b8e0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
6000b8e4:	d903      	bls.n	6000b8ee <LPI2C_MasterTransferHandleIRQ+0xf2>
                                        tmpRxSize -= 256U;
6000b8e6:	f5a6 7680 	sub.w	r6, r6, #256	; 0x100
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(0xFFU);
6000b8ea:	662a      	str	r2, [r5, #96]	; 0x60
                                while (tmpRxSize != 0U)
6000b8ec:	e7f3      	b.n	6000b8d6 <LPI2C_MasterTransferHandleIRQ+0xda>
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(tmpRxSize - 1U);
6000b8ee:	3e01      	subs	r6, #1
6000b8f0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
6000b8f4:	662e      	str	r6, [r5, #96]	; 0x60
                                while (tmpRxSize != 0U)
6000b8f6:	e7c5      	b.n	6000b884 <LPI2C_MasterTransferHandleIRQ+0x88>
                            handle->state = (uint8_t)kStopState;
6000b8f8:	2204      	movs	r2, #4
6000b8fa:	7022      	strb	r2, [r4, #0]
                    if (0U == txCount--)
6000b8fc:	3b01      	subs	r3, #1
        while (!state_complete)
6000b8fe:	e7c1      	b.n	6000b884 <LPI2C_MasterTransferHandleIRQ+0x88>
                    if (0U == txCount--)
6000b900:	b323      	cbz	r3, 6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                    base->MTDR = (uint32_t)kRxDataCmd | LPI2C_MTDR_DATA(xfer->dataSize - 1U);
6000b902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
                    handle->state = (uint8_t)kTransferDataState;
6000b904:	2203      	movs	r2, #3
                    base->MTDR = (uint32_t)kRxDataCmd | LPI2C_MTDR_DATA(xfer->dataSize - 1U);
6000b906:	3e01      	subs	r6, #1
6000b908:	b2f6      	uxtb	r6, r6
6000b90a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
6000b90e:	662e      	str	r6, [r5, #96]	; 0x60
                    handle->state = (uint8_t)kTransferDataState;
6000b910:	7022      	strb	r2, [r4, #0]
                    if (xfer->direction == kLPI2C_Read)
6000b912:	7ea2      	ldrb	r2, [r4, #26]
6000b914:	2a01      	cmp	r2, #1
6000b916:	d1f1      	bne.n	6000b8fc <LPI2C_MasterTransferHandleIRQ+0x100>
    base->MIER &= ~interruptMask;
6000b918:	69aa      	ldr	r2, [r5, #24]
6000b91a:	f022 0201 	bic.w	r2, r2, #1
6000b91e:	61aa      	str	r2, [r5, #24]
}
6000b920:	e7ec      	b.n	6000b8fc <LPI2C_MasterTransferHandleIRQ+0x100>
                    if (xfer->direction == kLPI2C_Write)
6000b922:	7ea2      	ldrb	r2, [r4, #26]
6000b924:	b9a2      	cbnz	r2, 6000b950 <LPI2C_MasterTransferHandleIRQ+0x154>
                        if (0U == txCount--)
6000b926:	1e5a      	subs	r2, r3, #1
6000b928:	b183      	cbz	r3, 6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                        base->MTDR = *(handle->buf)++;
6000b92a:	6863      	ldr	r3, [r4, #4]
6000b92c:	1c5e      	adds	r6, r3, #1
6000b92e:	6066      	str	r6, [r4, #4]
6000b930:	781b      	ldrb	r3, [r3, #0]
6000b932:	662b      	str	r3, [r5, #96]	; 0x60
6000b934:	4613      	mov	r3, r2
                    if (--handle->remainingBytes == 0U)
6000b936:	8862      	ldrh	r2, [r4, #2]
6000b938:	3a01      	subs	r2, #1
6000b93a:	b292      	uxth	r2, r2
6000b93c:	8062      	strh	r2, [r4, #2]
6000b93e:	2a00      	cmp	r2, #0
6000b940:	d1a0      	bne.n	6000b884 <LPI2C_MasterTransferHandleIRQ+0x88>
                        handle->state = (uint8_t)kStopState;
6000b942:	2604      	movs	r6, #4
                        if (xfer->direction == kLPI2C_Write)
6000b944:	7ea2      	ldrb	r2, [r4, #26]
                        handle->state = (uint8_t)kStopState;
6000b946:	7026      	strb	r6, [r4, #0]
        while (!state_complete)
6000b948:	2a00      	cmp	r2, #0
6000b94a:	d19b      	bne.n	6000b884 <LPI2C_MasterTransferHandleIRQ+0x88>
}
6000b94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (0U == rxCount--)
6000b950:	1e46      	subs	r6, r0, #1
6000b952:	2800      	cmp	r0, #0
6000b954:	d0fa      	beq.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                        *(handle->buf)++ = (uint8_t)(base->MRDR & LPI2C_MRDR_DATA_MASK);
6000b956:	6862      	ldr	r2, [r4, #4]
6000b958:	6f28      	ldr	r0, [r5, #112]	; 0x70
6000b95a:	f102 0c01 	add.w	ip, r2, #1
6000b95e:	f8c4 c004 	str.w	ip, [r4, #4]
6000b962:	7010      	strb	r0, [r2, #0]
6000b964:	4630      	mov	r0, r6
6000b966:	e7e6      	b.n	6000b936 <LPI2C_MasterTransferHandleIRQ+0x13a>
                    if ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U)
6000b968:	6962      	ldr	r2, [r4, #20]
6000b96a:	0756      	lsls	r6, r2, #29
6000b96c:	d409      	bmi.n	6000b982 <LPI2C_MasterTransferHandleIRQ+0x186>
                        if (0U == txCount--)
6000b96e:	1e5a      	subs	r2, r3, #1
6000b970:	2b00      	cmp	r3, #0
6000b972:	d0eb      	beq.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                        base->MTDR = (uint32_t)kStopCmd;
6000b974:	f44f 7300 	mov.w	r3, #512	; 0x200
6000b978:	662b      	str	r3, [r5, #96]	; 0x60
                    handle->state = (uint8_t)kWaitForCompletionState;
6000b97a:	2305      	movs	r3, #5
6000b97c:	7023      	strb	r3, [r4, #0]
                    break;
6000b97e:	4613      	mov	r3, r2
6000b980:	e780      	b.n	6000b884 <LPI2C_MasterTransferHandleIRQ+0x88>
                        if (xfer->direction == kLPI2C_Read)
6000b982:	7ea3      	ldrb	r3, [r4, #26]
6000b984:	2b01      	cmp	r3, #1
6000b986:	f04f 0305 	mov.w	r3, #5
                    handle->state = (uint8_t)kWaitForCompletionState;
6000b98a:	7023      	strb	r3, [r4, #0]
                        if (xfer->direction == kLPI2C_Read)
6000b98c:	d1de      	bne.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
6000b98e:	e762      	b.n	6000b856 <LPI2C_MasterTransferHandleIRQ+0x5a>
                    if ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U)
6000b990:	6963      	ldr	r3, [r4, #20]
6000b992:	0758      	lsls	r0, r3, #29
6000b994:	d403      	bmi.n	6000b99e <LPI2C_MasterTransferHandleIRQ+0x1a2>
                        if (0U != (status & (uint32_t)kLPI2C_MasterStopDetectFlag))
6000b996:	058a      	lsls	r2, r1, #22
6000b998:	f53f af5d 	bmi.w	6000b856 <LPI2C_MasterTransferHandleIRQ+0x5a>
6000b99c:	e7d6      	b.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                        if ((xfer->direction == kLPI2C_Write) && ((base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) == 0U))
6000b99e:	7ea3      	ldrb	r3, [r4, #26]
6000b9a0:	2b00      	cmp	r3, #0
6000b9a2:	d1d3      	bne.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
6000b9a4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
6000b9a6:	075b      	lsls	r3, r3, #29
6000b9a8:	f43f af55 	beq.w	6000b856 <LPI2C_MasterTransferHandleIRQ+0x5a>
6000b9ac:	e7ce      	b.n	6000b94c <LPI2C_MasterTransferHandleIRQ+0x150>
                    assert(false);
6000b9ae:	4b05      	ldr	r3, [pc, #20]	; (6000b9c4 <LPI2C_MasterTransferHandleIRQ+0x1c8>)
6000b9b0:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
6000b9b4:	4a04      	ldr	r2, [pc, #16]	; (6000b9c8 <LPI2C_MasterTransferHandleIRQ+0x1cc>)
6000b9b6:	e72a      	b.n	6000b80e <LPI2C_MasterTransferHandleIRQ+0x12>
6000b9b8:	60018c92 	.word	0x60018c92
6000b9bc:	60018cca 	.word	0x60018cca
6000b9c0:	60018bd2 	.word	0x60018bd2
6000b9c4:	60018b45 	.word	0x60018b45
6000b9c8:	60018cac 	.word	0x60018cac

6000b9cc <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000b9cc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000b9d0:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000b9d4:	f000 031f 	and.w	r3, r0, #31
{
6000b9d8:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000b9da:	d306      	bcc.n	6000b9ea <CLOCK_ControlGate+0x1e>
6000b9dc:	4b0b      	ldr	r3, [pc, #44]	; (6000ba0c <CLOCK_ControlGate+0x40>)
6000b9de:	f240 51de 	movw	r1, #1502	; 0x5de
6000b9e2:	4a0b      	ldr	r2, [pc, #44]	; (6000ba10 <CLOCK_ControlGate+0x44>)
6000b9e4:	480b      	ldr	r0, [pc, #44]	; (6000ba14 <CLOCK_ControlGate+0x48>)
6000b9e6:	f004 fb0b 	bl	60010000 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000b9ea:	480b      	ldr	r0, [pc, #44]	; (6000ba18 <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000b9ec:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000b9ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000b9f2:	2203      	movs	r2, #3
6000b9f4:	409a      	lsls	r2, r3
    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000b9f6:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000b9f8:	e850 3f00 	ldrex	r3, [r0]
6000b9fc:	4013      	ands	r3, r2
6000b9fe:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000ba00:	e840 3400 	strex	r4, r3, [r0]
6000ba04:	2c00      	cmp	r4, #0
6000ba06:	d1f7      	bne.n	6000b9f8 <CLOCK_ControlGate+0x2c>
}
6000ba08:	bd10      	pop	{r4, pc}
6000ba0a:	bf00      	nop
6000ba0c:	60018b5e 	.word	0x60018b5e
6000ba10:	60018eac 	.word	0x60018eac
6000ba14:	60018b6b 	.word	0x60018b6b
6000ba18:	400fc068 	.word	0x400fc068

6000ba1c <LPUART_GetInstance>:
 *
 * param base LPUART peripheral base address.
 * return LPUART instance.
 */
uint32_t LPUART_GetInstance(LPUART_Type *base)
{
6000ba1c:	b508      	push	{r3, lr}
6000ba1e:	4a08      	ldr	r2, [pc, #32]	; (6000ba40 <LPUART_GetInstance+0x24>)
6000ba20:	4603      	mov	r3, r0
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
6000ba22:	2000      	movs	r0, #0
    {
        if (s_lpuartBases[instance] == base)
6000ba24:	f852 1b04 	ldr.w	r1, [r2], #4
6000ba28:	4299      	cmp	r1, r3
6000ba2a:	d008      	beq.n	6000ba3e <LPUART_GetInstance+0x22>
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
6000ba2c:	3001      	adds	r0, #1
6000ba2e:	2809      	cmp	r0, #9
6000ba30:	d1f8      	bne.n	6000ba24 <LPUART_GetInstance+0x8>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_lpuartBases));
6000ba32:	4b04      	ldr	r3, [pc, #16]	; (6000ba44 <LPUART_GetInstance+0x28>)
6000ba34:	217b      	movs	r1, #123	; 0x7b
6000ba36:	4a04      	ldr	r2, [pc, #16]	; (6000ba48 <LPUART_GetInstance+0x2c>)
6000ba38:	4804      	ldr	r0, [pc, #16]	; (6000ba4c <LPUART_GetInstance+0x30>)
6000ba3a:	f004 fae1 	bl	60010000 <__assert_func>

    return instance;
}
6000ba3e:	bd08      	pop	{r3, pc}
6000ba40:	60016a6c 	.word	0x60016a6c
6000ba44:	60018db8 	.word	0x60018db8
6000ba48:	60018eca 	.word	0x60018eca
6000ba4c:	60018d72 	.word	0x60018d72

6000ba50 <LPUART_Init>:
 * param srcClock_Hz LPUART clock source frequency in HZ.
 * retval kStatus_LPUART_BaudrateNotSupport Baudrate is not support in current clock source.
 * retval kStatus_Success LPUART initialize succeed
 */
status_t LPUART_Init(LPUART_Type *base, const lpuart_config_t *config, uint32_t srcClock_Hz)
{
6000ba50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000ba54:	4604      	mov	r4, r0
    assert(NULL != config);
6000ba56:	460d      	mov	r5, r1
6000ba58:	b929      	cbnz	r1, 6000ba66 <LPUART_Init+0x16>
6000ba5a:	4b6e      	ldr	r3, [pc, #440]	; (6000bc14 <LPUART_Init+0x1c4>)
6000ba5c:	21f2      	movs	r1, #242	; 0xf2
6000ba5e:	4a6e      	ldr	r2, [pc, #440]	; (6000bc18 <LPUART_Init+0x1c8>)
    assert(0U < config->baudRate_Bps);
6000ba60:	486e      	ldr	r0, [pc, #440]	; (6000bc1c <LPUART_Init+0x1cc>)
6000ba62:	f004 facd 	bl	60010000 <__assert_func>
6000ba66:	680b      	ldr	r3, [r1, #0]
6000ba68:	b91b      	cbnz	r3, 6000ba72 <LPUART_Init+0x22>
6000ba6a:	4b6d      	ldr	r3, [pc, #436]	; (6000bc20 <LPUART_Init+0x1d0>)
6000ba6c:	21f3      	movs	r1, #243	; 0xf3
6000ba6e:	4a6a      	ldr	r2, [pc, #424]	; (6000bc18 <LPUART_Init+0x1c8>)
6000ba70:	e7f6      	b.n	6000ba60 <LPUART_Init+0x10>
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->txFifoWatermark);
6000ba72:	7a09      	ldrb	r1, [r1, #8]
6000ba74:	2903      	cmp	r1, #3
6000ba76:	d903      	bls.n	6000ba80 <LPUART_Init+0x30>
6000ba78:	4b6a      	ldr	r3, [pc, #424]	; (6000bc24 <LPUART_Init+0x1d4>)
6000ba7a:	21f5      	movs	r1, #245	; 0xf5
6000ba7c:	4a66      	ldr	r2, [pc, #408]	; (6000bc18 <LPUART_Init+0x1c8>)
6000ba7e:	e7ef      	b.n	6000ba60 <LPUART_Init+0x10>
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->rxFifoWatermark);
6000ba80:	7a69      	ldrb	r1, [r5, #9]
6000ba82:	2903      	cmp	r1, #3
6000ba84:	f200 80b7 	bhi.w	6000bbf6 <LPUART_Init+0x1a6>
    osr      = 0U;
    sbr      = 0U;
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
    {
        /* calculate the temporary sbr value   */
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000ba88:	f04f 090a 	mov.w	r9, #10
    osr      = 0U;
6000ba8c:	2600      	movs	r6, #0
6000ba8e:	ea4f 0883 	mov.w	r8, r3, lsl #2
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000ba92:	469e      	mov	lr, r3
6000ba94:	fb09 fa02 	mul.w	sl, r9, r2
6000ba98:	f04f 0c04 	mov.w	ip, #4
    sbr      = 0U;
6000ba9c:	4637      	mov	r7, r6
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000ba9e:	fbba f1f8 	udiv	r1, sl, r8
6000baa2:	3105      	adds	r1, #5
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000baa4:	4498      	add	r8, r3
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000baa6:	fbb1 f1f9 	udiv	r1, r1, r9
6000baaa:	b289      	uxth	r1, r1
6000baac:	2901      	cmp	r1, #1
6000baae:	bf38      	it	cc
6000bab0:	2101      	movcc	r1, #1
        if (sbrTemp == 0U)
        {
            sbrTemp = 1U;
        }
        /* Calculate the baud rate based on the temporary OSR and SBR values */
        calculatedBaud = (srcClock_Hz / ((uint32_t)osrTemp * (uint32_t)sbrTemp));
6000bab2:	fb0c f001 	mul.w	r0, ip, r1
6000bab6:	fbb2 f0f0 	udiv	r0, r2, r0
        tempDiff       = calculatedBaud > config->baudRate_Bps ? (calculatedBaud - config->baudRate_Bps) :
6000baba:	4283      	cmp	r3, r0
6000babc:	bf34      	ite	cc
6000babe:	1ac0      	subcc	r0, r0, r3
6000bac0:	1a18      	subcs	r0, r3, r0
                                                           (config->baudRate_Bps - calculatedBaud);

        if (tempDiff <= baudDiff)
6000bac2:	4570      	cmp	r0, lr
6000bac4:	bf98      	it	ls
6000bac6:	fa5f f68c 	uxtbls.w	r6, ip
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000baca:	f10c 0c01 	add.w	ip, ip, #1
        if (tempDiff <= baudDiff)
6000bace:	bf9c      	itt	ls
6000bad0:	4686      	movls	lr, r0
        {
            baudDiff = tempDiff;
            osr      = osrTemp; /* update and store the best OSR value calculated */
            sbr      = sbrTemp; /* update store the best SBR value calculated */
6000bad2:	460f      	movls	r7, r1
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000bad4:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
6000bad8:	d1e1      	bne.n	6000ba9e <LPUART_Init+0x4e>
        }
    }

    /* Check to see if actual baud rate is within 3% of desired baud rate
     * based on the best calculate OSR value */
    if (baudDiff > ((config->baudRate_Bps / 100U) * 3U))
6000bada:	2264      	movs	r2, #100	; 0x64
6000badc:	fbb3 f3f2 	udiv	r3, r3, r2
6000bae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
6000bae4:	4573      	cmp	r3, lr
6000bae6:	f0c0 8092 	bcc.w	6000bc0e <LPUART_Init+0x1be>
    }
    else
    {
#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

        uint32_t instance = LPUART_GetInstance(base);
6000baea:	4620      	mov	r0, r4
        temp &= ~LPUART_BAUD_OSR_MASK;
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);

        /* write the sbr value to the BAUD registers */
        temp &= ~LPUART_BAUD_SBR_MASK;
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
6000baec:	f3c7 070c 	ubfx	r7, r7, #0, #13
        uint32_t instance = LPUART_GetInstance(base);
6000baf0:	f7ff ff94 	bl	6000ba1c <LPUART_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000baf4:	4b4c      	ldr	r3, [pc, #304]	; (6000bc28 <LPUART_Init+0x1d8>)
6000baf6:	2103      	movs	r1, #3
6000baf8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000bafc:	f7ff ff66 	bl	6000b9cc <CLOCK_ControlGate>
 *
 * @param base LPUART peripheral base address.
 */
static inline void LPUART_SoftwareReset(LPUART_Type *base)
{
    base->GLOBAL |= LPUART_GLOBAL_RST_MASK;
6000bb00:	68a3      	ldr	r3, [r4, #8]
        if ((osr > 3U) && (osr < 8U))
6000bb02:	1f32      	subs	r2, r6, #4
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000bb04:	3e01      	subs	r6, #1
6000bb06:	f043 0302 	orr.w	r3, r3, #2
        if ((osr > 3U) && (osr < 8U))
6000bb0a:	2a03      	cmp	r2, #3
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000bb0c:	ea4f 6606 	mov.w	r6, r6, lsl #24
6000bb10:	60a3      	str	r3, [r4, #8]
    base->GLOBAL &= ~LPUART_GLOBAL_RST_MASK;
6000bb12:	68a3      	ldr	r3, [r4, #8]
6000bb14:	f006 56f8 	and.w	r6, r6, #520093696	; 0x1f000000
6000bb18:	f023 0302 	bic.w	r3, r3, #2
6000bb1c:	60a3      	str	r3, [r4, #8]
        temp = base->BAUD;
6000bb1e:	6923      	ldr	r3, [r4, #16]
            temp |= LPUART_BAUD_BOTHEDGE_MASK;
6000bb20:	bf98      	it	ls
6000bb22:	f443 3300 	orrls.w	r3, r3, #131072	; 0x20000
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000bb26:	f023 231f 	bic.w	r3, r3, #520101632	; 0x1f001f00
6000bb2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
        temp &= ~LPUART_BAUD_SBR_MASK;
6000bb2e:	4333      	orrs	r3, r6
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
6000bb30:	431f      	orrs	r7, r3
6000bb32:	6127      	str	r7, [r4, #16]

        /* Set bit count and parity mode. */
        base->BAUD &= ~LPUART_BAUD_M10_MASK;
6000bb34:	6923      	ldr	r3, [r4, #16]
6000bb36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
6000bb3a:	6123      	str	r3, [r4, #16]

        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000bb3c:	69a3      	ldr	r3, [r4, #24]
                              LPUART_CTRL_IDLECFG_MASK);

        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000bb3e:	7bea      	ldrb	r2, [r5, #15]
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000bb40:	f423 63e2 	bic.w	r3, r3, #1808	; 0x710
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000bb44:	7929      	ldrb	r1, [r5, #4]
6000bb46:	0212      	lsls	r2, r2, #8
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000bb48:	f023 0307 	bic.w	r3, r3, #7
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000bb4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
6000bb50:	430b      	orrs	r3, r1
6000bb52:	431a      	orrs	r2, r3
                LPUART_CTRL_ILT(config->rxIdleType);
6000bb54:	7bab      	ldrb	r3, [r5, #14]
6000bb56:	009b      	lsls	r3, r3, #2
6000bb58:	f003 0304 	and.w	r3, r3, #4
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000bb5c:	4313      	orrs	r3, r2

#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
        if (kLPUART_SevenDataBits == config->dataBitsCount)
6000bb5e:	796a      	ldrb	r2, [r5, #5]
6000bb60:	2a01      	cmp	r2, #1
6000bb62:	d14f      	bne.n	6000bc04 <LPUART_Init+0x1b4>
        {
            if (kLPUART_ParityDisabled != config->parityMode)
6000bb64:	2900      	cmp	r1, #0
6000bb66:	d04a      	beq.n	6000bbfe <LPUART_Init+0x1ae>
            {
                temp &= ~LPUART_CTRL_M7_MASK; /* Seven data bits and one parity bit */
6000bb68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            {
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
            }
        }

        base->CTRL = temp;
6000bb6c:	61a3      	str	r3, [r4, #24]

#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
        /* set stop bit per char */
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000bb6e:	79eb      	ldrb	r3, [r5, #7]
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
6000bb70:	6922      	ldr	r2, [r4, #16]
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000bb72:	035b      	lsls	r3, r3, #13
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
6000bb74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000bb78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
6000bb7c:	4313      	orrs	r3, r2
6000bb7e:	6123      	str	r3, [r4, #16]
           mark larger than 1.
           For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
           5 bytes are received. the last byte will be saved in FIFO but not trigger
           RX interrupt because the water mark is 2.
         */
        base->WATER = (((uint32_t)(config->rxFifoWatermark) << 16U) | config->txFifoWatermark);
6000bb80:	7a6a      	ldrb	r2, [r5, #9]
6000bb82:	7a2b      	ldrb	r3, [r5, #8]
6000bb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
6000bb88:	62e3      	str	r3, [r4, #44]	; 0x2c

        /* Enable tx/rx FIFO */
        base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
6000bb8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000bb8c:	f043 0388 	orr.w	r3, r3, #136	; 0x88
6000bb90:	62a3      	str	r3, [r4, #40]	; 0x28

        /* Flush FIFO */
        base->FIFO |= (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK);
6000bb92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000bb94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
6000bb98:	62a3      	str	r3, [r4, #40]	; 0x28
        temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
        /* Set the CTS configuration/TX CTS source. */
        base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
6000bb9a:	7b6b      	ldrb	r3, [r5, #13]
6000bb9c:	7b2a      	ldrb	r2, [r5, #12]
6000bb9e:	011b      	lsls	r3, r3, #4
6000bba0:	6a61      	ldr	r1, [r4, #36]	; 0x24
6000bba2:	0152      	lsls	r2, r2, #5
6000bba4:	f003 0310 	and.w	r3, r3, #16
6000bba8:	f002 0220 	and.w	r2, r2, #32
6000bbac:	4313      	orrs	r3, r2
6000bbae:	430b      	orrs	r3, r1
6000bbb0:	6263      	str	r3, [r4, #36]	; 0x24
        if (true == config->enableRxRTS)
6000bbb2:	7aab      	ldrb	r3, [r5, #10]
6000bbb4:	b11b      	cbz	r3, 6000bbbe <LPUART_Init+0x16e>
        {
            /* Enable the receiver RTS(request-to-send) function. */
            base->MODIR |= LPUART_MODIR_RXRTSE_MASK;
6000bbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000bbb8:	f043 0308 	orr.w	r3, r3, #8
6000bbbc:	6263      	str	r3, [r4, #36]	; 0x24
        }
        if (true == config->enableTxCTS)
6000bbbe:	7aeb      	ldrb	r3, [r5, #11]
6000bbc0:	b11b      	cbz	r3, 6000bbca <LPUART_Init+0x17a>
        {
            /* Enable the CTS(clear-to-send) function. */
            base->MODIR |= LPUART_MODIR_TXCTSE_MASK;
6000bbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000bbc4:	f043 0301 	orr.w	r3, r3, #1
6000bbc8:	6263      	str	r3, [r4, #36]	; 0x24
        }
#endif

        /* Set data bits order. */
        if (true == config->isMsb)
6000bbca:	79a9      	ldrb	r1, [r5, #6]
        {
            temp |= LPUART_STAT_MSBF_MASK;
6000bbcc:	4b17      	ldr	r3, [pc, #92]	; (6000bc2c <LPUART_Init+0x1dc>)
6000bbce:	4a18      	ldr	r2, [pc, #96]	; (6000bc30 <LPUART_Init+0x1e0>)
6000bbd0:	2900      	cmp	r1, #0
6000bbd2:	bf18      	it	ne
6000bbd4:	461a      	movne	r2, r3
        else
        {
            temp &= ~LPUART_STAT_MSBF_MASK;
        }

        base->STAT |= temp;
6000bbd6:	6963      	ldr	r3, [r4, #20]
6000bbd8:	4313      	orrs	r3, r2
6000bbda:	6163      	str	r3, [r4, #20]

        /* Enable TX/RX base on configure structure. */
        temp = base->CTRL;
        if (true == config->enableTx)
6000bbdc:	7c2a      	ldrb	r2, [r5, #16]
        temp = base->CTRL;
6000bbde:	69a3      	ldr	r3, [r4, #24]
        if (true == config->enableTx)
6000bbe0:	b10a      	cbz	r2, 6000bbe6 <LPUART_Init+0x196>
        {
            temp |= LPUART_CTRL_TE_MASK;
6000bbe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
        }

        if (true == config->enableRx)
6000bbe6:	7c6a      	ldrb	r2, [r5, #17]
6000bbe8:	b10a      	cbz	r2, 6000bbee <LPUART_Init+0x19e>
        {
            temp |= LPUART_CTRL_RE_MASK;
6000bbea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    status_t status = kStatus_Success;
6000bbee:	2000      	movs	r0, #0
        }

        base->CTRL = temp;
6000bbf0:	61a3      	str	r3, [r4, #24]
    }

    return status;
}
6000bbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->rxFifoWatermark);
6000bbf6:	4b0f      	ldr	r3, [pc, #60]	; (6000bc34 <LPUART_Init+0x1e4>)
6000bbf8:	21f6      	movs	r1, #246	; 0xf6
6000bbfa:	4a07      	ldr	r2, [pc, #28]	; (6000bc18 <LPUART_Init+0x1c8>)
6000bbfc:	e730      	b.n	6000ba60 <LPUART_Init+0x10>
                temp |= LPUART_CTRL_M7_MASK;
6000bbfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
6000bc02:	e7b3      	b.n	6000bb6c <LPUART_Init+0x11c>
            if (kLPUART_ParityDisabled != config->parityMode)
6000bc04:	2900      	cmp	r1, #0
6000bc06:	d0b1      	beq.n	6000bb6c <LPUART_Init+0x11c>
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
6000bc08:	f043 0310 	orr.w	r3, r3, #16
6000bc0c:	e7ae      	b.n	6000bb6c <LPUART_Init+0x11c>
        status = kStatus_LPUART_BaudrateNotSupport;
6000bc0e:	f240 5021 	movw	r0, #1313	; 0x521
    return status;
6000bc12:	e7ee      	b.n	6000bbf2 <LPUART_Init+0x1a2>
6000bc14:	60018ddd 	.word	0x60018ddd
6000bc18:	60018ebe 	.word	0x60018ebe
6000bc1c:	60018d72 	.word	0x60018d72
6000bc20:	60018dec 	.word	0x60018dec
6000bc24:	60018e06 	.word	0x60018e06
6000bc28:	60016c76 	.word	0x60016c76
6000bc2c:	e01fc000 	.word	0xe01fc000
6000bc30:	c01fc000 	.word	0xc01fc000
6000bc34:	60018e4d 	.word	0x60018e4d

6000bc38 <LPUART_Deinit>:
 * This function waits for transmit to complete, disables TX and RX, and disables the LPUART clock.
 *
 * param base LPUART peripheral base address.
 */
void LPUART_Deinit(LPUART_Type *base)
{
6000bc38:	b510      	push	{r4, lr}
    uint32_t temp;

#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Wait tx FIFO send out*/
    while (0U != ((base->WATER & LPUART_WATER_TXCOUNT_MASK) >> LPUART_WATER_TXWATER_SHIFT))
6000bc3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
6000bc3c:	f413 6fe0 	tst.w	r3, #1792	; 0x700
6000bc40:	d1fb      	bne.n	6000bc3a <LPUART_Deinit+0x2>
    {
    }
#endif
    /* Wait last char shift out */
    while (0U == (base->STAT & LPUART_STAT_TC_MASK))
6000bc42:	6943      	ldr	r3, [r0, #20]
6000bc44:	025b      	lsls	r3, r3, #9
6000bc46:	d5fc      	bpl.n	6000bc42 <LPUART_Deinit+0xa>

#if defined(FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING) && FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING
    temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

    base->STAT |= temp;
6000bc48:	6943      	ldr	r3, [r0, #20]

    /* Disable the module. */
    base->CTRL = 0U;
6000bc4a:	2400      	movs	r4, #0
    base->STAT |= temp;
6000bc4c:	f043 23c0 	orr.w	r3, r3, #3221274624	; 0xc000c000
6000bc50:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
6000bc54:	6143      	str	r3, [r0, #20]
    base->CTRL = 0U;
6000bc56:	6184      	str	r4, [r0, #24]

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    uint32_t instance = LPUART_GetInstance(base);
6000bc58:	f7ff fee0 	bl	6000ba1c <LPUART_GetInstance>
 *
 * @param name  Which clock to disable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
6000bc5c:	4b03      	ldr	r3, [pc, #12]	; (6000bc6c <LPUART_Deinit+0x34>)
6000bc5e:	4621      	mov	r1, r4
6000bc60:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
#if defined(LPUART_PERIPH_CLOCKS)
    (void)CLOCK_DisableClock(s_lpuartPeriphClocks[instance]);
#endif

#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}
6000bc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000bc68:	f7ff beb0 	b.w	6000b9cc <CLOCK_ControlGate>
6000bc6c:	60016c76 	.word	0x60016c76

6000bc70 <LPUART_GetDefaultConfig>:
 *   lpuartConfig->enableRx = false;
 *
 * param config Pointer to a configuration structure.
 */
void LPUART_GetDefaultConfig(lpuart_config_t *config)
{
6000bc70:	b508      	push	{r3, lr}
    assert(NULL != config);
6000bc72:	b930      	cbnz	r0, 6000bc82 <LPUART_GetDefaultConfig+0x12>
6000bc74:	4b08      	ldr	r3, [pc, #32]	; (6000bc98 <LPUART_GetDefaultConfig+0x28>)
6000bc76:	f240 2106 	movw	r1, #518	; 0x206
6000bc7a:	4a08      	ldr	r2, [pc, #32]	; (6000bc9c <LPUART_GetDefaultConfig+0x2c>)
6000bc7c:	4808      	ldr	r0, [pc, #32]	; (6000bca0 <LPUART_GetDefaultConfig+0x30>)
6000bc7e:	f004 f9bf 	bl	60010000 <__assert_func>
6000bc82:	2300      	movs	r3, #0

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    config->baudRate_Bps  = 115200U;
6000bc84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
6000bc88:	8243      	strh	r3, [r0, #18]
    config->txCtsConfig = kLPUART_CtsSampleAtStart;
    config->txCtsSource = kLPUART_CtsSourcePin;
#endif
    config->rxIdleType   = kLPUART_IdleTypeStartBit;
    config->rxIdleConfig = kLPUART_IdleCharacter1;
    config->enableTx     = false;
6000bc8a:	8203      	strh	r3, [r0, #16]
    config->parityMode    = kLPUART_ParityDisabled;
6000bc8c:	e9c0 2300 	strd	r2, r3, [r0]
    config->txCtsSource = kLPUART_CtsSourcePin;
6000bc90:	e9c0 3302 	strd	r3, r3, [r0, #8]
    config->enableRx     = false;
}
6000bc94:	bd08      	pop	{r3, pc}
6000bc96:	bf00      	nop
6000bc98:	60018ddd 	.word	0x60018ddd
6000bc9c:	60018e94 	.word	0x60018e94
6000bca0:	60018d72 	.word	0x60018d72

6000bca4 <LPUART_GetEnabledInterrupts>:
 * return LPUART interrupt flags which are logical OR of the enumerators in ref _lpuart_interrupt_enable.
 */
uint32_t LPUART_GetEnabledInterrupts(LPUART_Type *base)
{
    /* Check int enable bits in base->CTRL */
    uint32_t temp = (uint32_t)(base->CTRL & (uint32_t)kLPUART_AllInterruptEnable);
6000bca4:	6981      	ldr	r1, [r0, #24]

    /* Check int enable bits in base->BAUD */
    temp = (temp & ~(uint32_t)kLPUART_RxActiveEdgeInterruptEnable) | ((base->BAUD & LPUART_BAUD_RXEDGIE_MASK) >> 8U);
6000bca6:	6902      	ldr	r2, [r0, #16]
6000bca8:	4b08      	ldr	r3, [pc, #32]	; (6000bccc <LPUART_GetEnabledInterrupts+0x28>)
6000bcaa:	0a12      	lsrs	r2, r2, #8
6000bcac:	400b      	ands	r3, r1
6000bcae:	f002 0240 	and.w	r2, r2, #64	; 0x40
#if defined(FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT) && FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000bcb2:	431a      	orrs	r2, r3
6000bcb4:	6903      	ldr	r3, [r0, #16]

#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Check int enable bits in base->FIFO */
    temp =
        (temp & ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable)) |
        (base->FIFO & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
6000bcb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000bcb8:	0a1b      	lsrs	r3, r3, #8
        (base->FIFO & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
6000bcba:	f400 7040 	and.w	r0, r0, #768	; 0x300
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
6000bcc2:	4313      	orrs	r3, r2
        (temp & ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable)) |
6000bcc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
#endif

    return temp;
}
6000bcc8:	4318      	orrs	r0, r3
6000bcca:	4770      	bx	lr
6000bccc:	0ff0c300 	.word	0x0ff0c300

6000bcd0 <LPUART_GetStatusFlags>:
 * return LPUART status flags which are ORed by the enumerators in the _lpuart_flags.
 */
uint32_t LPUART_GetStatusFlags(LPUART_Type *base)
{
    uint32_t temp;
    temp = base->STAT;
6000bcd0:	6942      	ldr	r2, [r0, #20]
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    temp |= (base->FIFO &
6000bcd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
            16U;
#endif
    /* Only keeps the status bits */
    temp &= (uint32_t)kLPUART_AllFlags;
    return temp;
}
6000bcd4:	4803      	ldr	r0, [pc, #12]	; (6000bce4 <LPUART_GetStatusFlags+0x14>)
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
6000bcd6:	0c1b      	lsrs	r3, r3, #16
6000bcd8:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
    temp |= (base->FIFO &
6000bcdc:	4313      	orrs	r3, r2
}
6000bcde:	4018      	ands	r0, r3
6000bce0:	4770      	bx	lr
6000bce2:	bf00      	nop
6000bce4:	c1ffc0c3 	.word	0xc1ffc0c3

6000bce8 <LPUART_ClearStatusFlags>:
 * retval kStatus_LPUART_FlagCannotClearManually The flag can't be cleared by this function but
 *         it is cleared automatically by hardware.
 * retval kStatus_Success Status in the mask are cleared.
 */
status_t LPUART_ClearStatusFlags(LPUART_Type *base, uint32_t mask)
{
6000bce8:	b510      	push	{r4, lr}

    /* Only deal with the clearable flags */
    mask &= (uint32_t)kLPUART_AllClearFlags;
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Status bits in FIFO register */
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
6000bcea:	078b      	lsls	r3, r1, #30
    mask &= (uint32_t)kLPUART_AllClearFlags;
6000bcec:	4c0c      	ldr	r4, [pc, #48]	; (6000bd20 <LPUART_ClearStatusFlags+0x38>)
6000bcee:	ea04 0401 	and.w	r4, r4, r1
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
6000bcf2:	d007      	beq.n	6000bd04 <LPUART_ClearStatusFlags+0x1c>
    {
        /* Get the FIFO register value and mask the rx/tx FIFO flush bits and the status bits that can be W1C in case
           they are written 1 accidentally. */
        temp = (uint32_t)base->FIFO;
6000bcf4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        temp &= (uint32_t)(
            ~(LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
6000bcf6:	0423      	lsls	r3, r4, #16
        temp &= (uint32_t)(
6000bcf8:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
6000bcfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
6000bd00:	4313      	orrs	r3, r2
        base->FIFO = temp;
6000bd02:	6283      	str	r3, [r0, #40]	; 0x28
    }
#endif
    /* Status bits in STAT register */
    /* First get the STAT register value and mask all the bits that not represent status, then OR with the status bit
     * that is to be W1C */
    temp       = (base->STAT & 0x3E000000UL) | mask;
6000bd04:	6943      	ldr	r3, [r0, #20]
6000bd06:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
6000bd0a:	4323      	orrs	r3, r4
    base->STAT = temp;
6000bd0c:	6143      	str	r3, [r0, #20]
    /* If some flags still pending. */
    if (0U != (mask & LPUART_GetStatusFlags(base)))
6000bd0e:	f7ff ffdf 	bl	6000bcd0 <LPUART_GetStatusFlags>
    {
        status = kStatus_LPUART_FlagCannotClearManually;
6000bd12:	4220      	tst	r0, r4
    {
        status = kStatus_Success;
    }

    return status;
}
6000bd14:	f240 501a 	movw	r0, #1306	; 0x51a
6000bd18:	bf08      	it	eq
6000bd1a:	2000      	moveq	r0, #0
6000bd1c:	bd10      	pop	{r4, pc}
6000bd1e:	bf00      	nop
6000bd20:	c01fc003 	.word	0xc01fc003

6000bd24 <GPIO_PinWrite>:
 *        - 0: corresponding pin output low-logic level.
 *        - 1: corresponding pin output high-logic level.
 */
void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
{
    assert(pin < 32U);
6000bd24:	291f      	cmp	r1, #31
{
6000bd26:	b508      	push	{r3, lr}
    assert(pin < 32U);
6000bd28:	d905      	bls.n	6000bd36 <GPIO_PinWrite+0x12>
6000bd2a:	4b08      	ldr	r3, [pc, #32]	; (6000bd4c <GPIO_PinWrite+0x28>)
6000bd2c:	2175      	movs	r1, #117	; 0x75
6000bd2e:	4a08      	ldr	r2, [pc, #32]	; (6000bd50 <GPIO_PinWrite+0x2c>)
6000bd30:	4808      	ldr	r0, [pc, #32]	; (6000bd54 <GPIO_PinWrite+0x30>)
6000bd32:	f004 f965 	bl	60010000 <__assert_func>
    if (output == 0U)
    {
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && FSL_FEATURE_IGPIO_HAS_DR_CLEAR)
        base->DR_CLEAR = (1UL << pin);
6000bd36:	2301      	movs	r3, #1
6000bd38:	fa03 f101 	lsl.w	r1, r3, r1
    if (output == 0U)
6000bd3c:	b912      	cbnz	r2, 6000bd44 <GPIO_PinWrite+0x20>
        base->DR_CLEAR = (1UL << pin);
6000bd3e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
        base->DR_SET = (1UL << pin);
#else
        base->DR |= (1UL << pin);  /* Set pin output to high level.*/
#endif
    }
}
6000bd42:	bd08      	pop	{r3, pc}
        base->DR_SET = (1UL << pin);
6000bd44:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
}
6000bd48:	e7fb      	b.n	6000bd42 <GPIO_PinWrite+0x1e>
6000bd4a:	bf00      	nop
6000bd4c:	60018edd 	.word	0x60018edd
6000bd50:	60018f2a 	.word	0x60018f2a
6000bd54:	60018ee7 	.word	0x60018ee7

6000bd58 <PWM_GetInstance>:
    /* Rounding calculations to improve the accuracy of reloadValue */
    return ((65535U * dutyCyclePercent) + 50U) / 100U;
}

static uint32_t PWM_GetInstance(PWM_Type *base)
{
6000bd58:	b508      	push	{r3, lr}
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
    {
        if (s_pwmBases[instance] == base)
6000bd5a:	b1a8      	cbz	r0, 6000bd88 <PWM_GetInstance+0x30>
6000bd5c:	4b0e      	ldr	r3, [pc, #56]	; (6000bd98 <PWM_GetInstance+0x40>)
6000bd5e:	4298      	cmp	r0, r3
6000bd60:	d011      	beq.n	6000bd86 <PWM_GetInstance+0x2e>
6000bd62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000bd66:	4298      	cmp	r0, r3
6000bd68:	d00f      	beq.n	6000bd8a <PWM_GetInstance+0x32>
6000bd6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000bd6e:	4298      	cmp	r0, r3
6000bd70:	d00d      	beq.n	6000bd8e <PWM_GetInstance+0x36>
6000bd72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000bd76:	4298      	cmp	r0, r3
6000bd78:	d00b      	beq.n	6000bd92 <PWM_GetInstance+0x3a>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_pwmBases));
6000bd7a:	4b08      	ldr	r3, [pc, #32]	; (6000bd9c <PWM_GetInstance+0x44>)
6000bd7c:	214b      	movs	r1, #75	; 0x4b
6000bd7e:	4a08      	ldr	r2, [pc, #32]	; (6000bda0 <PWM_GetInstance+0x48>)
6000bd80:	4808      	ldr	r0, [pc, #32]	; (6000bda4 <PWM_GetInstance+0x4c>)
6000bd82:	f004 f93d 	bl	60010000 <__assert_func>
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
6000bd86:	2001      	movs	r0, #1

    return instance;
}
6000bd88:	bd08      	pop	{r3, pc}
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
6000bd8a:	2002      	movs	r0, #2
6000bd8c:	e7fc      	b.n	6000bd88 <PWM_GetInstance+0x30>
6000bd8e:	2003      	movs	r0, #3
6000bd90:	e7fa      	b.n	6000bd88 <PWM_GetInstance+0x30>
6000bd92:	2004      	movs	r0, #4
    return instance;
6000bd94:	e7f8      	b.n	6000bd88 <PWM_GetInstance+0x30>
6000bd96:	bf00      	nop
6000bd98:	403dc000 	.word	0x403dc000
6000bd9c:	60018f38 	.word	0x60018f38
6000bda0:	60019067 	.word	0x60019067
6000bda4:	60018f5a 	.word	0x60018f5a

6000bda8 <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000bda8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000bdac:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000bdb0:	f000 031f 	and.w	r3, r0, #31
{
6000bdb4:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000bdb6:	d306      	bcc.n	6000bdc6 <CLOCK_ControlGate+0x1e>
6000bdb8:	4b0b      	ldr	r3, [pc, #44]	; (6000bde8 <CLOCK_ControlGate+0x40>)
6000bdba:	f240 51de 	movw	r1, #1502	; 0x5de
6000bdbe:	4a0b      	ldr	r2, [pc, #44]	; (6000bdec <CLOCK_ControlGate+0x44>)
6000bdc0:	480b      	ldr	r0, [pc, #44]	; (6000bdf0 <CLOCK_ControlGate+0x48>)
6000bdc2:	f004 f91d 	bl	60010000 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000bdc6:	480b      	ldr	r0, [pc, #44]	; (6000bdf4 <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000bdc8:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000bdca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000bdce:	2203      	movs	r2, #3
6000bdd0:	409a      	lsls	r2, r3
6000bdd2:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000bdd4:	e850 3f00 	ldrex	r3, [r0]
6000bdd8:	4013      	ands	r3, r2
6000bdda:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000bddc:	e840 3400 	strex	r4, r3, [r0]
6000bde0:	2c00      	cmp	r4, #0
6000bde2:	d1f7      	bne.n	6000bdd4 <CLOCK_ControlGate+0x2c>
}
6000bde4:	bd10      	pop	{r4, pc}
6000bde6:	bf00      	nop
6000bde8:	60018b5e 	.word	0x60018b5e
6000bdec:	60019055 	.word	0x60019055
6000bdf0:	60018b6b 	.word	0x60018b6b
6000bdf4:	400fc068 	.word	0x400fc068

6000bdf8 <PWM_Init>:
 * param config    Pointer to user's PWM config structure.
 *
 * return kStatus_Success means success; else failed.
 */
status_t PWM_Init(PWM_Type *base, pwm_submodule_t subModule, const pwm_config_t *config)
{
6000bdf8:	b570      	push	{r4, r5, r6, lr}
6000bdfa:	4606      	mov	r6, r0
6000bdfc:	460d      	mov	r5, r1
    assert(config);
6000bdfe:	4614      	mov	r4, r2
6000be00:	b92a      	cbnz	r2, 6000be0e <PWM_Init+0x16>
6000be02:	4b49      	ldr	r3, [pc, #292]	; (6000bf28 <PWM_Init+0x130>)
6000be04:	215d      	movs	r1, #93	; 0x5d
6000be06:	4a49      	ldr	r2, [pc, #292]	; (6000bf2c <PWM_Init+0x134>)
            break;
        case kPWM_ComplementaryPwmB:
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
            break;
        default:
            assert(false);
6000be08:	4849      	ldr	r0, [pc, #292]	; (6000bf30 <PWM_Init+0x138>)
6000be0a:	f004 f8f9 	bl	60010000 <__assert_func>
    if ((config->clockSource == kPWM_Submodule0Clock) && (subModule == kPWM_Module_0))
6000be0e:	78d3      	ldrb	r3, [r2, #3]
6000be10:	2b02      	cmp	r3, #2
6000be12:	d102      	bne.n	6000be1a <PWM_Init+0x22>
6000be14:	b925      	cbnz	r5, 6000be20 <PWM_Init+0x28>
        return kStatus_Fail;
6000be16:	2001      	movs	r0, #1
6000be18:	e073      	b.n	6000bf02 <PWM_Init+0x10a>
    if ((config->reloadSelect == kPWM_MasterReload) && (subModule == kPWM_Module_0))
6000be1a:	79d3      	ldrb	r3, [r2, #7]
6000be1c:	2b01      	cmp	r3, #1
6000be1e:	d0f9      	beq.n	6000be14 <PWM_Init+0x1c>
    CLOCK_EnableClock(s_pwmClocks[PWM_GetInstance(base)][subModule]);
6000be20:	4630      	mov	r0, r6
6000be22:	f7ff ff99 	bl	6000bd58 <PWM_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000be26:	4b43      	ldr	r3, [pc, #268]	; (6000bf34 <PWM_Init+0x13c>)
6000be28:	eb05 0080 	add.w	r0, r5, r0, lsl #2
6000be2c:	2103      	movs	r1, #3
6000be2e:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000be32:	f7ff ffb9 	bl	6000bda8 <CLOCK_ControlGate>
    base->FSTS |= PWM_FSTS_FFLAG_MASK;
6000be36:	f8b6 318e 	ldrh.w	r3, [r6, #398]	; 0x18e
6000be3a:	2260      	movs	r2, #96	; 0x60
6000be3c:	b29b      	uxth	r3, r3
6000be3e:	fb02 6205 	mla	r2, r2, r5, r6
6000be42:	f043 030f 	orr.w	r3, r3, #15
6000be46:	f8a6 318e 	strh.w	r3, [r6, #398]	; 0x18e
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000be4a:	78e3      	ldrb	r3, [r4, #3]
    reg = base->SM[subModule].CTRL2;
6000be4c:	8891      	ldrh	r1, [r2, #4]
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000be4e:	f003 0303 	and.w	r3, r3, #3
            PWM_CTRL2_INIT_SEL(config->initializationControl) | PWM_CTRL2_DBGEN(config->enableDebugMode) |
6000be52:	7820      	ldrb	r0, [r4, #0]
    reg &= ~(uint16_t)(PWM_CTRL2_CLK_SEL_MASK | PWM_CTRL2_FORCE_SEL_MASK | PWM_CTRL2_INIT_SEL_MASK |
6000be54:	f401 51e6 	and.w	r1, r1, #7360	; 0x1cc0
6000be58:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
6000be5c:	430b      	orrs	r3, r1
            PWM_CTRL2_WAITEN(config->enableWait) | PWM_CTRL2_RELOAD_SEL(config->reloadSelect));
6000be5e:	7861      	ldrb	r1, [r4, #1]
6000be60:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000be64:	7a61      	ldrb	r1, [r4, #9]
6000be66:	00c9      	lsls	r1, r1, #3
6000be68:	f001 0138 	and.w	r1, r1, #56	; 0x38
6000be6c:	430b      	orrs	r3, r1
            PWM_CTRL2_INIT_SEL(config->initializationControl) | PWM_CTRL2_DBGEN(config->enableDebugMode) |
6000be6e:	78a1      	ldrb	r1, [r4, #2]
6000be70:	0209      	lsls	r1, r1, #8
6000be72:	f401 7140 	and.w	r1, r1, #768	; 0x300
6000be76:	430b      	orrs	r3, r1
            PWM_CTRL2_WAITEN(config->enableWait) | PWM_CTRL2_RELOAD_SEL(config->reloadSelect));
6000be78:	79e1      	ldrb	r1, [r4, #7]
6000be7a:	0089      	lsls	r1, r1, #2
6000be7c:	b29b      	uxth	r3, r3
6000be7e:	f001 0104 	and.w	r1, r1, #4
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000be82:	430b      	orrs	r3, r1
    switch (config->pairOperation)
6000be84:	7961      	ldrb	r1, [r4, #5]
6000be86:	2901      	cmp	r1, #1
6000be88:	d01a      	beq.n	6000bec0 <PWM_Init+0xc8>
6000be8a:	2902      	cmp	r1, #2
6000be8c:	d022      	beq.n	6000bed4 <PWM_Init+0xdc>
6000be8e:	bb49      	cbnz	r1, 6000bee4 <PWM_Init+0xec>
            reg |= PWM_CTRL2_INDEP_MASK;
6000be90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
            break;
    }
    base->SM[subModule].CTRL2 = reg;
6000be94:	8093      	strh	r3, [r2, #4]

    reg = base->SM[subModule].CTRL;
6000be96:	88d3      	ldrh	r3, [r2, #6]

    /* Setup the clock prescale, load mode and frequency */
    reg &= ~(uint16_t)(PWM_CTRL_PRSC_MASK | PWM_CTRL_LDFQ_MASK | PWM_CTRL_LDMOD_MASK);
    reg |= (PWM_CTRL_PRSC(config->prescale) | PWM_CTRL_LDFQ(config->reloadFrequency));
6000be98:	7a21      	ldrb	r1, [r4, #8]
    reg &= ~(uint16_t)(PWM_CTRL_PRSC_MASK | PWM_CTRL_LDFQ_MASK | PWM_CTRL_LDMOD_MASK);
6000be9a:	f023 0374 	bic.w	r3, r3, #116	; 0x74
6000be9e:	051b      	lsls	r3, r3, #20
6000bea0:	0d1b      	lsrs	r3, r3, #20
6000bea2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    reg |= (PWM_CTRL_PRSC(config->prescale) | PWM_CTRL_LDFQ(config->reloadFrequency));
6000bea6:	7921      	ldrb	r1, [r4, #4]
6000bea8:	0109      	lsls	r1, r1, #4
6000beaa:	b29b      	uxth	r3, r3
6000beac:	f001 0170 	and.w	r1, r1, #112	; 0x70
6000beb0:	430b      	orrs	r3, r1

    /* Setup register reload logic */
    switch (config->reloadLogic)
6000beb2:	79a1      	ldrb	r1, [r4, #6]
6000beb4:	2903      	cmp	r1, #3
6000beb6:	d832      	bhi.n	6000bf1e <PWM_Init+0x126>
6000beb8:	e8df f001 	tbb	[pc, r1]
6000bebc:	2e292418 	.word	0x2e292418
            base->MCTRL &= ~((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000bec0:	f8b6 0188 	ldrh.w	r0, [r6, #392]	; 0x188
6000bec4:	350c      	adds	r5, #12
6000bec6:	b280      	uxth	r0, r0
6000bec8:	40a9      	lsls	r1, r5
6000beca:	ea20 0101 	bic.w	r1, r0, r1
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000bece:	f8a6 1188 	strh.w	r1, [r6, #392]	; 0x188
            break;
6000bed2:	e7df      	b.n	6000be94 <PWM_Init+0x9c>
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000bed4:	350c      	adds	r5, #12
6000bed6:	2101      	movs	r1, #1
6000bed8:	f8b6 0188 	ldrh.w	r0, [r6, #392]	; 0x188
6000bedc:	40a9      	lsls	r1, r5
6000bede:	4301      	orrs	r1, r0
6000bee0:	b289      	uxth	r1, r1
6000bee2:	e7f4      	b.n	6000bece <PWM_Init+0xd6>
            assert(false);
6000bee4:	4b14      	ldr	r3, [pc, #80]	; (6000bf38 <PWM_Init+0x140>)
6000bee6:	218d      	movs	r1, #141	; 0x8d
6000bee8:	4a10      	ldr	r2, [pc, #64]	; (6000bf2c <PWM_Init+0x134>)
6000beea:	e78d      	b.n	6000be08 <PWM_Init+0x10>
    {
        case kPWM_ReloadImmediate:
            reg |= PWM_CTRL_LDMOD_MASK;
6000beec:	f043 0304 	orr.w	r3, r3, #4
            break;
        default:
            assert(false);
            break;
    }
    base->SM[subModule].CTRL = reg;
6000bef0:	80d3      	strh	r3, [r2, #6]

    /* Issue a Force trigger event when configured to trigger locally */
    if (config->forceTrigger == kPWM_Force_Local)
6000bef2:	7a63      	ldrb	r3, [r4, #9]
6000bef4:	b923      	cbnz	r3, 6000bf00 <PWM_Init+0x108>
    {
        base->SM[subModule].CTRL2 |= PWM_CTRL2_FORCE(1U);
6000bef6:	8893      	ldrh	r3, [r2, #4]
6000bef8:	b29b      	uxth	r3, r3
6000befa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000befe:	8093      	strh	r3, [r2, #4]
    }

    return kStatus_Success;
6000bf00:	2000      	movs	r0, #0
}
6000bf02:	bd70      	pop	{r4, r5, r6, pc}
            reg &= (uint16_t)(~PWM_CTRL_FULL_MASK);
6000bf04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
6000bf08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
            break;
6000bf0c:	e7f0      	b.n	6000bef0 <PWM_Init+0xf8>
            reg &= (uint16_t)(~PWM_CTRL_HALF_MASK);
6000bf0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            reg |= PWM_CTRL_FULL_MASK;
6000bf12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            break;
6000bf16:	e7eb      	b.n	6000bef0 <PWM_Init+0xf8>
            reg |= PWM_CTRL_FULL_MASK;
6000bf18:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
            break;
6000bf1c:	e7e8      	b.n	6000bef0 <PWM_Init+0xf8>
            assert(false);
6000bf1e:	4b06      	ldr	r3, [pc, #24]	; (6000bf38 <PWM_Init+0x140>)
6000bf20:	21ab      	movs	r1, #171	; 0xab
6000bf22:	4a02      	ldr	r2, [pc, #8]	; (6000bf2c <PWM_Init+0x134>)
6000bf24:	e770      	b.n	6000be08 <PWM_Init+0x10>
6000bf26:	bf00      	nop
6000bf28:	60018de5 	.word	0x60018de5
6000bf2c:	60019077 	.word	0x60019077
6000bf30:	60018f5a 	.word	0x60018f5a
6000bf34:	60016c88 	.word	0x60016c88
6000bf38:	60018b45 	.word	0x60018b45

6000bf3c <PWM_GetDefaultConfig>:
 *   config->pairOperation = kPWM_Independent;
 * endcode
 * param config Pointer to user's PWM config structure.
 */
void PWM_GetDefaultConfig(pwm_config_t *config)
{
6000bf3c:	b508      	push	{r3, lr}
    assert(config);
6000bf3e:	b928      	cbnz	r0, 6000bf4c <PWM_GetDefaultConfig+0x10>
6000bf40:	4b08      	ldr	r3, [pc, #32]	; (6000bf64 <PWM_GetDefaultConfig+0x28>)
6000bf42:	21de      	movs	r1, #222	; 0xde
6000bf44:	4a08      	ldr	r2, [pc, #32]	; (6000bf68 <PWM_GetDefaultConfig+0x2c>)
6000bf46:	4809      	ldr	r0, [pc, #36]	; (6000bf6c <PWM_GetDefaultConfig+0x30>)
6000bf48:	f004 f85a 	bl	60010000 <__assert_func>

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    /* PWM is paused in debug mode */
    config->enableDebugMode = false;
6000bf4c:	2300      	movs	r3, #0
6000bf4e:	7003      	strb	r3, [r0, #0]
    /* PWM is paused in wait mode */
    config->enableWait = false;
6000bf50:	7043      	strb	r3, [r0, #1]
    /* PWM module uses the local reload signal to reload registers */
    config->reloadSelect = kPWM_LocalReload;
6000bf52:	71c3      	strb	r3, [r0, #7]
    /* Use the IP Bus clock as source clock for the PWM submodule */
    config->clockSource = kPWM_BusClock;
6000bf54:	70c3      	strb	r3, [r0, #3]
    /* Clock source prescale is set to divide by 1*/
    config->prescale = kPWM_Prescale_Divide_1;
6000bf56:	7103      	strb	r3, [r0, #4]
    /* Local sync causes initialization */
    config->initializationControl = kPWM_Initialize_LocalSync;
6000bf58:	7083      	strb	r3, [r0, #2]
    /* The local force signal, CTRL2[FORCE], from the submodule is used to force updates */
    config->forceTrigger = kPWM_Force_Local;
6000bf5a:	7243      	strb	r3, [r0, #9]
    /* PWM reload frequency, reload opportunity is PWM half cycle or full cycle.
     * This field is not used in Immediate reload mode
     */
    config->reloadFrequency = kPWM_LoadEveryOportunity;
6000bf5c:	7203      	strb	r3, [r0, #8]
    /* Buffered-registers get loaded with new values as soon as LDOK bit is set */
    config->reloadLogic = kPWM_ReloadImmediate;
6000bf5e:	7183      	strb	r3, [r0, #6]
    /* PWM A & PWM B operate as 2 independent channels */
    config->pairOperation = kPWM_Independent;
6000bf60:	7143      	strb	r3, [r0, #5]
}
6000bf62:	bd08      	pop	{r3, pc}
6000bf64:	60018de5 	.word	0x60018de5
6000bf68:	60019040 	.word	0x60019040
6000bf6c:	60018f5a 	.word	0x60018f5a

6000bf70 <PWM_SetupPwm>:
                      const pwm_signal_param_t *chnlParams,
                      uint8_t numOfChnls,
                      pwm_mode_t mode,
                      uint32_t pwmFreq_Hz,
                      uint32_t srcClock_Hz)
{
6000bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000bf74:	b087      	sub	sp, #28
6000bf76:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
6000bf7a:	e9dd 6711 	ldrd	r6, r7, [sp, #68]	; 0x44
6000bf7e:	9405      	str	r4, [sp, #20]
    assert(chnlParams);
6000bf80:	b932      	cbnz	r2, 6000bf90 <PWM_SetupPwm+0x20>
6000bf82:	4bce      	ldr	r3, [pc, #824]	; (6000c2bc <PWM_SetupPwm+0x34c>)
6000bf84:	f44f 718b 	mov.w	r1, #278	; 0x116
6000bf88:	4acd      	ldr	r2, [pc, #820]	; (6000c2c0 <PWM_SetupPwm+0x350>)
    assert(pwmFreq_Hz);
6000bf8a:	48ce      	ldr	r0, [pc, #824]	; (6000c2c4 <PWM_SetupPwm+0x354>)
6000bf8c:	f004 f838 	bl	60010000 <__assert_func>
6000bf90:	b926      	cbnz	r6, 6000bf9c <PWM_SetupPwm+0x2c>
6000bf92:	4bcd      	ldr	r3, [pc, #820]	; (6000c2c8 <PWM_SetupPwm+0x358>)
6000bf94:	f240 1117 	movw	r1, #279	; 0x117
6000bf98:	4ac9      	ldr	r2, [pc, #804]	; (6000c2c0 <PWM_SetupPwm+0x350>)
6000bf9a:	e7f6      	b.n	6000bf8a <PWM_SetupPwm+0x1a>
    assert(numOfChnls);
6000bf9c:	b923      	cbnz	r3, 6000bfa8 <PWM_SetupPwm+0x38>
6000bf9e:	4bcb      	ldr	r3, [pc, #812]	; (6000c2cc <PWM_SetupPwm+0x35c>)
6000bfa0:	f44f 718c 	mov.w	r1, #280	; 0x118
6000bfa4:	4ac6      	ldr	r2, [pc, #792]	; (6000c2c0 <PWM_SetupPwm+0x350>)
6000bfa6:	e7f0      	b.n	6000bf8a <PWM_SetupPwm+0x1a>
    assert(srcClock_Hz);
6000bfa8:	b927      	cbnz	r7, 6000bfb4 <PWM_SetupPwm+0x44>
6000bfaa:	4bc9      	ldr	r3, [pc, #804]	; (6000c2d0 <PWM_SetupPwm+0x360>)
6000bfac:	f240 1119 	movw	r1, #281	; 0x119
6000bfb0:	4ac3      	ldr	r2, [pc, #780]	; (6000c2c0 <PWM_SetupPwm+0x350>)
6000bfb2:	e7ea      	b.n	6000bf8a <PWM_SetupPwm+0x1a>
    uint32_t pwmClock;
    uint16_t pulseCnt = 0, pwmHighPulse = 0;
    uint16_t modulo = 0;
    uint8_t i, polarityShift = 0, outputEnableShift = 0;

    if (numOfChnls > 2U)
6000bfb4:	2b02      	cmp	r3, #2
6000bfb6:	f200 827b 	bhi.w	6000c4b0 <PWM_SetupPwm+0x540>
        /* Each submodule has 2 signals; PWM A & PWM B */
        return kStatus_Fail;
    }

    /* Divide the clock by the prescale value */
    pwmClock = (srcClock_Hz / (1UL << ((base->SM[subModule].CTRL & PWM_CTRL_PRSC_MASK) >> PWM_CTRL_PRSC_SHIFT)));
6000bfba:	f04f 0960 	mov.w	r9, #96	; 0x60
6000bfbe:	3208      	adds	r2, #8
6000bfc0:	fb09 0401 	mla	r4, r9, r1, r0
6000bfc4:	88e5      	ldrh	r5, [r4, #6]
6000bfc6:	f3c5 1502 	ubfx	r5, r5, #4, #3
6000bfca:	40ef      	lsrs	r7, r5
    pulseCnt = (uint16_t)(pwmClock / pwmFreq_Hz);
6000bfcc:	fbb7 f7f6 	udiv	r7, r7, r6
                /* Indicates the start of the PWM period */
                if (i == 0U)
                {
                    base->SM[subModule].INIT = 0;
                    /* Indicates the center value */
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000bfd0:	f3c7 0e4e 	ubfx	lr, r7, #1, #15
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000bfd4:	b2be      	uxth	r6, r7
    return (~value + 1U);
6000bfd6:	f1ce 0500 	rsb	r5, lr, #0
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000bfda:	9601      	str	r6, [sp, #4]
                    /* Indicates the end of the PWM period */
                    /* The change during the end to start of the PWM period requires a count time */
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000bfdc:	1e7e      	subs	r6, r7, #1
    return (~value + 1U);
6000bfde:	b2ad      	uxth	r5, r5
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000bfe0:	b2b6      	uxth	r6, r6
    return (~value + 1U);
6000bfe2:	9503      	str	r5, [sp, #12]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000bfe4:	f10e 35ff 	add.w	r5, lr, #4294967295	; 0xffffffff
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000bfe8:	9604      	str	r6, [sp, #16]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000bfea:	b2ad      	uxth	r5, r5
6000bfec:	9502      	str	r5, [sp, #8]
    for (i = 0; i < numOfChnls; i++)
6000bfee:	2500      	movs	r5, #0
    uint16_t modulo = 0;
6000bff0:	46a8      	mov	r8, r5
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000bff2:	9e01      	ldr	r6, [sp, #4]
6000bff4:	f812 cc07 	ldrb.w	ip, [r2, #-7]
        switch (mode)
6000bff8:	f8dd b014 	ldr.w	fp, [sp, #20]
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000bffc:	fb06 fc0c 	mul.w	ip, r6, ip
6000c000:	2664      	movs	r6, #100	; 0x64
6000c002:	fbbc fcf6 	udiv	ip, ip, r6
6000c006:	fa1f f68c 	uxth.w	r6, ip
        switch (mode)
6000c00a:	f1bb 0f03 	cmp.w	fp, #3
6000c00e:	f200 81b3 	bhi.w	6000c378 <PWM_SetupPwm+0x408>
6000c012:	e8df f01b 	tbh	[pc, fp, lsl #1]
6000c016:	0004      	.short	0x0004
6000c018:	00dd0076 	.word	0x00dd0076
6000c01c:	019c      	.short	0x019c
                if (i == 0U)
6000c01e:	b94d      	cbnz	r5, 6000c034 <PWM_SetupPwm+0xc4>
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000c020:	f8dd c00c 	ldr.w	ip, [sp, #12]
                    modulo = (pulseCnt >> 1U);
6000c024:	46f0      	mov	r8, lr
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000c026:	f8a4 c002 	strh.w	ip, [r4, #2]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000c02a:	f8dd c008 	ldr.w	ip, [sp, #8]
                    base->SM[subModule].VAL0 = 0;
6000c02e:	8165      	strh	r5, [r4, #10]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000c030:	f8a4 c00e 	strh.w	ip, [r4, #14]
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c034:	0876      	lsrs	r6, r6, #1
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c036:	f812 ac08 	ldrb.w	sl, [r2, #-8]
    return (~value + 1U);
6000c03a:	f1c6 0c00 	rsb	ip, r6, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c03e:	f1ba 0f01 	cmp.w	sl, #1
    return (~value + 1U);
6000c042:	fa1f fc8c 	uxth.w	ip, ip
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c046:	d158      	bne.n	6000c0fa <PWM_SetupPwm+0x18a>
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c048:	f8a4 c012 	strh.w	ip, [r4, #18]
                    base->SM[subModule].VAL3 = (pwmHighPulse / 2U);
6000c04c:	82e6      	strh	r6, [r4, #22]
                break;
        }
        /* Setup register shift values based on the channel being configured.
         * Also setup the deadtime value
         */
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c04e:	f812 cc08 	ldrb.w	ip, [r2, #-8]
        {
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c052:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c056:	f1bc 0f01 	cmp.w	ip, #1
6000c05a:	f040 8192 	bne.w	6000c382 <PWM_SetupPwm+0x412>
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c05e:	fb09 0c01 	mla	ip, r9, r1, r0
6000c062:	f8ac 6030 	strh.w	r6, [ip, #48]	; 0x30
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
        }

        /* Set PWM output fault status */
        switch (chnlParams->pwmChannel)
6000c066:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000c06a:	2e01      	cmp	r6, #1
6000c06c:	f040 81d8 	bne.w	6000c420 <PWM_SetupPwm+0x4b0>
        {
            case kPWM_PwmA:
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000c070:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c074:	f02a 0a30 	bic.w	sl, sl, #48	; 0x30
6000c078:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000c07c:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000c080:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000c084:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000c088:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c08c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000c090:	fa1f fa8a 	uxth.w	sl, sl
6000c094:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
6000c098:	ea4a 0a0b 	orr.w	sl, sl, fp
6000c09c:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                assert(false);
                break;
        }

        /* Setup signal active level */
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000c0a0:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000c0a4:	f1ba 0f00 	cmp.w	sl, #0
6000c0a8:	f040 81e7 	bne.w	6000c47a <PWM_SetupPwm+0x50a>
        {
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c0ac:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
    for (i = 0; i < numOfChnls; i++)
6000c0b0:	3501      	adds	r5, #1
6000c0b2:	3208      	adds	r2, #8
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c0b4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
    for (i = 0; i < numOfChnls; i++)
6000c0b8:	b2ed      	uxtb	r5, r5
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c0ba:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
    for (i = 0; i < numOfChnls; i++)
6000c0be:	429d      	cmp	r5, r3
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c0c0:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000c0c4:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        else
        {
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
        }
        /* Enable PWM output */
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c0c8:	f101 0c08 	add.w	ip, r1, #8
6000c0cc:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000c0d0:	fa06 fc0c 	lsl.w	ip, r6, ip
6000c0d4:	ea4c 0c0a 	orr.w	ip, ip, sl
6000c0d8:	fa1f fc8c 	uxth.w	ip, ip
6000c0dc:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000c0e0:	d06e      	beq.n	6000c1c0 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000c0e2:	f812 6c07 	ldrb.w	r6, [r2, #-7]
6000c0e6:	fa1f fc87 	uxth.w	ip, r7
6000c0ea:	fb0c f606 	mul.w	r6, ip, r6
6000c0ee:	f04f 0c64 	mov.w	ip, #100	; 0x64
6000c0f2:	fbb6 f6fc 	udiv	r6, r6, ip
6000c0f6:	b2b6      	uxth	r6, r6
        switch (mode)
6000c0f8:	e791      	b.n	6000c01e <PWM_SetupPwm+0xae>
                    base->SM[subModule].VAL4 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c0fa:	f8a4 c01a 	strh.w	ip, [r4, #26]
                    base->SM[subModule].VAL5 = (pwmHighPulse / 2U);
6000c0fe:	83e6      	strh	r6, [r4, #30]
6000c100:	e7a5      	b.n	6000c04e <PWM_SetupPwm+0xde>
                if (i == 0U)
6000c102:	b925      	cbnz	r5, 6000c10e <PWM_SetupPwm+0x19e>
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000c104:	9e04      	ldr	r6, [sp, #16]
                    base->SM[subModule].INIT = 0;
6000c106:	8065      	strh	r5, [r4, #2]
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000c108:	f8a4 e00a 	strh.w	lr, [r4, #10]
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000c10c:	81e6      	strh	r6, [r4, #14]
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000c10e:	9e01      	ldr	r6, [sp, #4]
6000c110:	fa1f fc8c 	uxth.w	ip, ip
6000c114:	eba6 0a0c 	sub.w	sl, r6, ip
                    base->SM[subModule].VAL3 = ((pulseCnt + pwmHighPulse) / 2U);
6000c118:	44b4      	add	ip, r6
6000c11a:	ea4f 065c 	mov.w	r6, ip, lsr #1
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c11e:	f812 cc08 	ldrb.w	ip, [r2, #-8]
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000c122:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c126:	f1bc 0f01 	cmp.w	ip, #1
6000c12a:	d14d      	bne.n	6000c1c8 <PWM_SetupPwm+0x258>
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000c12c:	f8a4 a012 	strh.w	sl, [r4, #18]
                    base->SM[subModule].VAL3 = pwmHighPulse;
6000c130:	82e6      	strh	r6, [r4, #22]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c132:	f812 cc08 	ldrb.w	ip, [r2, #-8]
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c136:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c13a:	f1bc 0f01 	cmp.w	ip, #1
6000c13e:	f040 8169 	bne.w	6000c414 <PWM_SetupPwm+0x4a4>
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
6000c142:	f04f 0c08 	mov.w	ip, #8
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
6000c146:	f04f 0a0a 	mov.w	sl, #10
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c14a:	8626      	strh	r6, [r4, #48]	; 0x30
        switch (chnlParams->pwmChannel)
6000c14c:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000c150:	2e01      	cmp	r6, #1
6000c152:	f040 8169 	bne.w	6000c428 <PWM_SetupPwm+0x4b8>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000c156:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c158:	f026 0630 	bic.w	r6, r6, #48	; 0x30
6000c15c:	0436      	lsls	r6, r6, #16
6000c15e:	0c36      	lsrs	r6, r6, #16
6000c160:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000c162:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000c166:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c168:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000c16c:	b2b6      	uxth	r6, r6
6000c16e:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMBFS_SHIFT) &
6000c172:	ea46 060b 	orr.w	r6, r6, fp
6000c176:	8466      	strh	r6, [r4, #34]	; 0x22
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c178:	2601      	movs	r6, #1
6000c17a:	fa06 f60a 	lsl.w	r6, r6, sl
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000c17e:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000c182:	f1ba 0f00 	cmp.w	sl, #0
6000c186:	f040 818c 	bne.w	6000c4a2 <PWM_SetupPwm+0x532>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c18a:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
6000c18e:	fa1f fa8a 	uxth.w	sl, sl
6000c192:	ea2a 0a06 	bic.w	sl, sl, r6
6000c196:	f8a4 a022 	strh.w	sl, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c19a:	448c      	add	ip, r1
6000c19c:	f04f 0a01 	mov.w	sl, #1
6000c1a0:	f8b0 6180 	ldrh.w	r6, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000c1a4:	3501      	adds	r5, #1
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c1a6:	fa0a fa0c 	lsl.w	sl, sl, ip
    for (i = 0; i < numOfChnls; i++)
6000c1aa:	3208      	adds	r2, #8
6000c1ac:	b2ed      	uxtb	r5, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c1ae:	ea4a 0a06 	orr.w	sl, sl, r6
    for (i = 0; i < numOfChnls; i++)
6000c1b2:	42ab      	cmp	r3, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c1b4:	fa1f fa8a 	uxth.w	sl, sl
6000c1b8:	f8a0 a180 	strh.w	sl, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000c1bc:	f47f af19 	bne.w	6000bff2 <PWM_SetupPwm+0x82>

        /* Get the next channel parameters */
        chnlParams++;
    }

    return kStatus_Success;
6000c1c0:	2000      	movs	r0, #0
}
6000c1c2:	b007      	add	sp, #28
6000c1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    base->SM[subModule].VAL4 = ((pulseCnt - pwmHighPulse) / 2U);
6000c1c8:	f8a4 a01a 	strh.w	sl, [r4, #26]
                    base->SM[subModule].VAL5 = pwmHighPulse;
6000c1cc:	83e6      	strh	r6, [r4, #30]
6000c1ce:	e7b0      	b.n	6000c132 <PWM_SetupPwm+0x1c2>
                if (i == 0U)
6000c1d0:	b94d      	cbnz	r5, 6000c1e6 <PWM_SetupPwm+0x276>
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000c1d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
                    modulo = (pulseCnt >> 1U);
6000c1d6:	46f0      	mov	r8, lr
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000c1d8:	f8a4 c002 	strh.w	ip, [r4, #2]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000c1dc:	f8dd c008 	ldr.w	ip, [sp, #8]
                    base->SM[subModule].VAL0 = 0;
6000c1e0:	8165      	strh	r5, [r4, #10]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000c1e2:	f8a4 c00e 	strh.w	ip, [r4, #14]
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c1e6:	f812 ac08 	ldrb.w	sl, [r2, #-8]
6000c1ea:	eba6 0608 	sub.w	r6, r6, r8
    return (~value + 1U);
6000c1ee:	f1c8 0c00 	rsb	ip, r8, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c1f2:	f1ba 0f01 	cmp.w	sl, #1
6000c1f6:	b2b6      	uxth	r6, r6
    return (~value + 1U);
6000c1f8:	fa1f fc8c 	uxth.w	ip, ip
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c1fc:	f040 80a3 	bne.w	6000c346 <PWM_SetupPwm+0x3d6>
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(modulo);
6000c200:	f8a4 c012 	strh.w	ip, [r4, #18]
                    base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c204:	82e6      	strh	r6, [r4, #22]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c206:	f812 cc08 	ldrb.w	ip, [r2, #-8]
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c20a:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000c20e:	f1bc 0f01 	cmp.w	ip, #1
6000c212:	d15f      	bne.n	6000c2d4 <PWM_SetupPwm+0x364>
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000c214:	fb09 0c01 	mla	ip, r9, r1, r0
6000c218:	f8ac 6030 	strh.w	r6, [ip, #48]	; 0x30
        switch (chnlParams->pwmChannel)
6000c21c:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000c220:	2e01      	cmp	r6, #1
6000c222:	f040 80fd 	bne.w	6000c420 <PWM_SetupPwm+0x4b0>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000c226:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c22a:	f02a 0a30 	bic.w	sl, sl, #48	; 0x30
6000c22e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000c232:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000c236:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000c23a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000c23e:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c242:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000c246:	fa1f fa8a 	uxth.w	sl, sl
6000c24a:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
6000c24e:	ea4a 0a0b 	orr.w	sl, sl, fp
6000c252:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000c256:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000c25a:	f1ba 0f00 	cmp.w	sl, #0
6000c25e:	d125      	bne.n	6000c2ac <PWM_SetupPwm+0x33c>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c260:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c264:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
6000c268:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000c26c:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c270:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c274:	f101 0c08 	add.w	ip, r1, #8
6000c278:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000c27c:	fa06 fc0c 	lsl.w	ip, r6, ip
    for (i = 0; i < numOfChnls; i++)
6000c280:	3501      	adds	r5, #1
6000c282:	3208      	adds	r2, #8
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c284:	ea4c 0c0a 	orr.w	ip, ip, sl
    for (i = 0; i < numOfChnls; i++)
6000c288:	b2ed      	uxtb	r5, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c28a:	fa1f fc8c 	uxth.w	ip, ip
    for (i = 0; i < numOfChnls; i++)
6000c28e:	42ab      	cmp	r3, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c290:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000c294:	d094      	beq.n	6000c1c0 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000c296:	f812 cc07 	ldrb.w	ip, [r2, #-7]
6000c29a:	b2be      	uxth	r6, r7
6000c29c:	fb0c f606 	mul.w	r6, ip, r6
6000c2a0:	f04f 0c64 	mov.w	ip, #100	; 0x64
6000c2a4:	fbb6 f6fc 	udiv	r6, r6, ip
6000c2a8:	b2b6      	uxth	r6, r6
        switch (mode)
6000c2aa:	e791      	b.n	6000c1d0 <PWM_SetupPwm+0x260>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c2ac:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c2b0:	fa1f fa8a 	uxth.w	sl, sl
6000c2b4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
6000c2b8:	e7da      	b.n	6000c270 <PWM_SetupPwm+0x300>
6000c2ba:	bf00      	nop
6000c2bc:	60018f9a 	.word	0x60018f9a
6000c2c0:	60019033 	.word	0x60019033
6000c2c4:	60018f5a 	.word	0x60018f5a
6000c2c8:	60018fa5 	.word	0x60018fa5
6000c2cc:	60018fb0 	.word	0x60018fb0
6000c2d0:	60018fbb 	.word	0x60018fbb
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000c2d4:	8666      	strh	r6, [r4, #50]	; 0x32
        switch (chnlParams->pwmChannel)
6000c2d6:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000c2da:	2e01      	cmp	r6, #1
6000c2dc:	f040 80b6 	bne.w	6000c44c <PWM_SetupPwm+0x4dc>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000c2e0:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c2e4:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
6000c2e8:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000c2ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
6000c2f0:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000c2f4:	f812 ac02 	ldrb.w	sl, [r2, #-2]
6000c2f8:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c2fc:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
6000c300:	fa1f fc8c 	uxth.w	ip, ip
6000c304:	f00a 0a30 	and.w	sl, sl, #48	; 0x30
6000c308:	ea4c 0c0a 	orr.w	ip, ip, sl
6000c30c:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000c310:	f812 cc06 	ldrb.w	ip, [r2, #-6]
6000c314:	f1bc 0f00 	cmp.w	ip, #0
6000c318:	d10e      	bne.n	6000c338 <PWM_SetupPwm+0x3c8>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c31a:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c31e:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
6000c322:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000c326:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c32a:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c32e:	f101 0c04 	add.w	ip, r1, #4
6000c332:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000c336:	e7a1      	b.n	6000c27c <PWM_SetupPwm+0x30c>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c338:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c33c:	fa1f fc8c 	uxth.w	ip, ip
6000c340:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
6000c344:	e7f1      	b.n	6000c32a <PWM_SetupPwm+0x3ba>
                    base->SM[subModule].VAL4 = PWM_GetComplementU16(modulo);
6000c346:	f8a4 c01a 	strh.w	ip, [r4, #26]
                    base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c34a:	83e6      	strh	r6, [r4, #30]
6000c34c:	e75b      	b.n	6000c206 <PWM_SetupPwm+0x296>
                if (i == 0U)
6000c34e:	b935      	cbnz	r5, 6000c35e <PWM_SetupPwm+0x3ee>
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000c350:	f8dd c010 	ldr.w	ip, [sp, #16]
                    base->SM[subModule].INIT = 0;
6000c354:	8065      	strh	r5, [r4, #2]
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000c356:	f8a4 e00a 	strh.w	lr, [r4, #10]
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000c35a:	f8a4 c00e 	strh.w	ip, [r4, #14]
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c35e:	f812 cc08 	ldrb.w	ip, [r2, #-8]
6000c362:	f1bc 0f01 	cmp.w	ip, #1
                    base->SM[subModule].VAL2 = 0;
6000c366:	f04f 0c00 	mov.w	ip, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000c36a:	d102      	bne.n	6000c372 <PWM_SetupPwm+0x402>
                    base->SM[subModule].VAL2 = 0;
6000c36c:	f8a4 c012 	strh.w	ip, [r4, #18]
6000c370:	e6de      	b.n	6000c130 <PWM_SetupPwm+0x1c0>
                    base->SM[subModule].VAL4 = 0;
6000c372:	f8a4 c01a 	strh.w	ip, [r4, #26]
6000c376:	e729      	b.n	6000c1cc <PWM_SetupPwm+0x25c>
                assert(false);
6000c378:	4b4e      	ldr	r3, [pc, #312]	; (6000c4b4 <PWM_SetupPwm+0x544>)
6000c37a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
6000c37e:	4a4e      	ldr	r2, [pc, #312]	; (6000c4b8 <PWM_SetupPwm+0x548>)
6000c380:	e603      	b.n	6000bf8a <PWM_SetupPwm+0x1a>
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000c382:	8666      	strh	r6, [r4, #50]	; 0x32
        switch (chnlParams->pwmChannel)
6000c384:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000c388:	2e01      	cmp	r6, #1
6000c38a:	d15f      	bne.n	6000c44c <PWM_SetupPwm+0x4dc>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000c38c:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c390:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
6000c394:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000c398:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
6000c39c:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000c3a0:	f812 ac02 	ldrb.w	sl, [r2, #-2]
6000c3a4:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c3a8:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
6000c3ac:	fa1f fc8c 	uxth.w	ip, ip
6000c3b0:	f00a 0a30 	and.w	sl, sl, #48	; 0x30
6000c3b4:	ea4c 0c0a 	orr.w	ip, ip, sl
6000c3b8:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000c3bc:	f812 cc06 	ldrb.w	ip, [r2, #-6]
6000c3c0:	f1bc 0f00 	cmp.w	ip, #0
6000c3c4:	d11f      	bne.n	6000c406 <PWM_SetupPwm+0x496>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000c3c6:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c3ca:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
6000c3ce:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000c3d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c3d6:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c3da:	f101 0c04 	add.w	ip, r1, #4
6000c3de:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000c3e2:	fa06 fc0c 	lsl.w	ip, r6, ip
6000c3e6:	ea4c 0c0a 	orr.w	ip, ip, sl
6000c3ea:	fa1f fc8c 	uxth.w	ip, ip
6000c3ee:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000c3f2:	3501      	adds	r5, #1
6000c3f4:	3208      	adds	r2, #8
6000c3f6:	b2ed      	uxtb	r5, r5
6000c3f8:	42ab      	cmp	r3, r5
6000c3fa:	f43f aee1 	beq.w	6000c1c0 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000c3fe:	b2be      	uxth	r6, r7
6000c400:	f812 cc07 	ldrb.w	ip, [r2, #-7]
6000c404:	e671      	b.n	6000c0ea <PWM_SetupPwm+0x17a>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c406:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000c40a:	fa1f fc8c 	uxth.w	ip, ip
6000c40e:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
6000c412:	e7e0      	b.n	6000c3d6 <PWM_SetupPwm+0x466>
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
6000c414:	f04f 0c04 	mov.w	ip, #4
            polarityShift              = PWM_OCTRL_POLB_SHIFT;
6000c418:	f04f 0a09 	mov.w	sl, #9
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000c41c:	8666      	strh	r6, [r4, #50]	; 0x32
6000c41e:	e695      	b.n	6000c14c <PWM_SetupPwm+0x1dc>
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
6000c420:	f04f 0c08 	mov.w	ip, #8
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
6000c424:	f04f 0a0a 	mov.w	sl, #10
        switch (chnlParams->pwmChannel)
6000c428:	2e02      	cmp	r6, #2
6000c42a:	d014      	beq.n	6000c456 <PWM_SetupPwm+0x4e6>
6000c42c:	bb06      	cbnz	r6, 6000c470 <PWM_SetupPwm+0x500>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMBFS_MASK);
6000c42e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c430:	f026 060c 	bic.w	r6, r6, #12
6000c434:	0436      	lsls	r6, r6, #16
6000c436:	0c36      	lsrs	r6, r6, #16
6000c438:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMBFS_SHIFT) &
6000c43a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000c43e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c440:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
6000c444:	b2b6      	uxth	r6, r6
6000c446:	f00b 0b0c 	and.w	fp, fp, #12
6000c44a:	e692      	b.n	6000c172 <PWM_SetupPwm+0x202>
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
6000c44c:	f04f 0c04 	mov.w	ip, #4
            polarityShift              = PWM_OCTRL_POLB_SHIFT;
6000c450:	f04f 0a09 	mov.w	sl, #9
6000c454:	e7e8      	b.n	6000c428 <PWM_SetupPwm+0x4b8>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMXFS_MASK);
6000c456:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c458:	f026 0603 	bic.w	r6, r6, #3
6000c45c:	0436      	lsls	r6, r6, #16
6000c45e:	0c36      	lsrs	r6, r6, #16
6000c460:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMXFS_SHIFT) &
6000c462:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000c464:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000c468:	b2b6      	uxth	r6, r6
6000c46a:	f00b 0b03 	and.w	fp, fp, #3
6000c46e:	e680      	b.n	6000c172 <PWM_SetupPwm+0x202>
                assert(false);
6000c470:	4b10      	ldr	r3, [pc, #64]	; (6000c4b4 <PWM_SetupPwm+0x544>)
6000c472:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
6000c476:	4a10      	ldr	r2, [pc, #64]	; (6000c4b8 <PWM_SetupPwm+0x548>)
6000c478:	e587      	b.n	6000bf8a <PWM_SetupPwm+0x1a>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c47a:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000c47e:	fa1f fa8a 	uxth.w	sl, sl
6000c482:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
6000c486:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000c48a:	f101 0a08 	add.w	sl, r1, #8
6000c48e:	f8b0 c180 	ldrh.w	ip, [r0, #384]	; 0x180
6000c492:	fa06 f60a 	lsl.w	r6, r6, sl
6000c496:	ea46 060c 	orr.w	r6, r6, ip
6000c49a:	b2b6      	uxth	r6, r6
6000c49c:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
6000c4a0:	e7a7      	b.n	6000c3f2 <PWM_SetupPwm+0x482>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000c4a2:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
6000c4a6:	ea46 060a 	orr.w	r6, r6, sl
6000c4aa:	b2b6      	uxth	r6, r6
6000c4ac:	8466      	strh	r6, [r4, #34]	; 0x22
6000c4ae:	e674      	b.n	6000c19a <PWM_SetupPwm+0x22a>
        return kStatus_Fail;
6000c4b0:	2001      	movs	r0, #1
6000c4b2:	e686      	b.n	6000c1c2 <PWM_SetupPwm+0x252>
6000c4b4:	60018b45 	.word	0x60018b45
6000c4b8:	60019033 	.word	0x60019033

6000c4bc <PWM_UpdatePwmDutycycleHighAccuracy>:
 *                          65535=active signal (100% duty cycle)
 */
void PWM_UpdatePwmDutycycleHighAccuracy(
    PWM_Type *base, pwm_submodule_t subModule, pwm_channels_t pwmSignal, pwm_mode_t currPwmMode, uint16_t dutyCycle)
{
    assert((uint16_t)pwmSignal < 2U);
6000c4bc:	2a01      	cmp	r2, #1
{
6000c4be:	b570      	push	{r4, r5, r6, lr}
6000c4c0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    assert((uint16_t)pwmSignal < 2U);
6000c4c4:	d906      	bls.n	6000c4d4 <PWM_UpdatePwmDutycycleHighAccuracy+0x18>
6000c4c6:	4b40      	ldr	r3, [pc, #256]	; (6000c5c8 <PWM_UpdatePwmDutycycleHighAccuracy+0x10c>)
6000c4c8:	f240 2105 	movw	r1, #517	; 0x205
6000c4cc:	4a3f      	ldr	r2, [pc, #252]	; (6000c5cc <PWM_UpdatePwmDutycycleHighAccuracy+0x110>)
                base->SM[subModule].VAL4 = 0;
                base->SM[subModule].VAL5 = pwmHighPulse;
            }
            break;
        default:
            assert(false);
6000c4ce:	4840      	ldr	r0, [pc, #256]	; (6000c5d0 <PWM_UpdatePwmDutycycleHighAccuracy+0x114>)
6000c4d0:	f003 fd96 	bl	60010000 <__assert_func>
    switch (currPwmMode)
6000c4d4:	2560      	movs	r5, #96	; 0x60
6000c4d6:	2b03      	cmp	r3, #3
6000c4d8:	d871      	bhi.n	6000c5be <PWM_UpdatePwmDutycycleHighAccuracy+0x102>
6000c4da:	e8df f003 	tbb	[pc, r3]
6000c4de:	1f02      	.short	0x1f02
6000c4e0:	5b3c      	.short	0x5b3c
            modulo   = base->SM[subModule].VAL1 + 1U;
6000c4e2:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c4e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000c4ea:	2a01      	cmp	r2, #1
            modulo   = base->SM[subModule].VAL1 + 1U;
6000c4ec:	89c3      	ldrh	r3, [r0, #14]
6000c4ee:	b29b      	uxth	r3, r3
6000c4f0:	f103 0301 	add.w	r3, r3, #1
            pulseCnt = modulo * 2U;
6000c4f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c4f8:	b29b      	uxth	r3, r3
6000c4fa:	fb04 f303 	mul.w	r3, r4, r3
6000c4fe:	fbb3 f3f1 	udiv	r3, r3, r1
            if (pwmSignal == kPWM_PwmA)
6000c502:	f3c3 034e 	ubfx	r3, r3, #1, #15
                base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c506:	b29a      	uxth	r2, r3
    return (~value + 1U);
6000c508:	f1c3 0300 	rsb	r3, r3, #0
6000c50c:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000c50e:	d102      	bne.n	6000c516 <PWM_UpdatePwmDutycycleHighAccuracy+0x5a>
                base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c510:	8243      	strh	r3, [r0, #18]
                base->SM[subModule].VAL3 = (pwmHighPulse / 2U);
6000c512:	82c2      	strh	r2, [r0, #22]
            break;
    }
}
6000c514:	bd70      	pop	{r4, r5, r6, pc}
                base->SM[subModule].VAL4 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000c516:	8343      	strh	r3, [r0, #26]
                base->SM[subModule].VAL5 = (pwmHighPulse / 2U);
6000c518:	83c2      	strh	r2, [r0, #30]
6000c51a:	e7fb      	b.n	6000c514 <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000c51c:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c520:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000c524:	2a01      	cmp	r2, #1
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000c526:	89c3      	ldrh	r3, [r0, #14]
6000c528:	f103 0301 	add.w	r3, r3, #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c52c:	b29b      	uxth	r3, r3
6000c52e:	fb03 f404 	mul.w	r4, r3, r4
6000c532:	fbb4 f4f1 	udiv	r4, r4, r1
            if (pwmSignal == kPWM_PwmA)
6000c536:	eba3 0204 	sub.w	r2, r3, r4
6000c53a:	4423      	add	r3, r4
                base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000c53c:	f3c2 024f 	ubfx	r2, r2, #1, #16
            if (pwmSignal == kPWM_PwmA)
6000c540:	d104      	bne.n	6000c54c <PWM_UpdatePwmDutycycleHighAccuracy+0x90>
                base->SM[subModule].VAL3 = ((pulseCnt + pwmHighPulse) / 2U);
6000c542:	f3c3 034f 	ubfx	r3, r3, #1, #16
                base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000c546:	8242      	strh	r2, [r0, #18]
                base->SM[subModule].VAL3 = pwmHighPulse;
6000c548:	82c3      	strh	r3, [r0, #22]
6000c54a:	e7e3      	b.n	6000c514 <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
                base->SM[subModule].VAL5 = ((pulseCnt + pwmHighPulse) / 2U);
6000c54c:	f3c3 034f 	ubfx	r3, r3, #1, #16
                base->SM[subModule].VAL4 = ((pulseCnt - pwmHighPulse) / 2U);
6000c550:	8342      	strh	r2, [r0, #26]
                base->SM[subModule].VAL5 = pwmHighPulse;
6000c552:	83c3      	strh	r3, [r0, #30]
6000c554:	e7de      	b.n	6000c514 <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
            modulo   = base->SM[subModule].VAL1 + 1U;
6000c556:	fb05 0001 	mla	r0, r5, r1, r0
            if (pwmSignal == kPWM_PwmA)
6000c55a:	2a01      	cmp	r2, #1
            modulo   = base->SM[subModule].VAL1 + 1U;
6000c55c:	89c1      	ldrh	r1, [r0, #14]
6000c55e:	b289      	uxth	r1, r1
6000c560:	f101 0301 	add.w	r3, r1, #1
6000c564:	ea6f 0201 	mvn.w	r2, r1
            pulseCnt = modulo * 2U;
6000c568:	ea4f 0343 	mov.w	r3, r3, lsl #1
    return (~value + 1U);
6000c56c:	b292      	uxth	r2, r2
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c56e:	b29b      	uxth	r3, r3
6000c570:	fb04 f303 	mul.w	r3, r4, r3
6000c574:	f64f 74ff 	movw	r4, #65535	; 0xffff
6000c578:	fbb3 f3f4 	udiv	r3, r3, r4
6000c57c:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000c57e:	eba3 0301 	sub.w	r3, r3, r1
6000c582:	d103      	bne.n	6000c58c <PWM_UpdatePwmDutycycleHighAccuracy+0xd0>
                base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c584:	3b01      	subs	r3, #1
                base->SM[subModule].VAL2 = PWM_GetComplementU16(modulo);
6000c586:	8242      	strh	r2, [r0, #18]
                base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c588:	b29b      	uxth	r3, r3
6000c58a:	e7dd      	b.n	6000c548 <PWM_UpdatePwmDutycycleHighAccuracy+0x8c>
                base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c58c:	3b01      	subs	r3, #1
                base->SM[subModule].VAL4 = PWM_GetComplementU16(modulo);
6000c58e:	8342      	strh	r2, [r0, #26]
                base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000c590:	b29b      	uxth	r3, r3
6000c592:	e7de      	b.n	6000c552 <PWM_UpdatePwmDutycycleHighAccuracy+0x96>
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000c594:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c598:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000c59c:	2a01      	cmp	r2, #1
6000c59e:	f04f 0200 	mov.w	r2, #0
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000c5a2:	89c3      	ldrh	r3, [r0, #14]
6000c5a4:	f103 0301 	add.w	r3, r3, #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000c5a8:	b29b      	uxth	r3, r3
6000c5aa:	fb04 f303 	mul.w	r3, r4, r3
6000c5ae:	fbb3 f3f1 	udiv	r3, r3, r1
6000c5b2:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000c5b4:	d101      	bne.n	6000c5ba <PWM_UpdatePwmDutycycleHighAccuracy+0xfe>
                base->SM[subModule].VAL2 = 0;
6000c5b6:	8242      	strh	r2, [r0, #18]
6000c5b8:	e7c6      	b.n	6000c548 <PWM_UpdatePwmDutycycleHighAccuracy+0x8c>
                base->SM[subModule].VAL4 = 0;
6000c5ba:	8342      	strh	r2, [r0, #26]
6000c5bc:	e7c9      	b.n	6000c552 <PWM_UpdatePwmDutycycleHighAccuracy+0x96>
            assert(false);
6000c5be:	4b05      	ldr	r3, [pc, #20]	; (6000c5d4 <PWM_UpdatePwmDutycycleHighAccuracy+0x118>)
6000c5c0:	f240 2152 	movw	r1, #594	; 0x252
6000c5c4:	4a01      	ldr	r2, [pc, #4]	; (6000c5cc <PWM_UpdatePwmDutycycleHighAccuracy+0x110>)
6000c5c6:	e782      	b.n	6000c4ce <PWM_UpdatePwmDutycycleHighAccuracy+0x12>
6000c5c8:	60018fc7 	.word	0x60018fc7
6000c5cc:	60018ff9 	.word	0x60018ff9
6000c5d0:	60018f5a 	.word	0x60018f5a
6000c5d4:	60018b45 	.word	0x60018b45

6000c5d8 <PWM_UpdatePwmDutycycle>:
{
6000c5d8:	b570      	push	{r4, r5, r6, lr}
6000c5da:	f89d 4010 	ldrb.w	r4, [sp, #16]
    assert(dutyCyclePercent <= 100U);
6000c5de:	2c64      	cmp	r4, #100	; 0x64
6000c5e0:	d906      	bls.n	6000c5f0 <PWM_UpdatePwmDutycycle+0x18>
6000c5e2:	4b0d      	ldr	r3, [pc, #52]	; (6000c618 <PWM_UpdatePwmDutycycle+0x40>)
6000c5e4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
6000c5e8:	4a0c      	ldr	r2, [pc, #48]	; (6000c61c <PWM_UpdatePwmDutycycle+0x44>)
    assert((uint16_t)pwmSignal < 2U);
6000c5ea:	480d      	ldr	r0, [pc, #52]	; (6000c620 <PWM_UpdatePwmDutycycle+0x48>)
6000c5ec:	f003 fd08 	bl	60010000 <__assert_func>
6000c5f0:	2a01      	cmp	r2, #1
6000c5f2:	d904      	bls.n	6000c5fe <PWM_UpdatePwmDutycycle+0x26>
6000c5f4:	4b0b      	ldr	r3, [pc, #44]	; (6000c624 <PWM_UpdatePwmDutycycle+0x4c>)
6000c5f6:	f240 11ed 	movw	r1, #493	; 0x1ed
6000c5fa:	4a08      	ldr	r2, [pc, #32]	; (6000c61c <PWM_UpdatePwmDutycycle+0x44>)
6000c5fc:	e7f5      	b.n	6000c5ea <PWM_UpdatePwmDutycycle+0x12>
    return ((65535U * dutyCyclePercent) + 50U) / 100U;
6000c5fe:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
6000c602:	2564      	movs	r5, #100	; 0x64
6000c604:	3432      	adds	r4, #50	; 0x32
6000c606:	fbb4 f4f5 	udiv	r4, r4, r5
    PWM_UpdatePwmDutycycleHighAccuracy(base, subModule, pwmSignal, currPwmMode, reloadValue);
6000c60a:	b2a4      	uxth	r4, r4
6000c60c:	9404      	str	r4, [sp, #16]
}
6000c60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWM_UpdatePwmDutycycleHighAccuracy(base, subModule, pwmSignal, currPwmMode, reloadValue);
6000c612:	f7ff bf53 	b.w	6000c4bc <PWM_UpdatePwmDutycycleHighAccuracy>
6000c616:	bf00      	nop
6000c618:	60018fe0 	.word	0x60018fe0
6000c61c:	6001901c 	.word	0x6001901c
6000c620:	60018f5a 	.word	0x60018f5a
6000c624:	60018fc7 	.word	0x60018fc7

6000c628 <ADC_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
static uint32_t ADC_GetInstance(ADC_Type *base)
{
6000c628:	b508      	push	{r3, lr}
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
    {
        if (s_adcBases[instance] == base)
6000c62a:	b168      	cbz	r0, 6000c648 <ADC_GetInstance+0x20>
6000c62c:	4b08      	ldr	r3, [pc, #32]	; (6000c650 <ADC_GetInstance+0x28>)
6000c62e:	4298      	cmp	r0, r3
6000c630:	d009      	beq.n	6000c646 <ADC_GetInstance+0x1e>
6000c632:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000c636:	4298      	cmp	r0, r3
6000c638:	d007      	beq.n	6000c64a <ADC_GetInstance+0x22>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_adcBases));
6000c63a:	4b06      	ldr	r3, [pc, #24]	; (6000c654 <ADC_GetInstance+0x2c>)
6000c63c:	2135      	movs	r1, #53	; 0x35
6000c63e:	4a06      	ldr	r2, [pc, #24]	; (6000c658 <ADC_GetInstance+0x30>)
6000c640:	4806      	ldr	r0, [pc, #24]	; (6000c65c <ADC_GetInstance+0x34>)
6000c642:	f003 fcdd 	bl	60010000 <__assert_func>
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
6000c646:	2001      	movs	r0, #1

    return instance;
}
6000c648:	bd08      	pop	{r3, pc}
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
6000c64a:	2002      	movs	r0, #2
    return instance;
6000c64c:	e7fc      	b.n	6000c648 <ADC_GetInstance+0x20>
6000c64e:	bf00      	nop
6000c650:	400c4000 	.word	0x400c4000
6000c654:	60019080 	.word	0x60019080
6000c658:	6001916d 	.word	0x6001916d
6000c65c:	600190a2 	.word	0x600190a2

6000c660 <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000c660:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000c664:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000c668:	f000 031f 	and.w	r3, r0, #31
{
6000c66c:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000c66e:	d306      	bcc.n	6000c67e <CLOCK_ControlGate+0x1e>
6000c670:	4b0b      	ldr	r3, [pc, #44]	; (6000c6a0 <CLOCK_ControlGate+0x40>)
6000c672:	f240 51de 	movw	r1, #1502	; 0x5de
6000c676:	4a0b      	ldr	r2, [pc, #44]	; (6000c6a4 <CLOCK_ControlGate+0x44>)
6000c678:	480b      	ldr	r0, [pc, #44]	; (6000c6a8 <CLOCK_ControlGate+0x48>)
6000c67a:	f003 fcc1 	bl	60010000 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000c67e:	480b      	ldr	r0, [pc, #44]	; (6000c6ac <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000c680:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000c682:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000c686:	2203      	movs	r2, #3
6000c688:	409a      	lsls	r2, r3
6000c68a:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000c68c:	e850 3f00 	ldrex	r3, [r0]
6000c690:	4013      	ands	r3, r2
6000c692:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000c694:	e840 3400 	strex	r4, r3, [r0]
6000c698:	2c00      	cmp	r4, #0
6000c69a:	d1f7      	bne.n	6000c68c <CLOCK_ControlGate+0x2c>
}
6000c69c:	bd10      	pop	{r4, pc}
6000c69e:	bf00      	nop
6000c6a0:	60018b5e 	.word	0x60018b5e
6000c6a4:	6001915b 	.word	0x6001915b
6000c6a8:	60018b6b 	.word	0x60018b6b
6000c6ac:	400fc068 	.word	0x400fc068

6000c6b0 <ADC_Init>:
 *
 * param base ADC peripheral base address.
 * param config Pointer to "adc_config_t" structure.
 */
void ADC_Init(ADC_Type *base, const adc_config_t *config)
{
6000c6b0:	b538      	push	{r3, r4, r5, lr}
6000c6b2:	4605      	mov	r5, r0
    assert(NULL != config);
6000c6b4:	460c      	mov	r4, r1
6000c6b6:	b929      	cbnz	r1, 6000c6c4 <ADC_Init+0x14>
6000c6b8:	4b23      	ldr	r3, [pc, #140]	; (6000c748 <ADC_Init+0x98>)
6000c6ba:	2142      	movs	r1, #66	; 0x42
6000c6bc:	4a23      	ldr	r2, [pc, #140]	; (6000c74c <ADC_Init+0x9c>)
6000c6be:	4824      	ldr	r0, [pc, #144]	; (6000c750 <ADC_Init+0xa0>)
6000c6c0:	f003 fc9e 	bl	60010000 <__assert_func>

    uint32_t tmp32;

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    /* Enable the clock. */
    CLOCK_EnableClock(s_adcClocks[ADC_GetInstance(base)]);
6000c6c4:	f7ff ffb0 	bl	6000c628 <ADC_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000c6c8:	4b22      	ldr	r3, [pc, #136]	; (6000c754 <ADC_Init+0xa4>)
6000c6ca:	2103      	movs	r1, #3
6000c6cc:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000c6d0:	f7ff ffc6 	bl	6000c660 <CLOCK_ControlGate>
#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
    /* ADCx_CFG */
    tmp32 = base->CFG & (ADC_CFG_AVGS_MASK | ADC_CFG_ADTRG_MASK); /* Reserve AVGS and ADTRG bits. */
6000c6d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000c6d6:	7a22      	ldrb	r2, [r4, #8]
    tmp32 = base->CFG & (ADC_CFG_AVGS_MASK | ADC_CFG_ADTRG_MASK); /* Reserve AVGS and ADTRG bits. */
6000c6d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000c6dc:	f002 0203 	and.w	r2, r2, #3
6000c6e0:	431a      	orrs	r2, r3
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
6000c6e2:	79a3      	ldrb	r3, [r4, #6]
6000c6e4:	02db      	lsls	r3, r3, #11
6000c6e6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
6000c6ea:	431a      	orrs	r2, r3
6000c6ec:	79e3      	ldrb	r3, [r4, #7]
6000c6ee:	021b      	lsls	r3, r3, #8
6000c6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
6000c6f4:	431a      	orrs	r2, r3
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000c6f6:	7a63      	ldrb	r3, [r4, #9]
6000c6f8:	015b      	lsls	r3, r3, #5
6000c6fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
6000c6fe:	431a      	orrs	r2, r3
6000c700:	7aa3      	ldrb	r3, [r4, #10]
6000c702:	009b      	lsls	r3, r3, #2
6000c704:	f003 030c 	and.w	r3, r3, #12
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
6000c708:	4313      	orrs	r3, r2
    if (config->enableOverWrite)
6000c70a:	7822      	ldrb	r2, [r4, #0]
6000c70c:	b10a      	cbz	r2, 6000c712 <ADC_Init+0x62>
    {
        tmp32 |= ADC_CFG_OVWREN_MASK;
6000c70e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    }
    if (config->enableLongSample)
6000c712:	7922      	ldrb	r2, [r4, #4]
6000c714:	b10a      	cbz	r2, 6000c71a <ADC_Init+0x6a>
    {
        tmp32 |= ADC_CFG_ADLSMP_MASK;
6000c716:	f043 0310 	orr.w	r3, r3, #16
    }
    if (config->enableLowPower)
6000c71a:	78e2      	ldrb	r2, [r4, #3]
6000c71c:	b10a      	cbz	r2, 6000c722 <ADC_Init+0x72>
    {
        tmp32 |= ADC_CFG_ADLPC_MASK;
6000c71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }
    if (config->enableHighSpeed)
6000c722:	78a2      	ldrb	r2, [r4, #2]
6000c724:	b10a      	cbz	r2, 6000c72a <ADC_Init+0x7a>
    {
        tmp32 |= ADC_CFG_ADHSC_MASK;
6000c726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    }
    base->CFG = tmp32;
6000c72a:	646b      	str	r3, [r5, #68]	; 0x44

    /* ADCx_GC  */
    tmp32 = base->GC & ~(ADC_GC_ADCO_MASK | ADC_GC_ADACKEN_MASK);
6000c72c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if (config->enableContinuousConversion)
6000c72e:	7862      	ldrb	r2, [r4, #1]
    tmp32 = base->GC & ~(ADC_GC_ADCO_MASK | ADC_GC_ADACKEN_MASK);
6000c730:	f023 0341 	bic.w	r3, r3, #65	; 0x41
    if (config->enableContinuousConversion)
6000c734:	b10a      	cbz	r2, 6000c73a <ADC_Init+0x8a>
    {
        tmp32 |= ADC_GC_ADCO_MASK;
6000c736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (config->enableAsynchronousClockOutput)
6000c73a:	7962      	ldrb	r2, [r4, #5]
6000c73c:	b10a      	cbz	r2, 6000c742 <ADC_Init+0x92>
    {
        tmp32 |= ADC_GC_ADACKEN_MASK;
6000c73e:	f043 0301 	orr.w	r3, r3, #1
    }
    base->GC = tmp32;
6000c742:	64ab      	str	r3, [r5, #72]	; 0x48
}
6000c744:	bd38      	pop	{r3, r4, r5, pc}
6000c746:	bf00      	nop
6000c748:	60018ddd 	.word	0x60018ddd
6000c74c:	6001917d 	.word	0x6001917d
6000c750:	600190a2 	.word	0x600190a2
6000c754:	60016cb0 	.word	0x60016cb0

6000c758 <ADC_GetDefaultConfig>:
 * endcode
 * param base   ADC peripheral base address.
 * param config Pointer to the configuration structure.
 */
void ADC_GetDefaultConfig(adc_config_t *config)
{
6000c758:	b508      	push	{r3, lr}
    assert(NULL != config);
6000c75a:	b928      	cbnz	r0, 6000c768 <ADC_GetDefaultConfig+0x10>
6000c75c:	4b0a      	ldr	r3, [pc, #40]	; (6000c788 <ADC_GetDefaultConfig+0x30>)
6000c75e:	2190      	movs	r1, #144	; 0x90
6000c760:	4a0a      	ldr	r2, [pc, #40]	; (6000c78c <ADC_GetDefaultConfig+0x34>)
6000c762:	480b      	ldr	r0, [pc, #44]	; (6000c790 <ADC_GetDefaultConfig+0x38>)
6000c764:	f003 fc4c 	bl	60010000 <__assert_func>

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    config->enableAsynchronousClockOutput = true;
6000c768:	2301      	movs	r3, #1
    config->enableHighSpeed               = false;
    config->enableLowPower                = false;
    config->enableLongSample              = false;
    config->referenceVoltageSource        = kADC_ReferenceVoltageSourceAlt0;
    config->samplePeriodMode              = kADC_SamplePeriod2or12Clocks;
    config->clockSource                   = kADC_ClockSourceAD;
6000c76a:	2203      	movs	r2, #3
    config->enableAsynchronousClockOutput = true;
6000c76c:	7143      	strb	r3, [r0, #5]
    config->enableOverWrite               = false;
6000c76e:	2300      	movs	r3, #0
    config->clockSource                   = kADC_ClockSourceAD;
6000c770:	7202      	strb	r2, [r0, #8]
    config->enableOverWrite               = false;
6000c772:	7003      	strb	r3, [r0, #0]
    config->enableContinuousConversion    = false;
6000c774:	7043      	strb	r3, [r0, #1]
    config->enableHighSpeed               = false;
6000c776:	7083      	strb	r3, [r0, #2]
    config->enableLowPower                = false;
6000c778:	70c3      	strb	r3, [r0, #3]
    config->enableLongSample              = false;
6000c77a:	7103      	strb	r3, [r0, #4]
    config->referenceVoltageSource        = kADC_ReferenceVoltageSourceAlt0;
6000c77c:	7183      	strb	r3, [r0, #6]
    config->samplePeriodMode              = kADC_SamplePeriod2or12Clocks;
6000c77e:	71c3      	strb	r3, [r0, #7]
    config->clockDriver                   = kADC_ClockDriver1;
6000c780:	7243      	strb	r3, [r0, #9]
    config->resolution                    = kADC_Resolution12Bit;
6000c782:	2302      	movs	r3, #2
6000c784:	7283      	strb	r3, [r0, #10]
}
6000c786:	bd08      	pop	{r3, pc}
6000c788:	60018ddd 	.word	0x60018ddd
6000c78c:	60019146 	.word	0x60019146
6000c790:	600190a2 	.word	0x600190a2

6000c794 <ADC_SetChannelConfig>:
 * param base          ADC peripheral base address.
 * param channelGroup  Channel group index.
 * param config        Pointer to the "adc_channel_config_t" structure for the conversion channel.
 */
void ADC_SetChannelConfig(ADC_Type *base, uint32_t channelGroup, const adc_channel_config_t *config)
{
6000c794:	b508      	push	{r3, lr}
    assert(NULL != config);
6000c796:	b92a      	cbnz	r2, 6000c7a4 <ADC_SetChannelConfig+0x10>
6000c798:	4b0a      	ldr	r3, [pc, #40]	; (6000c7c4 <ADC_SetChannelConfig+0x30>)
6000c79a:	21bf      	movs	r1, #191	; 0xbf
6000c79c:	4a0a      	ldr	r2, [pc, #40]	; (6000c7c8 <ADC_SetChannelConfig+0x34>)
    assert(channelGroup < (uint32_t)FSL_FEATURE_ADC_CONVERSION_CONTROL_COUNT);
6000c79e:	480b      	ldr	r0, [pc, #44]	; (6000c7cc <ADC_SetChannelConfig+0x38>)
6000c7a0:	f003 fc2e 	bl	60010000 <__assert_func>
6000c7a4:	2907      	cmp	r1, #7
6000c7a6:	d903      	bls.n	6000c7b0 <ADC_SetChannelConfig+0x1c>
6000c7a8:	4b09      	ldr	r3, [pc, #36]	; (6000c7d0 <ADC_SetChannelConfig+0x3c>)
6000c7aa:	21c0      	movs	r1, #192	; 0xc0
6000c7ac:	4a06      	ldr	r2, [pc, #24]	; (6000c7c8 <ADC_SetChannelConfig+0x34>)
6000c7ae:	e7f6      	b.n	6000c79e <ADC_SetChannelConfig+0xa>

    uint32_t tmp32;

    tmp32 = ADC_HC_ADCH(config->channelNumber);
6000c7b0:	6813      	ldr	r3, [r2, #0]
    if (config->enableInterruptOnConversionCompleted)
6000c7b2:	7912      	ldrb	r2, [r2, #4]
    tmp32 = ADC_HC_ADCH(config->channelNumber);
6000c7b4:	f003 031f 	and.w	r3, r3, #31
    if (config->enableInterruptOnConversionCompleted)
6000c7b8:	b10a      	cbz	r2, 6000c7be <ADC_SetChannelConfig+0x2a>
    {
        tmp32 |= ADC_HC_AIEN_MASK;
6000c7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }
    base->HC[channelGroup] = tmp32;
6000c7be:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
6000c7c2:	bd08      	pop	{r3, pc}
6000c7c4:	60018ddd 	.word	0x60018ddd
6000c7c8:	60019131 	.word	0x60019131
6000c7cc:	600190a2 	.word	0x600190a2
6000c7d0:	600190ef 	.word	0x600190ef

6000c7d4 <DCACHE_CleanByRange>:
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
6000c7d4:	2900      	cmp	r1, #0
6000c7d6:	dd10      	ble.n	6000c7fa <DCACHE_CleanByRange+0x26>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
6000c7d8:	f000 031f 	and.w	r3, r0, #31
6000c7dc:	440b      	add	r3, r1
  __ASM volatile ("dsb 0xF":::"memory");
6000c7de:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
6000c7e2:	4906      	ldr	r1, [pc, #24]	; (6000c7fc <DCACHE_CleanByRange+0x28>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
6000c7e4:	4403      	add	r3, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
6000c7e6:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
6000c7ea:	3020      	adds	r0, #32
      } while ( op_size > 0 );
6000c7ec:	1a1a      	subs	r2, r3, r0
6000c7ee:	2a00      	cmp	r2, #0
6000c7f0:	dcf9      	bgt.n	6000c7e6 <DCACHE_CleanByRange+0x12>
6000c7f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000c7f6:	f3bf 8f6f 	isb	sy
#if defined(FSL_FEATURE_SOC_L2CACHEC_COUNT) && FSL_FEATURE_SOC_L2CACHEC_COUNT
#if defined(FSL_SDK_DISBLE_L2CACHE_PRESENT) && !FSL_SDK_DISBLE_L2CACHE_PRESENT
    L2CACHE_CleanByRange(address, size_byte);
#endif /* !FSL_SDK_DISBLE_L2CACHE_PRESENT */
#endif /* FSL_FEATURE_SOC_L2CACHEC_COUNT */
}
6000c7fa:	4770      	bx	lr
6000c7fc:	e000ed00 	.word	0xe000ed00

6000c800 <USB_EhciPhyGetBase>:
#include "fsl_device_registers.h"

#include "usb_phy.h"

void *USB_EhciPhyGetBase(uint8_t controllerId)
{
6000c800:	b530      	push	{r4, r5, lr}
    void *usbPhyBase = NULL;
#if ((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
    uint32_t instance;
    uint32_t newinstance        = 0;
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000c802:	4b1a      	ldr	r3, [pc, #104]	; (6000c86c <USB_EhciPhyGetBase+0x6c>)
{
6000c804:	b087      	sub	sp, #28
6000c806:	4605      	mov	r5, r0
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000c808:	466c      	mov	r4, sp
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
    uint32_t *temp;
    if (controllerId < (uint8_t)kUSB_ControllerEhci0)
6000c80a:	2d01      	cmp	r5, #1
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000c80c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
6000c810:	ab06      	add	r3, sp, #24
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000c812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
6000c816:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if (controllerId < (uint8_t)kUSB_ControllerEhci0)
6000c81a:	d802      	bhi.n	6000c822 <USB_EhciPhyGetBase+0x22>
    {
        return NULL;
6000c81c:	2000      	movs	r0, #0
    }
    temp       = (uint32_t *)usbphy_base[controllerId];
    usbPhyBase = (void *)temp;
#endif
    return usbPhyBase;
}
6000c81e:	b007      	add	sp, #28
6000c820:	bd30      	pop	{r4, r5, pc}
    if ((controllerId == (uint8_t)kUSB_ControllerEhci0) || (controllerId == (uint8_t)kUSB_ControllerEhci1))
6000c822:	1eab      	subs	r3, r5, #2
6000c824:	b2db      	uxtb	r3, r3
6000c826:	2b01      	cmp	r3, #1
6000c828:	d909      	bls.n	6000c83e <USB_EhciPhyGetBase+0x3e>
    else if ((controllerId == (uint8_t)kUSB_ControllerLpcIp3511Hs0) ||
6000c82a:	1fab      	subs	r3, r5, #6
6000c82c:	b2db      	uxtb	r3, r3
6000c82e:	2b01      	cmp	r3, #1
6000c830:	d905      	bls.n	6000c83e <USB_EhciPhyGetBase+0x3e>
    else if ((controllerId == (uint8_t)kUSB_ControllerIp3516Hs0) || (controllerId == (uint8_t)kUSB_ControllerIp3516Hs1))
6000c832:	f1a5 030a 	sub.w	r3, r5, #10
6000c836:	b2db      	uxtb	r3, r3
6000c838:	2b01      	cmp	r3, #1
6000c83a:	bf88      	it	hi
6000c83c:	462b      	movhi	r3, r5
    uint32_t newinstance        = 0;
6000c83e:	2200      	movs	r2, #0
    for (instance = 0; instance < (sizeof(usbphy_base_temp) / sizeof(usbphy_base_temp[0])); instance++)
6000c840:	4611      	mov	r1, r2
        if (0U != usbphy_base_temp[instance])
6000c842:	f854 0b04 	ldr.w	r0, [r4], #4
6000c846:	b128      	cbz	r0, 6000c854 <USB_EhciPhyGetBase+0x54>
            usbphy_base[newinstance++] = usbphy_base_temp[instance];
6000c848:	ad06      	add	r5, sp, #24
6000c84a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
6000c84e:	3201      	adds	r2, #1
6000c850:	f845 0c0c 	str.w	r0, [r5, #-12]
    for (instance = 0; instance < (sizeof(usbphy_base_temp) / sizeof(usbphy_base_temp[0])); instance++)
6000c854:	3101      	adds	r1, #1
6000c856:	2903      	cmp	r1, #3
6000c858:	d1f3      	bne.n	6000c842 <USB_EhciPhyGetBase+0x42>
    if (controllerId > newinstance)
6000c85a:	4293      	cmp	r3, r2
6000c85c:	d8de      	bhi.n	6000c81c <USB_EhciPhyGetBase+0x1c>
    temp       = (uint32_t *)usbphy_base[controllerId];
6000c85e:	aa06      	add	r2, sp, #24
6000c860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
6000c864:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    return usbPhyBase;
6000c868:	e7d9      	b.n	6000c81e <USB_EhciPhyGetBase+0x1e>
6000c86a:	bf00      	nop
6000c86c:	60015114 	.word	0x60015114

6000c870 <USB_DeviceEhciTransfer>:
 */
static usb_status_t USB_DeviceEhciTransfer(usb_device_ehci_state_struct_t *ehciState,
                                           uint8_t endpointAddress,
                                           uint8_t *buffer,
                                           uint32_t length)
{
6000c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usb_device_ehci_dtd_struct_t *dtd;
    usb_device_ehci_dtd_struct_t *dtdHard;
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000c874:	004d      	lsls	r5, r1, #1
{
6000c876:	b085      	sub	sp, #20
    uint8_t waitingSafelyAccess = 1U;
    uint32_t primeTimesCount    = 0U;
    void *temp;
    OSA_SR_ALLOC();

    if (NULL == ehciState)
6000c878:	4604      	mov	r4, r0
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000c87a:	f005 051e 	and.w	r5, r5, #30
{
6000c87e:	9203      	str	r2, [sp, #12]
                     (((uint32_t)endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
6000c880:	09ca      	lsrs	r2, r1, #7
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000c882:	ea45 15d1 	orr.w	r5, r5, r1, lsr #7
                     (((uint32_t)endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
6000c886:	9200      	str	r2, [sp, #0]
    if (NULL == ehciState)
6000c888:	2800      	cmp	r0, #0
6000c88a:	f000 80f9 	beq.w	6000ca80 <USB_DeviceEhciTransfer+0x210>
    {
        return kStatus_USB_InvalidHandle;
    }

    if (0U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened)
6000c88e:	6882      	ldr	r2, [r0, #8]
6000c890:	ea4f 1c85 	mov.w	ip, r5, lsl #6
6000c894:	eb02 1285 	add.w	r2, r2, r5, lsl #6
6000c898:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
6000c89c:	f012 0201 	ands.w	r2, r2, #1
6000c8a0:	9201      	str	r2, [sp, #4]
6000c8a2:	d002      	beq.n	6000c8aa <USB_DeviceEhciTransfer+0x3a>
    {
        return kStatus_USB_Error;
    }
    /* Return error when ehci is doing reset */
    if (0U != ehciState->isResetting)
6000c8a4:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
6000c8a8:	b118      	cbz	r0, 6000c8b2 <USB_DeviceEhciTransfer+0x42>
        return kStatus_USB_Error;
6000c8aa:	2001      	movs	r0, #1
        }
    }

    OSA_EXIT_CRITICAL();
    return kStatus_USB_Success;
}
6000c8ac:	b005      	add	sp, #20
6000c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t dtdRequestCount    = (length + USB_DEVICE_ECHI_DTD_TOTAL_BYTES - 1U) / USB_DEVICE_ECHI_DTD_TOTAL_BYTES;
6000c8b2:	f503 527f 	add.w	r2, r3, #16320	; 0x3fc0
6000c8b6:	323f      	adds	r2, #63	; 0x3f
    if (0U == dtdRequestCount)
6000c8b8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    uint32_t dtdRequestCount    = (length + USB_DEVICE_ECHI_DTD_TOTAL_BYTES - 1U) / USB_DEVICE_ECHI_DTD_TOTAL_BYTES;
6000c8bc:	bf2c      	ite	cs
6000c8be:	0b92      	lsrcs	r2, r2, #14
        dtdRequestCount = 1U;
6000c8c0:	2201      	movcc	r2, #1
	__asm__ volatile(
6000c8c2:	f04f 0610 	mov.w	r6, #16
6000c8c6:	f3ef 8e11 	mrs	lr, BASEPRI
6000c8ca:	f386 8812 	msr	BASEPRI_MAX, r6
6000c8ce:	f3bf 8f6f 	isb	sy
    if (dtdRequestCount > (uint32_t)ehciState->dtdCount)
6000c8d2:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
6000c8d6:	4296      	cmp	r6, r2
6000c8d8:	d205      	bcs.n	6000c8e6 <USB_DeviceEhciTransfer+0x76>
	__asm__ volatile(
6000c8da:	f38e 8811 	msr	BASEPRI, lr
6000c8de:	f3bf 8f6f 	isb	sy
        return kStatus_USB_Busy;
6000c8e2:	2002      	movs	r0, #2
6000c8e4:	e7e2      	b.n	6000c8ac <USB_DeviceEhciTransfer+0x3c>
    uint8_t qhIdle              = 0U;
6000c8e6:	f04f 0800 	mov.w	r8, #0
6000c8ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    uint32_t currentIndex       = 0U;
6000c8ee:	46c1      	mov	r9, r8
        dtd = ehciState->dtdFree;
6000c8f0:	6922      	ldr	r2, [r4, #16]
        if (length > USB_DEVICE_ECHI_DTD_TOTAL_BYTES)
6000c8f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
6000c8f6:	9302      	str	r3, [sp, #8]
6000c8f8:	461e      	mov	r6, r3
        ehciState->dtdFree = (usb_device_ehci_dtd_struct_t *)dtd->nextDtdPointer;
6000c8fa:	6817      	ldr	r7, [r2, #0]
        if (length > USB_DEVICE_ECHI_DTD_TOTAL_BYTES)
6000c8fc:	bf28      	it	cs
6000c8fe:	f44f 4680 	movcs.w	r6, #16384	; 0x4000
        if (0U == currentIndex)
6000c902:	f1b9 0f00 	cmp.w	r9, #0
6000c906:	bf08      	it	eq
6000c908:	4693      	moveq	fp, r2
        ehciState->dtdFree = (usb_device_ehci_dtd_struct_t *)dtd->nextDtdPointer;
6000c90a:	6127      	str	r7, [r4, #16]
        if (0U == length)
6000c90c:	1b9b      	subs	r3, r3, r6
        ehciState->dtdCount--;
6000c90e:	f894 7094 	ldrb.w	r7, [r4, #148]	; 0x94
6000c912:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
6000c916:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        dtd->nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000c91a:	f04f 0701 	mov.w	r7, #1
6000c91e:	6017      	str	r7, [r2, #0]
        dtd->dtdTokenUnion.dtdToken = 0U;
6000c920:	f04f 0700 	mov.w	r7, #0
6000c924:	6057      	str	r7, [r2, #4]
        dtd->bufferPointerPage[0]   = (uint32_t)(buffer + currentIndex);
6000c926:	9f03      	ldr	r7, [sp, #12]
6000c928:	444f      	add	r7, r9
6000c92a:	6097      	str	r7, [r2, #8]
            (dtd->bufferPointerPage[0] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK) & USB_DEVICE_ECHI_DTD_PAGE_MASK;
6000c92c:	6897      	ldr	r7, [r2, #8]
6000c92e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000c932:	f427 677f 	bic.w	r7, r7, #4080	; 0xff0
6000c936:	f027 070f 	bic.w	r7, r7, #15
        dtd->bufferPointerPage[1] =
6000c93a:	60d7      	str	r7, [r2, #12]
        dtd->bufferPointerPage[2] = dtd->bufferPointerPage[1] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000c93c:	68d7      	ldr	r7, [r2, #12]
6000c93e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000c942:	6117      	str	r7, [r2, #16]
        dtd->bufferPointerPage[3] = dtd->bufferPointerPage[2] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000c944:	6917      	ldr	r7, [r2, #16]
6000c946:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000c94a:	6157      	str	r7, [r2, #20]
        dtd->bufferPointerPage[4] = dtd->bufferPointerPage[3] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000c94c:	6957      	ldr	r7, [r2, #20]
6000c94e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000c952:	6197      	str	r7, [r2, #24]
        dtd->dtdTokenUnion.dtdTokenBitmap.totalBytes = sendLength;
6000c954:	6857      	ldr	r7, [r2, #4]
6000c956:	f366 471e 	bfi	r7, r6, #16, #15
6000c95a:	6057      	str	r7, [r2, #4]
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000c95c:	69d7      	ldr	r7, [r2, #28]
            dtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_OFFSET_MASK;
6000c95e:	f8d2 a008 	ldr.w	sl, [r2, #8]
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000c962:	f366 371e 	bfi	r7, r6, #12, #19
        dtd->reservedUnion.originalBufferInfo.originalBufferOffest =
6000c966:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000c96a:	61d7      	str	r7, [r2, #28]
        dtd->reservedUnion.originalBufferInfo.originalBufferOffest =
6000c96c:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
6000c970:	f427 677f 	bic.w	r7, r7, #4080	; 0xff0
6000c974:	f027 070f 	bic.w	r7, r7, #15
6000c978:	ea47 070a 	orr.w	r7, r7, sl
6000c97c:	61d7      	str	r7, [r2, #28]
        if (0U == length)
6000c97e:	d103      	bne.n	6000c988 <USB_DeviceEhciTransfer+0x118>
            dtd->dtdTokenUnion.dtdTokenBitmap.ioc = 1U;
6000c980:	6857      	ldr	r7, [r2, #4]
6000c982:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
6000c986:	6057      	str	r7, [r2, #4]
        dtd->dtdTokenUnion.dtdTokenBitmap.status = USB_DEVICE_ECHI_DTD_STATUS_ACTIVE;
6000c988:	6857      	ldr	r7, [r2, #4]
6000c98a:	f04f 0a80 	mov.w	sl, #128	; 0x80
        currentIndex += sendLength;
6000c98e:	44b1      	add	r9, r6
        dtd->dtdTokenUnion.dtdTokenBitmap.status = USB_DEVICE_ECHI_DTD_STATUS_ACTIVE;
6000c990:	f36a 0707 	bfi	r7, sl, #0, #8
6000c994:	6057      	str	r7, [r2, #4]
        if (NULL != (ehciState->dtdTail[index]))
6000c996:	6d6f      	ldr	r7, [r5, #84]	; 0x54
6000c998:	2f00      	cmp	r7, #0
6000c99a:	d036      	beq.n	6000ca0a <USB_DeviceEhciTransfer+0x19a>
            ehciState->dtdTail[index]->nextDtdPointer = (uint32_t)dtd;
6000c99c:	603a      	str	r2, [r7, #0]
            ehciState->dtdTail[index]                 = dtd;
6000c99e:	656a      	str	r2, [r5, #84]	; 0x54
    } while (0U != length);
6000c9a0:	2b00      	cmp	r3, #0
6000c9a2:	d1a5      	bne.n	6000c8f0 <USB_DeviceEhciTransfer+0x80>
    if ((USB_CONTROL_ENDPOINT == (endpointAddress & USB_ENDPOINT_NUMBER_MASK)) &&
6000c9a4:	f011 020f 	ands.w	r2, r1, #15
6000c9a8:	d11c      	bne.n	6000c9e4 <USB_DeviceEhciTransfer+0x174>
6000c9aa:	9d00      	ldr	r5, [sp, #0]
6000c9ac:	b1d5      	cbz	r5, 6000c9e4 <USB_DeviceEhciTransfer+0x174>
        temp                            = (void *)&ehciState->qh[setupindex].setupBufferBack[0];
6000c9ae:	68a5      	ldr	r5, [r4, #8]
        if (1U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt)
6000c9b0:	eb05 070c 	add.w	r7, r5, ip
6000c9b4:	f897 7038 	ldrb.w	r7, [r7, #56]	; 0x38
6000c9b8:	07bf      	lsls	r7, r7, #30
6000c9ba:	d513      	bpl.n	6000c9e4 <USB_DeviceEhciTransfer+0x174>
            if ((0U != sendLength) && (sendLength < deviceSetup->wLength) &&
6000c9bc:	9f02      	ldr	r7, [sp, #8]
6000c9be:	b18f      	cbz	r7, 6000c9e4 <USB_DeviceEhciTransfer+0x174>
6000c9c0:	8eef      	ldrh	r7, [r5, #54]	; 0x36
6000c9c2:	42b7      	cmp	r7, r6
6000c9c4:	d90e      	bls.n	6000c9e4 <USB_DeviceEhciTransfer+0x174>
                                   .capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize)))
6000c9c6:	f855 700c 	ldr.w	r7, [r5, ip]
6000c9ca:	f3c7 470a 	ubfx	r7, r7, #16, #11
                 (sendLength % ehciState->qh[index]
6000c9ce:	fbb6 f9f7 	udiv	r9, r6, r7
6000c9d2:	fb07 6619 	mls	r6, r7, r9, r6
            if ((0U != sendLength) && (sendLength < deviceSetup->wLength) &&
6000c9d6:	b92e      	cbnz	r6, 6000c9e4 <USB_DeviceEhciTransfer+0x174>
                ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 0U;
6000c9d8:	f855 600c 	ldr.w	r6, [r5, ip]
6000c9dc:	f363 765d 	bfi	r6, r3, #29, #1
6000c9e0:	f845 600c 	str.w	r6, [r5, ip]
                                ((endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000c9e4:	08c9      	lsrs	r1, r1, #3
    uint32_t primeBit = 1UL << ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6000c9e6:	2301      	movs	r3, #1
                                ((endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000c9e8:	f001 0110 	and.w	r1, r1, #16
    uint32_t primeBit = 1UL << ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6000c9ec:	4311      	orrs	r1, r2
6000c9ee:	408b      	lsls	r3, r1
    if (0U == qhIdle)
6000c9f0:	f1b8 0f00 	cmp.w	r8, #0
6000c9f4:	d123      	bne.n	6000ca3e <USB_DeviceEhciTransfer+0x1ce>
        if (0U != (ehciState->registerBase->EPPRIME & primeBit))
6000c9f6:	6862      	ldr	r2, [r4, #4]
6000c9f8:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
6000c9fc:	421a      	tst	r2, r3
6000c9fe:	d008      	beq.n	6000ca12 <USB_DeviceEhciTransfer+0x1a2>
6000ca00:	f38e 8811 	msr	BASEPRI, lr
6000ca04:	f3bf 8f6f 	isb	sy
    return kStatus_USB_Success;
6000ca08:	e750      	b.n	6000c8ac <USB_DeviceEhciTransfer+0x3c>
            qhIdle                    = 1U;
6000ca0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
            ehciState->dtdHard[index] = dtd;
6000ca0e:	616a      	str	r2, [r5, #20]
            qhIdle                    = 1U;
6000ca10:	e7c5      	b.n	6000c99e <USB_DeviceEhciTransfer+0x12e>
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_ATDTW_MASK;
6000ca12:	6861      	ldr	r1, [r4, #4]
6000ca14:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000ca18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
6000ca1c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
            epStatus = ehciState->registerBase->EPSR;
6000ca20:	6862      	ldr	r2, [r4, #4]
6000ca22:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
            if (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_ATDTW_MASK))
6000ca26:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
6000ca2a:	0449      	lsls	r1, r1, #17
6000ca2c:	d5f1      	bpl.n	6000ca12 <USB_DeviceEhciTransfer+0x1a2>
        ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ATDTW_MASK;
6000ca2e:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    if ((0U != qhIdle) || (0U == (epStatus & primeBit)))
6000ca32:	422b      	tst	r3, r5
        ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ATDTW_MASK;
6000ca34:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
6000ca38:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
    if ((0U != qhIdle) || (0U == (epStatus & primeBit)))
6000ca3c:	d1e0      	bne.n	6000ca00 <USB_DeviceEhciTransfer+0x190>
        ehciState->qh[index].nextDtdPointer         = (uint32_t)dtdHard;
6000ca3e:	68a2      	ldr	r2, [r4, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000ca40:	2100      	movs	r1, #0
        ehciState->qh[index].nextDtdPointer         = (uint32_t)dtdHard;
6000ca42:	4462      	add	r2, ip
6000ca44:	f8c2 b008 	str.w	fp, [r2, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000ca48:	68a2      	ldr	r2, [r4, #8]
6000ca4a:	4462      	add	r2, ip
6000ca4c:	60d1      	str	r1, [r2, #12]
  __ASM volatile ("dsb 0xF":::"memory");
6000ca4e:	f3bf 8f4f 	dsb	sy
        while (0U == (ehciState->registerBase->EPSR & primeBit))
6000ca52:	490c      	ldr	r1, [pc, #48]	; (6000ca84 <USB_DeviceEhciTransfer+0x214>)
        ehciState->registerBase->EPPRIME = primeBit;
6000ca54:	6862      	ldr	r2, [r4, #4]
6000ca56:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
        while (0U == (ehciState->registerBase->EPSR & primeBit))
6000ca5a:	6862      	ldr	r2, [r4, #4]
6000ca5c:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
6000ca60:	421d      	tst	r5, r3
6000ca62:	d1cd      	bne.n	6000ca00 <USB_DeviceEhciTransfer+0x190>
            if (primeTimesCount == USB_DEVICE_MAX_TRANSFER_PRIME_TIMES)
6000ca64:	3901      	subs	r1, #1
6000ca66:	d104      	bne.n	6000ca72 <USB_DeviceEhciTransfer+0x202>
6000ca68:	f38e 8811 	msr	BASEPRI, lr
6000ca6c:	f3bf 8f6f 	isb	sy
                return kStatus_USB_Error;
6000ca70:	e71b      	b.n	6000c8aa <USB_DeviceEhciTransfer+0x3a>
            if (0U != (ehciState->registerBase->EPCOMPLETE & primeBit))
6000ca72:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
6000ca76:	421d      	tst	r5, r3
6000ca78:	d1c2      	bne.n	6000ca00 <USB_DeviceEhciTransfer+0x190>
                ehciState->registerBase->EPPRIME = primeBit;
6000ca7a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
6000ca7e:	e7ec      	b.n	6000ca5a <USB_DeviceEhciTransfer+0x1ea>
        return kStatus_USB_InvalidHandle;
6000ca80:	2003      	movs	r0, #3
6000ca82:	e713      	b.n	6000c8ac <USB_DeviceEhciTransfer+0x3c>
6000ca84:	00989680 	.word	0x00989680

6000ca88 <USB_DeviceEhciCancelControlPipe>:
{
6000ca88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t index = ((uint32_t)endpoint << 1U) + (uint32_t)direction;
6000ca8c:	eb02 0941 	add.w	r9, r2, r1, lsl #1
    message.buffer = NULL;
6000ca90:	2600      	movs	r6, #0
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000ca92:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
{
6000ca96:	4605      	mov	r5, r0
6000ca98:	eb00 0889 	add.w	r8, r0, r9, lsl #2
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000ca9c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6000cb58 <USB_DeviceEhciCancelControlPipe+0xd0>
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000caa0:	ea4f 1989 	mov.w	r9, r9, lsl #6
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000caa4:	f8d8 4014 	ldr.w	r4, [r8, #20]
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000caa8:	b2cf      	uxtb	r7, r1
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000caaa:	f024 041f 	bic.w	r4, r4, #31
    message.length = 0U;
6000caae:	e9cd 6601 	strd	r6, r6, [sp, #4]
    while (NULL != currentDtd)
6000cab2:	b914      	cbnz	r4, 6000caba <USB_DeviceEhciCancelControlPipe+0x32>
}
6000cab4:	b004      	add	sp, #16
6000cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (NULL == message.buffer)
6000caba:	9b01      	ldr	r3, [sp, #4]
6000cabc:	b93b      	cbnz	r3, 6000cace <USB_DeviceEhciCancelControlPipe+0x46>
            uint32_t bufferAddress = currentDtd->bufferPointerPage[0];
6000cabe:	68a3      	ldr	r3, [r4, #8]
                                         (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000cac0:	8ba2      	ldrh	r2, [r4, #28]
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000cac2:	ea03 030a 	and.w	r3, r3, sl
                                         (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000cac6:	f3c2 020b 	ubfx	r2, r2, #0, #12
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000caca:	4313      	orrs	r3, r2
6000cacc:	9301      	str	r3, [sp, #4]
        if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
6000cace:	6863      	ldr	r3, [r4, #4]
6000cad0:	061a      	lsls	r2, r3, #24
6000cad2:	d439      	bmi.n	6000cb48 <USB_DeviceEhciCancelControlPipe+0xc0>
                               currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
6000cad4:	6862      	ldr	r2, [r4, #4]
            message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
6000cad6:	69e3      	ldr	r3, [r4, #28]
                               currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
6000cad8:	f3c2 420e 	ubfx	r2, r2, #16, #15
            message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
6000cadc:	f3c3 3312 	ubfx	r3, r3, #12, #19
6000cae0:	1a9b      	subs	r3, r3, r2
6000cae2:	9a02      	ldr	r2, [sp, #8]
6000cae4:	4413      	add	r3, r2
        if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
6000cae6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
6000caea:	9302      	str	r3, [sp, #8]
6000caec:	f8d8 3014 	ldr.w	r3, [r8, #20]
6000caf0:	4293      	cmp	r3, r2
6000caf2:	d12c      	bne.n	6000cb4e <USB_DeviceEhciCancelControlPipe+0xc6>
            ehciState->dtdHard[index]                   = NULL;
6000caf4:	f8c8 6014 	str.w	r6, [r8, #20]
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000caf8:	2201      	movs	r2, #1
            ehciState->dtdTail[index]                   = NULL;
6000cafa:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000cafe:	68ab      	ldr	r3, [r5, #8]
6000cb00:	444b      	add	r3, r9
6000cb02:	609a      	str	r2, [r3, #8]
            ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000cb04:	68ab      	ldr	r3, [r5, #8]
6000cb06:	444b      	add	r3, r9
6000cb08:	60de      	str	r6, [r3, #12]
        if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
6000cb0a:	6863      	ldr	r3, [r4, #4]
6000cb0c:	041b      	lsls	r3, r3, #16
6000cb0e:	d403      	bmi.n	6000cb18 <USB_DeviceEhciCancelControlPipe+0x90>
6000cb10:	f8d8 3014 	ldr.w	r3, [r8, #20]
6000cb14:	2b1f      	cmp	r3, #31
6000cb16:	d809      	bhi.n	6000cb2c <USB_DeviceEhciCancelControlPipe+0xa4>
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000cb18:	a901      	add	r1, sp, #4
6000cb1a:	6828      	ldr	r0, [r5, #0]
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000cb1c:	f88d 700c 	strb.w	r7, [sp, #12]
            message.isSetup = 0U;
6000cb20:	f88d 600d 	strb.w	r6, [sp, #13]
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000cb24:	f7fc ffa6 	bl	60009a74 <USB_DeviceNotificationTrigger>
            message.length = 0U;
6000cb28:	e9cd 6601 	strd	r6, r6, [sp, #4]
        currentDtd->dtdTokenUnion.dtdToken = 0U;
6000cb2c:	6066      	str	r6, [r4, #4]
        currentDtd->nextDtdPointer = (uint32_t)ehciState->dtdFree;
6000cb2e:	692b      	ldr	r3, [r5, #16]
6000cb30:	6023      	str	r3, [r4, #0]
        ehciState->dtdCount++;
6000cb32:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
        ehciState->dtdFree         = currentDtd;
6000cb36:	612c      	str	r4, [r5, #16]
        ehciState->dtdCount++;
6000cb38:	3301      	adds	r3, #1
6000cb3a:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cb3e:	f8d8 4014 	ldr.w	r4, [r8, #20]
6000cb42:	f024 041f 	bic.w	r4, r4, #31
6000cb46:	e7b4      	b.n	6000cab2 <USB_DeviceEhciCancelControlPipe+0x2a>
            message.length = USB_CANCELLED_TRANSFER_LENGTH;
6000cb48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000cb4c:	e7cb      	b.n	6000cae6 <USB_DeviceEhciCancelControlPipe+0x5e>
            ehciState->dtdHard[index] = (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
6000cb4e:	681b      	ldr	r3, [r3, #0]
6000cb50:	f8c8 3014 	str.w	r3, [r8, #20]
6000cb54:	e7d9      	b.n	6000cb0a <USB_DeviceEhciCancelControlPipe+0x82>
6000cb56:	bf00      	nop
6000cb58:	fffff000 	.word	0xfffff000

6000cb5c <USB_DeviceEhciInit>:
usb_status_t USB_DeviceEhciInit(uint8_t controllerId,
                                usb_device_handle handle,
                                usb_device_controller_handle *ehciHandle)
{
    usb_device_ehci_state_struct_t *ehciState = NULL;
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000cb5c:	4b25      	ldr	r3, [pc, #148]	; (6000cbf4 <USB_DeviceEhciInit+0x98>)
{
6000cb5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000cb60:	9300      	str	r3, [sp, #0]
6000cb62:	f503 7300 	add.w	r3, r3, #512	; 0x200
{
6000cb66:	4616      	mov	r6, r2
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000cb68:	9301      	str	r3, [sp, #4]
    uint8_t index;
    usb_phydcd_config_struct_t phyDcdParamConfig;
    usb_phydcd_status_t phyDcdError = kStatus_phydcd_Success;
#endif

    if ((controllerId < (uint8_t)kUSB_ControllerEhci0) ||
6000cb6a:	1e83      	subs	r3, r0, #2
6000cb6c:	b2da      	uxtb	r2, r3
6000cb6e:	2a01      	cmp	r2, #1
6000cb70:	d935      	bls.n	6000cbde <USB_DeviceEhciInit+0x82>
        ((uint32_t)((uint32_t)controllerId - (uint32_t)kUSB_ControllerEhci0) >= (sizeof(ehci_base) / sizeof(uint32_t))))
    {
        return kStatus_USB_ControllerNotFound;
6000cb72:	2506      	movs	r5, #6
6000cb74:	e038      	b.n	6000cbe8 <USB_DeviceEhciInit+0x8c>
            g_UsbDeviceEhciStateStatus[instance] = 1U;
6000cb76:	2401      	movs	r4, #1
6000cb78:	7014      	strb	r4, [r2, #0]
    ehciState = USB_EhciGetValidEhciState(&intanceIndex);
    if (NULL == ehciState)
    {
        return kStatus_USB_InvalidHandle;
    }
    ehciState->dtd = s_UsbDeviceEhciDtd[intanceIndex];
6000cb7a:	4c1f      	ldr	r4, [pc, #124]	; (6000cbf8 <USB_DeviceEhciInit+0x9c>)
6000cb7c:	4a1f      	ldr	r2, [pc, #124]	; (6000cbfc <USB_DeviceEhciInit+0xa0>)
    temp           = (void *)&qh_buffer[intanceIndex * 2048U];
    ehciState->qh  = (usb_device_ehci_qh_struct_t *)temp;

    ehciState->controllerId = controllerId;
6000cb7e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
    ehciState->dtd = s_UsbDeviceEhciDtd[intanceIndex];
6000cb82:	60e2      	str	r2, [r4, #12]
    ehciState->qh  = (usb_device_ehci_qh_struct_t *)temp;
6000cb84:	4a1e      	ldr	r2, [pc, #120]	; (6000cc00 <USB_DeviceEhciInit+0xa4>)
6000cb86:	60a2      	str	r2, [r4, #8]

    ehciState->registerBase = (USBHS_Type *)ehci_base[controllerId - (uint8_t)kUSB_ControllerEhci0];
6000cb88:	aa02      	add	r2, sp, #8
6000cb8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
6000cb8e:	f853 3c08 	ldr.w	r3, [r3, #-8]
        (USBNC_Type *)USB_EhciGetBase(controllerId, &usbnc_base[0], sizeof(usbnc_base) / sizeof(uint32_t));
#endif

#endif
    /* Reset the controller. */
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000cb92:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ehciState->registerBase = (USBHS_Type *)ehci_base[controllerId - (uint8_t)kUSB_ControllerEhci0];
6000cb96:	6063      	str	r3, [r4, #4]
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000cb98:	f042 0202 	orr.w	r2, r2, #2
6000cb9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    while (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_RST_MASK))
6000cba0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
6000cba4:	0792      	lsls	r2, r2, #30
6000cba6:	d4fb      	bmi.n	6000cba0 <USB_DeviceEhciInit+0x44>
    {
    }

    /* Get the HW's endpoint count */
    ehciState->endpointCount =
        (uint8_t)((ehciState->registerBase->DCCPARAMS & USBHS_DCCPARAMS_DEN_MASK) >> USBHS_DCCPARAMS_DEN_SHIFT);
6000cba8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
6000cbac:	f002 001f 	and.w	r0, r2, #31

    if (ehciState->endpointCount < USB_DEVICE_CONFIG_ENDPOINTS)
6000cbb0:	f012 0f18 	tst.w	r2, #24
    ehciState->endpointCount =
6000cbb4:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    if (ehciState->endpointCount < USB_DEVICE_CONFIG_ENDPOINTS)
6000cbb8:	d019      	beq.n	6000cbee <USB_DeviceEhciInit+0x92>
        return kStatus_USB_Error;
    }
    ehciState->deviceHandle = (usb_device_struct_t *)handle;

    /* Clear the controller mode field and set to device mode. */
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000cbba:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_CM(0x02U);

    /* Set the EHCI to default status. */
    USB_DeviceEhciSetDefaultState(ehciState);
6000cbbe:	480e      	ldr	r0, [pc, #56]	; (6000cbf8 <USB_DeviceEhciInit+0x9c>)
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000cbc0:	f022 0203 	bic.w	r2, r2, #3
    ehciState->deviceHandle = (usb_device_struct_t *)handle;
6000cbc4:	6021      	str	r1, [r4, #0]
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000cbc6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_CM(0x02U);
6000cbca:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
6000cbce:	f042 0202 	orr.w	r2, r2, #2
6000cbd2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    USB_DeviceEhciSetDefaultState(ehciState);
6000cbd6:	f007 f94f 	bl	60013e78 <USB_DeviceEhciSetDefaultState>
    *ehciHandle = (usb_device_controller_handle)ehciState;
6000cbda:	6034      	str	r4, [r6, #0]
        (void)USB_PHYDCD_Control(ehciState->dcdHandle, kUSB_DevicePHYDcdRun, NULL);
#endif
    }
#endif

    return kStatus_USB_Success;
6000cbdc:	e004      	b.n	6000cbe8 <USB_DeviceEhciInit+0x8c>
        if (0U == g_UsbDeviceEhciStateStatus[instance])
6000cbde:	4a09      	ldr	r2, [pc, #36]	; (6000cc04 <USB_DeviceEhciInit+0xa8>)
6000cbe0:	7815      	ldrb	r5, [r2, #0]
6000cbe2:	2d00      	cmp	r5, #0
6000cbe4:	d0c7      	beq.n	6000cb76 <USB_DeviceEhciInit+0x1a>
        return kStatus_USB_InvalidHandle;
6000cbe6:	2503      	movs	r5, #3
}
6000cbe8:	4628      	mov	r0, r5
6000cbea:	b002      	add	sp, #8
6000cbec:	bd70      	pop	{r4, r5, r6, pc}
        return kStatus_USB_Error;
6000cbee:	2501      	movs	r5, #1
6000cbf0:	e7fa      	b.n	6000cbe8 <USB_DeviceEhciInit+0x8c>
6000cbf2:	bf00      	nop
6000cbf4:	402e0000 	.word	0x402e0000
6000cbf8:	20204160 	.word	0x20204160
6000cbfc:	20201000 	.word	0x20201000
6000cc00:	20201800 	.word	0x20201800
6000cc04:	202042b3 	.word	0x202042b3

6000cc08 <USB_DeviceEhciDeinit>:
 */
usb_status_t USB_DeviceEhciDeinit(usb_device_controller_handle ehciHandle)
{
    usb_device_ehci_state_struct_t *ehciState = (usb_device_ehci_state_struct_t *)ehciHandle;

    if (NULL == ehciHandle)
6000cc08:	b908      	cbnz	r0, 6000cc0e <USB_DeviceEhciDeinit+0x6>
    {
        return kStatus_USB_InvalidHandle;
6000cc0a:	2003      	movs	r0, #3
    (void)USB_PHYDCD_Deinit(ehciState->dcdHandle);
#endif
#endif

    return kStatus_USB_Success;
}
6000cc0c:	4770      	bx	lr
        if (ehciState == &g_UsbDeviceEhciState[instance])
6000cc0e:	4b0d      	ldr	r3, [pc, #52]	; (6000cc44 <USB_DeviceEhciDeinit+0x3c>)
6000cc10:	4298      	cmp	r0, r3
6000cc12:	d102      	bne.n	6000cc1a <USB_DeviceEhciDeinit+0x12>
6000cc14:	4b0c      	ldr	r3, [pc, #48]	; (6000cc48 <USB_DeviceEhciDeinit+0x40>)
6000cc16:	2200      	movs	r2, #0
6000cc18:	701a      	strb	r2, [r3, #0]
    ehciState->registerBase->USBINTR = 0U;
6000cc1a:	6842      	ldr	r2, [r0, #4]
6000cc1c:	2300      	movs	r3, #0
6000cc1e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
6000cc22:	6841      	ldr	r1, [r0, #4]
6000cc24:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000cc28:	f022 0201 	bic.w	r2, r2, #1
6000cc2c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000cc30:	6841      	ldr	r1, [r0, #4]
    return kStatus_USB_Success;
6000cc32:	4618      	mov	r0, r3
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000cc34:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000cc38:	f042 0202 	orr.w	r2, r2, #2
6000cc3c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    return kStatus_USB_Success;
6000cc40:	4770      	bx	lr
6000cc42:	bf00      	nop
6000cc44:	20204160 	.word	0x20204160
6000cc48:	202042b3 	.word	0x202042b3

6000cc4c <USB_DeviceEhciCancel>:
 * @param ep               Endpoint address, bit7 is the direction of endpoint, 1U - IN, 0U - OUT.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceEhciCancel(usb_device_controller_handle ehciHandle, uint8_t ep)
{
6000cc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    usb_device_ehci_state_struct_t *ehciState = (usb_device_ehci_state_struct_t *)ehciHandle;
    usb_device_callback_message_struct_t message;
    usb_device_ehci_dtd_struct_t *currentDtd;
    uint32_t primeBit =
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000cc50:	08cb      	lsrs	r3, r1, #3
6000cc52:	f001 020f 	and.w	r2, r1, #15
    uint32_t primeBit =
6000cc56:	2501      	movs	r5, #1
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000cc58:	f003 0310 	and.w	r3, r3, #16
6000cc5c:	4313      	orrs	r3, r2
    uint8_t index =
        ((ep & USB_ENDPOINT_NUMBER_MASK) << 1U) | ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x07U);
6000cc5e:	004a      	lsls	r2, r1, #1
6000cc60:	f002 021e 	and.w	r2, r2, #30
    uint32_t primeBit =
6000cc64:	409d      	lsls	r5, r3
    uint8_t index =
6000cc66:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
    uint8_t flag = 0;

    OSA_SR_ALLOC();

    if (NULL == ehciHandle)
6000cc6a:	2800      	cmp	r0, #0
6000cc6c:	f000 8091 	beq.w	6000cd92 <USB_DeviceEhciCancel+0x146>
	__asm__ volatile(
6000cc70:	f04f 0310 	mov.w	r3, #16
6000cc74:	f3ef 8c11 	mrs	ip, BASEPRI
6000cc78:	f383 8812 	msr	BASEPRI_MAX, r3
6000cc7c:	f3bf 8f6f 	isb	sy
    }

    OSA_ENTER_CRITICAL();

    message.buffer = NULL;
    message.length = USB_CANCELLED_TRANSFER_LENGTH;
6000cc80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000cc84:	2400      	movs	r4, #0
6000cc86:	b217      	sxth	r7, r2
6000cc88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
6000cc8c:	e9cd 4301 	strd	r4, r3, [sp, #4]

    /* Get the first dtd */
    currentDtd =
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cc90:	6953      	ldr	r3, [r2, #20]
     * be fixed.
     */
    while (NULL != currentDtd)
    {
        currentDtd->reservedUnion.originalBufferInfo.dtdInvalid = 1U;
        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cc92:	f023 031f 	bic.w	r3, r3, #31
    while (NULL != currentDtd)
6000cc96:	b9cb      	cbnz	r3, 6000cccc <USB_DeviceEhciCancel+0x80>
    }

    /* Get the first dtd */
    currentDtd =
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cc98:	6954      	ldr	r4, [r2, #20]
            }

            /* Remove the dtd from the dtd in-used queue. */
            if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
            {
                ehciState->dtdHard[index] = NULL;
6000cc9a:	469a      	mov	sl, r3
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000cc9c:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 6000cd98 <USB_DeviceEhciCancel+0x14c>
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cca0:	f024 041f 	bic.w	r4, r4, #31
    while (NULL != currentDtd)
6000cca4:	b9c4      	cbnz	r4, 6000ccd8 <USB_DeviceEhciCancel+0x8c>
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
    }
    if (NULL == currentDtd)
    {
        /* Set the QH to empty. */
        ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000cca6:	6882      	ldr	r2, [r0, #8]
6000cca8:	2501      	movs	r5, #1
6000ccaa:	eb02 1287 	add.w	r2, r2, r7, lsl #6
6000ccae:	6095      	str	r5, [r2, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000ccb0:	6882      	ldr	r2, [r0, #8]
6000ccb2:	eb02 1287 	add.w	r2, r2, r7, lsl #6
6000ccb6:	60d4      	str	r4, [r2, #12]
	__asm__ volatile(
6000ccb8:	f38c 8811 	msr	BASEPRI, ip
6000ccbc:	f3bf 8f6f 	isb	sy
    }
    OSA_EXIT_CRITICAL();

    if (0U != flag)
6000ccc0:	2b00      	cmp	r3, #0
6000ccc2:	d15c      	bne.n	6000cd7e <USB_DeviceEhciCancel+0x132>
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
#endif
        message.buffer = NULL;
    }

    return kStatus_USB_Success;
6000ccc4:	2000      	movs	r0, #0
}
6000ccc6:	b004      	add	sp, #16
6000ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        currentDtd->reservedUnion.originalBufferInfo.dtdInvalid = 1U;
6000cccc:	7fdc      	ldrb	r4, [r3, #31]
6000ccce:	f044 0480 	orr.w	r4, r4, #128	; 0x80
6000ccd2:	77dc      	strb	r4, [r3, #31]
        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000ccd4:	681b      	ldr	r3, [r3, #0]
6000ccd6:	e7dc      	b.n	6000cc92 <USB_DeviceEhciCancel+0x46>
        if (0U == currentDtd->reservedUnion.originalBufferInfo.dtdInvalid)
6000ccd8:	f994 801f 	ldrsb.w	r8, [r4, #31]
6000ccdc:	f1b8 0f00 	cmp.w	r8, #0
6000cce0:	daea      	bge.n	6000ccb8 <USB_DeviceEhciCancel+0x6c>
            if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
6000cce2:	f8d4 8004 	ldr.w	r8, [r4, #4]
6000cce6:	f018 0f80 	tst.w	r8, #128	; 0x80
6000ccea:	d013      	beq.n	6000cd14 <USB_DeviceEhciCancel+0xc8>
                    ehciState->registerBase->EPFLUSH |= primeBit;
6000ccec:	f8d0 9004 	ldr.w	r9, [r0, #4]
6000ccf0:	f8d9 81b4 	ldr.w	r8, [r9, #436]	; 0x1b4
6000ccf4:	ea48 0805 	orr.w	r8, r8, r5
6000ccf8:	f8c9 81b4 	str.w	r8, [r9, #436]	; 0x1b4
                    while (0U != (ehciState->registerBase->EPFLUSH & primeBit))
6000ccfc:	f8d0 8004 	ldr.w	r8, [r0, #4]
6000cd00:	f8d8 91b4 	ldr.w	r9, [r8, #436]	; 0x1b4
6000cd04:	ea19 0f05 	tst.w	r9, r5
6000cd08:	d1fa      	bne.n	6000cd00 <USB_DeviceEhciCancel+0xb4>
                } while (0U != (ehciState->registerBase->EPSR & primeBit));
6000cd0a:	f8d8 81b8 	ldr.w	r8, [r8, #440]	; 0x1b8
6000cd0e:	ea18 0f05 	tst.w	r8, r5
6000cd12:	e7ea      	b.n	6000ccea <USB_DeviceEhciCancel+0x9e>
            if (NULL == message.buffer)
6000cd14:	9e01      	ldr	r6, [sp, #4]
6000cd16:	b95e      	cbnz	r6, 6000cd30 <USB_DeviceEhciCancel+0xe4>
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000cd18:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                             (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000cd1c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000cd20:	ea08 080e 	and.w	r8, r8, lr
                                             (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000cd24:	f3c9 090b 	ubfx	r9, r9, #0, #12
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000cd28:	ea48 0809 	orr.w	r8, r8, r9
6000cd2c:	f8cd 8004 	str.w	r8, [sp, #4]
            if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
6000cd30:	f8d2 8014 	ldr.w	r8, [r2, #20]
6000cd34:	6d56      	ldr	r6, [r2, #84]	; 0x54
6000cd36:	45b0      	cmp	r8, r6
6000cd38:	d11a      	bne.n	6000cd70 <USB_DeviceEhciCancel+0x124>
                ehciState->dtdHard[index] = NULL;
6000cd3a:	f8c2 a014 	str.w	sl, [r2, #20]
                ehciState->dtdTail[index] = NULL;
6000cd3e:	f8c2 a054 	str.w	sl, [r2, #84]	; 0x54
            if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
6000cd42:	f8d4 8004 	ldr.w	r8, [r4, #4]
6000cd46:	f418 4f00 	tst.w	r8, #32768	; 0x8000
6000cd4a:	d116      	bne.n	6000cd7a <USB_DeviceEhciCancel+0x12e>
                flag = 1;
6000cd4c:	6956      	ldr	r6, [r2, #20]
6000cd4e:	2e1f      	cmp	r6, #31
6000cd50:	bf98      	it	ls
6000cd52:	2301      	movls	r3, #1
            currentDtd->dtdTokenUnion.dtdToken = 0U;
6000cd54:	f8c4 a004 	str.w	sl, [r4, #4]
            currentDtd->nextDtdPointer = (uint32_t)ehciState->dtdFree;
6000cd58:	6906      	ldr	r6, [r0, #16]
6000cd5a:	6026      	str	r6, [r4, #0]
            ehciState->dtdFree         = currentDtd;
6000cd5c:	6104      	str	r4, [r0, #16]
            ehciState->dtdCount++;
6000cd5e:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
6000cd62:	3401      	adds	r4, #1
6000cd64:	f880 4094 	strb.w	r4, [r0, #148]	; 0x94
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000cd68:	6954      	ldr	r4, [r2, #20]
6000cd6a:	f024 041f 	bic.w	r4, r4, #31
6000cd6e:	e799      	b.n	6000cca4 <USB_DeviceEhciCancel+0x58>
                ehciState->dtdHard[index] = (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
6000cd70:	f8d8 8000 	ldr.w	r8, [r8]
6000cd74:	f8c2 8014 	str.w	r8, [r2, #20]
6000cd78:	e7e3      	b.n	6000cd42 <USB_DeviceEhciCancel+0xf6>
                flag = 1;
6000cd7a:	2301      	movs	r3, #1
6000cd7c:	e7ea      	b.n	6000cd54 <USB_DeviceEhciCancel+0x108>
        message.isSetup = 0U;
6000cd7e:	2300      	movs	r3, #0
        message.code    = ep;
6000cd80:	f88d 100c 	strb.w	r1, [sp, #12]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000cd84:	6800      	ldr	r0, [r0, #0]
6000cd86:	a901      	add	r1, sp, #4
        message.isSetup = 0U;
6000cd88:	f88d 300d 	strb.w	r3, [sp, #13]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000cd8c:	f7fc fe72 	bl	60009a74 <USB_DeviceNotificationTrigger>
        message.buffer = NULL;
6000cd90:	e798      	b.n	6000ccc4 <USB_DeviceEhciCancel+0x78>
        return kStatus_USB_InvalidHandle;
6000cd92:	2003      	movs	r0, #3
6000cd94:	e797      	b.n	6000ccc6 <USB_DeviceEhciCancel+0x7a>
6000cd96:	bf00      	nop
6000cd98:	fffff000 	.word	0xfffff000

6000cd9c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
6000cd9c:	b510      	push	{r4, lr}
6000cd9e:	4604      	mov	r4, r0
6000cda0:	b086      	sub	sp, #24
	z_impl_log_panic();
6000cda2:	f7f9 f8e5 	bl	60005f70 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
6000cda6:	4b07      	ldr	r3, [pc, #28]	; (6000cdc4 <k_sys_fatal_error_handler+0x28>)
6000cda8:	9305      	str	r3, [sp, #20]
6000cdaa:	2302      	movs	r3, #2
6000cdac:	9304      	str	r3, [sp, #16]
	z_impl_z_log_msg_static_create(source, desc, package, data);
6000cdae:	4806      	ldr	r0, [pc, #24]	; (6000cdc8 <k_sys_fatal_error_handler+0x2c>)
6000cdb0:	2300      	movs	r3, #0
6000cdb2:	aa04      	add	r2, sp, #16
6000cdb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cdb8:	f7f9 fa40 	bl	6000623c <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
6000cdbc:	4620      	mov	r0, r4
6000cdbe:	f007 fc0d 	bl	600145dc <arch_system_halt>
6000cdc2:	bf00      	nop
6000cdc4:	60019186 	.word	0x60019186
6000cdc8:	600150c4 	.word	0x600150c4

6000cdcc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
6000cdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000cdd0:	b086      	sub	sp, #24
6000cdd2:	4604      	mov	r4, r0
6000cdd4:	460e      	mov	r6, r1
6000cdd6:	af00      	add	r7, sp, #0
	__asm__ volatile(
6000cdd8:	f04f 0310 	mov.w	r3, #16
6000cddc:	f3ef 8811 	mrs	r8, BASEPRI
6000cde0:	f383 8812 	msr	BASEPRI_MAX, r3
6000cde4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
6000cde8:	f002 fb36 	bl	6000f458 <z_impl_z_current_get>
6000cdec:	2c04      	cmp	r4, #4
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
6000cdee:	46e9      	mov	r9, sp
6000cdf0:	b08a      	sub	sp, #40	; 0x28
6000cdf2:	bf98      	it	ls
6000cdf4:	4b33      	ldrls	r3, [pc, #204]	; (6000cec4 <z_fatal_error+0xf8>)
6000cdf6:	4605      	mov	r5, r0
6000cdf8:	bf88      	it	hi
6000cdfa:	4b33      	ldrhi	r3, [pc, #204]	; (6000cec8 <z_fatal_error+0xfc>)
6000cdfc:	466a      	mov	r2, sp
6000cdfe:	bf98      	it	ls
6000ce00:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
6000ce04:	61d3      	str	r3, [r2, #28]
6000ce06:	f240 3301 	movw	r3, #769	; 0x301
6000ce0a:	4930      	ldr	r1, [pc, #192]	; (6000cecc <z_fatal_error+0x100>)
6000ce0c:	f04f 0a00 	mov.w	sl, #0
6000ce10:	8493      	strh	r3, [r2, #36]	; 0x24
6000ce12:	4b2f      	ldr	r3, [pc, #188]	; (6000ced0 <z_fatal_error+0x104>)
6000ce14:	f8c2 a020 	str.w	sl, [r2, #32]
6000ce18:	e9c2 1405 	strd	r1, r4, [r2, #20]
6000ce1c:	f842 3f10 	str.w	r3, [r2, #16]!
6000ce20:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
6000ce24:	4653      	mov	r3, sl
6000ce26:	482b      	ldr	r0, [pc, #172]	; (6000ced4 <z_fatal_error+0x108>)
6000ce28:	f7f9 fa08 	bl	6000623c <z_impl_z_log_msg_static_create>
6000ce2c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
6000ce2e:	b17e      	cbz	r6, 6000ce50 <z_fatal_error+0x84>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
6000ce30:	69f3      	ldr	r3, [r6, #28]
6000ce32:	f3c3 0308 	ubfx	r3, r3, #0, #9
6000ce36:	b15b      	cbz	r3, 6000ce50 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
6000ce38:	4b27      	ldr	r3, [pc, #156]	; (6000ced8 <z_fatal_error+0x10c>)
6000ce3a:	617b      	str	r3, [r7, #20]
6000ce3c:	2302      	movs	r3, #2
6000ce3e:	613b      	str	r3, [r7, #16]
6000ce40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ce44:	4653      	mov	r3, sl
6000ce46:	f107 0210 	add.w	r2, r7, #16
6000ce4a:	4822      	ldr	r0, [pc, #136]	; (6000ced4 <z_fatal_error+0x108>)
6000ce4c:	f7f9 f9f6 	bl	6000623c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
6000ce50:	b12d      	cbz	r5, 6000ce5e <z_fatal_error+0x92>
6000ce52:	4628      	mov	r0, r5
6000ce54:	f007 fbea 	bl	6001462c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
6000ce58:	b108      	cbz	r0, 6000ce5e <z_fatal_error+0x92>
6000ce5a:	7803      	ldrb	r3, [r0, #0]
6000ce5c:	b903      	cbnz	r3, 6000ce60 <z_fatal_error+0x94>
		thread_name = "unknown";
6000ce5e:	481f      	ldr	r0, [pc, #124]	; (6000cedc <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
6000ce60:	46e9      	mov	r9, sp
6000ce62:	b08a      	sub	sp, #40	; 0x28
6000ce64:	466a      	mov	r2, sp
6000ce66:	4b1e      	ldr	r3, [pc, #120]	; (6000cee0 <z_fatal_error+0x114>)
6000ce68:	61d0      	str	r0, [r2, #28]
6000ce6a:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000ce6e:	f240 3301 	movw	r3, #769	; 0x301
6000ce72:	8413      	strh	r3, [r2, #32]
6000ce74:	4b1b      	ldr	r3, [pc, #108]	; (6000cee4 <z_fatal_error+0x118>)
6000ce76:	f842 3f10 	str.w	r3, [r2, #16]!
6000ce7a:	2300      	movs	r3, #0
6000ce7c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
6000ce80:	4814      	ldr	r0, [pc, #80]	; (6000ced4 <z_fatal_error+0x108>)
6000ce82:	f7f9 f9db 	bl	6000623c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
6000ce86:	4631      	mov	r1, r6
6000ce88:	4620      	mov	r0, r4
6000ce8a:	46cd      	mov	sp, r9
6000ce8c:	f7ff ff86 	bl	6000cd9c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
6000ce90:	2c04      	cmp	r4, #4
6000ce92:	d10c      	bne.n	6000ceae <z_fatal_error+0xe2>
6000ce94:	4914      	ldr	r1, [pc, #80]	; (6000cee8 <z_fatal_error+0x11c>)
6000ce96:	2393      	movs	r3, #147	; 0x93
6000ce98:	4a14      	ldr	r2, [pc, #80]	; (6000ceec <z_fatal_error+0x120>)
6000ce9a:	4815      	ldr	r0, [pc, #84]	; (6000cef0 <z_fatal_error+0x124>)
6000ce9c:	f005 fedd 	bl	60012c5a <assert_print>
6000cea0:	4814      	ldr	r0, [pc, #80]	; (6000cef4 <z_fatal_error+0x128>)
6000cea2:	f005 feda 	bl	60012c5a <assert_print>
6000cea6:	2193      	movs	r1, #147	; 0x93
6000cea8:	4810      	ldr	r0, [pc, #64]	; (6000ceec <z_fatal_error+0x120>)
6000ceaa:	f005 fecf 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000ceae:	f388 8811 	msr	BASEPRI, r8
6000ceb2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
6000ceb6:	4628      	mov	r0, r5
6000ceb8:	f7fb fd6a 	bl	60008990 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
6000cebc:	3718      	adds	r7, #24
6000cebe:	46bd      	mov	sp, r7
6000cec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000cec4:	60016a94 	.word	0x60016a94
6000cec8:	60019195 	.word	0x60019195
6000cecc:	600191ab 	.word	0x600191ab
6000ced0:	01000005 	.word	0x01000005
6000ced4:	600150c4 	.word	0x600150c4
6000ced8:	600191d3 	.word	0x600191d3
6000cedc:	600191a3 	.word	0x600191a3
6000cee0:	600191f4 	.word	0x600191f4
6000cee4:	01000004 	.word	0x01000004
6000cee8:	6001922e 	.word	0x6001922e
6000ceec:	6001920c 	.word	0x6001920c
6000cef0:	60016dfb 	.word	0x60016dfb
6000cef4:	6001924b 	.word	0x6001924b

6000cef8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000cef8:	4b0f      	ldr	r3, [pc, #60]	; (6000cf38 <z_sys_init_run_level+0x40>)
{
6000cefa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000cefc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
6000cf00:	3001      	adds	r0, #1
6000cf02:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
6000cf06:	42a6      	cmp	r6, r4
6000cf08:	d800      	bhi.n	6000cf0c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
6000cf0a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
6000cf0c:	e9d4 3500 	ldrd	r3, r5, [r4]
6000cf10:	4628      	mov	r0, r5
6000cf12:	4798      	blx	r3
		if (dev != NULL) {
6000cf14:	b16d      	cbz	r5, 6000cf32 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
6000cf16:	b138      	cbz	r0, 6000cf28 <z_sys_init_run_level+0x30>
				if (rc < 0) {
6000cf18:	2800      	cmp	r0, #0
				dev->state->init_res = rc;
6000cf1a:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
6000cf1c:	bfb8      	it	lt
6000cf1e:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
6000cf20:	28ff      	cmp	r0, #255	; 0xff
6000cf22:	bfa8      	it	ge
6000cf24:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
6000cf26:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
6000cf28:	68ea      	ldr	r2, [r5, #12]
6000cf2a:	7853      	ldrb	r3, [r2, #1]
6000cf2c:	f043 0301 	orr.w	r3, r3, #1
6000cf30:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000cf32:	3408      	adds	r4, #8
6000cf34:	e7e7      	b.n	6000cf06 <z_sys_init_run_level+0xe>
6000cf36:	bf00      	nop
6000cf38:	60016aa8 	.word	0x60016aa8

6000cf3c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
6000cf3c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
6000cf3e:	2003      	movs	r0, #3
{
6000cf40:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
6000cf42:	4b09      	ldr	r3, [pc, #36]	; (6000cf68 <bg_thread_main+0x2c>)
6000cf44:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
6000cf46:	f7ff ffd7 	bl	6000cef8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
6000cf4a:	f003 f839 	bl	6000ffc0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
6000cf4e:	2004      	movs	r0, #4
6000cf50:	f7ff ffd2 	bl	6000cef8 <z_sys_init_run_level>

	z_init_static_threads();
6000cf54:	f000 fa7e 	bl	6000d454 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
6000cf58:	f005 fb61 	bl	6001261e <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
6000cf5c:	4a03      	ldr	r2, [pc, #12]	; (6000cf6c <bg_thread_main+0x30>)
6000cf5e:	7b13      	ldrb	r3, [r2, #12]
6000cf60:	f023 0301 	bic.w	r3, r3, #1
6000cf64:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
6000cf66:	bd08      	pop	{r3, pc}
6000cf68:	202042b4 	.word	0x202042b4
6000cf6c:	20203ac0 	.word	0x20203ac0

6000cf70 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
6000cf70:	4806      	ldr	r0, [pc, #24]	; (6000cf8c <z_bss_zero+0x1c>)
6000cf72:	2100      	movs	r1, #0
6000cf74:	4a06      	ldr	r2, [pc, #24]	; (6000cf90 <z_bss_zero+0x20>)
{
6000cf76:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
6000cf78:	1a12      	subs	r2, r2, r0
6000cf7a:	f007 fb38 	bl	600145ee <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
6000cf7e:	4805      	ldr	r0, [pc, #20]	; (6000cf94 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
6000cf80:	4a05      	ldr	r2, [pc, #20]	; (6000cf98 <z_bss_zero+0x28>)
6000cf82:	2100      	movs	r1, #0
6000cf84:	1a12      	subs	r2, r2, r0
6000cf86:	f007 fb32 	bl	600145ee <z_early_memset>
}
6000cf8a:	bd08      	pop	{r3, pc}
6000cf8c:	20202e00 	.word	0x20202e00
6000cf90:	202042b8 	.word	0x202042b8
6000cf94:	20000000 	.word	0x20000000
6000cf98:	20000000 	.word	0x20000000

6000cf9c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
6000cf9c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
6000cf9e:	2300      	movs	r3, #0
{
6000cfa0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
6000cfa2:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
6000cfa4:	4e14      	ldr	r6, [pc, #80]	; (6000cff8 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
6000cfa6:	9301      	str	r3, [sp, #4]
{
6000cfa8:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000cfaa:	4d14      	ldr	r5, [pc, #80]	; (6000cffc <z_init_cpu+0x60>)
	struct k_thread *thread = &z_idle_threads[i];
6000cfac:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
6000cfb0:	4913      	ldr	r1, [pc, #76]	; (6000d000 <z_init_cpu+0x64>)
6000cfb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
6000cfb6:	220f      	movs	r2, #15
6000cfb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000cfbc:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
6000cfbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000cfc2:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
6000cfc6:	f44f 70c0 	mov.w	r0, #384	; 0x180
6000cfca:	4b0e      	ldr	r3, [pc, #56]	; (6000d004 <z_init_cpu+0x68>)
6000cfcc:	fb00 1104 	mla	r1, r0, r4, r1
6000cfd0:	4630      	mov	r0, r6
6000cfd2:	9500      	str	r5, [sp, #0]
6000cfd4:	f000 f9a0 	bl	6000d318 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
6000cfd8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
6000cfda:	4a0b      	ldr	r2, [pc, #44]	; (6000d008 <z_init_cpu+0x6c>)
6000cfdc:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
6000cfe0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].id = id;
6000cfe2:	752c      	strb	r4, [r5, #20]
6000cfe4:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
6000cfe6:	f44f 6304 	mov.w	r3, #2112	; 0x840
6000cfea:	fb04 3303 	mla	r3, r4, r3, r3
6000cfee:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
6000cff0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
6000cff2:	b006      	add	sp, #24
6000cff4:	bd70      	pop	{r4, r5, r6, pc}
6000cff6:	bf00      	nop
6000cff8:	20203a40 	.word	0x20203a40
6000cffc:	202041fc 	.word	0x202041fc
6000d000:	20205c00 	.word	0x20205c00
6000d004:	6000d581 	.word	0x6000d581
6000d008:	202053c0 	.word	0x202053c0

6000d00c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
6000d00c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000d00e:	2000      	movs	r0, #0
{
6000d010:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000d012:	f7ff ff71 	bl	6000cef8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
6000d016:	4b2c      	ldr	r3, [pc, #176]	; (6000d0c8 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
6000d018:	f383 8808 	msr	MSP, r3
6000d01c:	4d2b      	ldr	r5, [pc, #172]	; (6000d0cc <z_cstart+0xc0>)
6000d01e:	2400      	movs	r4, #0
6000d020:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
6000d022:	4e2b      	ldr	r6, [pc, #172]	; (6000d0d0 <z_cstart+0xc4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000d024:	4f2b      	ldr	r7, [pc, #172]	; (6000d0d4 <z_cstart+0xc8>)
6000d026:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
6000d02a:	77ec      	strb	r4, [r5, #31]
6000d02c:	762c      	strb	r4, [r5, #24]
6000d02e:	766c      	strb	r4, [r5, #25]
6000d030:	76ac      	strb	r4, [r5, #26]
6000d032:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
6000d036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
6000d038:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
6000d03c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
6000d03e:	f7fb fc71 	bl	60008924 <z_arm_fault_init>
	z_arm_cpu_idle_init();
6000d042:	f7fa ff8b 	bl	60007f5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
6000d046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000d04a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
6000d04c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
6000d04e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
6000d050:	f7fb fda4 	bl	60008b9c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
6000d054:	f7fb fcb2 	bl	600089bc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
6000d058:	f7f8 fee4 	bl	60005e24 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
6000d05c:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
6000d060:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
6000d062:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
6000d066:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
6000d06a:	f002 ffa3 	bl	6000ffb4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
6000d06e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
6000d070:	f007 faa8 	bl	600145c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
6000d074:	2001      	movs	r0, #1
6000d076:	f7ff ff3f 	bl	6000cef8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
6000d07a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
6000d07c:	4d16      	ldr	r5, [pc, #88]	; (6000d0d8 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
6000d07e:	f7ff ff3b 	bl	6000cef8 <z_sys_init_run_level>
	z_sched_init();
6000d082:	f002 f871 	bl	6000f168 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000d086:	4b15      	ldr	r3, [pc, #84]	; (6000d0dc <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
6000d088:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000d08a:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000d08e:	9305      	str	r3, [sp, #20]
6000d090:	2301      	movs	r3, #1
6000d092:	4913      	ldr	r1, [pc, #76]	; (6000d0e0 <z_cstart+0xd4>)
6000d094:	4628      	mov	r0, r5
6000d096:	9400      	str	r4, [sp, #0]
6000d098:	e9cd 4303 	strd	r4, r3, [sp, #12]
6000d09c:	e9cd 4401 	strd	r4, r4, [sp, #4]
6000d0a0:	463b      	mov	r3, r7
6000d0a2:	f000 f939 	bl	6000d318 <z_setup_new_thread>
6000d0a6:	7b6a      	ldrb	r2, [r5, #13]
6000d0a8:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
6000d0aa:	4628      	mov	r0, r5
6000d0ac:	f022 0204 	bic.w	r2, r2, #4
6000d0b0:	736a      	strb	r2, [r5, #13]
6000d0b2:	f001 fa2d 	bl	6000e510 <z_ready_thread>
	z_init_cpu(0);
6000d0b6:	4620      	mov	r0, r4
6000d0b8:	f7ff ff70 	bl	6000cf9c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
6000d0bc:	463a      	mov	r2, r7
6000d0be:	4631      	mov	r1, r6
6000d0c0:	4628      	mov	r0, r5
6000d0c2:	f7fb f8ad 	bl	60008220 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
6000d0c6:	bf00      	nop
6000d0c8:	20205c00 	.word	0x20205c00
6000d0cc:	e000ed00 	.word	0xe000ed00
6000d0d0:	202041fc 	.word	0x202041fc
6000d0d4:	6000cf3d 	.word	0x6000cf3d
6000d0d8:	20203ac0 	.word	0x20203ac0
6000d0dc:	600192ca 	.word	0x600192ca
6000d0e0:	20205d80 	.word	0x20205d80

6000d0e4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
6000d0e4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000d0e6:	4c0d      	ldr	r4, [pc, #52]	; (6000d11c <statics_init+0x38>)
6000d0e8:	4d0d      	ldr	r5, [pc, #52]	; (6000d120 <statics_init+0x3c>)
6000d0ea:	42ac      	cmp	r4, r5
6000d0ec:	d913      	bls.n	6000d116 <statics_init+0x32>
6000d0ee:	490d      	ldr	r1, [pc, #52]	; (6000d124 <statics_init+0x40>)
6000d0f0:	2318      	movs	r3, #24
6000d0f2:	4a0d      	ldr	r2, [pc, #52]	; (6000d128 <statics_init+0x44>)
6000d0f4:	480d      	ldr	r0, [pc, #52]	; (6000d12c <statics_init+0x48>)
6000d0f6:	f005 fdb0 	bl	60012c5a <assert_print>
6000d0fa:	480d      	ldr	r0, [pc, #52]	; (6000d130 <statics_init+0x4c>)
6000d0fc:	f005 fdad 	bl	60012c5a <assert_print>
6000d100:	2118      	movs	r1, #24
6000d102:	4809      	ldr	r0, [pc, #36]	; (6000d128 <statics_init+0x44>)
6000d104:	f005 fda2 	bl	60012c4c <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
6000d108:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
6000d10c:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000d10e:	3418      	adds	r4, #24
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
6000d110:	f007 fa71 	bl	600145f6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000d114:	e7e9      	b.n	6000d0ea <statics_init+0x6>
6000d116:	d3f7      	bcc.n	6000d108 <statics_init+0x24>
		}
	}
	return 0;
}
6000d118:	2000      	movs	r0, #0
6000d11a:	bd38      	pop	{r3, r4, r5, pc}
6000d11c:	20202c40 	.word	0x20202c40
6000d120:	20202c70 	.word	0x20202c70
6000d124:	600192f4 	.word	0x600192f4
6000d128:	600192d2 	.word	0x600192d2
6000d12c:	60016dfb 	.word	0x60016dfb
6000d130:	6001727c 	.word	0x6001727c

6000d134 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
6000d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000d138:	b085      	sub	sp, #20
6000d13a:	4680      	mov	r8, r0
6000d13c:	4692      	mov	sl, r2
6000d13e:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;

	k_spinlock_key_t key = k_spin_lock(&h->lock);
6000d140:	f108 0414 	add.w	r4, r8, #20
{
6000d144:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
6000d148:	4648      	mov	r0, r9
6000d14a:	4659      	mov	r1, fp
6000d14c:	f007 faec 	bl	60014728 <sys_clock_timeout_end_calc>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
6000d150:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
6000d154:	bf08      	it	eq
6000d156:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
6000d15a:	4606      	mov	r6, r0
6000d15c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
6000d15e:	bf04      	itt	eq
6000d160:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
6000d164:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
	__asm__ volatile(
6000d168:	f04f 0310 	mov.w	r3, #16
6000d16c:	f3ef 8511 	mrs	r5, BASEPRI
6000d170:	f383 8812 	msr	BASEPRI_MAX, r3
6000d174:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d178:	4620      	mov	r0, r4
6000d17a:	f000 f9dd 	bl	6000d538 <z_spin_lock_valid>
6000d17e:	b960      	cbnz	r0, 6000d19a <k_heap_aligned_alloc+0x66>
6000d180:	2394      	movs	r3, #148	; 0x94
6000d182:	4a33      	ldr	r2, [pc, #204]	; (6000d250 <k_heap_aligned_alloc+0x11c>)
6000d184:	4933      	ldr	r1, [pc, #204]	; (6000d254 <k_heap_aligned_alloc+0x120>)
6000d186:	4834      	ldr	r0, [pc, #208]	; (6000d258 <k_heap_aligned_alloc+0x124>)
6000d188:	f005 fd67 	bl	60012c5a <assert_print>
6000d18c:	4621      	mov	r1, r4
6000d18e:	4833      	ldr	r0, [pc, #204]	; (6000d25c <k_heap_aligned_alloc+0x128>)
6000d190:	f005 fd63 	bl	60012c5a <assert_print>
6000d194:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d196:	482e      	ldr	r0, [pc, #184]	; (6000d250 <k_heap_aligned_alloc+0x11c>)
6000d198:	e031      	b.n	6000d1fe <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
6000d19a:	4620      	mov	r0, r4
6000d19c:	f000 f9e8 	bl	6000d570 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
6000d1a0:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000d1a4:	b113      	cbz	r3, 6000d1ac <k_heap_aligned_alloc+0x78>
6000d1a6:	ea5b 0909 	orrs.w	r9, fp, r9
6000d1aa:	d11d      	bne.n	6000d1e8 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
6000d1ac:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
6000d1b0:	4652      	mov	r2, sl
6000d1b2:	9903      	ldr	r1, [sp, #12]
6000d1b4:	4640      	mov	r0, r8
6000d1b6:	f7f7 f98f 	bl	600044d8 <sys_heap_aligned_alloc>
6000d1ba:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
6000d1bc:	f002 fd1a 	bl	6000fbf4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
6000d1c0:	f1b9 0f00 	cmp.w	r9, #0
6000d1c4:	d01d      	beq.n	6000d202 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d1c6:	4620      	mov	r0, r4
6000d1c8:	f000 f9c4 	bl	6000d554 <z_spin_unlock_valid>
6000d1cc:	2800      	cmp	r0, #0
6000d1ce:	d137      	bne.n	6000d240 <k_heap_aligned_alloc+0x10c>
6000d1d0:	23c2      	movs	r3, #194	; 0xc2
6000d1d2:	4a1f      	ldr	r2, [pc, #124]	; (6000d250 <k_heap_aligned_alloc+0x11c>)
6000d1d4:	4922      	ldr	r1, [pc, #136]	; (6000d260 <k_heap_aligned_alloc+0x12c>)
6000d1d6:	4820      	ldr	r0, [pc, #128]	; (6000d258 <k_heap_aligned_alloc+0x124>)
6000d1d8:	f005 fd3f 	bl	60012c5a <assert_print>
6000d1dc:	4621      	mov	r1, r4
6000d1de:	4821      	ldr	r0, [pc, #132]	; (6000d264 <k_heap_aligned_alloc+0x130>)
6000d1e0:	f005 fd3b 	bl	60012c5a <assert_print>
6000d1e4:	21c2      	movs	r1, #194	; 0xc2
6000d1e6:	e7d6      	b.n	6000d196 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000d1e8:	491f      	ldr	r1, [pc, #124]	; (6000d268 <k_heap_aligned_alloc+0x134>)
6000d1ea:	234c      	movs	r3, #76	; 0x4c
6000d1ec:	4a1f      	ldr	r2, [pc, #124]	; (6000d26c <k_heap_aligned_alloc+0x138>)
6000d1ee:	481a      	ldr	r0, [pc, #104]	; (6000d258 <k_heap_aligned_alloc+0x124>)
6000d1f0:	f005 fd33 	bl	60012c5a <assert_print>
6000d1f4:	481e      	ldr	r0, [pc, #120]	; (6000d270 <k_heap_aligned_alloc+0x13c>)
6000d1f6:	f005 fd30 	bl	60012c5a <assert_print>
6000d1fa:	214c      	movs	r1, #76	; 0x4c
6000d1fc:	481b      	ldr	r0, [pc, #108]	; (6000d26c <k_heap_aligned_alloc+0x138>)
6000d1fe:	f005 fd25 	bl	60012c4c <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
6000d202:	1a30      	subs	r0, r6, r0
6000d204:	eb67 0101 	sbc.w	r1, r7, r1
6000d208:	2801      	cmp	r0, #1
6000d20a:	f171 0300 	sbcs.w	r3, r1, #0
6000d20e:	dbda      	blt.n	6000d1c6 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
6000d210:	465a      	mov	r2, fp
6000d212:	e9cd 0100 	strd	r0, r1, [sp]
6000d216:	4629      	mov	r1, r5
6000d218:	4620      	mov	r0, r4
6000d21a:	f001 fcd5 	bl	6000ebc8 <z_pend_curr>
6000d21e:	f04f 0310 	mov.w	r3, #16
6000d222:	f3ef 8511 	mrs	r5, BASEPRI
6000d226:	f383 8812 	msr	BASEPRI_MAX, r3
6000d22a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d22e:	4620      	mov	r0, r4
6000d230:	f000 f982 	bl	6000d538 <z_spin_lock_valid>
6000d234:	2800      	cmp	r0, #0
6000d236:	d0a3      	beq.n	6000d180 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
6000d238:	4620      	mov	r0, r4
6000d23a:	f000 f999 	bl	6000d570 <z_spin_lock_set_owner>
	return k;
6000d23e:	e7b7      	b.n	6000d1b0 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
6000d240:	f385 8811 	msr	BASEPRI, r5
6000d244:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
6000d248:	4648      	mov	r0, r9
6000d24a:	b005      	add	sp, #20
6000d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
6000d250:	6001717c 	.word	0x6001717c
6000d254:	600171a9 	.word	0x600171a9
6000d258:	60016dfb 	.word	0x60016dfb
6000d25c:	600171be 	.word	0x600171be
6000d260:	600171d6 	.word	0x600171d6
6000d264:	600171ed 	.word	0x600171ed
6000d268:	6001930a 	.word	0x6001930a
6000d26c:	600192d2 	.word	0x600192d2
6000d270:	60019350 	.word	0x60019350

6000d274 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
6000d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000d276:	4605      	mov	r5, r0
6000d278:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
6000d27a:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
6000d27e:	f04f 0310 	mov.w	r3, #16
6000d282:	f3ef 8711 	mrs	r7, BASEPRI
6000d286:	f383 8812 	msr	BASEPRI_MAX, r3
6000d28a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d28e:	4620      	mov	r0, r4
6000d290:	f000 f952 	bl	6000d538 <z_spin_lock_valid>
6000d294:	b968      	cbnz	r0, 6000d2b2 <k_heap_free+0x3e>
6000d296:	2394      	movs	r3, #148	; 0x94
6000d298:	4a19      	ldr	r2, [pc, #100]	; (6000d300 <k_heap_free+0x8c>)
6000d29a:	491a      	ldr	r1, [pc, #104]	; (6000d304 <k_heap_free+0x90>)
6000d29c:	481a      	ldr	r0, [pc, #104]	; (6000d308 <k_heap_free+0x94>)
6000d29e:	f005 fcdc 	bl	60012c5a <assert_print>
6000d2a2:	4621      	mov	r1, r4
6000d2a4:	4819      	ldr	r0, [pc, #100]	; (6000d30c <k_heap_free+0x98>)
6000d2a6:	f005 fcd8 	bl	60012c5a <assert_print>
6000d2aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d2ac:	4814      	ldr	r0, [pc, #80]	; (6000d300 <k_heap_free+0x8c>)
6000d2ae:	f005 fccd 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000d2b2:	4620      	mov	r0, r4
6000d2b4:	f000 f95c 	bl	6000d570 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
6000d2b8:	4628      	mov	r0, r5
6000d2ba:	4631      	mov	r1, r6
6000d2bc:	f7f7 f8be 	bl	6000443c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
6000d2c0:	f105 000c 	add.w	r0, r5, #12
6000d2c4:	f007 fa0a 	bl	600146dc <z_unpend_all>
6000d2c8:	b128      	cbz	r0, 6000d2d6 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
6000d2ca:	4639      	mov	r1, r7
6000d2cc:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
6000d2ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
6000d2d2:	f001 b9ab 	b.w	6000e62c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d2d6:	4620      	mov	r0, r4
6000d2d8:	f000 f93c 	bl	6000d554 <z_spin_unlock_valid>
6000d2dc:	b958      	cbnz	r0, 6000d2f6 <k_heap_free+0x82>
6000d2de:	23c2      	movs	r3, #194	; 0xc2
6000d2e0:	4a07      	ldr	r2, [pc, #28]	; (6000d300 <k_heap_free+0x8c>)
6000d2e2:	490b      	ldr	r1, [pc, #44]	; (6000d310 <k_heap_free+0x9c>)
6000d2e4:	4808      	ldr	r0, [pc, #32]	; (6000d308 <k_heap_free+0x94>)
6000d2e6:	f005 fcb8 	bl	60012c5a <assert_print>
6000d2ea:	4621      	mov	r1, r4
6000d2ec:	4809      	ldr	r0, [pc, #36]	; (6000d314 <k_heap_free+0xa0>)
6000d2ee:	f005 fcb4 	bl	60012c5a <assert_print>
6000d2f2:	21c2      	movs	r1, #194	; 0xc2
6000d2f4:	e7da      	b.n	6000d2ac <k_heap_free+0x38>
	__asm__ volatile(
6000d2f6:	f387 8811 	msr	BASEPRI, r7
6000d2fa:	f3bf 8f6f 	isb	sy
}
6000d2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000d300:	6001717c 	.word	0x6001717c
6000d304:	600171a9 	.word	0x600171a9
6000d308:	60016dfb 	.word	0x60016dfb
6000d30c:	600171be 	.word	0x600171be
6000d310:	600171d6 	.word	0x600171d6
6000d314:	600171ed 	.word	0x600171ed

6000d318 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
6000d318:	b5f0      	push	{r4, r5, r6, r7, lr}
6000d31a:	b085      	sub	sp, #20
6000d31c:	4604      	mov	r4, r0
6000d31e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
6000d320:	2d0f      	cmp	r5, #15
6000d322:	d12e      	bne.n	6000d382 <z_setup_new_thread+0x6a>
6000d324:	4822      	ldr	r0, [pc, #136]	; (6000d3b0 <z_setup_new_thread+0x98>)
6000d326:	4283      	cmp	r3, r0
6000d328:	d12f      	bne.n	6000d38a <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
6000d32a:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000d32e:	3207      	adds	r2, #7
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
6000d330:	73a5      	strb	r5, [r4, #14]
	thread_base->pended_on = NULL;
6000d332:	2600      	movs	r6, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000d334:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
6000d338:	f101 0240 	add.w	r2, r1, #64	; 0x40
	thread_base->pended_on = NULL;
6000d33c:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
6000d33e:	73e6      	strb	r6, [r4, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000d340:	f105 0740 	add.w	r7, r5, #64	; 0x40
	new_thread->stack_info.delta = delta;
6000d344:	66e6      	str	r6, [r4, #108]	; 0x6c
	stack_ptr = (char *)stack + stack_obj_size;
6000d346:	440f      	add	r7, r1
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
6000d348:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
6000d34c:	980e      	ldr	r0, [sp, #56]	; 0x38
	new_thread->stack_info.size = stack_buf_size;
6000d34e:	e9c4 2519 	strd	r2, r5, [r4, #100]	; 0x64
	thread_base->user_options = (uint8_t)options;
6000d352:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
6000d354:	2004      	movs	r0, #4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
6000d356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
6000d358:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
6000d35a:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
6000d35c:	e9c4 6606 	strd	r6, r6, [r4, #24]
6000d360:	9202      	str	r2, [sp, #8]
6000d362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
6000d364:	9201      	str	r2, [sp, #4]
6000d366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
6000d368:	9200      	str	r2, [sp, #0]
6000d36a:	463a      	mov	r2, r7
6000d36c:	f7fa ff2c 	bl	600081c8 <arch_new_thread>
	if (!_current) {
6000d370:	4b10      	ldr	r3, [pc, #64]	; (6000d3b4 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
6000d372:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
6000d374:	689b      	ldr	r3, [r3, #8]
6000d376:	b103      	cbz	r3, 6000d37a <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
6000d378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
6000d37a:	4638      	mov	r0, r7
6000d37c:	6723      	str	r3, [r4, #112]	; 0x70
6000d37e:	b005      	add	sp, #20
6000d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
6000d382:	f105 0010 	add.w	r0, r5, #16
6000d386:	281e      	cmp	r0, #30
6000d388:	d9cf      	bls.n	6000d32a <z_setup_new_thread+0x12>
6000d38a:	f44f 7306 	mov.w	r3, #536	; 0x218
6000d38e:	4a0a      	ldr	r2, [pc, #40]	; (6000d3b8 <z_setup_new_thread+0xa0>)
6000d390:	490a      	ldr	r1, [pc, #40]	; (6000d3bc <z_setup_new_thread+0xa4>)
6000d392:	480b      	ldr	r0, [pc, #44]	; (6000d3c0 <z_setup_new_thread+0xa8>)
6000d394:	f005 fc61 	bl	60012c5a <assert_print>
6000d398:	4629      	mov	r1, r5
6000d39a:	480a      	ldr	r0, [pc, #40]	; (6000d3c4 <z_setup_new_thread+0xac>)
6000d39c:	f06f 030f 	mvn.w	r3, #15
6000d3a0:	220e      	movs	r2, #14
6000d3a2:	f005 fc5a 	bl	60012c5a <assert_print>
6000d3a6:	f44f 7106 	mov.w	r1, #536	; 0x218
6000d3aa:	4803      	ldr	r0, [pc, #12]	; (6000d3b8 <z_setup_new_thread+0xa0>)
6000d3ac:	f005 fc4e 	bl	60012c4c <assert_post_action>
6000d3b0:	6000d581 	.word	0x6000d581
6000d3b4:	202041fc 	.word	0x202041fc
6000d3b8:	60019353 	.word	0x60019353
6000d3bc:	60019376 	.word	0x60019376
6000d3c0:	60016dfb 	.word	0x60016dfb
6000d3c4:	600193f6 	.word	0x600193f6

6000d3c8 <z_impl_k_thread_create>:
{
6000d3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
6000d3ca:	b087      	sub	sp, #28
6000d3cc:	4604      	mov	r4, r0
6000d3ce:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
6000d3d2:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
6000d3d6:	b175      	cbz	r5, 6000d3f6 <z_impl_k_thread_create+0x2e>
6000d3d8:	4919      	ldr	r1, [pc, #100]	; (6000d440 <z_impl_k_thread_create+0x78>)
6000d3da:	f240 2387 	movw	r3, #647	; 0x287
6000d3de:	4a19      	ldr	r2, [pc, #100]	; (6000d444 <z_impl_k_thread_create+0x7c>)
6000d3e0:	4819      	ldr	r0, [pc, #100]	; (6000d448 <z_impl_k_thread_create+0x80>)
6000d3e2:	f005 fc3a 	bl	60012c5a <assert_print>
6000d3e6:	4819      	ldr	r0, [pc, #100]	; (6000d44c <z_impl_k_thread_create+0x84>)
6000d3e8:	f005 fc37 	bl	60012c5a <assert_print>
6000d3ec:	f240 2187 	movw	r1, #647	; 0x287
6000d3f0:	4814      	ldr	r0, [pc, #80]	; (6000d444 <z_impl_k_thread_create+0x7c>)
6000d3f2:	f005 fc2b 	bl	60012c4c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
6000d3f6:	9505      	str	r5, [sp, #20]
6000d3f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
6000d3fa:	9504      	str	r5, [sp, #16]
6000d3fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
6000d3fe:	9503      	str	r5, [sp, #12]
6000d400:	9d0e      	ldr	r5, [sp, #56]	; 0x38
6000d402:	9502      	str	r5, [sp, #8]
6000d404:	9d0d      	ldr	r5, [sp, #52]	; 0x34
6000d406:	9501      	str	r5, [sp, #4]
6000d408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
6000d40a:	9500      	str	r5, [sp, #0]
6000d40c:	f7ff ff84 	bl	6000d318 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
6000d410:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
6000d414:	bf08      	it	eq
6000d416:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
6000d41a:	d005      	beq.n	6000d428 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000d41c:	ea56 0307 	orrs.w	r3, r6, r7
6000d420:	d105      	bne.n	6000d42e <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
6000d422:	4620      	mov	r0, r4
6000d424:	f001 f944 	bl	6000e6b0 <z_sched_start>
}
6000d428:	4620      	mov	r0, r4
6000d42a:	b007      	add	sp, #28
6000d42c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
6000d42e:	463a      	mov	r2, r7
6000d430:	4633      	mov	r3, r6
6000d432:	4907      	ldr	r1, [pc, #28]	; (6000d450 <z_impl_k_thread_create+0x88>)
6000d434:	f104 0018 	add.w	r0, r4, #24
6000d438:	f002 f9cc 	bl	6000f7d4 <z_add_timeout>
6000d43c:	e7f4      	b.n	6000d428 <z_impl_k_thread_create+0x60>
6000d43e:	bf00      	nop
6000d440:	60019427 	.word	0x60019427
6000d444:	60019353 	.word	0x60019353
6000d448:	60016dfb 	.word	0x60016dfb
6000d44c:	60019439 	.word	0x60019439
6000d450:	6000ef81 	.word	0x6000ef81

6000d454 <z_init_static_threads>:
{
6000d454:	b5f0      	push	{r4, r5, r6, r7, lr}
6000d456:	4c31      	ldr	r4, [pc, #196]	; (6000d51c <z_init_static_threads+0xc8>)
6000d458:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
6000d45a:	4d31      	ldr	r5, [pc, #196]	; (6000d520 <z_init_static_threads+0xcc>)
6000d45c:	42ac      	cmp	r4, r5
6000d45e:	4626      	mov	r6, r4
6000d460:	d92a      	bls.n	6000d4b8 <z_init_static_threads+0x64>
6000d462:	4930      	ldr	r1, [pc, #192]	; (6000d524 <z_init_static_threads+0xd0>)
6000d464:	f240 23ee 	movw	r3, #750	; 0x2ee
6000d468:	4a2f      	ldr	r2, [pc, #188]	; (6000d528 <z_init_static_threads+0xd4>)
6000d46a:	4830      	ldr	r0, [pc, #192]	; (6000d52c <z_init_static_threads+0xd8>)
6000d46c:	f005 fbf5 	bl	60012c5a <assert_print>
6000d470:	482f      	ldr	r0, [pc, #188]	; (6000d530 <z_init_static_threads+0xdc>)
6000d472:	f005 fbf2 	bl	60012c5a <assert_print>
6000d476:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
6000d47a:	482b      	ldr	r0, [pc, #172]	; (6000d528 <z_init_static_threads+0xd4>)
6000d47c:	f005 fbe6 	bl	60012c4c <assert_post_action>
		z_setup_new_thread(
6000d480:	f854 3c04 	ldr.w	r3, [r4, #-4]
6000d484:	9305      	str	r3, [sp, #20]
6000d486:	f854 3c10 	ldr.w	r3, [r4, #-16]
6000d48a:	9304      	str	r3, [sp, #16]
6000d48c:	f854 3c14 	ldr.w	r3, [r4, #-20]
6000d490:	9303      	str	r3, [sp, #12]
6000d492:	f854 3c18 	ldr.w	r3, [r4, #-24]
6000d496:	9302      	str	r3, [sp, #8]
6000d498:	f854 3c1c 	ldr.w	r3, [r4, #-28]
6000d49c:	9301      	str	r3, [sp, #4]
6000d49e:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000d4a2:	9300      	str	r3, [sp, #0]
6000d4a4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
6000d4a8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
6000d4ac:	f7ff ff34 	bl	6000d318 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
6000d4b0:	f854 3c30 	ldr.w	r3, [r4, #-48]
6000d4b4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
6000d4b6:	e7d1      	b.n	6000d45c <z_init_static_threads+0x8>
6000d4b8:	42ae      	cmp	r6, r5
6000d4ba:	f104 0430 	add.w	r4, r4, #48	; 0x30
6000d4be:	d3df      	bcc.n	6000d480 <z_init_static_threads+0x2c>
	_FOREACH_STATIC_THREAD(thread_data) {
6000d4c0:	4c16      	ldr	r4, [pc, #88]	; (6000d51c <z_init_static_threads+0xc8>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
6000d4c2:	260a      	movs	r6, #10
6000d4c4:	4f1b      	ldr	r7, [pc, #108]	; (6000d534 <z_init_static_threads+0xe0>)
	k_sched_lock();
6000d4c6:	f001 f945 	bl	6000e754 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
6000d4ca:	42ac      	cmp	r4, r5
6000d4cc:	d920      	bls.n	6000d510 <z_init_static_threads+0xbc>
6000d4ce:	4915      	ldr	r1, [pc, #84]	; (6000d524 <z_init_static_threads+0xd0>)
6000d4d0:	f240 330d 	movw	r3, #781	; 0x30d
6000d4d4:	4a14      	ldr	r2, [pc, #80]	; (6000d528 <z_init_static_threads+0xd4>)
6000d4d6:	4815      	ldr	r0, [pc, #84]	; (6000d52c <z_init_static_threads+0xd8>)
6000d4d8:	f005 fbbf 	bl	60012c5a <assert_print>
6000d4dc:	4814      	ldr	r0, [pc, #80]	; (6000d530 <z_init_static_threads+0xdc>)
6000d4de:	f005 fbbc 	bl	60012c5a <assert_print>
6000d4e2:	f240 310d 	movw	r1, #781	; 0x30d
6000d4e6:	e7c8      	b.n	6000d47a <z_init_static_threads+0x26>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
6000d4e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
6000d4ea:	1c53      	adds	r3, r2, #1
6000d4ec:	d009      	beq.n	6000d502 <z_init_static_threads+0xae>
					    K_MSEC(thread_data->init_delay));
6000d4ee:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
6000d4f2:	6820      	ldr	r0, [r4, #0]
6000d4f4:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000d4f8:	ea52 0103 	orrs.w	r1, r2, r3
6000d4fc:	d103      	bne.n	6000d506 <z_init_static_threads+0xb2>
	z_sched_start(thread);
6000d4fe:	f001 f8d7 	bl	6000e6b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
6000d502:	3430      	adds	r4, #48	; 0x30
6000d504:	e7e1      	b.n	6000d4ca <z_init_static_threads+0x76>
6000d506:	4639      	mov	r1, r7
6000d508:	3018      	adds	r0, #24
6000d50a:	f002 f963 	bl	6000f7d4 <z_add_timeout>
6000d50e:	e7f8      	b.n	6000d502 <z_init_static_threads+0xae>
6000d510:	d3ea      	bcc.n	6000d4e8 <z_init_static_threads+0x94>
}
6000d512:	b007      	add	sp, #28
6000d514:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
6000d518:	f001 b988 	b.w	6000e82c <k_sched_unlock>
6000d51c:	60014fa0 	.word	0x60014fa0
6000d520:	60014fd0 	.word	0x60014fd0
6000d524:	6001945e 	.word	0x6001945e
6000d528:	60019353 	.word	0x60019353
6000d52c:	60016dfb 	.word	0x60016dfb
6000d530:	6001727c 	.word	0x6001727c
6000d534:	6000ef81 	.word	0x6000ef81

6000d538 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
6000d538:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
6000d53a:	b138      	cbz	r0, 6000d54c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
6000d53c:	4b04      	ldr	r3, [pc, #16]	; (6000d550 <z_spin_lock_valid+0x18>)
6000d53e:	f000 0003 	and.w	r0, r0, #3
6000d542:	7d1b      	ldrb	r3, [r3, #20]
6000d544:	1ac0      	subs	r0, r0, r3
6000d546:	bf18      	it	ne
6000d548:	2001      	movne	r0, #1
6000d54a:	4770      	bx	lr
			return false;
		}
	}
	return true;
6000d54c:	2001      	movs	r0, #1
}
6000d54e:	4770      	bx	lr
6000d550:	202041fc 	.word	0x202041fc

6000d554 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
6000d554:	4a05      	ldr	r2, [pc, #20]	; (6000d56c <z_spin_unlock_valid+0x18>)
{
6000d556:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
6000d558:	7d11      	ldrb	r1, [r2, #20]
6000d55a:	6892      	ldr	r2, [r2, #8]
6000d55c:	430a      	orrs	r2, r1
6000d55e:	6801      	ldr	r1, [r0, #0]
6000d560:	2000      	movs	r0, #0
6000d562:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
6000d564:	bf04      	itt	eq
6000d566:	6018      	streq	r0, [r3, #0]
	return true;
6000d568:	2001      	moveq	r0, #1
}
6000d56a:	4770      	bx	lr
6000d56c:	202041fc 	.word	0x202041fc

6000d570 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
6000d570:	4b02      	ldr	r3, [pc, #8]	; (6000d57c <z_spin_lock_set_owner+0xc>)
6000d572:	7d1a      	ldrb	r2, [r3, #20]
6000d574:	689b      	ldr	r3, [r3, #8]
6000d576:	4313      	orrs	r3, r2
6000d578:	6003      	str	r3, [r0, #0]
}
6000d57a:	4770      	bx	lr
6000d57c:	202041fc 	.word	0x202041fc

6000d580 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
6000d580:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
6000d582:	4b0d      	ldr	r3, [pc, #52]	; (6000d5b8 <idle+0x38>)
6000d584:	689b      	ldr	r3, [r3, #8]
6000d586:	f993 300e 	ldrsb.w	r3, [r3, #14]
6000d58a:	2b00      	cmp	r3, #0
6000d58c:	da09      	bge.n	6000d5a2 <idle+0x22>
6000d58e:	490b      	ldr	r1, [pc, #44]	; (6000d5bc <idle+0x3c>)
6000d590:	2327      	movs	r3, #39	; 0x27
6000d592:	480b      	ldr	r0, [pc, #44]	; (6000d5c0 <idle+0x40>)
6000d594:	4a0b      	ldr	r2, [pc, #44]	; (6000d5c4 <idle+0x44>)
6000d596:	f005 fb60 	bl	60012c5a <assert_print>
6000d59a:	2127      	movs	r1, #39	; 0x27
6000d59c:	4809      	ldr	r0, [pc, #36]	; (6000d5c4 <idle+0x44>)
6000d59e:	f005 fb55 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000d5a2:	f04f 0210 	mov.w	r2, #16
6000d5a6:	f3ef 8311 	mrs	r3, BASEPRI
6000d5aa:	f382 8812 	msr	BASEPRI_MAX, r2
6000d5ae:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
6000d5b2:	f7fa fcd9 	bl	60007f68 <arch_cpu_idle>
6000d5b6:	e7f4      	b.n	6000d5a2 <idle+0x22>
6000d5b8:	202041fc 	.word	0x202041fc
6000d5bc:	600194ac 	.word	0x600194ac
6000d5c0:	60016dfb 	.word	0x60016dfb
6000d5c4:	6001948b 	.word	0x6001948b

6000d5c8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
6000d5c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
6000d5cc:	4604      	mov	r4, r0
6000d5ce:	4689      	mov	r9, r1
6000d5d0:	4690      	mov	r8, r2
6000d5d2:	461e      	mov	r6, r3
6000d5d4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000d5d8:	b17b      	cbz	r3, 6000d5fa <z_impl_k_msgq_put+0x32>
6000d5da:	ea52 0306 	orrs.w	r3, r2, r6
6000d5de:	d00c      	beq.n	6000d5fa <z_impl_k_msgq_put+0x32>
6000d5e0:	493e      	ldr	r1, [pc, #248]	; (6000d6dc <z_impl_k_msgq_put+0x114>)
6000d5e2:	2376      	movs	r3, #118	; 0x76
6000d5e4:	4a3e      	ldr	r2, [pc, #248]	; (6000d6e0 <z_impl_k_msgq_put+0x118>)
6000d5e6:	483f      	ldr	r0, [pc, #252]	; (6000d6e4 <z_impl_k_msgq_put+0x11c>)
6000d5e8:	f005 fb37 	bl	60012c5a <assert_print>
6000d5ec:	483e      	ldr	r0, [pc, #248]	; (6000d6e8 <z_impl_k_msgq_put+0x120>)
6000d5ee:	f005 fb34 	bl	60012c5a <assert_print>
6000d5f2:	2176      	movs	r1, #118	; 0x76
6000d5f4:	483a      	ldr	r0, [pc, #232]	; (6000d6e0 <z_impl_k_msgq_put+0x118>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d5f6:	f005 fb29 	bl	60012c4c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
6000d5fa:	f104 0508 	add.w	r5, r4, #8
6000d5fe:	f04f 0310 	mov.w	r3, #16
6000d602:	f3ef 8711 	mrs	r7, BASEPRI
6000d606:	f383 8812 	msr	BASEPRI_MAX, r3
6000d60a:	f3bf 8f6f 	isb	sy
6000d60e:	4628      	mov	r0, r5
6000d610:	f7ff ff92 	bl	6000d538 <z_spin_lock_valid>
6000d614:	b960      	cbnz	r0, 6000d630 <z_impl_k_msgq_put+0x68>
6000d616:	2394      	movs	r3, #148	; 0x94
6000d618:	4a34      	ldr	r2, [pc, #208]	; (6000d6ec <z_impl_k_msgq_put+0x124>)
6000d61a:	4935      	ldr	r1, [pc, #212]	; (6000d6f0 <z_impl_k_msgq_put+0x128>)
6000d61c:	4831      	ldr	r0, [pc, #196]	; (6000d6e4 <z_impl_k_msgq_put+0x11c>)
6000d61e:	f005 fb1c 	bl	60012c5a <assert_print>
6000d622:	4629      	mov	r1, r5
6000d624:	4833      	ldr	r0, [pc, #204]	; (6000d6f4 <z_impl_k_msgq_put+0x12c>)
6000d626:	f005 fb18 	bl	60012c5a <assert_print>
6000d62a:	2194      	movs	r1, #148	; 0x94
6000d62c:	482f      	ldr	r0, [pc, #188]	; (6000d6ec <z_impl_k_msgq_put+0x124>)
6000d62e:	e7e2      	b.n	6000d5f6 <z_impl_k_msgq_put+0x2e>
	z_spin_lock_set_owner(l);
6000d630:	4628      	mov	r0, r5
6000d632:	f7ff ff9d 	bl	6000d570 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
6000d636:	6a62      	ldr	r2, [r4, #36]	; 0x24
6000d638:	6923      	ldr	r3, [r4, #16]
6000d63a:	429a      	cmp	r2, r3
6000d63c:	d236      	bcs.n	6000d6ac <z_impl_k_msgq_put+0xe4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
6000d63e:	4620      	mov	r0, r4
6000d640:	f001 fd42 	bl	6000f0c8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
6000d644:	68e2      	ldr	r2, [r4, #12]
6000d646:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000d648:	4649      	mov	r1, r9
6000d64a:	b178      	cbz	r0, 6000d66c <z_impl_k_msgq_put+0xa4>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
6000d64c:	2400      	movs	r4, #0
6000d64e:	6940      	ldr	r0, [r0, #20]
6000d650:	f7f5 feb2 	bl	600033b8 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
6000d654:	4630      	mov	r0, r6
6000d656:	67b4      	str	r4, [r6, #120]	; 0x78
6000d658:	f000 ff5a 	bl	6000e510 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
6000d65c:	4639      	mov	r1, r7
6000d65e:	4628      	mov	r0, r5
6000d660:	f000 ffe4 	bl	6000e62c <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
6000d664:	4620      	mov	r0, r4
6000d666:	b003      	add	sp, #12
6000d668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
6000d66c:	6a20      	ldr	r0, [r4, #32]
6000d66e:	f7f5 fea3 	bl	600033b8 <memcpy>
			msgq->write_ptr += msgq->msg_size;
6000d672:	6a23      	ldr	r3, [r4, #32]
6000d674:	68e2      	ldr	r2, [r4, #12]
6000d676:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
6000d678:	69a2      	ldr	r2, [r4, #24]
6000d67a:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
6000d67c:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
6000d67e:	bf04      	itt	eq
6000d680:	6963      	ldreq	r3, [r4, #20]
6000d682:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
6000d684:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000d686:	3301      	adds	r3, #1
6000d688:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
6000d68a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d68c:	4628      	mov	r0, r5
6000d68e:	f7ff ff61 	bl	6000d554 <z_spin_unlock_valid>
6000d692:	b9f0      	cbnz	r0, 6000d6d2 <z_impl_k_msgq_put+0x10a>
6000d694:	23c2      	movs	r3, #194	; 0xc2
6000d696:	4a15      	ldr	r2, [pc, #84]	; (6000d6ec <z_impl_k_msgq_put+0x124>)
6000d698:	4917      	ldr	r1, [pc, #92]	; (6000d6f8 <z_impl_k_msgq_put+0x130>)
6000d69a:	4812      	ldr	r0, [pc, #72]	; (6000d6e4 <z_impl_k_msgq_put+0x11c>)
6000d69c:	f005 fadd 	bl	60012c5a <assert_print>
6000d6a0:	4629      	mov	r1, r5
6000d6a2:	4816      	ldr	r0, [pc, #88]	; (6000d6fc <z_impl_k_msgq_put+0x134>)
6000d6a4:	f005 fad9 	bl	60012c5a <assert_print>
6000d6a8:	21c2      	movs	r1, #194	; 0xc2
6000d6aa:	e7bf      	b.n	6000d62c <z_impl_k_msgq_put+0x64>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
6000d6ac:	ea58 0306 	orrs.w	r3, r8, r6
6000d6b0:	d00c      	beq.n	6000d6cc <z_impl_k_msgq_put+0x104>
		_current->base.swap_data = (void *) data;
6000d6b2:	4b13      	ldr	r3, [pc, #76]	; (6000d700 <z_impl_k_msgq_put+0x138>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000d6b4:	4622      	mov	r2, r4
6000d6b6:	4639      	mov	r1, r7
6000d6b8:	4628      	mov	r0, r5
		_current->base.swap_data = (void *) data;
6000d6ba:	689b      	ldr	r3, [r3, #8]
6000d6bc:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000d6c0:	e9cd 8600 	strd	r8, r6, [sp]
6000d6c4:	f001 fa80 	bl	6000ebc8 <z_pend_curr>
6000d6c8:	4604      	mov	r4, r0
		return result;
6000d6ca:	e7cb      	b.n	6000d664 <z_impl_k_msgq_put+0x9c>
		result = -ENOMSG;
6000d6cc:	f06f 0422 	mvn.w	r4, #34	; 0x22
6000d6d0:	e7dc      	b.n	6000d68c <z_impl_k_msgq_put+0xc4>
	__asm__ volatile(
6000d6d2:	f387 8811 	msr	BASEPRI, r7
6000d6d6:	f3bf 8f6f 	isb	sy
	return result;
6000d6da:	e7c3      	b.n	6000d664 <z_impl_k_msgq_put+0x9c>
6000d6dc:	6001930a 	.word	0x6001930a
6000d6e0:	600194d4 	.word	0x600194d4
6000d6e4:	60016dfb 	.word	0x60016dfb
6000d6e8:	60019350 	.word	0x60019350
6000d6ec:	6001717c 	.word	0x6001717c
6000d6f0:	600171a9 	.word	0x600171a9
6000d6f4:	600171be 	.word	0x600171be
6000d6f8:	600171d6 	.word	0x600171d6
6000d6fc:	600171ed 	.word	0x600171ed
6000d700:	202041fc 	.word	0x202041fc

6000d704 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
6000d704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
6000d708:	4604      	mov	r4, r0
6000d70a:	4688      	mov	r8, r1
6000d70c:	4617      	mov	r7, r2
6000d70e:	461d      	mov	r5, r3
6000d710:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000d714:	b17b      	cbz	r3, 6000d736 <z_impl_k_msgq_get+0x32>
6000d716:	ea52 0305 	orrs.w	r3, r2, r5
6000d71a:	d00c      	beq.n	6000d736 <z_impl_k_msgq_get+0x32>
6000d71c:	4945      	ldr	r1, [pc, #276]	; (6000d834 <z_impl_k_msgq_get+0x130>)
6000d71e:	23d0      	movs	r3, #208	; 0xd0
6000d720:	4a45      	ldr	r2, [pc, #276]	; (6000d838 <z_impl_k_msgq_get+0x134>)
6000d722:	4846      	ldr	r0, [pc, #280]	; (6000d83c <z_impl_k_msgq_get+0x138>)
6000d724:	f005 fa99 	bl	60012c5a <assert_print>
6000d728:	4845      	ldr	r0, [pc, #276]	; (6000d840 <z_impl_k_msgq_get+0x13c>)
6000d72a:	f005 fa96 	bl	60012c5a <assert_print>
6000d72e:	21d0      	movs	r1, #208	; 0xd0
6000d730:	4841      	ldr	r0, [pc, #260]	; (6000d838 <z_impl_k_msgq_get+0x134>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d732:	f005 fa8b 	bl	60012c4c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
6000d736:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
6000d73a:	f04f 0310 	mov.w	r3, #16
6000d73e:	f3ef 8911 	mrs	r9, BASEPRI
6000d742:	f383 8812 	msr	BASEPRI_MAX, r3
6000d746:	f3bf 8f6f 	isb	sy
6000d74a:	4630      	mov	r0, r6
6000d74c:	f7ff fef4 	bl	6000d538 <z_spin_lock_valid>
6000d750:	b960      	cbnz	r0, 6000d76c <z_impl_k_msgq_get+0x68>
6000d752:	2394      	movs	r3, #148	; 0x94
6000d754:	4a3b      	ldr	r2, [pc, #236]	; (6000d844 <z_impl_k_msgq_get+0x140>)
6000d756:	493c      	ldr	r1, [pc, #240]	; (6000d848 <z_impl_k_msgq_get+0x144>)
6000d758:	4838      	ldr	r0, [pc, #224]	; (6000d83c <z_impl_k_msgq_get+0x138>)
6000d75a:	f005 fa7e 	bl	60012c5a <assert_print>
6000d75e:	4631      	mov	r1, r6
6000d760:	483a      	ldr	r0, [pc, #232]	; (6000d84c <z_impl_k_msgq_get+0x148>)
6000d762:	f005 fa7a 	bl	60012c5a <assert_print>
6000d766:	2194      	movs	r1, #148	; 0x94
6000d768:	4836      	ldr	r0, [pc, #216]	; (6000d844 <z_impl_k_msgq_get+0x140>)
6000d76a:	e7e2      	b.n	6000d732 <z_impl_k_msgq_get+0x2e>
	z_spin_lock_set_owner(l);
6000d76c:	4630      	mov	r0, r6
6000d76e:	f7ff feff 	bl	6000d570 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
6000d772:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000d774:	2b00      	cmp	r3, #0
6000d776:	d035      	beq.n	6000d7e4 <z_impl_k_msgq_get+0xe0>
6000d778:	68e2      	ldr	r2, [r4, #12]
6000d77a:	4640      	mov	r0, r8
6000d77c:	69e1      	ldr	r1, [r4, #28]
6000d77e:	f7f5 fe1b 	bl	600033b8 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
6000d782:	69e3      	ldr	r3, [r4, #28]
6000d784:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
6000d786:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
6000d788:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
6000d78a:	69a2      	ldr	r2, [r4, #24]
6000d78c:	4293      	cmp	r3, r2
		msgq->read_ptr += msgq->msg_size;
6000d78e:	61e3      	str	r3, [r4, #28]
			msgq->read_ptr = msgq->buffer_start;
6000d790:	bf04      	itt	eq
6000d792:	6963      	ldreq	r3, [r4, #20]
6000d794:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
6000d796:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000d798:	3b01      	subs	r3, #1
6000d79a:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
6000d79c:	f001 fc94 	bl	6000f0c8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
6000d7a0:	4605      	mov	r5, r0
6000d7a2:	2800      	cmp	r0, #0
6000d7a4:	d030      	beq.n	6000d808 <z_impl_k_msgq_get+0x104>
6000d7a6:	6941      	ldr	r1, [r0, #20]
6000d7a8:	68e2      	ldr	r2, [r4, #12]
6000d7aa:	6a20      	ldr	r0, [r4, #32]
6000d7ac:	f7f5 fe04 	bl	600033b8 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
6000d7b0:	6a23      	ldr	r3, [r4, #32]
6000d7b2:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
6000d7b4:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
6000d7b6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
6000d7b8:	69a2      	ldr	r2, [r4, #24]
6000d7ba:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
6000d7bc:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
6000d7be:	bf04      	itt	eq
6000d7c0:	6963      	ldreq	r3, [r4, #20]
6000d7c2:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
6000d7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000d7c6:	3301      	adds	r3, #1
6000d7c8:	6263      	str	r3, [r4, #36]	; 0x24
6000d7ca:	2400      	movs	r4, #0
6000d7cc:	67ac      	str	r4, [r5, #120]	; 0x78
			z_reschedule(&msgq->lock, key);

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
6000d7ce:	4625      	mov	r5, r4
			z_ready_thread(pending_thread);
6000d7d0:	f000 fe9e 	bl	6000e510 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
6000d7d4:	4649      	mov	r1, r9
6000d7d6:	4630      	mov	r0, r6
6000d7d8:	f000 ff28 	bl	6000e62c <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
6000d7dc:	4628      	mov	r0, r5
6000d7de:	b003      	add	sp, #12
6000d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
6000d7e4:	ea57 0305 	orrs.w	r3, r7, r5
6000d7e8:	d00c      	beq.n	6000d804 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
6000d7ea:	4b19      	ldr	r3, [pc, #100]	; (6000d850 <z_impl_k_msgq_get+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000d7ec:	4622      	mov	r2, r4
6000d7ee:	4649      	mov	r1, r9
6000d7f0:	4630      	mov	r0, r6
		_current->base.swap_data = data;
6000d7f2:	689b      	ldr	r3, [r3, #8]
6000d7f4:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000d7f8:	e9cd 7500 	strd	r7, r5, [sp]
6000d7fc:	f001 f9e4 	bl	6000ebc8 <z_pend_curr>
6000d800:	4605      	mov	r5, r0
		return result;
6000d802:	e7eb      	b.n	6000d7dc <z_impl_k_msgq_get+0xd8>
		result = -ENOMSG;
6000d804:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d808:	4630      	mov	r0, r6
6000d80a:	f7ff fea3 	bl	6000d554 <z_spin_unlock_valid>
6000d80e:	b958      	cbnz	r0, 6000d828 <z_impl_k_msgq_get+0x124>
6000d810:	23c2      	movs	r3, #194	; 0xc2
6000d812:	4a0c      	ldr	r2, [pc, #48]	; (6000d844 <z_impl_k_msgq_get+0x140>)
6000d814:	490f      	ldr	r1, [pc, #60]	; (6000d854 <z_impl_k_msgq_get+0x150>)
6000d816:	4809      	ldr	r0, [pc, #36]	; (6000d83c <z_impl_k_msgq_get+0x138>)
6000d818:	f005 fa1f 	bl	60012c5a <assert_print>
6000d81c:	4631      	mov	r1, r6
6000d81e:	480e      	ldr	r0, [pc, #56]	; (6000d858 <z_impl_k_msgq_get+0x154>)
6000d820:	f005 fa1b 	bl	60012c5a <assert_print>
6000d824:	21c2      	movs	r1, #194	; 0xc2
6000d826:	e79f      	b.n	6000d768 <z_impl_k_msgq_get+0x64>
	__asm__ volatile(
6000d828:	f389 8811 	msr	BASEPRI, r9
6000d82c:	f3bf 8f6f 	isb	sy
	return result;
6000d830:	e7d4      	b.n	6000d7dc <z_impl_k_msgq_get+0xd8>
6000d832:	bf00      	nop
6000d834:	6001930a 	.word	0x6001930a
6000d838:	600194d4 	.word	0x600194d4
6000d83c:	60016dfb 	.word	0x60016dfb
6000d840:	60019350 	.word	0x60019350
6000d844:	6001717c 	.word	0x6001717c
6000d848:	600171a9 	.word	0x600171a9
6000d84c:	600171be 	.word	0x600171be
6000d850:	202041fc 	.word	0x202041fc
6000d854:	600171d6 	.word	0x600171d6
6000d858:	600171ed 	.word	0x600171ed

6000d85c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
6000d85c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
6000d860:	4604      	mov	r4, r0
6000d862:	4617      	mov	r7, r2
6000d864:	461e      	mov	r6, r3
6000d866:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
6000d86a:	b165      	cbz	r5, 6000d886 <z_impl_k_mutex_lock+0x2a>
6000d86c:	4958      	ldr	r1, [pc, #352]	; (6000d9d0 <z_impl_k_mutex_lock+0x174>)
6000d86e:	2365      	movs	r3, #101	; 0x65
6000d870:	4a58      	ldr	r2, [pc, #352]	; (6000d9d4 <z_impl_k_mutex_lock+0x178>)
6000d872:	4859      	ldr	r0, [pc, #356]	; (6000d9d8 <z_impl_k_mutex_lock+0x17c>)
6000d874:	f005 f9f1 	bl	60012c5a <assert_print>
6000d878:	4858      	ldr	r0, [pc, #352]	; (6000d9dc <z_impl_k_mutex_lock+0x180>)
6000d87a:	f005 f9ee 	bl	60012c5a <assert_print>
6000d87e:	2165      	movs	r1, #101	; 0x65
6000d880:	4854      	ldr	r0, [pc, #336]	; (6000d9d4 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d882:	f005 f9e3 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000d886:	f04f 0310 	mov.w	r3, #16
6000d88a:	f3ef 8811 	mrs	r8, BASEPRI
6000d88e:	f383 8812 	msr	BASEPRI_MAX, r3
6000d892:	f3bf 8f6f 	isb	sy
6000d896:	4852      	ldr	r0, [pc, #328]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d898:	f7ff fe4e 	bl	6000d538 <z_spin_lock_valid>
6000d89c:	b960      	cbnz	r0, 6000d8b8 <z_impl_k_mutex_lock+0x5c>
6000d89e:	2394      	movs	r3, #148	; 0x94
6000d8a0:	4a50      	ldr	r2, [pc, #320]	; (6000d9e4 <z_impl_k_mutex_lock+0x188>)
6000d8a2:	4951      	ldr	r1, [pc, #324]	; (6000d9e8 <z_impl_k_mutex_lock+0x18c>)
6000d8a4:	484c      	ldr	r0, [pc, #304]	; (6000d9d8 <z_impl_k_mutex_lock+0x17c>)
6000d8a6:	f005 f9d8 	bl	60012c5a <assert_print>
6000d8aa:	494d      	ldr	r1, [pc, #308]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d8ac:	484f      	ldr	r0, [pc, #316]	; (6000d9ec <z_impl_k_mutex_lock+0x190>)
6000d8ae:	f005 f9d4 	bl	60012c5a <assert_print>
6000d8b2:	2194      	movs	r1, #148	; 0x94
6000d8b4:	484b      	ldr	r0, [pc, #300]	; (6000d9e4 <z_impl_k_mutex_lock+0x188>)
6000d8b6:	e7e4      	b.n	6000d882 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
6000d8b8:	4849      	ldr	r0, [pc, #292]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d8ba:	f7ff fe59 	bl	6000d570 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
6000d8be:	68e3      	ldr	r3, [r4, #12]
6000d8c0:	4a4b      	ldr	r2, [pc, #300]	; (6000d9f0 <z_impl_k_mutex_lock+0x194>)
6000d8c2:	b19b      	cbz	r3, 6000d8ec <z_impl_k_mutex_lock+0x90>
6000d8c4:	68a0      	ldr	r0, [r4, #8]
6000d8c6:	6891      	ldr	r1, [r2, #8]
6000d8c8:	4288      	cmp	r0, r1
6000d8ca:	d027      	beq.n	6000d91c <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
6000d8cc:	ea57 0306 	orrs.w	r3, r7, r6
6000d8d0:	d12c      	bne.n	6000d92c <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d8d2:	4843      	ldr	r0, [pc, #268]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d8d4:	f7ff fe3e 	bl	6000d554 <z_spin_unlock_valid>
6000d8d8:	b1a0      	cbz	r0, 6000d904 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
6000d8da:	f388 8811 	msr	BASEPRI, r8
6000d8de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
6000d8e2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
6000d8e6:	b002      	add	sp, #8
6000d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
6000d8ec:	6891      	ldr	r1, [r2, #8]
6000d8ee:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
6000d8f2:	3301      	adds	r3, #1
6000d8f4:	483a      	ldr	r0, [pc, #232]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
6000d8f6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
6000d8f8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
6000d8fa:	6893      	ldr	r3, [r2, #8]
6000d8fc:	60a3      	str	r3, [r4, #8]
6000d8fe:	f7ff fe29 	bl	6000d554 <z_spin_unlock_valid>
6000d902:	b968      	cbnz	r0, 6000d920 <z_impl_k_mutex_lock+0xc4>
6000d904:	23c2      	movs	r3, #194	; 0xc2
6000d906:	4a37      	ldr	r2, [pc, #220]	; (6000d9e4 <z_impl_k_mutex_lock+0x188>)
6000d908:	493a      	ldr	r1, [pc, #232]	; (6000d9f4 <z_impl_k_mutex_lock+0x198>)
6000d90a:	4833      	ldr	r0, [pc, #204]	; (6000d9d8 <z_impl_k_mutex_lock+0x17c>)
6000d90c:	f005 f9a5 	bl	60012c5a <assert_print>
6000d910:	4933      	ldr	r1, [pc, #204]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d912:	4839      	ldr	r0, [pc, #228]	; (6000d9f8 <z_impl_k_mutex_lock+0x19c>)
6000d914:	f005 f9a1 	bl	60012c5a <assert_print>
6000d918:	21c2      	movs	r1, #194	; 0xc2
6000d91a:	e7cb      	b.n	6000d8b4 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
6000d91c:	6921      	ldr	r1, [r4, #16]
6000d91e:	e7e8      	b.n	6000d8f2 <z_impl_k_mutex_lock+0x96>
6000d920:	f388 8811 	msr	BASEPRI, r8
6000d924:	f3bf 8f6f 	isb	sy
		return 0;
6000d928:	2000      	movs	r0, #0
6000d92a:	e7dc      	b.n	6000d8e6 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
6000d92c:	f991 100e 	ldrsb.w	r1, [r1, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
6000d930:	f06f 027e 	mvn.w	r2, #126	; 0x7e
6000d934:	f990 300e 	ldrsb.w	r3, [r0, #14]
6000d938:	4299      	cmp	r1, r3
6000d93a:	bfa8      	it	ge
6000d93c:	4619      	movge	r1, r3
6000d93e:	4291      	cmp	r1, r2
6000d940:	bfb8      	it	lt
6000d942:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
6000d944:	428b      	cmp	r3, r1
6000d946:	dd02      	ble.n	6000d94e <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
6000d948:	f006 fe74 	bl	60014634 <adjust_owner_prio.isra.0>
6000d94c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
6000d94e:	4622      	mov	r2, r4
6000d950:	4641      	mov	r1, r8
6000d952:	4823      	ldr	r0, [pc, #140]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d954:	e9cd 7600 	strd	r7, r6, [sp]
6000d958:	f001 f936 	bl	6000ebc8 <z_pend_curr>
	if (got_mutex == 0) {
6000d95c:	2800      	cmp	r0, #0
6000d95e:	d0e3      	beq.n	6000d928 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
6000d960:	f04f 0310 	mov.w	r3, #16
6000d964:	f3ef 8611 	mrs	r6, BASEPRI
6000d968:	f383 8812 	msr	BASEPRI_MAX, r3
6000d96c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d970:	481b      	ldr	r0, [pc, #108]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d972:	f7ff fde1 	bl	6000d538 <z_spin_lock_valid>
6000d976:	2800      	cmp	r0, #0
6000d978:	d091      	beq.n	6000d89e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
6000d97a:	4819      	ldr	r0, [pc, #100]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d97c:	f7ff fdf8 	bl	6000d570 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
6000d980:	68a0      	ldr	r0, [r4, #8]
6000d982:	b1c0      	cbz	r0, 6000d9b6 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
6000d984:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
6000d986:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000d988:	429c      	cmp	r4, r3
6000d98a:	d00a      	beq.n	6000d9a2 <z_impl_k_mutex_lock+0x146>
6000d98c:	b14b      	cbz	r3, 6000d9a2 <z_impl_k_mutex_lock+0x146>
6000d98e:	f993 300e 	ldrsb.w	r3, [r3, #14]
6000d992:	4299      	cmp	r1, r3
6000d994:	bfa8      	it	ge
6000d996:	4619      	movge	r1, r3
6000d998:	f06f 037e 	mvn.w	r3, #126	; 0x7e
6000d99c:	4299      	cmp	r1, r3
6000d99e:	bfb8      	it	lt
6000d9a0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
6000d9a2:	f006 fe47 	bl	60014634 <adjust_owner_prio.isra.0>
6000d9a6:	b130      	cbz	r0, 6000d9b6 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
6000d9a8:	4631      	mov	r1, r6
6000d9aa:	480d      	ldr	r0, [pc, #52]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d9ac:	f000 fe3e 	bl	6000e62c <z_reschedule>
	return -EAGAIN;
6000d9b0:	f06f 000a 	mvn.w	r0, #10
6000d9b4:	e797      	b.n	6000d8e6 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
6000d9b6:	2d00      	cmp	r5, #0
6000d9b8:	d1f6      	bne.n	6000d9a8 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d9ba:	4809      	ldr	r0, [pc, #36]	; (6000d9e0 <z_impl_k_mutex_lock+0x184>)
6000d9bc:	f7ff fdca 	bl	6000d554 <z_spin_unlock_valid>
6000d9c0:	2800      	cmp	r0, #0
6000d9c2:	d09f      	beq.n	6000d904 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
6000d9c4:	f386 8811 	msr	BASEPRI, r6
6000d9c8:	f3bf 8f6f 	isb	sy
6000d9cc:	e7f0      	b.n	6000d9b0 <z_impl_k_mutex_lock+0x154>
6000d9ce:	bf00      	nop
6000d9d0:	60019427 	.word	0x60019427
6000d9d4:	600194f6 	.word	0x600194f6
6000d9d8:	60016dfb 	.word	0x60016dfb
6000d9dc:	60019518 	.word	0x60019518
6000d9e0:	20204220 	.word	0x20204220
6000d9e4:	6001717c 	.word	0x6001717c
6000d9e8:	600171a9 	.word	0x600171a9
6000d9ec:	600171be 	.word	0x600171be
6000d9f0:	202041fc 	.word	0x202041fc
6000d9f4:	600171d6 	.word	0x600171d6
6000d9f8:	600171ed 	.word	0x600171ed

6000d9fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
6000d9fc:	b570      	push	{r4, r5, r6, lr}
6000d9fe:	4604      	mov	r4, r0
6000da00:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
6000da04:	b166      	cbz	r6, 6000da20 <z_impl_k_mutex_unlock+0x24>
6000da06:	4938      	ldr	r1, [pc, #224]	; (6000dae8 <z_impl_k_mutex_unlock+0xec>)
6000da08:	23cd      	movs	r3, #205	; 0xcd
6000da0a:	4a38      	ldr	r2, [pc, #224]	; (6000daec <z_impl_k_mutex_unlock+0xf0>)
6000da0c:	4838      	ldr	r0, [pc, #224]	; (6000daf0 <z_impl_k_mutex_unlock+0xf4>)
6000da0e:	f005 f924 	bl	60012c5a <assert_print>
6000da12:	4838      	ldr	r0, [pc, #224]	; (6000daf4 <z_impl_k_mutex_unlock+0xf8>)
6000da14:	f005 f921 	bl	60012c5a <assert_print>
6000da18:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
6000da1a:	4834      	ldr	r0, [pc, #208]	; (6000daec <z_impl_k_mutex_unlock+0xf0>)
6000da1c:	f005 f916 	bl	60012c4c <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
6000da20:	6883      	ldr	r3, [r0, #8]
6000da22:	2b00      	cmp	r3, #0
6000da24:	d059      	beq.n	6000dada <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
6000da26:	4a34      	ldr	r2, [pc, #208]	; (6000daf8 <z_impl_k_mutex_unlock+0xfc>)
6000da28:	6892      	ldr	r2, [r2, #8]
6000da2a:	4293      	cmp	r3, r2
6000da2c:	d158      	bne.n	6000dae0 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
6000da2e:	68c3      	ldr	r3, [r0, #12]
6000da30:	b93b      	cbnz	r3, 6000da42 <z_impl_k_mutex_unlock+0x46>
6000da32:	4932      	ldr	r1, [pc, #200]	; (6000dafc <z_impl_k_mutex_unlock+0x100>)
6000da34:	23e5      	movs	r3, #229	; 0xe5
6000da36:	4a2d      	ldr	r2, [pc, #180]	; (6000daec <z_impl_k_mutex_unlock+0xf0>)
6000da38:	482d      	ldr	r0, [pc, #180]	; (6000daf0 <z_impl_k_mutex_unlock+0xf4>)
6000da3a:	f005 f90e 	bl	60012c5a <assert_print>
6000da3e:	21e5      	movs	r1, #229	; 0xe5
6000da40:	e7eb      	b.n	6000da1a <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
6000da42:	2b01      	cmp	r3, #1
6000da44:	d003      	beq.n	6000da4e <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
6000da46:	3b01      	subs	r3, #1
6000da48:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
6000da4a:	2000      	movs	r0, #0
}
6000da4c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
6000da4e:	f04f 0310 	mov.w	r3, #16
6000da52:	f3ef 8511 	mrs	r5, BASEPRI
6000da56:	f383 8812 	msr	BASEPRI_MAX, r3
6000da5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000da5e:	4828      	ldr	r0, [pc, #160]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000da60:	f7ff fd6a 	bl	6000d538 <z_spin_lock_valid>
6000da64:	b960      	cbnz	r0, 6000da80 <z_impl_k_mutex_unlock+0x84>
6000da66:	2394      	movs	r3, #148	; 0x94
6000da68:	4a26      	ldr	r2, [pc, #152]	; (6000db04 <z_impl_k_mutex_unlock+0x108>)
6000da6a:	4927      	ldr	r1, [pc, #156]	; (6000db08 <z_impl_k_mutex_unlock+0x10c>)
6000da6c:	4820      	ldr	r0, [pc, #128]	; (6000daf0 <z_impl_k_mutex_unlock+0xf4>)
6000da6e:	f005 f8f4 	bl	60012c5a <assert_print>
6000da72:	4923      	ldr	r1, [pc, #140]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000da74:	4825      	ldr	r0, [pc, #148]	; (6000db0c <z_impl_k_mutex_unlock+0x110>)
6000da76:	f005 f8f0 	bl	60012c5a <assert_print>
6000da7a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000da7c:	4821      	ldr	r0, [pc, #132]	; (6000db04 <z_impl_k_mutex_unlock+0x108>)
6000da7e:	e7cd      	b.n	6000da1c <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
6000da80:	481f      	ldr	r0, [pc, #124]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000da82:	f7ff fd75 	bl	6000d570 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
6000da86:	6921      	ldr	r1, [r4, #16]
6000da88:	68a0      	ldr	r0, [r4, #8]
6000da8a:	f006 fdd3 	bl	60014634 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
6000da8e:	4620      	mov	r0, r4
6000da90:	f001 fb1a 	bl	6000f0c8 <z_unpend_first_thread>
	mutex->owner = new_owner;
6000da94:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
6000da96:	b150      	cbz	r0, 6000daae <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
6000da98:	f990 200e 	ldrsb.w	r2, [r0, #14]
6000da9c:	6122      	str	r2, [r4, #16]
6000da9e:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
6000daa0:	f000 fd36 	bl	6000e510 <z_ready_thread>
		z_reschedule(&lock, key);
6000daa4:	4629      	mov	r1, r5
6000daa6:	4816      	ldr	r0, [pc, #88]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000daa8:	f000 fdc0 	bl	6000e62c <z_reschedule>
6000daac:	e7cd      	b.n	6000da4a <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
6000daae:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000dab0:	4813      	ldr	r0, [pc, #76]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000dab2:	f7ff fd4f 	bl	6000d554 <z_spin_unlock_valid>
6000dab6:	b958      	cbnz	r0, 6000dad0 <z_impl_k_mutex_unlock+0xd4>
6000dab8:	23c2      	movs	r3, #194	; 0xc2
6000daba:	4a12      	ldr	r2, [pc, #72]	; (6000db04 <z_impl_k_mutex_unlock+0x108>)
6000dabc:	4914      	ldr	r1, [pc, #80]	; (6000db10 <z_impl_k_mutex_unlock+0x114>)
6000dabe:	480c      	ldr	r0, [pc, #48]	; (6000daf0 <z_impl_k_mutex_unlock+0xf4>)
6000dac0:	f005 f8cb 	bl	60012c5a <assert_print>
6000dac4:	490e      	ldr	r1, [pc, #56]	; (6000db00 <z_impl_k_mutex_unlock+0x104>)
6000dac6:	4813      	ldr	r0, [pc, #76]	; (6000db14 <z_impl_k_mutex_unlock+0x118>)
6000dac8:	f005 f8c7 	bl	60012c5a <assert_print>
6000dacc:	21c2      	movs	r1, #194	; 0xc2
6000dace:	e7d5      	b.n	6000da7c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
6000dad0:	f385 8811 	msr	BASEPRI, r5
6000dad4:	f3bf 8f6f 	isb	sy
6000dad8:	e7b7      	b.n	6000da4a <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
6000dada:	f06f 0015 	mvn.w	r0, #21
6000dade:	e7b5      	b.n	6000da4c <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
6000dae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
6000dae4:	e7b2      	b.n	6000da4c <z_impl_k_mutex_unlock+0x50>
6000dae6:	bf00      	nop
6000dae8:	60019427 	.word	0x60019427
6000daec:	600194f6 	.word	0x600194f6
6000daf0:	60016dfb 	.word	0x60016dfb
6000daf4:	60019518 	.word	0x60019518
6000daf8:	202041fc 	.word	0x202041fc
6000dafc:	6001953d 	.word	0x6001953d
6000db00:	20204220 	.word	0x20204220
6000db04:	6001717c 	.word	0x6001717c
6000db08:	600171a9 	.word	0x600171a9
6000db0c:	600171be 	.word	0x600171be
6000db10:	600171d6 	.word	0x600171d6
6000db14:	600171ed 	.word	0x600171ed

6000db18 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
6000db18:	b538      	push	{r3, r4, r5, lr}
6000db1a:	4604      	mov	r4, r0
	__asm__ volatile(
6000db1c:	f04f 0310 	mov.w	r3, #16
6000db20:	f3ef 8511 	mrs	r5, BASEPRI
6000db24:	f383 8812 	msr	BASEPRI_MAX, r3
6000db28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000db2c:	4814      	ldr	r0, [pc, #80]	; (6000db80 <z_impl_k_sem_give+0x68>)
6000db2e:	f7ff fd03 	bl	6000d538 <z_spin_lock_valid>
6000db32:	b968      	cbnz	r0, 6000db50 <z_impl_k_sem_give+0x38>
6000db34:	2394      	movs	r3, #148	; 0x94
6000db36:	4a13      	ldr	r2, [pc, #76]	; (6000db84 <z_impl_k_sem_give+0x6c>)
6000db38:	4913      	ldr	r1, [pc, #76]	; (6000db88 <z_impl_k_sem_give+0x70>)
6000db3a:	4814      	ldr	r0, [pc, #80]	; (6000db8c <z_impl_k_sem_give+0x74>)
6000db3c:	f005 f88d 	bl	60012c5a <assert_print>
6000db40:	490f      	ldr	r1, [pc, #60]	; (6000db80 <z_impl_k_sem_give+0x68>)
6000db42:	4813      	ldr	r0, [pc, #76]	; (6000db90 <z_impl_k_sem_give+0x78>)
6000db44:	f005 f889 	bl	60012c5a <assert_print>
6000db48:	2194      	movs	r1, #148	; 0x94
6000db4a:	480e      	ldr	r0, [pc, #56]	; (6000db84 <z_impl_k_sem_give+0x6c>)
6000db4c:	f005 f87e 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000db50:	480b      	ldr	r0, [pc, #44]	; (6000db80 <z_impl_k_sem_give+0x68>)
6000db52:	f7ff fd0d 	bl	6000d570 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
6000db56:	4620      	mov	r0, r4
6000db58:	f001 fab6 	bl	6000f0c8 <z_unpend_first_thread>

	if (thread != NULL) {
6000db5c:	b148      	cbz	r0, 6000db72 <z_impl_k_sem_give+0x5a>
6000db5e:	2200      	movs	r2, #0
6000db60:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
6000db62:	f000 fcd5 	bl	6000e510 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
6000db66:	4629      	mov	r1, r5
6000db68:	4805      	ldr	r0, [pc, #20]	; (6000db80 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
6000db6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
6000db6e:	f000 bd5d 	b.w	6000e62c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
6000db72:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
6000db76:	429a      	cmp	r2, r3
6000db78:	bf18      	it	ne
6000db7a:	3301      	addne	r3, #1
6000db7c:	60a3      	str	r3, [r4, #8]
}
6000db7e:	e7f2      	b.n	6000db66 <z_impl_k_sem_give+0x4e>
6000db80:	20204224 	.word	0x20204224
6000db84:	6001717c 	.word	0x6001717c
6000db88:	600171a9 	.word	0x600171a9
6000db8c:	60016dfb 	.word	0x60016dfb
6000db90:	600171be 	.word	0x600171be

6000db94 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
6000db94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
6000db96:	4604      	mov	r4, r0
6000db98:	4616      	mov	r6, r2
6000db9a:	461d      	mov	r5, r3
6000db9c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
6000dba0:	b17b      	cbz	r3, 6000dbc2 <z_impl_k_sem_take+0x2e>
6000dba2:	ea52 0305 	orrs.w	r3, r2, r5
6000dba6:	d00c      	beq.n	6000dbc2 <z_impl_k_sem_take+0x2e>
6000dba8:	492d      	ldr	r1, [pc, #180]	; (6000dc60 <z_impl_k_sem_take+0xcc>)
6000dbaa:	2379      	movs	r3, #121	; 0x79
6000dbac:	4a2d      	ldr	r2, [pc, #180]	; (6000dc64 <z_impl_k_sem_take+0xd0>)
6000dbae:	482e      	ldr	r0, [pc, #184]	; (6000dc68 <z_impl_k_sem_take+0xd4>)
6000dbb0:	f005 f853 	bl	60012c5a <assert_print>
6000dbb4:	482d      	ldr	r0, [pc, #180]	; (6000dc6c <z_impl_k_sem_take+0xd8>)
6000dbb6:	f005 f850 	bl	60012c5a <assert_print>
6000dbba:	2179      	movs	r1, #121	; 0x79
6000dbbc:	4829      	ldr	r0, [pc, #164]	; (6000dc64 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000dbbe:	f005 f845 	bl	60012c4c <assert_post_action>
6000dbc2:	f04f 0310 	mov.w	r3, #16
6000dbc6:	f3ef 8711 	mrs	r7, BASEPRI
6000dbca:	f383 8812 	msr	BASEPRI_MAX, r3
6000dbce:	f3bf 8f6f 	isb	sy
6000dbd2:	4827      	ldr	r0, [pc, #156]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dbd4:	f7ff fcb0 	bl	6000d538 <z_spin_lock_valid>
6000dbd8:	b960      	cbnz	r0, 6000dbf4 <z_impl_k_sem_take+0x60>
6000dbda:	2394      	movs	r3, #148	; 0x94
6000dbdc:	4a25      	ldr	r2, [pc, #148]	; (6000dc74 <z_impl_k_sem_take+0xe0>)
6000dbde:	4926      	ldr	r1, [pc, #152]	; (6000dc78 <z_impl_k_sem_take+0xe4>)
6000dbe0:	4821      	ldr	r0, [pc, #132]	; (6000dc68 <z_impl_k_sem_take+0xd4>)
6000dbe2:	f005 f83a 	bl	60012c5a <assert_print>
6000dbe6:	4922      	ldr	r1, [pc, #136]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dbe8:	4824      	ldr	r0, [pc, #144]	; (6000dc7c <z_impl_k_sem_take+0xe8>)
6000dbea:	f005 f836 	bl	60012c5a <assert_print>
6000dbee:	2194      	movs	r1, #148	; 0x94
6000dbf0:	4820      	ldr	r0, [pc, #128]	; (6000dc74 <z_impl_k_sem_take+0xe0>)
6000dbf2:	e7e4      	b.n	6000dbbe <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
6000dbf4:	481e      	ldr	r0, [pc, #120]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dbf6:	f7ff fcbb 	bl	6000d570 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
6000dbfa:	68a3      	ldr	r3, [r4, #8]
6000dbfc:	b1c3      	cbz	r3, 6000dc30 <z_impl_k_sem_take+0x9c>
		sem->count--;
6000dbfe:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000dc00:	481b      	ldr	r0, [pc, #108]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dc02:	60a3      	str	r3, [r4, #8]
6000dc04:	f7ff fca6 	bl	6000d554 <z_spin_unlock_valid>
6000dc08:	b958      	cbnz	r0, 6000dc22 <z_impl_k_sem_take+0x8e>
6000dc0a:	23c2      	movs	r3, #194	; 0xc2
6000dc0c:	4a19      	ldr	r2, [pc, #100]	; (6000dc74 <z_impl_k_sem_take+0xe0>)
6000dc0e:	491c      	ldr	r1, [pc, #112]	; (6000dc80 <z_impl_k_sem_take+0xec>)
6000dc10:	4815      	ldr	r0, [pc, #84]	; (6000dc68 <z_impl_k_sem_take+0xd4>)
6000dc12:	f005 f822 	bl	60012c5a <assert_print>
6000dc16:	4916      	ldr	r1, [pc, #88]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dc18:	481a      	ldr	r0, [pc, #104]	; (6000dc84 <z_impl_k_sem_take+0xf0>)
6000dc1a:	f005 f81e 	bl	60012c5a <assert_print>
6000dc1e:	21c2      	movs	r1, #194	; 0xc2
6000dc20:	e7e6      	b.n	6000dbf0 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
6000dc22:	f387 8811 	msr	BASEPRI, r7
6000dc26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
6000dc2a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
6000dc2c:	b003      	add	sp, #12
6000dc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
6000dc30:	ea56 0305 	orrs.w	r3, r6, r5
6000dc34:	d10b      	bne.n	6000dc4e <z_impl_k_sem_take+0xba>
6000dc36:	480e      	ldr	r0, [pc, #56]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dc38:	f7ff fc8c 	bl	6000d554 <z_spin_unlock_valid>
6000dc3c:	2800      	cmp	r0, #0
6000dc3e:	d0e4      	beq.n	6000dc0a <z_impl_k_sem_take+0x76>
6000dc40:	f387 8811 	msr	BASEPRI, r7
6000dc44:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
6000dc48:	f06f 000f 	mvn.w	r0, #15
6000dc4c:	e7ee      	b.n	6000dc2c <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
6000dc4e:	4622      	mov	r2, r4
6000dc50:	4639      	mov	r1, r7
6000dc52:	4807      	ldr	r0, [pc, #28]	; (6000dc70 <z_impl_k_sem_take+0xdc>)
6000dc54:	e9cd 6500 	strd	r6, r5, [sp]
6000dc58:	f000 ffb6 	bl	6000ebc8 <z_pend_curr>
	return ret;
6000dc5c:	e7e6      	b.n	6000dc2c <z_impl_k_sem_take+0x98>
6000dc5e:	bf00      	nop
6000dc60:	60019574 	.word	0x60019574
6000dc64:	60019554 	.word	0x60019554
6000dc68:	60016dfb 	.word	0x60016dfb
6000dc6c:	60019350 	.word	0x60019350
6000dc70:	20204224 	.word	0x20204224
6000dc74:	6001717c 	.word	0x6001717c
6000dc78:	600171a9 	.word	0x600171a9
6000dc7c:	600171be 	.word	0x600171be
6000dc80:	600171d6 	.word	0x600171d6
6000dc84:	600171ed 	.word	0x600171ed

6000dc88 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
6000dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000dc8c:	4604      	mov	r4, r0
6000dc8e:	b085      	sub	sp, #20
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000dc90:	4e6d      	ldr	r6, [pc, #436]	; (6000de48 <work_queue_main+0x1c0>)
	return list->head;
6000dc92:	4f6e      	ldr	r7, [pc, #440]	; (6000de4c <work_queue_main+0x1c4>)
	__asm__ volatile(
6000dc94:	f04f 0310 	mov.w	r3, #16
6000dc98:	f3ef 8811 	mrs	r8, BASEPRI
6000dc9c:	f383 8812 	msr	BASEPRI_MAX, r3
6000dca0:	f3bf 8f6f 	isb	sy
6000dca4:	4630      	mov	r0, r6
6000dca6:	f7ff fc47 	bl	6000d538 <z_spin_lock_valid>
6000dcaa:	b968      	cbnz	r0, 6000dcc8 <work_queue_main+0x40>
6000dcac:	2394      	movs	r3, #148	; 0x94
6000dcae:	4a68      	ldr	r2, [pc, #416]	; (6000de50 <work_queue_main+0x1c8>)
6000dcb0:	4968      	ldr	r1, [pc, #416]	; (6000de54 <work_queue_main+0x1cc>)
6000dcb2:	4869      	ldr	r0, [pc, #420]	; (6000de58 <work_queue_main+0x1d0>)
6000dcb4:	f004 ffd1 	bl	60012c5a <assert_print>
6000dcb8:	4963      	ldr	r1, [pc, #396]	; (6000de48 <work_queue_main+0x1c0>)
6000dcba:	4868      	ldr	r0, [pc, #416]	; (6000de5c <work_queue_main+0x1d4>)
6000dcbc:	f004 ffcd 	bl	60012c5a <assert_print>
6000dcc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000dcc2:	4863      	ldr	r0, [pc, #396]	; (6000de50 <work_queue_main+0x1c8>)
6000dcc4:	f004 ffc2 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000dcc8:	4630      	mov	r0, r6
6000dcca:	f7ff fc51 	bl	6000d570 <z_spin_lock_set_owner>
6000dcce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
6000dcd2:	b9ad      	cbnz	r5, 6000dd00 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
6000dcd4:	2102      	movs	r1, #2
6000dcd6:	f104 0098 	add.w	r0, r4, #152	; 0x98
6000dcda:	f006 fcc6 	bl	6001466a <flag_test_and_clear>
6000dcde:	2800      	cmp	r0, #0
6000dce0:	d135      	bne.n	6000dd4e <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
6000dce2:	2300      	movs	r3, #0
6000dce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000dce8:	4641      	mov	r1, r8
6000dcea:	4630      	mov	r0, r6
6000dcec:	9302      	str	r3, [sp, #8]
6000dcee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000dcf2:	e9cd 2300 	strd	r2, r3, [sp]
6000dcf6:	f104 0288 	add.w	r2, r4, #136	; 0x88
6000dcfa:	f001 fcd9 	bl	6000f6b0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
6000dcfe:	e7c9      	b.n	6000dc94 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
6000dd00:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000dd04:	4630      	mov	r0, r6
	return node->next;
6000dd06:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
6000dd08:	4295      	cmp	r5, r2
	list->head = node;
6000dd0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
6000dd0e:	bf08      	it	eq
6000dd10:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
6000dd14:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
6000dd18:	f043 0302 	orr.w	r3, r3, #2
6000dd1c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
6000dd20:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
6000dd22:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
6000dd26:	f023 0304 	bic.w	r3, r3, #4
6000dd2a:	f043 0301 	orr.w	r3, r3, #1
6000dd2e:	60eb      	str	r3, [r5, #12]
6000dd30:	f7ff fc10 	bl	6000d554 <z_spin_unlock_valid>
6000dd34:	b9a8      	cbnz	r0, 6000dd62 <work_queue_main+0xda>
6000dd36:	23c2      	movs	r3, #194	; 0xc2
6000dd38:	4a45      	ldr	r2, [pc, #276]	; (6000de50 <work_queue_main+0x1c8>)
6000dd3a:	4949      	ldr	r1, [pc, #292]	; (6000de60 <work_queue_main+0x1d8>)
6000dd3c:	4846      	ldr	r0, [pc, #280]	; (6000de58 <work_queue_main+0x1d0>)
6000dd3e:	f004 ff8c 	bl	60012c5a <assert_print>
6000dd42:	4941      	ldr	r1, [pc, #260]	; (6000de48 <work_queue_main+0x1c0>)
6000dd44:	4847      	ldr	r0, [pc, #284]	; (6000de64 <work_queue_main+0x1dc>)
6000dd46:	f004 ff88 	bl	60012c5a <assert_print>
6000dd4a:	21c2      	movs	r1, #194	; 0xc2
6000dd4c:	e7b9      	b.n	6000dcc2 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
6000dd4e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
6000dd52:	2200      	movs	r2, #0
6000dd54:	2101      	movs	r1, #1
6000dd56:	4628      	mov	r0, r5
6000dd58:	f001 fc4c 	bl	6000f5f4 <z_sched_wake>
6000dd5c:	2800      	cmp	r0, #0
6000dd5e:	d1f8      	bne.n	6000dd52 <work_queue_main+0xca>
6000dd60:	e7bf      	b.n	6000dce2 <work_queue_main+0x5a>
	__asm__ volatile(
6000dd62:	f388 8811 	msr	BASEPRI, r8
6000dd66:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
6000dd6a:	f1b9 0f00 	cmp.w	r9, #0
6000dd6e:	d10a      	bne.n	6000dd86 <work_queue_main+0xfe>
6000dd70:	493d      	ldr	r1, [pc, #244]	; (6000de68 <work_queue_main+0x1e0>)
6000dd72:	f240 239b 	movw	r3, #667	; 0x29b
6000dd76:	4838      	ldr	r0, [pc, #224]	; (6000de58 <work_queue_main+0x1d0>)
6000dd78:	4a3c      	ldr	r2, [pc, #240]	; (6000de6c <work_queue_main+0x1e4>)
6000dd7a:	f004 ff6e 	bl	60012c5a <assert_print>
6000dd7e:	f240 219b 	movw	r1, #667	; 0x29b
6000dd82:	483a      	ldr	r0, [pc, #232]	; (6000de6c <work_queue_main+0x1e4>)
6000dd84:	e79e      	b.n	6000dcc4 <work_queue_main+0x3c>
		handler(work);
6000dd86:	4628      	mov	r0, r5
6000dd88:	47c8      	blx	r9
	__asm__ volatile(
6000dd8a:	f04f 0310 	mov.w	r3, #16
6000dd8e:	f3ef 8a11 	mrs	sl, BASEPRI
6000dd92:	f383 8812 	msr	BASEPRI_MAX, r3
6000dd96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000dd9a:	4630      	mov	r0, r6
6000dd9c:	f7ff fbcc 	bl	6000d538 <z_spin_lock_valid>
6000dda0:	2800      	cmp	r0, #0
6000dda2:	d083      	beq.n	6000dcac <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
6000dda4:	4630      	mov	r0, r6
6000dda6:	f7ff fbe3 	bl	6000d570 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
6000ddaa:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
6000ddac:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
6000ddae:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
6000ddb2:	d417      	bmi.n	6000dde4 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
6000ddb4:	60ea      	str	r2, [r5, #12]
6000ddb6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ddba:	4630      	mov	r0, r6
6000ddbc:	f023 0302 	bic.w	r3, r3, #2
6000ddc0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
6000ddc4:	f3c3 2500 	ubfx	r5, r3, #8, #1
6000ddc8:	f7ff fbc4 	bl	6000d554 <z_spin_unlock_valid>
6000ddcc:	2800      	cmp	r0, #0
6000ddce:	d0b2      	beq.n	6000dd36 <work_queue_main+0xae>
	__asm__ volatile(
6000ddd0:	f38a 8811 	msr	BASEPRI, sl
6000ddd4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
6000ddd8:	2d00      	cmp	r5, #0
6000ddda:	f47f af5b 	bne.w	6000dc94 <work_queue_main+0xc>
	z_impl_k_yield();
6000ddde:	f001 f9cf 	bl	6000f180 <z_impl_k_yield>
}
6000dde2:	e757      	b.n	6000dc94 <work_queue_main+0xc>
	*flagp &= ~BIT(bit);
6000dde4:	f023 0303 	bic.w	r3, r3, #3
	return list->head;
6000dde8:	6838      	ldr	r0, [r7, #0]
6000ddea:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
6000ddec:	2800      	cmp	r0, #0
6000ddee:	d0e2      	beq.n	6000ddb6 <work_queue_main+0x12e>
	return node->next;
6000ddf0:	f04f 0800 	mov.w	r8, #0
6000ddf4:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
6000ddf8:	46c3      	mov	fp, r8
6000ddfa:	2800      	cmp	r0, #0
6000ddfc:	d0db      	beq.n	6000ddb6 <work_queue_main+0x12e>
		if (wc->work == work) {
6000ddfe:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
6000de00:	4602      	mov	r2, r0
		if (wc->work == work) {
6000de02:	429d      	cmp	r5, r3
6000de04:	d10d      	bne.n	6000de22 <work_queue_main+0x19a>
	return node->next;
6000de06:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
6000de08:	f1b8 0f00 	cmp.w	r8, #0
6000de0c:	d112      	bne.n	6000de34 <work_queue_main+0x1ac>
6000de0e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
6000de10:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
6000de12:	4283      	cmp	r3, r0
6000de14:	d100      	bne.n	6000de18 <work_queue_main+0x190>
	list->tail = node;
6000de16:	607a      	str	r2, [r7, #4]
	parent->next = child;
6000de18:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
6000de1c:	f7ff fe7c 	bl	6000db18 <z_impl_k_sem_give>
}
6000de20:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
6000de22:	f1b9 0f00 	cmp.w	r9, #0
6000de26:	d00d      	beq.n	6000de44 <work_queue_main+0x1bc>
	return node->next;
6000de28:	f8d9 3000 	ldr.w	r3, [r9]
6000de2c:	4648      	mov	r0, r9
6000de2e:	4690      	mov	r8, r2
6000de30:	4699      	mov	r9, r3
6000de32:	e7e2      	b.n	6000ddfa <work_queue_main+0x172>
	parent->next = child;
6000de34:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
6000de38:	687b      	ldr	r3, [r7, #4]
6000de3a:	4283      	cmp	r3, r0
	list->tail = node;
6000de3c:	bf08      	it	eq
6000de3e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
6000de42:	e7e9      	b.n	6000de18 <work_queue_main+0x190>
6000de44:	464b      	mov	r3, r9
6000de46:	e7f1      	b.n	6000de2c <work_queue_main+0x1a4>
6000de48:	20204230 	.word	0x20204230
6000de4c:	20204228 	.word	0x20204228
6000de50:	6001717c 	.word	0x6001717c
6000de54:	600171a9 	.word	0x600171a9
6000de58:	60016dfb 	.word	0x60016dfb
6000de5c:	600171be 	.word	0x600171be
6000de60:	600171d6 	.word	0x600171d6
6000de64:	600171ed 	.word	0x600171ed
6000de68:	600195e3 	.word	0x600195e3
6000de6c:	600195c2 	.word	0x600195c2

6000de70 <submit_to_queue_locked>:
{
6000de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
6000de72:	68c3      	ldr	r3, [r0, #12]
{
6000de74:	4604      	mov	r4, r0
6000de76:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
6000de78:	079a      	lsls	r2, r3, #30
6000de7a:	f3c3 0640 	ubfx	r6, r3, #1, #1
6000de7e:	d439      	bmi.n	6000def4 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
6000de80:	075b      	lsls	r3, r3, #29
6000de82:	d425      	bmi.n	6000ded0 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
6000de84:	680b      	ldr	r3, [r1, #0]
6000de86:	b90b      	cbnz	r3, 6000de8c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
6000de88:	6883      	ldr	r3, [r0, #8]
6000de8a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
6000de8c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
6000de8e:	07dd      	lsls	r5, r3, #31
6000de90:	d521      	bpl.n	6000ded6 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
6000de92:	68a3      	ldr	r3, [r4, #8]
6000de94:	b95b      	cbnz	r3, 6000deae <submit_to_queue_locked+0x3e>
6000de96:	4928      	ldr	r1, [pc, #160]	; (6000df38 <submit_to_queue_locked+0xc8>)
6000de98:	f44f 73a7 	mov.w	r3, #334	; 0x14e
6000de9c:	4827      	ldr	r0, [pc, #156]	; (6000df3c <submit_to_queue_locked+0xcc>)
6000de9e:	4a28      	ldr	r2, [pc, #160]	; (6000df40 <submit_to_queue_locked+0xd0>)
6000dea0:	f004 fedb 	bl	60012c5a <assert_print>
6000dea4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
6000dea8:	4825      	ldr	r0, [pc, #148]	; (6000df40 <submit_to_queue_locked+0xd0>)
6000deaa:	f004 fecf 	bl	60012c4c <assert_post_action>
			ret = 2;
6000deae:	2602      	movs	r6, #2
			*queuep = work->queue;
6000deb0:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
6000deb2:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
6000deb4:	2d00      	cmp	r5, #0
6000deb6:	d03c      	beq.n	6000df32 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
6000deb8:	4b22      	ldr	r3, [pc, #136]	; (6000df44 <submit_to_queue_locked+0xd4>)
6000deba:	689b      	ldr	r3, [r3, #8]
6000debc:	42ab      	cmp	r3, r5
6000debe:	d00c      	beq.n	6000deda <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
6000dec0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6000dec4:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
6000dec6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6000deca:	d416      	bmi.n	6000defa <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
6000decc:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
6000ded0:	2300      	movs	r3, #0
6000ded2:	603b      	str	r3, [r7, #0]
	return ret;
6000ded4:	e027      	b.n	6000df26 <submit_to_queue_locked+0xb6>
		ret = 1;
6000ded6:	2601      	movs	r6, #1
6000ded8:	e7eb      	b.n	6000deb2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
6000deda:	f006 fb9e 	bl	6001461a <k_is_in_isr>
6000dede:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
6000dee2:	2800      	cmp	r0, #0
6000dee4:	d1ee      	bne.n	6000dec4 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6000dee6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
6000dee8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6000deec:	d5ee      	bpl.n	6000decc <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
6000deee:	b152      	cbz	r2, 6000df06 <submit_to_queue_locked+0x96>
6000def0:	075b      	lsls	r3, r3, #29
6000def2:	d408      	bmi.n	6000df06 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
6000def4:	f06f 060f 	mvn.w	r6, #15
6000def8:	e7ea      	b.n	6000ded0 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
6000defa:	2a00      	cmp	r2, #0
6000defc:	d1fa      	bne.n	6000def4 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
6000defe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
6000df02:	2b00      	cmp	r3, #0
6000df04:	d1f6      	bne.n	6000def4 <submit_to_queue_locked+0x84>
	parent->next = child;
6000df06:	2300      	movs	r3, #0
6000df08:	6023      	str	r3, [r4, #0]
	return list->tail;
6000df0a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
6000df0e:	b963      	cbnz	r3, 6000df2a <submit_to_queue_locked+0xba>
	list->head = node;
6000df10:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
6000df14:	4628      	mov	r0, r5
6000df16:	f006 fbb3 	bl	60014680 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
6000df1a:	68e3      	ldr	r3, [r4, #12]
6000df1c:	f043 0304 	orr.w	r3, r3, #4
6000df20:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
6000df22:	683b      	ldr	r3, [r7, #0]
6000df24:	60a3      	str	r3, [r4, #8]
}
6000df26:	4630      	mov	r0, r6
6000df28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
6000df2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
6000df2c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
6000df30:	e7f0      	b.n	6000df14 <submit_to_queue_locked+0xa4>
		return -EINVAL;
6000df32:	f06f 0615 	mvn.w	r6, #21
6000df36:	e7cb      	b.n	6000ded0 <submit_to_queue_locked+0x60>
6000df38:	600195fa 	.word	0x600195fa
6000df3c:	60016dfb 	.word	0x60016dfb
6000df40:	600195c2 	.word	0x600195c2
6000df44:	202041fc 	.word	0x202041fc

6000df48 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
6000df48:	b573      	push	{r0, r1, r4, r5, r6, lr}
6000df4a:	4604      	mov	r4, r0
	__asm__ volatile(
6000df4c:	f04f 0310 	mov.w	r3, #16
6000df50:	f3ef 8511 	mrs	r5, BASEPRI
6000df54:	f383 8812 	msr	BASEPRI_MAX, r3
6000df58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000df5c:	481c      	ldr	r0, [pc, #112]	; (6000dfd0 <work_timeout+0x88>)
6000df5e:	f7ff faeb 	bl	6000d538 <z_spin_lock_valid>
6000df62:	b968      	cbnz	r0, 6000df80 <work_timeout+0x38>
6000df64:	2394      	movs	r3, #148	; 0x94
6000df66:	4a1b      	ldr	r2, [pc, #108]	; (6000dfd4 <work_timeout+0x8c>)
6000df68:	491b      	ldr	r1, [pc, #108]	; (6000dfd8 <work_timeout+0x90>)
6000df6a:	481c      	ldr	r0, [pc, #112]	; (6000dfdc <work_timeout+0x94>)
6000df6c:	f004 fe75 	bl	60012c5a <assert_print>
6000df70:	4917      	ldr	r1, [pc, #92]	; (6000dfd0 <work_timeout+0x88>)
6000df72:	481b      	ldr	r0, [pc, #108]	; (6000dfe0 <work_timeout+0x98>)
6000df74:	f004 fe71 	bl	60012c5a <assert_print>
6000df78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000df7a:	4816      	ldr	r0, [pc, #88]	; (6000dfd4 <work_timeout+0x8c>)
6000df7c:	f004 fe66 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000df80:	4813      	ldr	r0, [pc, #76]	; (6000dfd0 <work_timeout+0x88>)
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
6000df82:	f1a4 0610 	sub.w	r6, r4, #16
6000df86:	f7ff faf3 	bl	6000d570 <z_spin_lock_set_owner>
	struct k_work_q *queue = NULL;
6000df8a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
6000df8c:	2103      	movs	r1, #3
6000df8e:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
6000df90:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
6000df92:	f006 fb6a 	bl	6001466a <flag_test_and_clear>
6000df96:	b128      	cbz	r0, 6000dfa4 <work_timeout+0x5c>
		queue = dw->queue;
6000df98:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
6000df9a:	a901      	add	r1, sp, #4
6000df9c:	4630      	mov	r0, r6
		queue = dw->queue;
6000df9e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
6000dfa0:	f7ff ff66 	bl	6000de70 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000dfa4:	480a      	ldr	r0, [pc, #40]	; (6000dfd0 <work_timeout+0x88>)
6000dfa6:	f7ff fad5 	bl	6000d554 <z_spin_unlock_valid>
6000dfaa:	b958      	cbnz	r0, 6000dfc4 <work_timeout+0x7c>
6000dfac:	23c2      	movs	r3, #194	; 0xc2
6000dfae:	4a09      	ldr	r2, [pc, #36]	; (6000dfd4 <work_timeout+0x8c>)
6000dfb0:	490c      	ldr	r1, [pc, #48]	; (6000dfe4 <work_timeout+0x9c>)
6000dfb2:	480a      	ldr	r0, [pc, #40]	; (6000dfdc <work_timeout+0x94>)
6000dfb4:	f004 fe51 	bl	60012c5a <assert_print>
6000dfb8:	4905      	ldr	r1, [pc, #20]	; (6000dfd0 <work_timeout+0x88>)
6000dfba:	480b      	ldr	r0, [pc, #44]	; (6000dfe8 <work_timeout+0xa0>)
6000dfbc:	f004 fe4d 	bl	60012c5a <assert_print>
6000dfc0:	21c2      	movs	r1, #194	; 0xc2
6000dfc2:	e7da      	b.n	6000df7a <work_timeout+0x32>
	__asm__ volatile(
6000dfc4:	f385 8811 	msr	BASEPRI, r5
6000dfc8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
6000dfcc:	b002      	add	sp, #8
6000dfce:	bd70      	pop	{r4, r5, r6, pc}
6000dfd0:	20204230 	.word	0x20204230
6000dfd4:	6001717c 	.word	0x6001717c
6000dfd8:	600171a9 	.word	0x600171a9
6000dfdc:	60016dfb 	.word	0x60016dfb
6000dfe0:	600171be 	.word	0x600171be
6000dfe4:	600171d6 	.word	0x600171d6
6000dfe8:	600171ed 	.word	0x600171ed

6000dfec <k_work_init>:
{
6000dfec:	b538      	push	{r3, r4, r5, lr}
6000dfee:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
6000dff0:	4604      	mov	r4, r0
6000dff2:	b948      	cbnz	r0, 6000e008 <k_work_init+0x1c>
6000dff4:	490c      	ldr	r1, [pc, #48]	; (6000e028 <k_work_init+0x3c>)
6000dff6:	2389      	movs	r3, #137	; 0x89
6000dff8:	4a0c      	ldr	r2, [pc, #48]	; (6000e02c <k_work_init+0x40>)
6000dffa:	480d      	ldr	r0, [pc, #52]	; (6000e030 <k_work_init+0x44>)
6000dffc:	f004 fe2d 	bl	60012c5a <assert_print>
6000e000:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
6000e002:	480a      	ldr	r0, [pc, #40]	; (6000e02c <k_work_init+0x40>)
6000e004:	f004 fe22 	bl	60012c4c <assert_post_action>
6000e008:	b939      	cbnz	r1, 6000e01a <k_work_init+0x2e>
6000e00a:	490a      	ldr	r1, [pc, #40]	; (6000e034 <k_work_init+0x48>)
6000e00c:	238a      	movs	r3, #138	; 0x8a
6000e00e:	4a07      	ldr	r2, [pc, #28]	; (6000e02c <k_work_init+0x40>)
6000e010:	4807      	ldr	r0, [pc, #28]	; (6000e030 <k_work_init+0x44>)
6000e012:	f004 fe22 	bl	60012c5a <assert_print>
6000e016:	218a      	movs	r1, #138	; 0x8a
6000e018:	e7f3      	b.n	6000e002 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
6000e01a:	2210      	movs	r2, #16
6000e01c:	2100      	movs	r1, #0
6000e01e:	f002 faef 	bl	60010600 <memset>
6000e022:	6065      	str	r5, [r4, #4]
}
6000e024:	bd38      	pop	{r3, r4, r5, pc}
6000e026:	bf00      	nop
6000e028:	60019650 	.word	0x60019650
6000e02c:	600195c2 	.word	0x600195c2
6000e030:	60016dfb 	.word	0x60016dfb
6000e034:	600195e3 	.word	0x600195e3

6000e038 <z_work_submit_to_queue>:
{
6000e038:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
6000e03a:	460c      	mov	r4, r1
{
6000e03c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
6000e03e:	b959      	cbnz	r1, 6000e058 <z_work_submit_to_queue+0x20>
6000e040:	4921      	ldr	r1, [pc, #132]	; (6000e0c8 <z_work_submit_to_queue+0x90>)
6000e042:	f44f 73ba 	mov.w	r3, #372	; 0x174
6000e046:	4821      	ldr	r0, [pc, #132]	; (6000e0cc <z_work_submit_to_queue+0x94>)
6000e048:	4a21      	ldr	r2, [pc, #132]	; (6000e0d0 <z_work_submit_to_queue+0x98>)
6000e04a:	f004 fe06 	bl	60012c5a <assert_print>
6000e04e:	f44f 71ba 	mov.w	r1, #372	; 0x174
6000e052:	481f      	ldr	r0, [pc, #124]	; (6000e0d0 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e054:	f004 fdfa 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000e058:	f04f 0310 	mov.w	r3, #16
6000e05c:	f3ef 8511 	mrs	r5, BASEPRI
6000e060:	f383 8812 	msr	BASEPRI_MAX, r3
6000e064:	f3bf 8f6f 	isb	sy
6000e068:	481a      	ldr	r0, [pc, #104]	; (6000e0d4 <z_work_submit_to_queue+0x9c>)
6000e06a:	f7ff fa65 	bl	6000d538 <z_spin_lock_valid>
6000e06e:	b960      	cbnz	r0, 6000e08a <z_work_submit_to_queue+0x52>
6000e070:	2394      	movs	r3, #148	; 0x94
6000e072:	4a19      	ldr	r2, [pc, #100]	; (6000e0d8 <z_work_submit_to_queue+0xa0>)
6000e074:	4919      	ldr	r1, [pc, #100]	; (6000e0dc <z_work_submit_to_queue+0xa4>)
6000e076:	4815      	ldr	r0, [pc, #84]	; (6000e0cc <z_work_submit_to_queue+0x94>)
6000e078:	f004 fdef 	bl	60012c5a <assert_print>
6000e07c:	4915      	ldr	r1, [pc, #84]	; (6000e0d4 <z_work_submit_to_queue+0x9c>)
6000e07e:	4818      	ldr	r0, [pc, #96]	; (6000e0e0 <z_work_submit_to_queue+0xa8>)
6000e080:	f004 fdeb 	bl	60012c5a <assert_print>
6000e084:	2194      	movs	r1, #148	; 0x94
6000e086:	4814      	ldr	r0, [pc, #80]	; (6000e0d8 <z_work_submit_to_queue+0xa0>)
6000e088:	e7e4      	b.n	6000e054 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
6000e08a:	4812      	ldr	r0, [pc, #72]	; (6000e0d4 <z_work_submit_to_queue+0x9c>)
6000e08c:	f7ff fa70 	bl	6000d570 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
6000e090:	4620      	mov	r0, r4
6000e092:	a901      	add	r1, sp, #4
6000e094:	f7ff feec 	bl	6000de70 <submit_to_queue_locked>
6000e098:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e09a:	480e      	ldr	r0, [pc, #56]	; (6000e0d4 <z_work_submit_to_queue+0x9c>)
6000e09c:	f7ff fa5a 	bl	6000d554 <z_spin_unlock_valid>
6000e0a0:	b958      	cbnz	r0, 6000e0ba <z_work_submit_to_queue+0x82>
6000e0a2:	23c2      	movs	r3, #194	; 0xc2
6000e0a4:	4a0c      	ldr	r2, [pc, #48]	; (6000e0d8 <z_work_submit_to_queue+0xa0>)
6000e0a6:	490f      	ldr	r1, [pc, #60]	; (6000e0e4 <z_work_submit_to_queue+0xac>)
6000e0a8:	4808      	ldr	r0, [pc, #32]	; (6000e0cc <z_work_submit_to_queue+0x94>)
6000e0aa:	f004 fdd6 	bl	60012c5a <assert_print>
6000e0ae:	4909      	ldr	r1, [pc, #36]	; (6000e0d4 <z_work_submit_to_queue+0x9c>)
6000e0b0:	480d      	ldr	r0, [pc, #52]	; (6000e0e8 <z_work_submit_to_queue+0xb0>)
6000e0b2:	f004 fdd2 	bl	60012c5a <assert_print>
6000e0b6:	21c2      	movs	r1, #194	; 0xc2
6000e0b8:	e7e5      	b.n	6000e086 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
6000e0ba:	f385 8811 	msr	BASEPRI, r5
6000e0be:	f3bf 8f6f 	isb	sy
}
6000e0c2:	4620      	mov	r0, r4
6000e0c4:	b003      	add	sp, #12
6000e0c6:	bd30      	pop	{r4, r5, pc}
6000e0c8:	60019650 	.word	0x60019650
6000e0cc:	60016dfb 	.word	0x60016dfb
6000e0d0:	600195c2 	.word	0x600195c2
6000e0d4:	20204230 	.word	0x20204230
6000e0d8:	6001717c 	.word	0x6001717c
6000e0dc:	600171a9 	.word	0x600171a9
6000e0e0:	600171be 	.word	0x600171be
6000e0e4:	600171d6 	.word	0x600171d6
6000e0e8:	600171ed 	.word	0x600171ed

6000e0ec <k_work_queue_init>:
{
6000e0ec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
6000e0ee:	b958      	cbnz	r0, 6000e108 <k_work_queue_init+0x1c>
6000e0f0:	4908      	ldr	r1, [pc, #32]	; (6000e114 <k_work_queue_init+0x28>)
6000e0f2:	f240 23b9 	movw	r3, #697	; 0x2b9
6000e0f6:	4808      	ldr	r0, [pc, #32]	; (6000e118 <k_work_queue_init+0x2c>)
6000e0f8:	4a08      	ldr	r2, [pc, #32]	; (6000e11c <k_work_queue_init+0x30>)
6000e0fa:	f004 fdae 	bl	60012c5a <assert_print>
6000e0fe:	f240 21b9 	movw	r1, #697	; 0x2b9
6000e102:	4806      	ldr	r0, [pc, #24]	; (6000e11c <k_work_queue_init+0x30>)
6000e104:	f004 fda2 	bl	60012c4c <assert_post_action>
	*queue = (struct k_work_q) {
6000e108:	22a0      	movs	r2, #160	; 0xa0
6000e10a:	2100      	movs	r1, #0
6000e10c:	f002 fa78 	bl	60010600 <memset>
}
6000e110:	bd08      	pop	{r3, pc}
6000e112:	bf00      	nop
6000e114:	60019600 	.word	0x60019600
6000e118:	60016dfb 	.word	0x60016dfb
6000e11c:	600195c2 	.word	0x600195c2

6000e120 <k_work_queue_start>:
{
6000e120:	b5f0      	push	{r4, r5, r6, r7, lr}
6000e122:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
6000e124:	4604      	mov	r4, r0
{
6000e126:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
6000e128:	b958      	cbnz	r0, 6000e142 <k_work_queue_start+0x22>
6000e12a:	492b      	ldr	r1, [pc, #172]	; (6000e1d8 <k_work_queue_start+0xb8>)
6000e12c:	f44f 7332 	mov.w	r3, #712	; 0x2c8
6000e130:	4a2a      	ldr	r2, [pc, #168]	; (6000e1dc <k_work_queue_start+0xbc>)
6000e132:	482b      	ldr	r0, [pc, #172]	; (6000e1e0 <k_work_queue_start+0xc0>)
6000e134:	f004 fd91 	bl	60012c5a <assert_print>
6000e138:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
6000e13c:	4827      	ldr	r0, [pc, #156]	; (6000e1dc <k_work_queue_start+0xbc>)
6000e13e:	f004 fd85 	bl	60012c4c <assert_post_action>
6000e142:	b949      	cbnz	r1, 6000e158 <k_work_queue_start+0x38>
6000e144:	4927      	ldr	r1, [pc, #156]	; (6000e1e4 <k_work_queue_start+0xc4>)
6000e146:	f240 23c9 	movw	r3, #713	; 0x2c9
6000e14a:	4a24      	ldr	r2, [pc, #144]	; (6000e1dc <k_work_queue_start+0xbc>)
6000e14c:	4824      	ldr	r0, [pc, #144]	; (6000e1e0 <k_work_queue_start+0xc0>)
6000e14e:	f004 fd84 	bl	60012c5a <assert_print>
6000e152:	f240 21c9 	movw	r1, #713	; 0x2c9
6000e156:	e7f1      	b.n	6000e13c <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
6000e158:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
6000e15c:	f010 0001 	ands.w	r0, r0, #1
6000e160:	d009      	beq.n	6000e176 <k_work_queue_start+0x56>
6000e162:	4921      	ldr	r1, [pc, #132]	; (6000e1e8 <k_work_queue_start+0xc8>)
6000e164:	f240 23ca 	movw	r3, #714	; 0x2ca
6000e168:	4a1c      	ldr	r2, [pc, #112]	; (6000e1dc <k_work_queue_start+0xbc>)
6000e16a:	481d      	ldr	r0, [pc, #116]	; (6000e1e0 <k_work_queue_start+0xc0>)
6000e16c:	f004 fd75 	bl	60012c5a <assert_print>
6000e170:	f240 21ca 	movw	r1, #714	; 0x2ca
6000e174:	e7e2      	b.n	6000e13c <k_work_queue_start+0x1c>
	list->tail = NULL;
6000e176:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
6000e17a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
6000e17e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
6000e182:	f104 0090 	add.w	r0, r4, #144	; 0x90
6000e186:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
6000e18a:	b31d      	cbz	r5, 6000e1d4 <k_work_queue_start+0xb4>
6000e18c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
6000e18e:	2800      	cmp	r0, #0
6000e190:	f240 1001 	movw	r0, #257	; 0x101
6000e194:	bf08      	it	eq
6000e196:	2001      	moveq	r0, #1
	*flagp = flags;
6000e198:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
6000e19c:	2000      	movs	r0, #0
6000e19e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
6000e1a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
6000e1a6:	9400      	str	r4, [sp, #0]
6000e1a8:	e9cd 3003 	strd	r3, r0, [sp, #12]
6000e1ac:	e9cd 0001 	strd	r0, r0, [sp, #4]
6000e1b0:	4b0e      	ldr	r3, [pc, #56]	; (6000e1ec <k_work_queue_start+0xcc>)
6000e1b2:	4620      	mov	r0, r4
6000e1b4:	e9cd 6706 	strd	r6, r7, [sp, #24]
6000e1b8:	f7ff f906 	bl	6000d3c8 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
6000e1bc:	b125      	cbz	r5, 6000e1c8 <k_work_queue_start+0xa8>
6000e1be:	6829      	ldr	r1, [r5, #0]
6000e1c0:	b111      	cbz	r1, 6000e1c8 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
6000e1c2:	4620      	mov	r0, r4
6000e1c4:	f006 fa2f 	bl	60014626 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
6000e1c8:	4620      	mov	r0, r4
}
6000e1ca:	b009      	add	sp, #36	; 0x24
6000e1cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
6000e1d0:	f006 ba2e 	b.w	60014630 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
6000e1d4:	2001      	movs	r0, #1
6000e1d6:	e7df      	b.n	6000e198 <k_work_queue_start+0x78>
6000e1d8:	60019615 	.word	0x60019615
6000e1dc:	600195c2 	.word	0x600195c2
6000e1e0:	60016dfb 	.word	0x60016dfb
6000e1e4:	60017579 	.word	0x60017579
6000e1e8:	6001961b 	.word	0x6001961b
6000e1ec:	6000dc89 	.word	0x6000dc89

6000e1f0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
6000e1f0:	b538      	push	{r3, r4, r5, lr}
6000e1f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
6000e1f4:	4604      	mov	r4, r0
6000e1f6:	b958      	cbnz	r0, 6000e210 <k_work_init_delayable+0x20>
6000e1f8:	490f      	ldr	r1, [pc, #60]	; (6000e238 <k_work_init_delayable+0x48>)
6000e1fa:	f44f 7350 	mov.w	r3, #832	; 0x340
6000e1fe:	4a0f      	ldr	r2, [pc, #60]	; (6000e23c <k_work_init_delayable+0x4c>)
6000e200:	480f      	ldr	r0, [pc, #60]	; (6000e240 <k_work_init_delayable+0x50>)
6000e202:	f004 fd2a 	bl	60012c5a <assert_print>
6000e206:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
6000e20a:	480c      	ldr	r0, [pc, #48]	; (6000e23c <k_work_init_delayable+0x4c>)
6000e20c:	f004 fd1e 	bl	60012c4c <assert_post_action>
6000e210:	b949      	cbnz	r1, 6000e226 <k_work_init_delayable+0x36>
6000e212:	490c      	ldr	r1, [pc, #48]	; (6000e244 <k_work_init_delayable+0x54>)
6000e214:	f240 3341 	movw	r3, #833	; 0x341
6000e218:	4a08      	ldr	r2, [pc, #32]	; (6000e23c <k_work_init_delayable+0x4c>)
6000e21a:	4809      	ldr	r0, [pc, #36]	; (6000e240 <k_work_init_delayable+0x50>)
6000e21c:	f004 fd1d 	bl	60012c5a <assert_print>
6000e220:	f240 3141 	movw	r1, #833	; 0x341
6000e224:	e7f1      	b.n	6000e20a <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
6000e226:	2230      	movs	r2, #48	; 0x30
6000e228:	2100      	movs	r1, #0
6000e22a:	f002 f9e9 	bl	60010600 <memset>
6000e22e:	f44f 7380 	mov.w	r3, #256	; 0x100
6000e232:	6065      	str	r5, [r4, #4]
6000e234:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
6000e236:	bd38      	pop	{r3, r4, r5, pc}
6000e238:	6001964f 	.word	0x6001964f
6000e23c:	600195c2 	.word	0x600195c2
6000e240:	60016dfb 	.word	0x60016dfb
6000e244:	600195e3 	.word	0x600195e3

6000e248 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
6000e248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
6000e24a:	4616      	mov	r6, r2
6000e24c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
6000e24e:	460c      	mov	r4, r1
{
6000e250:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
6000e252:	b959      	cbnz	r1, 6000e26c <k_work_schedule_for_queue+0x24>
6000e254:	492d      	ldr	r1, [pc, #180]	; (6000e30c <k_work_schedule_for_queue+0xc4>)
6000e256:	f240 33ba 	movw	r3, #954	; 0x3ba
6000e25a:	482d      	ldr	r0, [pc, #180]	; (6000e310 <k_work_schedule_for_queue+0xc8>)
6000e25c:	4a2d      	ldr	r2, [pc, #180]	; (6000e314 <k_work_schedule_for_queue+0xcc>)
6000e25e:	f004 fcfc 	bl	60012c5a <assert_print>
6000e262:	f240 31ba 	movw	r1, #954	; 0x3ba
6000e266:	482b      	ldr	r0, [pc, #172]	; (6000e314 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e268:	f004 fcf0 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000e26c:	f04f 0310 	mov.w	r3, #16
6000e270:	f3ef 8711 	mrs	r7, BASEPRI
6000e274:	f383 8812 	msr	BASEPRI_MAX, r3
6000e278:	f3bf 8f6f 	isb	sy
6000e27c:	4826      	ldr	r0, [pc, #152]	; (6000e318 <k_work_schedule_for_queue+0xd0>)
6000e27e:	f7ff f95b 	bl	6000d538 <z_spin_lock_valid>
6000e282:	b960      	cbnz	r0, 6000e29e <k_work_schedule_for_queue+0x56>
6000e284:	2394      	movs	r3, #148	; 0x94
6000e286:	4a25      	ldr	r2, [pc, #148]	; (6000e31c <k_work_schedule_for_queue+0xd4>)
6000e288:	4925      	ldr	r1, [pc, #148]	; (6000e320 <k_work_schedule_for_queue+0xd8>)
6000e28a:	4821      	ldr	r0, [pc, #132]	; (6000e310 <k_work_schedule_for_queue+0xc8>)
6000e28c:	f004 fce5 	bl	60012c5a <assert_print>
6000e290:	4921      	ldr	r1, [pc, #132]	; (6000e318 <k_work_schedule_for_queue+0xd0>)
6000e292:	4824      	ldr	r0, [pc, #144]	; (6000e324 <k_work_schedule_for_queue+0xdc>)
6000e294:	f004 fce1 	bl	60012c5a <assert_print>
6000e298:	2194      	movs	r1, #148	; 0x94
6000e29a:	4820      	ldr	r0, [pc, #128]	; (6000e31c <k_work_schedule_for_queue+0xd4>)
6000e29c:	e7e4      	b.n	6000e268 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
6000e29e:	481e      	ldr	r0, [pc, #120]	; (6000e318 <k_work_schedule_for_queue+0xd0>)
6000e2a0:	f7ff f966 	bl	6000d570 <z_spin_lock_set_owner>
	return *flagp;
6000e2a4:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
6000e2a6:	f013 0f0e 	tst.w	r3, #14
6000e2aa:	d125      	bne.n	6000e2f8 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000e2ac:	ea55 0206 	orrs.w	r2, r5, r6
6000e2b0:	d114      	bne.n	6000e2dc <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
6000e2b2:	4620      	mov	r0, r4
6000e2b4:	a901      	add	r1, sp, #4
6000e2b6:	f7ff fddb 	bl	6000de70 <submit_to_queue_locked>
6000e2ba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e2bc:	4816      	ldr	r0, [pc, #88]	; (6000e318 <k_work_schedule_for_queue+0xd0>)
6000e2be:	f7ff f949 	bl	6000d554 <z_spin_unlock_valid>
6000e2c2:	b9d8      	cbnz	r0, 6000e2fc <k_work_schedule_for_queue+0xb4>
6000e2c4:	23c2      	movs	r3, #194	; 0xc2
6000e2c6:	4a15      	ldr	r2, [pc, #84]	; (6000e31c <k_work_schedule_for_queue+0xd4>)
6000e2c8:	4917      	ldr	r1, [pc, #92]	; (6000e328 <k_work_schedule_for_queue+0xe0>)
6000e2ca:	4811      	ldr	r0, [pc, #68]	; (6000e310 <k_work_schedule_for_queue+0xc8>)
6000e2cc:	f004 fcc5 	bl	60012c5a <assert_print>
6000e2d0:	4911      	ldr	r1, [pc, #68]	; (6000e318 <k_work_schedule_for_queue+0xd0>)
6000e2d2:	4816      	ldr	r0, [pc, #88]	; (6000e32c <k_work_schedule_for_queue+0xe4>)
6000e2d4:	f004 fcc1 	bl	60012c5a <assert_print>
6000e2d8:	21c2      	movs	r1, #194	; 0xc2
6000e2da:	e7de      	b.n	6000e29a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
6000e2dc:	f043 0308 	orr.w	r3, r3, #8
	z_add_timeout(&dwork->timeout, work_timeout, delay);
6000e2e0:	f104 0010 	add.w	r0, r4, #16
6000e2e4:	4632      	mov	r2, r6
6000e2e6:	4912      	ldr	r1, [pc, #72]	; (6000e330 <k_work_schedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
6000e2e8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
6000e2ea:	9b01      	ldr	r3, [sp, #4]
6000e2ec:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
6000e2ee:	462b      	mov	r3, r5
	return ret;
6000e2f0:	2401      	movs	r4, #1
	z_add_timeout(&dwork->timeout, work_timeout, delay);
6000e2f2:	f001 fa6f 	bl	6000f7d4 <z_add_timeout>
	return ret;
6000e2f6:	e7e1      	b.n	6000e2bc <k_work_schedule_for_queue+0x74>
	int ret = 0;
6000e2f8:	2400      	movs	r4, #0
6000e2fa:	e7df      	b.n	6000e2bc <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
6000e2fc:	f387 8811 	msr	BASEPRI, r7
6000e300:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
6000e304:	4620      	mov	r0, r4
6000e306:	b003      	add	sp, #12
6000e308:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000e30a:	bf00      	nop
6000e30c:	6001964f 	.word	0x6001964f
6000e310:	60016dfb 	.word	0x60016dfb
6000e314:	600195c2 	.word	0x600195c2
6000e318:	20204230 	.word	0x20204230
6000e31c:	6001717c 	.word	0x6001717c
6000e320:	600171a9 	.word	0x600171a9
6000e324:	600171be 	.word	0x600171be
6000e328:	600171d6 	.word	0x600171d6
6000e32c:	600171ed 	.word	0x600171ed
6000e330:	6000df49 	.word	0x6000df49

6000e334 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
6000e334:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
6000e336:	4d07      	ldr	r5, [pc, #28]	; (6000e354 <z_reset_time_slice+0x20>)
6000e338:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
6000e33a:	b154      	cbz	r4, 6000e352 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
6000e33c:	f7fc fce8 	bl	6000ad10 <sys_clock_elapsed>
6000e340:	4b05      	ldr	r3, [pc, #20]	; (6000e358 <z_reset_time_slice+0x24>)
6000e342:	4404      	add	r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
6000e344:	2100      	movs	r1, #0
6000e346:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
6000e348:	611c      	str	r4, [r3, #16]
	}
}
6000e34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
6000e34e:	f001 bb53 	b.w	6000f9f8 <z_set_timeout_expiry>
}
6000e352:	bd38      	pop	{r3, r4, r5, pc}
6000e354:	2020423c 	.word	0x2020423c
6000e358:	202041fc 	.word	0x202041fc

6000e35c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
6000e35c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
6000e35e:	4d14      	ldr	r5, [pc, #80]	; (6000e3b0 <update_cache+0x54>)
6000e360:	462b      	mov	r3, r5
6000e362:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000e366:	429c      	cmp	r4, r3
6000e368:	d000      	beq.n	6000e36c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
6000e36a:	b904      	cbnz	r4, 6000e36e <update_cache+0x12>
6000e36c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
6000e36e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
6000e370:	b9a8      	cbnz	r0, 6000e39e <update_cache+0x42>
	__ASSERT(_current != NULL, "");
6000e372:	b963      	cbnz	r3, 6000e38e <update_cache+0x32>
6000e374:	490f      	ldr	r1, [pc, #60]	; (6000e3b4 <update_cache+0x58>)
6000e376:	2389      	movs	r3, #137	; 0x89
6000e378:	4a0f      	ldr	r2, [pc, #60]	; (6000e3b8 <update_cache+0x5c>)
6000e37a:	4810      	ldr	r0, [pc, #64]	; (6000e3bc <update_cache+0x60>)
6000e37c:	f004 fc6d 	bl	60012c5a <assert_print>
6000e380:	480f      	ldr	r0, [pc, #60]	; (6000e3c0 <update_cache+0x64>)
6000e382:	f004 fc6a 	bl	60012c5a <assert_print>
6000e386:	2189      	movs	r1, #137	; 0x89
6000e388:	480b      	ldr	r0, [pc, #44]	; (6000e3b8 <update_cache+0x5c>)
6000e38a:	f004 fc5f 	bl	60012c4c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
6000e38e:	7b5a      	ldrb	r2, [r3, #13]
6000e390:	06d2      	lsls	r2, r2, #27
6000e392:	d104      	bne.n	6000e39e <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
6000e394:	69a2      	ldr	r2, [r4, #24]
6000e396:	b912      	cbnz	r2, 6000e39e <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
6000e398:	89da      	ldrh	r2, [r3, #14]
6000e39a:	2a7f      	cmp	r2, #127	; 0x7f
6000e39c:	d805      	bhi.n	6000e3aa <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
6000e39e:	429c      	cmp	r4, r3
6000e3a0:	d002      	beq.n	6000e3a8 <update_cache+0x4c>
			z_reset_time_slice(thread);
6000e3a2:	4620      	mov	r0, r4
6000e3a4:	f7ff ffc6 	bl	6000e334 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
6000e3a8:	4623      	mov	r3, r4
6000e3aa:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
6000e3ac:	bd38      	pop	{r3, r4, r5, pc}
6000e3ae:	bf00      	nop
6000e3b0:	202041fc 	.word	0x202041fc
6000e3b4:	60019686 	.word	0x60019686
6000e3b8:	60019664 	.word	0x60019664
6000e3bc:	60016dfb 	.word	0x60016dfb
6000e3c0:	60019350 	.word	0x60019350

6000e3c4 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
6000e3c4:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
6000e3c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
6000e3ca:	7b42      	ldrb	r2, [r0, #13]
6000e3cc:	2b00      	cmp	r3, #0
6000e3ce:	db38      	blt.n	6000e442 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
6000e3d0:	06d3      	lsls	r3, r2, #27
6000e3d2:	d136      	bne.n	6000e442 <ready_thread+0x7e>
	return node->next != NULL;
6000e3d4:	6983      	ldr	r3, [r0, #24]
6000e3d6:	2b00      	cmp	r3, #0
6000e3d8:	d133      	bne.n	6000e442 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
6000e3da:	f062 027f 	orn	r2, r2, #127	; 0x7f
6000e3de:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000e3e0:	4a18      	ldr	r2, [pc, #96]	; (6000e444 <ready_thread+0x80>)
6000e3e2:	4290      	cmp	r0, r2
6000e3e4:	d109      	bne.n	6000e3fa <ready_thread+0x36>
6000e3e6:	4918      	ldr	r1, [pc, #96]	; (6000e448 <ready_thread+0x84>)
6000e3e8:	23bb      	movs	r3, #187	; 0xbb
6000e3ea:	4818      	ldr	r0, [pc, #96]	; (6000e44c <ready_thread+0x88>)
6000e3ec:	4a18      	ldr	r2, [pc, #96]	; (6000e450 <ready_thread+0x8c>)
6000e3ee:	f004 fc34 	bl	60012c5a <assert_print>
6000e3f2:	21bb      	movs	r1, #187	; 0xbb
6000e3f4:	4816      	ldr	r0, [pc, #88]	; (6000e450 <ready_thread+0x8c>)
6000e3f6:	f004 fc29 	bl	60012c4c <assert_post_action>
	return list->head == list;
6000e3fa:	4916      	ldr	r1, [pc, #88]	; (6000e454 <ready_thread+0x90>)
6000e3fc:	460a      	mov	r2, r1
6000e3fe:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000e402:	4294      	cmp	r4, r2
6000e404:	bf18      	it	ne
6000e406:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
6000e408:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000e40a:	b923      	cbnz	r3, 6000e416 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
6000e40c:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
6000e410:	6020      	str	r0, [r4, #0]
	list->tail = node;
6000e412:	6208      	str	r0, [r1, #32]
}
6000e414:	e00c      	b.n	6000e430 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
6000e416:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
6000e41a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
6000e41e:	42b5      	cmp	r5, r6
6000e420:	d00b      	beq.n	6000e43a <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000e422:	42ae      	cmp	r6, r5
6000e424:	dd09      	ble.n	6000e43a <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
6000e426:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
6000e428:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
6000e42c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
6000e42e:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
6000e430:	2000      	movs	r0, #0
		flag_ipi();
	}
}
6000e432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
6000e436:	f7ff bf91 	b.w	6000e35c <update_cache>
	return (node == list->tail) ? NULL : node->next;
6000e43a:	42a3      	cmp	r3, r4
6000e43c:	d0e6      	beq.n	6000e40c <ready_thread+0x48>
6000e43e:	681b      	ldr	r3, [r3, #0]
6000e440:	e7e3      	b.n	6000e40a <ready_thread+0x46>
}
6000e442:	bd70      	pop	{r4, r5, r6, pc}
6000e444:	20203a40 	.word	0x20203a40
6000e448:	600196ad 	.word	0x600196ad
6000e44c:	60016dfb 	.word	0x60016dfb
6000e450:	60019664 	.word	0x60019664
6000e454:	202041fc 	.word	0x202041fc

6000e458 <k_sched_time_slice_set>:
{
6000e458:	b570      	push	{r4, r5, r6, lr}
6000e45a:	4604      	mov	r4, r0
6000e45c:	460d      	mov	r5, r1
	__asm__ volatile(
6000e45e:	f04f 0310 	mov.w	r3, #16
6000e462:	f3ef 8611 	mrs	r6, BASEPRI
6000e466:	f383 8812 	msr	BASEPRI_MAX, r3
6000e46a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e46e:	481e      	ldr	r0, [pc, #120]	; (6000e4e8 <k_sched_time_slice_set+0x90>)
6000e470:	f7ff f862 	bl	6000d538 <z_spin_lock_valid>
6000e474:	b968      	cbnz	r0, 6000e492 <k_sched_time_slice_set+0x3a>
6000e476:	2394      	movs	r3, #148	; 0x94
6000e478:	4a1c      	ldr	r2, [pc, #112]	; (6000e4ec <k_sched_time_slice_set+0x94>)
6000e47a:	491d      	ldr	r1, [pc, #116]	; (6000e4f0 <k_sched_time_slice_set+0x98>)
6000e47c:	481d      	ldr	r0, [pc, #116]	; (6000e4f4 <k_sched_time_slice_set+0x9c>)
6000e47e:	f004 fbec 	bl	60012c5a <assert_print>
6000e482:	4919      	ldr	r1, [pc, #100]	; (6000e4e8 <k_sched_time_slice_set+0x90>)
6000e484:	481c      	ldr	r0, [pc, #112]	; (6000e4f8 <k_sched_time_slice_set+0xa0>)
6000e486:	f004 fbe8 	bl	60012c5a <assert_print>
6000e48a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e48c:	4817      	ldr	r0, [pc, #92]	; (6000e4ec <k_sched_time_slice_set+0x94>)
6000e48e:	f004 fbdd 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000e492:	4815      	ldr	r0, [pc, #84]	; (6000e4e8 <k_sched_time_slice_set+0x90>)
6000e494:	f7ff f86c 	bl	6000d570 <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
6000e498:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
6000e49a:	2c00      	cmp	r4, #0
6000e49c:	fb04 f303 	mul.w	r3, r4, r3
6000e4a0:	dd02      	ble.n	6000e4a8 <k_sched_time_slice_set+0x50>
			slice_ticks = MAX(2, slice_ticks);
6000e4a2:	2b02      	cmp	r3, #2
6000e4a4:	bfb8      	it	lt
6000e4a6:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
6000e4a8:	4a14      	ldr	r2, [pc, #80]	; (6000e4fc <k_sched_time_slice_set+0xa4>)
6000e4aa:	2100      	movs	r1, #0
6000e4ac:	6111      	str	r1, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
6000e4ae:	4914      	ldr	r1, [pc, #80]	; (6000e500 <k_sched_time_slice_set+0xa8>)
		z_reset_time_slice(_current);
6000e4b0:	6890      	ldr	r0, [r2, #8]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
6000e4b2:	600b      	str	r3, [r1, #0]
		slice_max_prio = prio;
6000e4b4:	4b13      	ldr	r3, [pc, #76]	; (6000e504 <k_sched_time_slice_set+0xac>)
6000e4b6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
6000e4b8:	f7ff ff3c 	bl	6000e334 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e4bc:	480a      	ldr	r0, [pc, #40]	; (6000e4e8 <k_sched_time_slice_set+0x90>)
6000e4be:	f7ff f849 	bl	6000d554 <z_spin_unlock_valid>
6000e4c2:	b958      	cbnz	r0, 6000e4dc <k_sched_time_slice_set+0x84>
6000e4c4:	23c2      	movs	r3, #194	; 0xc2
6000e4c6:	4a09      	ldr	r2, [pc, #36]	; (6000e4ec <k_sched_time_slice_set+0x94>)
6000e4c8:	490f      	ldr	r1, [pc, #60]	; (6000e508 <k_sched_time_slice_set+0xb0>)
6000e4ca:	480a      	ldr	r0, [pc, #40]	; (6000e4f4 <k_sched_time_slice_set+0x9c>)
6000e4cc:	f004 fbc5 	bl	60012c5a <assert_print>
6000e4d0:	4905      	ldr	r1, [pc, #20]	; (6000e4e8 <k_sched_time_slice_set+0x90>)
6000e4d2:	480e      	ldr	r0, [pc, #56]	; (6000e50c <k_sched_time_slice_set+0xb4>)
6000e4d4:	f004 fbc1 	bl	60012c5a <assert_print>
6000e4d8:	21c2      	movs	r1, #194	; 0xc2
6000e4da:	e7d7      	b.n	6000e48c <k_sched_time_slice_set+0x34>
	__asm__ volatile(
6000e4dc:	f386 8811 	msr	BASEPRI, r6
6000e4e0:	f3bf 8f6f 	isb	sy
}
6000e4e4:	bd70      	pop	{r4, r5, r6, pc}
6000e4e6:	bf00      	nop
6000e4e8:	20204240 	.word	0x20204240
6000e4ec:	6001717c 	.word	0x6001717c
6000e4f0:	600171a9 	.word	0x600171a9
6000e4f4:	60016dfb 	.word	0x60016dfb
6000e4f8:	600171be 	.word	0x600171be
6000e4fc:	202041fc 	.word	0x202041fc
6000e500:	2020423c 	.word	0x2020423c
6000e504:	20204238 	.word	0x20204238
6000e508:	600171d6 	.word	0x600171d6
6000e50c:	600171ed 	.word	0x600171ed

6000e510 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
6000e510:	b538      	push	{r3, r4, r5, lr}
6000e512:	4604      	mov	r4, r0
	__asm__ volatile(
6000e514:	f04f 0310 	mov.w	r3, #16
6000e518:	f3ef 8511 	mrs	r5, BASEPRI
6000e51c:	f383 8812 	msr	BASEPRI_MAX, r3
6000e520:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e524:	4816      	ldr	r0, [pc, #88]	; (6000e580 <z_ready_thread+0x70>)
6000e526:	f7ff f807 	bl	6000d538 <z_spin_lock_valid>
6000e52a:	b968      	cbnz	r0, 6000e548 <z_ready_thread+0x38>
6000e52c:	2394      	movs	r3, #148	; 0x94
6000e52e:	4a15      	ldr	r2, [pc, #84]	; (6000e584 <z_ready_thread+0x74>)
6000e530:	4915      	ldr	r1, [pc, #84]	; (6000e588 <z_ready_thread+0x78>)
6000e532:	4816      	ldr	r0, [pc, #88]	; (6000e58c <z_ready_thread+0x7c>)
6000e534:	f004 fb91 	bl	60012c5a <assert_print>
6000e538:	4911      	ldr	r1, [pc, #68]	; (6000e580 <z_ready_thread+0x70>)
6000e53a:	4815      	ldr	r0, [pc, #84]	; (6000e590 <z_ready_thread+0x80>)
6000e53c:	f004 fb8d 	bl	60012c5a <assert_print>
6000e540:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e542:	4810      	ldr	r0, [pc, #64]	; (6000e584 <z_ready_thread+0x74>)
6000e544:	f004 fb82 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000e548:	480d      	ldr	r0, [pc, #52]	; (6000e580 <z_ready_thread+0x70>)
6000e54a:	f7ff f811 	bl	6000d570 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
6000e54e:	4620      	mov	r0, r4
6000e550:	f7ff ff38 	bl	6000e3c4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e554:	480a      	ldr	r0, [pc, #40]	; (6000e580 <z_ready_thread+0x70>)
6000e556:	f7fe fffd 	bl	6000d554 <z_spin_unlock_valid>
6000e55a:	b958      	cbnz	r0, 6000e574 <z_ready_thread+0x64>
6000e55c:	23c2      	movs	r3, #194	; 0xc2
6000e55e:	4a09      	ldr	r2, [pc, #36]	; (6000e584 <z_ready_thread+0x74>)
6000e560:	490c      	ldr	r1, [pc, #48]	; (6000e594 <z_ready_thread+0x84>)
6000e562:	480a      	ldr	r0, [pc, #40]	; (6000e58c <z_ready_thread+0x7c>)
6000e564:	f004 fb79 	bl	60012c5a <assert_print>
6000e568:	4905      	ldr	r1, [pc, #20]	; (6000e580 <z_ready_thread+0x70>)
6000e56a:	480b      	ldr	r0, [pc, #44]	; (6000e598 <z_ready_thread+0x88>)
6000e56c:	f004 fb75 	bl	60012c5a <assert_print>
6000e570:	21c2      	movs	r1, #194	; 0xc2
6000e572:	e7e6      	b.n	6000e542 <z_ready_thread+0x32>
	__asm__ volatile(
6000e574:	f385 8811 	msr	BASEPRI, r5
6000e578:	f3bf 8f6f 	isb	sy
		}
	}
}
6000e57c:	bd38      	pop	{r3, r4, r5, pc}
6000e57e:	bf00      	nop
6000e580:	20204240 	.word	0x20204240
6000e584:	6001717c 	.word	0x6001717c
6000e588:	600171a9 	.word	0x600171a9
6000e58c:	60016dfb 	.word	0x60016dfb
6000e590:	600171be 	.word	0x600171be
6000e594:	600171d6 	.word	0x600171d6
6000e598:	600171ed 	.word	0x600171ed

6000e59c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
6000e59c:	b538      	push	{r3, r4, r5, lr}
6000e59e:	4604      	mov	r4, r0
	__asm__ volatile(
6000e5a0:	f04f 0310 	mov.w	r3, #16
6000e5a4:	f3ef 8511 	mrs	r5, BASEPRI
6000e5a8:	f383 8812 	msr	BASEPRI_MAX, r3
6000e5ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e5b0:	4817      	ldr	r0, [pc, #92]	; (6000e610 <z_unpend_thread_no_timeout+0x74>)
6000e5b2:	f7fe ffc1 	bl	6000d538 <z_spin_lock_valid>
6000e5b6:	b968      	cbnz	r0, 6000e5d4 <z_unpend_thread_no_timeout+0x38>
6000e5b8:	2394      	movs	r3, #148	; 0x94
6000e5ba:	4a16      	ldr	r2, [pc, #88]	; (6000e614 <z_unpend_thread_no_timeout+0x78>)
6000e5bc:	4916      	ldr	r1, [pc, #88]	; (6000e618 <z_unpend_thread_no_timeout+0x7c>)
6000e5be:	4817      	ldr	r0, [pc, #92]	; (6000e61c <z_unpend_thread_no_timeout+0x80>)
6000e5c0:	f004 fb4b 	bl	60012c5a <assert_print>
6000e5c4:	4912      	ldr	r1, [pc, #72]	; (6000e610 <z_unpend_thread_no_timeout+0x74>)
6000e5c6:	4816      	ldr	r0, [pc, #88]	; (6000e620 <z_unpend_thread_no_timeout+0x84>)
6000e5c8:	f004 fb47 	bl	60012c5a <assert_print>
6000e5cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e5ce:	4811      	ldr	r0, [pc, #68]	; (6000e614 <z_unpend_thread_no_timeout+0x78>)
6000e5d0:	f004 fb3c 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000e5d4:	480e      	ldr	r0, [pc, #56]	; (6000e610 <z_unpend_thread_no_timeout+0x74>)
6000e5d6:	f7fe ffcb 	bl	6000d570 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
6000e5da:	68a3      	ldr	r3, [r4, #8]
6000e5dc:	b113      	cbz	r3, 6000e5e4 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
6000e5de:	4620      	mov	r0, r4
6000e5e0:	f000 fc62 	bl	6000eea8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e5e4:	480a      	ldr	r0, [pc, #40]	; (6000e610 <z_unpend_thread_no_timeout+0x74>)
6000e5e6:	f7fe ffb5 	bl	6000d554 <z_spin_unlock_valid>
6000e5ea:	b958      	cbnz	r0, 6000e604 <z_unpend_thread_no_timeout+0x68>
6000e5ec:	23c2      	movs	r3, #194	; 0xc2
6000e5ee:	4a09      	ldr	r2, [pc, #36]	; (6000e614 <z_unpend_thread_no_timeout+0x78>)
6000e5f0:	490c      	ldr	r1, [pc, #48]	; (6000e624 <z_unpend_thread_no_timeout+0x88>)
6000e5f2:	480a      	ldr	r0, [pc, #40]	; (6000e61c <z_unpend_thread_no_timeout+0x80>)
6000e5f4:	f004 fb31 	bl	60012c5a <assert_print>
6000e5f8:	4905      	ldr	r1, [pc, #20]	; (6000e610 <z_unpend_thread_no_timeout+0x74>)
6000e5fa:	480b      	ldr	r0, [pc, #44]	; (6000e628 <z_unpend_thread_no_timeout+0x8c>)
6000e5fc:	f004 fb2d 	bl	60012c5a <assert_print>
6000e600:	21c2      	movs	r1, #194	; 0xc2
6000e602:	e7e4      	b.n	6000e5ce <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
6000e604:	f385 8811 	msr	BASEPRI, r5
6000e608:	f3bf 8f6f 	isb	sy
		}
	}
}
6000e60c:	bd38      	pop	{r3, r4, r5, pc}
6000e60e:	bf00      	nop
6000e610:	20204240 	.word	0x20204240
6000e614:	6001717c 	.word	0x6001717c
6000e618:	600171a9 	.word	0x600171a9
6000e61c:	60016dfb 	.word	0x60016dfb
6000e620:	600171be 	.word	0x600171be
6000e624:	600171d6 	.word	0x600171d6
6000e628:	600171ed 	.word	0x600171ed

6000e62c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
6000e62c:	b570      	push	{r4, r5, r6, lr}
6000e62e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
6000e630:	460d      	mov	r5, r1
6000e632:	b9e9      	cbnz	r1, 6000e670 <z_reschedule+0x44>
6000e634:	f3ef 8605 	mrs	r6, IPSR
6000e638:	b9d6      	cbnz	r6, 6000e670 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
6000e63a:	4b18      	ldr	r3, [pc, #96]	; (6000e69c <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
6000e63c:	699a      	ldr	r2, [r3, #24]
6000e63e:	689b      	ldr	r3, [r3, #8]
6000e640:	429a      	cmp	r2, r3
6000e642:	d015      	beq.n	6000e670 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e644:	f7fe ff86 	bl	6000d554 <z_spin_unlock_valid>
6000e648:	b968      	cbnz	r0, 6000e666 <z_reschedule+0x3a>
6000e64a:	23e1      	movs	r3, #225	; 0xe1
6000e64c:	4a14      	ldr	r2, [pc, #80]	; (6000e6a0 <z_reschedule+0x74>)
6000e64e:	4915      	ldr	r1, [pc, #84]	; (6000e6a4 <z_reschedule+0x78>)
6000e650:	4815      	ldr	r0, [pc, #84]	; (6000e6a8 <z_reschedule+0x7c>)
6000e652:	f004 fb02 	bl	60012c5a <assert_print>
6000e656:	4621      	mov	r1, r4
6000e658:	4814      	ldr	r0, [pc, #80]	; (6000e6ac <z_reschedule+0x80>)
6000e65a:	f004 fafe 	bl	60012c5a <assert_print>
6000e65e:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e660:	480f      	ldr	r0, [pc, #60]	; (6000e6a0 <z_reschedule+0x74>)
6000e662:	f004 faf3 	bl	60012c4c <assert_post_action>
	ret = arch_swap(key);
6000e666:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
6000e668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
6000e66c:	f7f9 bd58 	b.w	60008120 <arch_swap>
6000e670:	4620      	mov	r0, r4
6000e672:	f7fe ff6f 	bl	6000d554 <z_spin_unlock_valid>
6000e676:	b958      	cbnz	r0, 6000e690 <z_reschedule+0x64>
6000e678:	23c2      	movs	r3, #194	; 0xc2
6000e67a:	4a09      	ldr	r2, [pc, #36]	; (6000e6a0 <z_reschedule+0x74>)
6000e67c:	4909      	ldr	r1, [pc, #36]	; (6000e6a4 <z_reschedule+0x78>)
6000e67e:	480a      	ldr	r0, [pc, #40]	; (6000e6a8 <z_reschedule+0x7c>)
6000e680:	f004 faeb 	bl	60012c5a <assert_print>
6000e684:	4621      	mov	r1, r4
6000e686:	4809      	ldr	r0, [pc, #36]	; (6000e6ac <z_reschedule+0x80>)
6000e688:	f004 fae7 	bl	60012c5a <assert_print>
6000e68c:	21c2      	movs	r1, #194	; 0xc2
6000e68e:	e7e7      	b.n	6000e660 <z_reschedule+0x34>
6000e690:	f385 8811 	msr	BASEPRI, r5
6000e694:	f3bf 8f6f 	isb	sy
6000e698:	bd70      	pop	{r4, r5, r6, pc}
6000e69a:	bf00      	nop
6000e69c:	202041fc 	.word	0x202041fc
6000e6a0:	6001717c 	.word	0x6001717c
6000e6a4:	600171d6 	.word	0x600171d6
6000e6a8:	60016dfb 	.word	0x60016dfb
6000e6ac:	600171ed 	.word	0x600171ed

6000e6b0 <z_sched_start>:
{
6000e6b0:	b538      	push	{r3, r4, r5, lr}
6000e6b2:	4604      	mov	r4, r0
	__asm__ volatile(
6000e6b4:	f04f 0310 	mov.w	r3, #16
6000e6b8:	f3ef 8511 	mrs	r5, BASEPRI
6000e6bc:	f383 8812 	msr	BASEPRI_MAX, r3
6000e6c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e6c4:	481c      	ldr	r0, [pc, #112]	; (6000e738 <z_sched_start+0x88>)
6000e6c6:	f7fe ff37 	bl	6000d538 <z_spin_lock_valid>
6000e6ca:	b968      	cbnz	r0, 6000e6e8 <z_sched_start+0x38>
6000e6cc:	2394      	movs	r3, #148	; 0x94
6000e6ce:	4a1b      	ldr	r2, [pc, #108]	; (6000e73c <z_sched_start+0x8c>)
6000e6d0:	491b      	ldr	r1, [pc, #108]	; (6000e740 <z_sched_start+0x90>)
6000e6d2:	481c      	ldr	r0, [pc, #112]	; (6000e744 <z_sched_start+0x94>)
6000e6d4:	f004 fac1 	bl	60012c5a <assert_print>
6000e6d8:	4917      	ldr	r1, [pc, #92]	; (6000e738 <z_sched_start+0x88>)
6000e6da:	481b      	ldr	r0, [pc, #108]	; (6000e748 <z_sched_start+0x98>)
6000e6dc:	f004 fabd 	bl	60012c5a <assert_print>
6000e6e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e6e2:	4816      	ldr	r0, [pc, #88]	; (6000e73c <z_sched_start+0x8c>)
6000e6e4:	f004 fab2 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000e6e8:	4813      	ldr	r0, [pc, #76]	; (6000e738 <z_sched_start+0x88>)
6000e6ea:	f7fe ff41 	bl	6000d570 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
6000e6ee:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
6000e6f0:	075a      	lsls	r2, r3, #29
6000e6f2:	d414      	bmi.n	6000e71e <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e6f4:	4810      	ldr	r0, [pc, #64]	; (6000e738 <z_sched_start+0x88>)
6000e6f6:	f7fe ff2d 	bl	6000d554 <z_spin_unlock_valid>
6000e6fa:	b958      	cbnz	r0, 6000e714 <z_sched_start+0x64>
6000e6fc:	23c2      	movs	r3, #194	; 0xc2
6000e6fe:	4a0f      	ldr	r2, [pc, #60]	; (6000e73c <z_sched_start+0x8c>)
6000e700:	4912      	ldr	r1, [pc, #72]	; (6000e74c <z_sched_start+0x9c>)
6000e702:	4810      	ldr	r0, [pc, #64]	; (6000e744 <z_sched_start+0x94>)
6000e704:	f004 faa9 	bl	60012c5a <assert_print>
6000e708:	490b      	ldr	r1, [pc, #44]	; (6000e738 <z_sched_start+0x88>)
6000e70a:	4811      	ldr	r0, [pc, #68]	; (6000e750 <z_sched_start+0xa0>)
6000e70c:	f004 faa5 	bl	60012c5a <assert_print>
6000e710:	21c2      	movs	r1, #194	; 0xc2
6000e712:	e7e6      	b.n	6000e6e2 <z_sched_start+0x32>
	__asm__ volatile(
6000e714:	f385 8811 	msr	BASEPRI, r5
6000e718:	f3bf 8f6f 	isb	sy
}
6000e71c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
6000e71e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
6000e722:	4620      	mov	r0, r4
6000e724:	7363      	strb	r3, [r4, #13]
6000e726:	f7ff fe4d 	bl	6000e3c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
6000e72a:	4629      	mov	r1, r5
6000e72c:	4802      	ldr	r0, [pc, #8]	; (6000e738 <z_sched_start+0x88>)
}
6000e72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
6000e732:	f7ff bf7b 	b.w	6000e62c <z_reschedule>
6000e736:	bf00      	nop
6000e738:	20204240 	.word	0x20204240
6000e73c:	6001717c 	.word	0x6001717c
6000e740:	600171a9 	.word	0x600171a9
6000e744:	60016dfb 	.word	0x60016dfb
6000e748:	600171be 	.word	0x600171be
6000e74c:	600171d6 	.word	0x600171d6
6000e750:	600171ed 	.word	0x600171ed

6000e754 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
6000e754:	b510      	push	{r4, lr}
	__asm__ volatile(
6000e756:	f04f 0310 	mov.w	r3, #16
6000e75a:	f3ef 8411 	mrs	r4, BASEPRI
6000e75e:	f383 8812 	msr	BASEPRI_MAX, r3
6000e762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e766:	4825      	ldr	r0, [pc, #148]	; (6000e7fc <k_sched_lock+0xa8>)
6000e768:	f7fe fee6 	bl	6000d538 <z_spin_lock_valid>
6000e76c:	b960      	cbnz	r0, 6000e788 <k_sched_lock+0x34>
6000e76e:	2394      	movs	r3, #148	; 0x94
6000e770:	4a23      	ldr	r2, [pc, #140]	; (6000e800 <k_sched_lock+0xac>)
6000e772:	4924      	ldr	r1, [pc, #144]	; (6000e804 <k_sched_lock+0xb0>)
6000e774:	4824      	ldr	r0, [pc, #144]	; (6000e808 <k_sched_lock+0xb4>)
6000e776:	f004 fa70 	bl	60012c5a <assert_print>
6000e77a:	4920      	ldr	r1, [pc, #128]	; (6000e7fc <k_sched_lock+0xa8>)
6000e77c:	4823      	ldr	r0, [pc, #140]	; (6000e80c <k_sched_lock+0xb8>)
6000e77e:	f004 fa6c 	bl	60012c5a <assert_print>
6000e782:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e784:	481e      	ldr	r0, [pc, #120]	; (6000e800 <k_sched_lock+0xac>)
6000e786:	e010      	b.n	6000e7aa <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
6000e788:	481c      	ldr	r0, [pc, #112]	; (6000e7fc <k_sched_lock+0xa8>)
6000e78a:	f7fe fef1 	bl	6000d570 <z_spin_lock_set_owner>
6000e78e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
6000e792:	b163      	cbz	r3, 6000e7ae <k_sched_lock+0x5a>
6000e794:	491e      	ldr	r1, [pc, #120]	; (6000e810 <k_sched_lock+0xbc>)
6000e796:	23fd      	movs	r3, #253	; 0xfd
6000e798:	4a1e      	ldr	r2, [pc, #120]	; (6000e814 <k_sched_lock+0xc0>)
6000e79a:	481b      	ldr	r0, [pc, #108]	; (6000e808 <k_sched_lock+0xb4>)
6000e79c:	f004 fa5d 	bl	60012c5a <assert_print>
6000e7a0:	481d      	ldr	r0, [pc, #116]	; (6000e818 <k_sched_lock+0xc4>)
6000e7a2:	f004 fa5a 	bl	60012c5a <assert_print>
6000e7a6:	21fd      	movs	r1, #253	; 0xfd
6000e7a8:	481a      	ldr	r0, [pc, #104]	; (6000e814 <k_sched_lock+0xc0>)
6000e7aa:	f004 fa4f 	bl	60012c4c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
6000e7ae:	4b1b      	ldr	r3, [pc, #108]	; (6000e81c <k_sched_lock+0xc8>)
6000e7b0:	689a      	ldr	r2, [r3, #8]
6000e7b2:	7bd3      	ldrb	r3, [r2, #15]
6000e7b4:	2b01      	cmp	r3, #1
6000e7b6:	d10a      	bne.n	6000e7ce <k_sched_lock+0x7a>
6000e7b8:	4919      	ldr	r1, [pc, #100]	; (6000e820 <k_sched_lock+0xcc>)
6000e7ba:	23fe      	movs	r3, #254	; 0xfe
6000e7bc:	4a15      	ldr	r2, [pc, #84]	; (6000e814 <k_sched_lock+0xc0>)
6000e7be:	4812      	ldr	r0, [pc, #72]	; (6000e808 <k_sched_lock+0xb4>)
6000e7c0:	f004 fa4b 	bl	60012c5a <assert_print>
6000e7c4:	4814      	ldr	r0, [pc, #80]	; (6000e818 <k_sched_lock+0xc4>)
6000e7c6:	f004 fa48 	bl	60012c5a <assert_print>
6000e7ca:	21fe      	movs	r1, #254	; 0xfe
6000e7cc:	e7ec      	b.n	6000e7a8 <k_sched_lock+0x54>
	--_current->base.sched_locked;
6000e7ce:	3b01      	subs	r3, #1
6000e7d0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e7d2:	480a      	ldr	r0, [pc, #40]	; (6000e7fc <k_sched_lock+0xa8>)
6000e7d4:	f7fe febe 	bl	6000d554 <z_spin_unlock_valid>
6000e7d8:	b958      	cbnz	r0, 6000e7f2 <k_sched_lock+0x9e>
6000e7da:	23c2      	movs	r3, #194	; 0xc2
6000e7dc:	4a08      	ldr	r2, [pc, #32]	; (6000e800 <k_sched_lock+0xac>)
6000e7de:	4911      	ldr	r1, [pc, #68]	; (6000e824 <k_sched_lock+0xd0>)
6000e7e0:	4809      	ldr	r0, [pc, #36]	; (6000e808 <k_sched_lock+0xb4>)
6000e7e2:	f004 fa3a 	bl	60012c5a <assert_print>
6000e7e6:	4905      	ldr	r1, [pc, #20]	; (6000e7fc <k_sched_lock+0xa8>)
6000e7e8:	480f      	ldr	r0, [pc, #60]	; (6000e828 <k_sched_lock+0xd4>)
6000e7ea:	f004 fa36 	bl	60012c5a <assert_print>
6000e7ee:	21c2      	movs	r1, #194	; 0xc2
6000e7f0:	e7c8      	b.n	6000e784 <k_sched_lock+0x30>
	__asm__ volatile(
6000e7f2:	f384 8811 	msr	BASEPRI, r4
6000e7f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
6000e7fa:	bd10      	pop	{r4, pc}
6000e7fc:	20204240 	.word	0x20204240
6000e800:	6001717c 	.word	0x6001717c
6000e804:	600171a9 	.word	0x600171a9
6000e808:	60016dfb 	.word	0x60016dfb
6000e80c:	600171be 	.word	0x600171be
6000e810:	60019427 	.word	0x60019427
6000e814:	600196ce 	.word	0x600196ce
6000e818:	60019350 	.word	0x60019350
6000e81c:	202041fc 	.word	0x202041fc
6000e820:	600196f9 	.word	0x600196f9
6000e824:	600171d6 	.word	0x600171d6
6000e828:	600171ed 	.word	0x600171ed

6000e82c <k_sched_unlock>:

void k_sched_unlock(void)
{
6000e82c:	b510      	push	{r4, lr}
	__asm__ volatile(
6000e82e:	f04f 0310 	mov.w	r3, #16
6000e832:	f3ef 8411 	mrs	r4, BASEPRI
6000e836:	f383 8812 	msr	BASEPRI_MAX, r3
6000e83a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000e83e:	4829      	ldr	r0, [pc, #164]	; (6000e8e4 <k_sched_unlock+0xb8>)
6000e840:	f7fe fe7a 	bl	6000d538 <z_spin_lock_valid>
6000e844:	b960      	cbnz	r0, 6000e860 <k_sched_unlock+0x34>
6000e846:	2394      	movs	r3, #148	; 0x94
6000e848:	4a27      	ldr	r2, [pc, #156]	; (6000e8e8 <k_sched_unlock+0xbc>)
6000e84a:	4928      	ldr	r1, [pc, #160]	; (6000e8ec <k_sched_unlock+0xc0>)
6000e84c:	4828      	ldr	r0, [pc, #160]	; (6000e8f0 <k_sched_unlock+0xc4>)
6000e84e:	f004 fa04 	bl	60012c5a <assert_print>
6000e852:	4924      	ldr	r1, [pc, #144]	; (6000e8e4 <k_sched_unlock+0xb8>)
6000e854:	4827      	ldr	r0, [pc, #156]	; (6000e8f4 <k_sched_unlock+0xc8>)
6000e856:	f004 fa00 	bl	60012c5a <assert_print>
6000e85a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e85c:	4822      	ldr	r0, [pc, #136]	; (6000e8e8 <k_sched_unlock+0xbc>)
6000e85e:	e013      	b.n	6000e888 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
6000e860:	4820      	ldr	r0, [pc, #128]	; (6000e8e4 <k_sched_unlock+0xb8>)
6000e862:	f7fe fe85 	bl	6000d570 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
6000e866:	4b24      	ldr	r3, [pc, #144]	; (6000e8f8 <k_sched_unlock+0xcc>)
6000e868:	689a      	ldr	r2, [r3, #8]
6000e86a:	7bd3      	ldrb	r3, [r2, #15]
6000e86c:	b973      	cbnz	r3, 6000e88c <k_sched_unlock+0x60>
6000e86e:	4923      	ldr	r1, [pc, #140]	; (6000e8fc <k_sched_unlock+0xd0>)
6000e870:	f240 33eb 	movw	r3, #1003	; 0x3eb
6000e874:	4a22      	ldr	r2, [pc, #136]	; (6000e900 <k_sched_unlock+0xd4>)
6000e876:	481e      	ldr	r0, [pc, #120]	; (6000e8f0 <k_sched_unlock+0xc4>)
6000e878:	f004 f9ef 	bl	60012c5a <assert_print>
6000e87c:	4821      	ldr	r0, [pc, #132]	; (6000e904 <k_sched_unlock+0xd8>)
6000e87e:	f004 f9ec 	bl	60012c5a <assert_print>
6000e882:	f240 31eb 	movw	r1, #1003	; 0x3eb
6000e886:	481e      	ldr	r0, [pc, #120]	; (6000e900 <k_sched_unlock+0xd4>)
6000e888:	f004 f9e0 	bl	60012c4c <assert_post_action>
6000e88c:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
6000e890:	b160      	cbz	r0, 6000e8ac <k_sched_unlock+0x80>
6000e892:	491d      	ldr	r1, [pc, #116]	; (6000e908 <k_sched_unlock+0xdc>)
6000e894:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
6000e898:	4a19      	ldr	r2, [pc, #100]	; (6000e900 <k_sched_unlock+0xd4>)
6000e89a:	4815      	ldr	r0, [pc, #84]	; (6000e8f0 <k_sched_unlock+0xc4>)
6000e89c:	f004 f9dd 	bl	60012c5a <assert_print>
6000e8a0:	4818      	ldr	r0, [pc, #96]	; (6000e904 <k_sched_unlock+0xd8>)
6000e8a2:	f004 f9da 	bl	60012c5a <assert_print>
6000e8a6:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
6000e8aa:	e7ec      	b.n	6000e886 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
6000e8ac:	3301      	adds	r3, #1
6000e8ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
6000e8b0:	f7ff fd54 	bl	6000e35c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000e8b4:	480b      	ldr	r0, [pc, #44]	; (6000e8e4 <k_sched_unlock+0xb8>)
6000e8b6:	f7fe fe4d 	bl	6000d554 <z_spin_unlock_valid>
6000e8ba:	b958      	cbnz	r0, 6000e8d4 <k_sched_unlock+0xa8>
6000e8bc:	23c2      	movs	r3, #194	; 0xc2
6000e8be:	4a0a      	ldr	r2, [pc, #40]	; (6000e8e8 <k_sched_unlock+0xbc>)
6000e8c0:	4912      	ldr	r1, [pc, #72]	; (6000e90c <k_sched_unlock+0xe0>)
6000e8c2:	480b      	ldr	r0, [pc, #44]	; (6000e8f0 <k_sched_unlock+0xc4>)
6000e8c4:	f004 f9c9 	bl	60012c5a <assert_print>
6000e8c8:	4906      	ldr	r1, [pc, #24]	; (6000e8e4 <k_sched_unlock+0xb8>)
6000e8ca:	4811      	ldr	r0, [pc, #68]	; (6000e910 <k_sched_unlock+0xe4>)
6000e8cc:	f004 f9c5 	bl	60012c5a <assert_print>
6000e8d0:	21c2      	movs	r1, #194	; 0xc2
6000e8d2:	e7c3      	b.n	6000e85c <k_sched_unlock+0x30>
	__asm__ volatile(
6000e8d4:	f384 8811 	msr	BASEPRI, r4
6000e8d8:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
6000e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
6000e8e0:	f005 bef2 	b.w	600146c8 <z_reschedule_unlocked>
6000e8e4:	20204240 	.word	0x20204240
6000e8e8:	6001717c 	.word	0x6001717c
6000e8ec:	600171a9 	.word	0x600171a9
6000e8f0:	60016dfb 	.word	0x60016dfb
6000e8f4:	600171be 	.word	0x600171be
6000e8f8:	202041fc 	.word	0x202041fc
6000e8fc:	6001972a 	.word	0x6001972a
6000e900:	60019664 	.word	0x60019664
6000e904:	60019350 	.word	0x60019350
6000e908:	60019427 	.word	0x60019427
6000e90c:	600171d6 	.word	0x600171d6
6000e910:	600171ed 	.word	0x600171ed

6000e914 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
6000e914:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000e916:	4b0b      	ldr	r3, [pc, #44]	; (6000e944 <z_priq_dumb_remove+0x30>)
6000e918:	4299      	cmp	r1, r3
6000e91a:	d10b      	bne.n	6000e934 <z_priq_dumb_remove+0x20>
6000e91c:	490a      	ldr	r1, [pc, #40]	; (6000e948 <z_priq_dumb_remove+0x34>)
6000e91e:	f240 4377 	movw	r3, #1143	; 0x477
6000e922:	480a      	ldr	r0, [pc, #40]	; (6000e94c <z_priq_dumb_remove+0x38>)
6000e924:	4a0a      	ldr	r2, [pc, #40]	; (6000e950 <z_priq_dumb_remove+0x3c>)
6000e926:	f004 f998 	bl	60012c5a <assert_print>
6000e92a:	f240 4177 	movw	r1, #1143	; 0x477
6000e92e:	4808      	ldr	r0, [pc, #32]	; (6000e950 <z_priq_dumb_remove+0x3c>)
6000e930:	f004 f98c 	bl	60012c4c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
6000e934:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
6000e938:	6013      	str	r3, [r2, #0]
	next->prev = prev;
6000e93a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
6000e93c:	2300      	movs	r3, #0
	node->prev = NULL;
6000e93e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
6000e942:	bd08      	pop	{r3, pc}
6000e944:	20203a40 	.word	0x20203a40
6000e948:	600196ad 	.word	0x600196ad
6000e94c:	60016dfb 	.word	0x60016dfb
6000e950:	60019664 	.word	0x60019664

6000e954 <move_thread_to_end_of_prio_q>:
{
6000e954:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
6000e956:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
6000e95a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
6000e95c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
6000e95e:	2a00      	cmp	r2, #0
6000e960:	da06      	bge.n	6000e970 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000e962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6000e966:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000e968:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000e96a:	481d      	ldr	r0, [pc, #116]	; (6000e9e0 <move_thread_to_end_of_prio_q+0x8c>)
6000e96c:	f7ff ffd2 	bl	6000e914 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
6000e970:	7b63      	ldrb	r3, [r4, #13]
6000e972:	f063 037f 	orn	r3, r3, #127	; 0x7f
6000e976:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000e978:	4b1a      	ldr	r3, [pc, #104]	; (6000e9e4 <move_thread_to_end_of_prio_q+0x90>)
6000e97a:	429c      	cmp	r4, r3
6000e97c:	d109      	bne.n	6000e992 <move_thread_to_end_of_prio_q+0x3e>
6000e97e:	491a      	ldr	r1, [pc, #104]	; (6000e9e8 <move_thread_to_end_of_prio_q+0x94>)
6000e980:	23bb      	movs	r3, #187	; 0xbb
6000e982:	481a      	ldr	r0, [pc, #104]	; (6000e9ec <move_thread_to_end_of_prio_q+0x98>)
6000e984:	4a1a      	ldr	r2, [pc, #104]	; (6000e9f0 <move_thread_to_end_of_prio_q+0x9c>)
6000e986:	f004 f968 	bl	60012c5a <assert_print>
6000e98a:	21bb      	movs	r1, #187	; 0xbb
6000e98c:	4818      	ldr	r0, [pc, #96]	; (6000e9f0 <move_thread_to_end_of_prio_q+0x9c>)
6000e98e:	f004 f95d 	bl	60012c4c <assert_post_action>
	return list->head == list;
6000e992:	4a18      	ldr	r2, [pc, #96]	; (6000e9f4 <move_thread_to_end_of_prio_q+0xa0>)
6000e994:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
6000e996:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
6000e998:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000e99c:	428b      	cmp	r3, r1
6000e99e:	bf08      	it	eq
6000e9a0:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000e9a2:	b923      	cbnz	r3, 6000e9ae <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
6000e9a4:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
6000e9a8:	6004      	str	r4, [r0, #0]
	list->tail = node;
6000e9aa:	6214      	str	r4, [r2, #32]
}
6000e9ac:	e00c      	b.n	6000e9c8 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
6000e9ae:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
6000e9b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
6000e9b6:	42b5      	cmp	r5, r6
6000e9b8:	d00e      	beq.n	6000e9d8 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000e9ba:	42ae      	cmp	r6, r5
6000e9bc:	dd0c      	ble.n	6000e9d8 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
6000e9be:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
6000e9c0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
6000e9c4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
6000e9c6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
6000e9c8:	6890      	ldr	r0, [r2, #8]
6000e9ca:	1b03      	subs	r3, r0, r4
6000e9cc:	4258      	negs	r0, r3
}
6000e9ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
6000e9d2:	4158      	adcs	r0, r3
6000e9d4:	f7ff bcc2 	b.w	6000e35c <update_cache>
	return (node == list->tail) ? NULL : node->next;
6000e9d8:	4298      	cmp	r0, r3
6000e9da:	d0e3      	beq.n	6000e9a4 <move_thread_to_end_of_prio_q+0x50>
6000e9dc:	681b      	ldr	r3, [r3, #0]
6000e9de:	e7e0      	b.n	6000e9a2 <move_thread_to_end_of_prio_q+0x4e>
6000e9e0:	20204218 	.word	0x20204218
6000e9e4:	20203a40 	.word	0x20203a40
6000e9e8:	600196ad 	.word	0x600196ad
6000e9ec:	60016dfb 	.word	0x60016dfb
6000e9f0:	60019664 	.word	0x60019664
6000e9f4:	202041fc 	.word	0x202041fc

6000e9f8 <z_time_slice>:
{
6000e9f8:	b570      	push	{r4, r5, r6, lr}
6000e9fa:	4605      	mov	r5, r0
	__asm__ volatile(
6000e9fc:	f04f 0310 	mov.w	r3, #16
6000ea00:	f3ef 8611 	mrs	r6, BASEPRI
6000ea04:	f383 8812 	msr	BASEPRI_MAX, r3
6000ea08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ea0c:	4829      	ldr	r0, [pc, #164]	; (6000eab4 <z_time_slice+0xbc>)
6000ea0e:	f7fe fd93 	bl	6000d538 <z_spin_lock_valid>
6000ea12:	b968      	cbnz	r0, 6000ea30 <z_time_slice+0x38>
6000ea14:	2394      	movs	r3, #148	; 0x94
6000ea16:	4a28      	ldr	r2, [pc, #160]	; (6000eab8 <z_time_slice+0xc0>)
6000ea18:	4928      	ldr	r1, [pc, #160]	; (6000eabc <z_time_slice+0xc4>)
6000ea1a:	4829      	ldr	r0, [pc, #164]	; (6000eac0 <z_time_slice+0xc8>)
6000ea1c:	f004 f91d 	bl	60012c5a <assert_print>
6000ea20:	4924      	ldr	r1, [pc, #144]	; (6000eab4 <z_time_slice+0xbc>)
6000ea22:	4828      	ldr	r0, [pc, #160]	; (6000eac4 <z_time_slice+0xcc>)
6000ea24:	f004 f919 	bl	60012c5a <assert_print>
6000ea28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ea2a:	4823      	ldr	r0, [pc, #140]	; (6000eab8 <z_time_slice+0xc0>)
6000ea2c:	f004 f90e 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000ea30:	4820      	ldr	r0, [pc, #128]	; (6000eab4 <z_time_slice+0xbc>)
6000ea32:	f7fe fd9d 	bl	6000d570 <z_spin_lock_set_owner>
	if (pending_current == _current) {
6000ea36:	4b24      	ldr	r3, [pc, #144]	; (6000eac8 <z_time_slice+0xd0>)
6000ea38:	4a24      	ldr	r2, [pc, #144]	; (6000eacc <z_time_slice+0xd4>)
6000ea3a:	689c      	ldr	r4, [r3, #8]
6000ea3c:	6811      	ldr	r1, [r2, #0]
6000ea3e:	428c      	cmp	r4, r1
6000ea40:	d112      	bne.n	6000ea68 <z_time_slice+0x70>
		z_reset_time_slice(_current);
6000ea42:	4620      	mov	r0, r4
6000ea44:	f7ff fc76 	bl	6000e334 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ea48:	481a      	ldr	r0, [pc, #104]	; (6000eab4 <z_time_slice+0xbc>)
6000ea4a:	f7fe fd83 	bl	6000d554 <z_spin_unlock_valid>
6000ea4e:	bb58      	cbnz	r0, 6000eaa8 <z_time_slice+0xb0>
6000ea50:	23c2      	movs	r3, #194	; 0xc2
6000ea52:	4a19      	ldr	r2, [pc, #100]	; (6000eab8 <z_time_slice+0xc0>)
6000ea54:	491e      	ldr	r1, [pc, #120]	; (6000ead0 <z_time_slice+0xd8>)
6000ea56:	481a      	ldr	r0, [pc, #104]	; (6000eac0 <z_time_slice+0xc8>)
6000ea58:	f004 f8ff 	bl	60012c5a <assert_print>
6000ea5c:	4915      	ldr	r1, [pc, #84]	; (6000eab4 <z_time_slice+0xbc>)
6000ea5e:	481d      	ldr	r0, [pc, #116]	; (6000ead4 <z_time_slice+0xdc>)
6000ea60:	f004 f8fb 	bl	60012c5a <assert_print>
6000ea64:	21c2      	movs	r1, #194	; 0xc2
6000ea66:	e7e0      	b.n	6000ea2a <z_time_slice+0x32>
	pending_current = NULL;
6000ea68:	2100      	movs	r1, #0
6000ea6a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
6000ea6c:	4a1a      	ldr	r2, [pc, #104]	; (6000ead8 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
6000ea6e:	6812      	ldr	r2, [r2, #0]
6000ea70:	b1c2      	cbz	r2, 6000eaa4 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
6000ea72:	89e2      	ldrh	r2, [r4, #14]
6000ea74:	2a7f      	cmp	r2, #127	; 0x7f
6000ea76:	d815      	bhi.n	6000eaa4 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
6000ea78:	7b62      	ldrb	r2, [r4, #13]
6000ea7a:	06d2      	lsls	r2, r2, #27
6000ea7c:	d112      	bne.n	6000eaa4 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
6000ea7e:	4a17      	ldr	r2, [pc, #92]	; (6000eadc <z_time_slice+0xe4>)
6000ea80:	f994 100e 	ldrsb.w	r1, [r4, #14]
6000ea84:	6812      	ldr	r2, [r2, #0]
6000ea86:	4291      	cmp	r1, r2
6000ea88:	db0c      	blt.n	6000eaa4 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
6000ea8a:	4a15      	ldr	r2, [pc, #84]	; (6000eae0 <z_time_slice+0xe8>)
6000ea8c:	4294      	cmp	r4, r2
6000ea8e:	d009      	beq.n	6000eaa4 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
6000ea90:	691a      	ldr	r2, [r3, #16]
6000ea92:	42aa      	cmp	r2, r5
6000ea94:	dc03      	bgt.n	6000ea9e <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
6000ea96:	4620      	mov	r0, r4
6000ea98:	f7ff ff5c 	bl	6000e954 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
6000ea9c:	e7d1      	b.n	6000ea42 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
6000ea9e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
6000eaa0:	611a      	str	r2, [r3, #16]
6000eaa2:	e7d1      	b.n	6000ea48 <z_time_slice+0x50>
6000eaa4:	2200      	movs	r2, #0
6000eaa6:	e7fb      	b.n	6000eaa0 <z_time_slice+0xa8>
	__asm__ volatile(
6000eaa8:	f386 8811 	msr	BASEPRI, r6
6000eaac:	f3bf 8f6f 	isb	sy
}
6000eab0:	bd70      	pop	{r4, r5, r6, pc}
6000eab2:	bf00      	nop
6000eab4:	20204240 	.word	0x20204240
6000eab8:	6001717c 	.word	0x6001717c
6000eabc:	600171a9 	.word	0x600171a9
6000eac0:	60016dfb 	.word	0x60016dfb
6000eac4:	600171be 	.word	0x600171be
6000eac8:	202041fc 	.word	0x202041fc
6000eacc:	20204234 	.word	0x20204234
6000ead0:	600171d6 	.word	0x600171d6
6000ead4:	600171ed 	.word	0x600171ed
6000ead8:	2020423c 	.word	0x2020423c
6000eadc:	20204238 	.word	0x20204238
6000eae0:	20203a40 	.word	0x20203a40

6000eae4 <unready_thread>:
{
6000eae4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
6000eae6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
6000eaea:	4604      	mov	r4, r0
6000eaec:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
6000eaee:	2a00      	cmp	r2, #0
6000eaf0:	da06      	bge.n	6000eb00 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000eaf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6000eaf6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000eaf8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000eafa:	4806      	ldr	r0, [pc, #24]	; (6000eb14 <unready_thread+0x30>)
6000eafc:	f7ff ff0a 	bl	6000e914 <z_priq_dumb_remove>
	update_cache(thread == _current);
6000eb00:	4b05      	ldr	r3, [pc, #20]	; (6000eb18 <unready_thread+0x34>)
6000eb02:	6898      	ldr	r0, [r3, #8]
6000eb04:	1b03      	subs	r3, r0, r4
6000eb06:	4258      	negs	r0, r3
}
6000eb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
6000eb0c:	4158      	adcs	r0, r3
6000eb0e:	f7ff bc25 	b.w	6000e35c <update_cache>
6000eb12:	bf00      	nop
6000eb14:	20204218 	.word	0x20204218
6000eb18:	202041fc 	.word	0x202041fc

6000eb1c <add_to_waitq_locked>:
{
6000eb1c:	b538      	push	{r3, r4, r5, lr}
6000eb1e:	4604      	mov	r4, r0
6000eb20:	460d      	mov	r5, r1
	unready_thread(thread);
6000eb22:	f7ff ffdf 	bl	6000eae4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
6000eb26:	7b63      	ldrb	r3, [r4, #13]
6000eb28:	f043 0302 	orr.w	r3, r3, #2
6000eb2c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
6000eb2e:	b34d      	cbz	r5, 6000eb84 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000eb30:	4b15      	ldr	r3, [pc, #84]	; (6000eb88 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
6000eb32:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000eb34:	429c      	cmp	r4, r3
6000eb36:	d109      	bne.n	6000eb4c <add_to_waitq_locked+0x30>
6000eb38:	4914      	ldr	r1, [pc, #80]	; (6000eb8c <add_to_waitq_locked+0x70>)
6000eb3a:	23bb      	movs	r3, #187	; 0xbb
6000eb3c:	4814      	ldr	r0, [pc, #80]	; (6000eb90 <add_to_waitq_locked+0x74>)
6000eb3e:	4a15      	ldr	r2, [pc, #84]	; (6000eb94 <add_to_waitq_locked+0x78>)
6000eb40:	f004 f88b 	bl	60012c5a <assert_print>
6000eb44:	21bb      	movs	r1, #187	; 0xbb
6000eb46:	4813      	ldr	r0, [pc, #76]	; (6000eb94 <add_to_waitq_locked+0x78>)
6000eb48:	f004 f880 	bl	60012c4c <assert_post_action>
	return list->head == list;
6000eb4c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000eb4e:	429d      	cmp	r5, r3
6000eb50:	d109      	bne.n	6000eb66 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
6000eb52:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
6000eb54:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
6000eb58:	601c      	str	r4, [r3, #0]
	list->tail = node;
6000eb5a:	606c      	str	r4, [r5, #4]
}
6000eb5c:	e012      	b.n	6000eb84 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
6000eb5e:	686a      	ldr	r2, [r5, #4]
6000eb60:	4293      	cmp	r3, r2
6000eb62:	d0f6      	beq.n	6000eb52 <add_to_waitq_locked+0x36>
6000eb64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000eb66:	2b00      	cmp	r3, #0
6000eb68:	d0f3      	beq.n	6000eb52 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
6000eb6a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
6000eb6e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
6000eb72:	428a      	cmp	r2, r1
6000eb74:	d0f3      	beq.n	6000eb5e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000eb76:	4291      	cmp	r1, r2
6000eb78:	ddf1      	ble.n	6000eb5e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
6000eb7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
6000eb7c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
6000eb80:	6014      	str	r4, [r2, #0]
	successor->prev = node;
6000eb82:	605c      	str	r4, [r3, #4]
}
6000eb84:	bd38      	pop	{r3, r4, r5, pc}
6000eb86:	bf00      	nop
6000eb88:	20203a40 	.word	0x20203a40
6000eb8c:	600196ad 	.word	0x600196ad
6000eb90:	60016dfb 	.word	0x60016dfb
6000eb94:	60019664 	.word	0x60019664

6000eb98 <pend_locked>:
{
6000eb98:	b570      	push	{r4, r5, r6, lr}
6000eb9a:	4615      	mov	r5, r2
6000eb9c:	461c      	mov	r4, r3
6000eb9e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
6000eba0:	f7ff ffbc 	bl	6000eb1c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
6000eba4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
6000eba8:	bf08      	it	eq
6000ebaa:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
6000ebae:	d008      	beq.n	6000ebc2 <pend_locked+0x2a>
6000ebb0:	462a      	mov	r2, r5
6000ebb2:	4623      	mov	r3, r4
6000ebb4:	f106 0018 	add.w	r0, r6, #24
6000ebb8:	4902      	ldr	r1, [pc, #8]	; (6000ebc4 <pend_locked+0x2c>)
}
6000ebba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
6000ebbe:	f000 be09 	b.w	6000f7d4 <z_add_timeout>
6000ebc2:	bd70      	pop	{r4, r5, r6, pc}
6000ebc4:	6000ef81 	.word	0x6000ef81

6000ebc8 <z_pend_curr>:
{
6000ebc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
6000ebcc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6000ec88 <z_pend_curr+0xc0>
{
6000ebd0:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
6000ebd2:	4c2e      	ldr	r4, [pc, #184]	; (6000ec8c <z_pend_curr+0xc4>)
{
6000ebd4:	4605      	mov	r5, r0
	pending_current = _current;
6000ebd6:	f8da 2008 	ldr.w	r2, [sl, #8]
{
6000ebda:	460e      	mov	r6, r1
	pending_current = _current;
6000ebdc:	4b2c      	ldr	r3, [pc, #176]	; (6000ec90 <z_pend_curr+0xc8>)
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
6000ebde:	42a0      	cmp	r0, r4
{
6000ebe0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
6000ebe4:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
6000ebe6:	d10b      	bne.n	6000ec00 <z_pend_curr+0x38>
6000ebe8:	492a      	ldr	r1, [pc, #168]	; (6000ec94 <z_pend_curr+0xcc>)
6000ebea:	f240 3352 	movw	r3, #850	; 0x352
6000ebee:	482a      	ldr	r0, [pc, #168]	; (6000ec98 <z_pend_curr+0xd0>)
6000ebf0:	4a2a      	ldr	r2, [pc, #168]	; (6000ec9c <z_pend_curr+0xd4>)
6000ebf2:	f004 f832 	bl	60012c5a <assert_print>
6000ebf6:	f240 3152 	movw	r1, #850	; 0x352
6000ebfa:	4828      	ldr	r0, [pc, #160]	; (6000ec9c <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ebfc:	f004 f826 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000ec00:	f04f 0210 	mov.w	r2, #16
6000ec04:	f3ef 8311 	mrs	r3, BASEPRI
6000ec08:	f382 8812 	msr	BASEPRI_MAX, r2
6000ec0c:	f3bf 8f6f 	isb	sy
6000ec10:	4620      	mov	r0, r4
6000ec12:	f7fe fc91 	bl	6000d538 <z_spin_lock_valid>
6000ec16:	b960      	cbnz	r0, 6000ec32 <z_pend_curr+0x6a>
6000ec18:	2394      	movs	r3, #148	; 0x94
6000ec1a:	4a21      	ldr	r2, [pc, #132]	; (6000eca0 <z_pend_curr+0xd8>)
6000ec1c:	4921      	ldr	r1, [pc, #132]	; (6000eca4 <z_pend_curr+0xdc>)
6000ec1e:	481e      	ldr	r0, [pc, #120]	; (6000ec98 <z_pend_curr+0xd0>)
6000ec20:	f004 f81b 	bl	60012c5a <assert_print>
6000ec24:	4621      	mov	r1, r4
6000ec26:	4820      	ldr	r0, [pc, #128]	; (6000eca8 <z_pend_curr+0xe0>)
6000ec28:	f004 f817 	bl	60012c5a <assert_print>
6000ec2c:	2194      	movs	r1, #148	; 0x94
6000ec2e:	481c      	ldr	r0, [pc, #112]	; (6000eca0 <z_pend_curr+0xd8>)
6000ec30:	e7e4      	b.n	6000ebfc <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
6000ec32:	4620      	mov	r0, r4
6000ec34:	f7fe fc9c 	bl	6000d570 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
6000ec38:	f8da 0008 	ldr.w	r0, [sl, #8]
6000ec3c:	4642      	mov	r2, r8
6000ec3e:	464b      	mov	r3, r9
6000ec40:	4639      	mov	r1, r7
6000ec42:	f7ff ffa9 	bl	6000eb98 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ec46:	4628      	mov	r0, r5
6000ec48:	f7fe fc84 	bl	6000d554 <z_spin_unlock_valid>
6000ec4c:	b958      	cbnz	r0, 6000ec66 <z_pend_curr+0x9e>
6000ec4e:	4917      	ldr	r1, [pc, #92]	; (6000ecac <z_pend_curr+0xe4>)
6000ec50:	23e1      	movs	r3, #225	; 0xe1
6000ec52:	4a13      	ldr	r2, [pc, #76]	; (6000eca0 <z_pend_curr+0xd8>)
6000ec54:	4810      	ldr	r0, [pc, #64]	; (6000ec98 <z_pend_curr+0xd0>)
6000ec56:	f004 f800 	bl	60012c5a <assert_print>
6000ec5a:	4629      	mov	r1, r5
6000ec5c:	4814      	ldr	r0, [pc, #80]	; (6000ecb0 <z_pend_curr+0xe8>)
6000ec5e:	f003 fffc 	bl	60012c5a <assert_print>
6000ec62:	21e1      	movs	r1, #225	; 0xe1
6000ec64:	e7e3      	b.n	6000ec2e <z_pend_curr+0x66>
6000ec66:	4620      	mov	r0, r4
6000ec68:	f7fe fc74 	bl	6000d554 <z_spin_unlock_valid>
6000ec6c:	b938      	cbnz	r0, 6000ec7e <z_pend_curr+0xb6>
6000ec6e:	490f      	ldr	r1, [pc, #60]	; (6000ecac <z_pend_curr+0xe4>)
6000ec70:	23e1      	movs	r3, #225	; 0xe1
6000ec72:	4a0b      	ldr	r2, [pc, #44]	; (6000eca0 <z_pend_curr+0xd8>)
6000ec74:	4808      	ldr	r0, [pc, #32]	; (6000ec98 <z_pend_curr+0xd0>)
6000ec76:	f003 fff0 	bl	60012c5a <assert_print>
6000ec7a:	4621      	mov	r1, r4
6000ec7c:	e7ee      	b.n	6000ec5c <z_pend_curr+0x94>
6000ec7e:	4630      	mov	r0, r6
}
6000ec80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000ec84:	f7f9 ba4c 	b.w	60008120 <arch_swap>
6000ec88:	202041fc 	.word	0x202041fc
6000ec8c:	20204240 	.word	0x20204240
6000ec90:	20204234 	.word	0x20204234
6000ec94:	6001975b 	.word	0x6001975b
6000ec98:	60016dfb 	.word	0x60016dfb
6000ec9c:	60019664 	.word	0x60019664
6000eca0:	6001717c 	.word	0x6001717c
6000eca4:	600171a9 	.word	0x600171a9
6000eca8:	600171be 	.word	0x600171be
6000ecac:	600171d6 	.word	0x600171d6
6000ecb0:	600171ed 	.word	0x600171ed

6000ecb4 <z_set_prio>:
{
6000ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6000ecb8:	4604      	mov	r4, r0
6000ecba:	460e      	mov	r6, r1
6000ecbc:	f04f 0310 	mov.w	r3, #16
6000ecc0:	f3ef 8911 	mrs	r9, BASEPRI
6000ecc4:	f383 8812 	msr	BASEPRI_MAX, r3
6000ecc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000eccc:	4837      	ldr	r0, [pc, #220]	; (6000edac <z_set_prio+0xf8>)
6000ecce:	f7fe fc33 	bl	6000d538 <z_spin_lock_valid>
6000ecd2:	4607      	mov	r7, r0
6000ecd4:	b960      	cbnz	r0, 6000ecf0 <z_set_prio+0x3c>
6000ecd6:	2394      	movs	r3, #148	; 0x94
6000ecd8:	4a35      	ldr	r2, [pc, #212]	; (6000edb0 <z_set_prio+0xfc>)
6000ecda:	4936      	ldr	r1, [pc, #216]	; (6000edb4 <z_set_prio+0x100>)
6000ecdc:	4836      	ldr	r0, [pc, #216]	; (6000edb8 <z_set_prio+0x104>)
6000ecde:	f003 ffbc 	bl	60012c5a <assert_print>
6000ece2:	4932      	ldr	r1, [pc, #200]	; (6000edac <z_set_prio+0xf8>)
6000ece4:	4835      	ldr	r0, [pc, #212]	; (6000edbc <z_set_prio+0x108>)
6000ece6:	f003 ffb8 	bl	60012c5a <assert_print>
6000ecea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ecec:	4830      	ldr	r0, [pc, #192]	; (6000edb0 <z_set_prio+0xfc>)
6000ecee:	e021      	b.n	6000ed34 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
6000ecf0:	482e      	ldr	r0, [pc, #184]	; (6000edac <z_set_prio+0xf8>)
				thread->base.prio = prio;
6000ecf2:	b276      	sxtb	r6, r6
6000ecf4:	f7fe fc3c 	bl	6000d570 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
6000ecf8:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
6000ecfa:	06da      	lsls	r2, r3, #27
6000ecfc:	d11c      	bne.n	6000ed38 <z_set_prio+0x84>
	return node->next != NULL;
6000ecfe:	69a5      	ldr	r5, [r4, #24]
6000ed00:	b9d5      	cbnz	r5, 6000ed38 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000ed02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6000ed06:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6000edc0 <z_set_prio+0x10c>
6000ed0a:	4621      	mov	r1, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000ed0c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000ed0e:	4640      	mov	r0, r8
6000ed10:	f7ff fe00 	bl	6000e914 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
6000ed14:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
6000ed16:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
6000ed18:	f063 037f 	orn	r3, r3, #127	; 0x7f
6000ed1c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000ed1e:	4b29      	ldr	r3, [pc, #164]	; (6000edc4 <z_set_prio+0x110>)
6000ed20:	429c      	cmp	r4, r3
6000ed22:	d11b      	bne.n	6000ed5c <z_set_prio+0xa8>
6000ed24:	4928      	ldr	r1, [pc, #160]	; (6000edc8 <z_set_prio+0x114>)
6000ed26:	23bb      	movs	r3, #187	; 0xbb
6000ed28:	4823      	ldr	r0, [pc, #140]	; (6000edb8 <z_set_prio+0x104>)
6000ed2a:	4a28      	ldr	r2, [pc, #160]	; (6000edcc <z_set_prio+0x118>)
6000ed2c:	f003 ff95 	bl	60012c5a <assert_print>
6000ed30:	21bb      	movs	r1, #187	; 0xbb
6000ed32:	4826      	ldr	r0, [pc, #152]	; (6000edcc <z_set_prio+0x118>)
6000ed34:	f003 ff8a 	bl	60012c4c <assert_post_action>
6000ed38:	2700      	movs	r7, #0
			thread->base.prio = prio;
6000ed3a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ed3c:	481b      	ldr	r0, [pc, #108]	; (6000edac <z_set_prio+0xf8>)
6000ed3e:	f7fe fc09 	bl	6000d554 <z_spin_unlock_valid>
6000ed42:	bb58      	cbnz	r0, 6000ed9c <z_set_prio+0xe8>
6000ed44:	23c2      	movs	r3, #194	; 0xc2
6000ed46:	4a1a      	ldr	r2, [pc, #104]	; (6000edb0 <z_set_prio+0xfc>)
6000ed48:	4921      	ldr	r1, [pc, #132]	; (6000edd0 <z_set_prio+0x11c>)
6000ed4a:	481b      	ldr	r0, [pc, #108]	; (6000edb8 <z_set_prio+0x104>)
6000ed4c:	f003 ff85 	bl	60012c5a <assert_print>
6000ed50:	4916      	ldr	r1, [pc, #88]	; (6000edac <z_set_prio+0xf8>)
6000ed52:	4820      	ldr	r0, [pc, #128]	; (6000edd4 <z_set_prio+0x120>)
6000ed54:	f003 ff81 	bl	60012c5a <assert_print>
6000ed58:	21c2      	movs	r1, #194	; 0xc2
6000ed5a:	e7c7      	b.n	6000ecec <z_set_prio+0x38>
	return list->head == list;
6000ed5c:	4643      	mov	r3, r8
6000ed5e:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000ed62:	4542      	cmp	r2, r8
6000ed64:	bf18      	it	ne
6000ed66:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
6000ed68:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000ed6a:	b925      	cbnz	r5, 6000ed76 <z_set_prio+0xc2>
	node->prev = tail;
6000ed6c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
6000ed70:	6014      	str	r4, [r2, #0]
	list->tail = node;
6000ed72:	621c      	str	r4, [r3, #32]
}
6000ed74:	e00a      	b.n	6000ed8c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
6000ed76:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
6000ed7a:	428e      	cmp	r6, r1
6000ed7c:	d00a      	beq.n	6000ed94 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000ed7e:	42b1      	cmp	r1, r6
6000ed80:	dd08      	ble.n	6000ed94 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
6000ed82:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
6000ed84:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
6000ed88:	601c      	str	r4, [r3, #0]
	successor->prev = node;
6000ed8a:	606c      	str	r4, [r5, #4]
			update_cache(1);
6000ed8c:	2001      	movs	r0, #1
6000ed8e:	f7ff fae5 	bl	6000e35c <update_cache>
6000ed92:	e7d3      	b.n	6000ed3c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
6000ed94:	42aa      	cmp	r2, r5
6000ed96:	d0e9      	beq.n	6000ed6c <z_set_prio+0xb8>
6000ed98:	682d      	ldr	r5, [r5, #0]
6000ed9a:	e7e6      	b.n	6000ed6a <z_set_prio+0xb6>
	__asm__ volatile(
6000ed9c:	f389 8811 	msr	BASEPRI, r9
6000eda0:	f3bf 8f6f 	isb	sy
}
6000eda4:	4638      	mov	r0, r7
6000eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
6000edaa:	bf00      	nop
6000edac:	20204240 	.word	0x20204240
6000edb0:	6001717c 	.word	0x6001717c
6000edb4:	600171a9 	.word	0x600171a9
6000edb8:	60016dfb 	.word	0x60016dfb
6000edbc:	600171be 	.word	0x600171be
6000edc0:	20204218 	.word	0x20204218
6000edc4:	20203a40 	.word	0x20203a40
6000edc8:	600196ad 	.word	0x600196ad
6000edcc:	60019664 	.word	0x60019664
6000edd0:	600171d6 	.word	0x600171d6
6000edd4:	600171ed 	.word	0x600171ed

6000edd8 <z_impl_k_thread_suspend>:
{
6000edd8:	b570      	push	{r4, r5, r6, lr}
6000edda:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
6000eddc:	3018      	adds	r0, #24
6000edde:	f000 fdbf 	bl	6000f960 <z_abort_timeout>
	__asm__ volatile(
6000ede2:	f04f 0310 	mov.w	r3, #16
6000ede6:	f3ef 8611 	mrs	r6, BASEPRI
6000edea:	f383 8812 	msr	BASEPRI_MAX, r3
6000edee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000edf2:	4824      	ldr	r0, [pc, #144]	; (6000ee84 <z_impl_k_thread_suspend+0xac>)
6000edf4:	f7fe fba0 	bl	6000d538 <z_spin_lock_valid>
6000edf8:	b968      	cbnz	r0, 6000ee16 <z_impl_k_thread_suspend+0x3e>
6000edfa:	2394      	movs	r3, #148	; 0x94
6000edfc:	4a22      	ldr	r2, [pc, #136]	; (6000ee88 <z_impl_k_thread_suspend+0xb0>)
6000edfe:	4923      	ldr	r1, [pc, #140]	; (6000ee8c <z_impl_k_thread_suspend+0xb4>)
6000ee00:	4823      	ldr	r0, [pc, #140]	; (6000ee90 <z_impl_k_thread_suspend+0xb8>)
6000ee02:	f003 ff2a 	bl	60012c5a <assert_print>
6000ee06:	491f      	ldr	r1, [pc, #124]	; (6000ee84 <z_impl_k_thread_suspend+0xac>)
6000ee08:	4822      	ldr	r0, [pc, #136]	; (6000ee94 <z_impl_k_thread_suspend+0xbc>)
6000ee0a:	f003 ff26 	bl	60012c5a <assert_print>
6000ee0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ee10:	481d      	ldr	r0, [pc, #116]	; (6000ee88 <z_impl_k_thread_suspend+0xb0>)
6000ee12:	f003 ff1b 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000ee16:	481b      	ldr	r0, [pc, #108]	; (6000ee84 <z_impl_k_thread_suspend+0xac>)
6000ee18:	f7fe fbaa 	bl	6000d570 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
6000ee1c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
6000ee20:	7b63      	ldrb	r3, [r4, #13]
6000ee22:	2a00      	cmp	r2, #0
6000ee24:	da06      	bge.n	6000ee34 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000ee26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6000ee2a:	4621      	mov	r1, r4
6000ee2c:	481a      	ldr	r0, [pc, #104]	; (6000ee98 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000ee2e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000ee30:	f7ff fd70 	bl	6000e914 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
6000ee34:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
6000ee36:	4d19      	ldr	r5, [pc, #100]	; (6000ee9c <z_impl_k_thread_suspend+0xc4>)
6000ee38:	f043 0310 	orr.w	r3, r3, #16
6000ee3c:	68a8      	ldr	r0, [r5, #8]
6000ee3e:	7363      	strb	r3, [r4, #13]
6000ee40:	1b03      	subs	r3, r0, r4
6000ee42:	4258      	negs	r0, r3
6000ee44:	4158      	adcs	r0, r3
6000ee46:	f7ff fa89 	bl	6000e35c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ee4a:	480e      	ldr	r0, [pc, #56]	; (6000ee84 <z_impl_k_thread_suspend+0xac>)
6000ee4c:	f7fe fb82 	bl	6000d554 <z_spin_unlock_valid>
6000ee50:	b958      	cbnz	r0, 6000ee6a <z_impl_k_thread_suspend+0x92>
6000ee52:	23c2      	movs	r3, #194	; 0xc2
6000ee54:	4a0c      	ldr	r2, [pc, #48]	; (6000ee88 <z_impl_k_thread_suspend+0xb0>)
6000ee56:	4912      	ldr	r1, [pc, #72]	; (6000eea0 <z_impl_k_thread_suspend+0xc8>)
6000ee58:	480d      	ldr	r0, [pc, #52]	; (6000ee90 <z_impl_k_thread_suspend+0xb8>)
6000ee5a:	f003 fefe 	bl	60012c5a <assert_print>
6000ee5e:	4909      	ldr	r1, [pc, #36]	; (6000ee84 <z_impl_k_thread_suspend+0xac>)
6000ee60:	4810      	ldr	r0, [pc, #64]	; (6000eea4 <z_impl_k_thread_suspend+0xcc>)
6000ee62:	f003 fefa 	bl	60012c5a <assert_print>
6000ee66:	21c2      	movs	r1, #194	; 0xc2
6000ee68:	e7d2      	b.n	6000ee10 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
6000ee6a:	f386 8811 	msr	BASEPRI, r6
6000ee6e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
6000ee72:	68ab      	ldr	r3, [r5, #8]
6000ee74:	42a3      	cmp	r3, r4
6000ee76:	d103      	bne.n	6000ee80 <z_impl_k_thread_suspend+0xa8>
}
6000ee78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
6000ee7c:	f005 bc24 	b.w	600146c8 <z_reschedule_unlocked>
}
6000ee80:	bd70      	pop	{r4, r5, r6, pc}
6000ee82:	bf00      	nop
6000ee84:	20204240 	.word	0x20204240
6000ee88:	6001717c 	.word	0x6001717c
6000ee8c:	600171a9 	.word	0x600171a9
6000ee90:	60016dfb 	.word	0x60016dfb
6000ee94:	600171be 	.word	0x600171be
6000ee98:	20204218 	.word	0x20204218
6000ee9c:	202041fc 	.word	0x202041fc
6000eea0:	600171d6 	.word	0x600171d6
6000eea4:	600171ed 	.word	0x600171ed

6000eea8 <unpend_thread_no_timeout>:
{
6000eea8:	b510      	push	{r4, lr}
6000eeaa:	4604      	mov	r4, r0
6000eeac:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
6000eeae:	b958      	cbnz	r0, 6000eec8 <unpend_thread_no_timeout+0x20>
6000eeb0:	490a      	ldr	r1, [pc, #40]	; (6000eedc <unpend_thread_no_timeout+0x34>)
6000eeb2:	f44f 7336 	mov.w	r3, #728	; 0x2d8
6000eeb6:	480a      	ldr	r0, [pc, #40]	; (6000eee0 <unpend_thread_no_timeout+0x38>)
6000eeb8:	4a0a      	ldr	r2, [pc, #40]	; (6000eee4 <unpend_thread_no_timeout+0x3c>)
6000eeba:	f003 fece 	bl	60012c5a <assert_print>
6000eebe:	f44f 7136 	mov.w	r1, #728	; 0x2d8
6000eec2:	4808      	ldr	r0, [pc, #32]	; (6000eee4 <unpend_thread_no_timeout+0x3c>)
6000eec4:	f003 fec2 	bl	60012c4c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
6000eec8:	4621      	mov	r1, r4
6000eeca:	f7ff fd23 	bl	6000e914 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
6000eece:	7b63      	ldrb	r3, [r4, #13]
6000eed0:	f023 0302 	bic.w	r3, r3, #2
6000eed4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
6000eed6:	2300      	movs	r3, #0
6000eed8:	60a3      	str	r3, [r4, #8]
}
6000eeda:	bd10      	pop	{r4, pc}
6000eedc:	60019792 	.word	0x60019792
6000eee0:	60016dfb 	.word	0x60016dfb
6000eee4:	60019664 	.word	0x60019664

6000eee8 <z_unpend_thread>:
{
6000eee8:	b538      	push	{r3, r4, r5, lr}
6000eeea:	4604      	mov	r4, r0
	__asm__ volatile(
6000eeec:	f04f 0310 	mov.w	r3, #16
6000eef0:	f3ef 8511 	mrs	r5, BASEPRI
6000eef4:	f383 8812 	msr	BASEPRI_MAX, r3
6000eef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000eefc:	4819      	ldr	r0, [pc, #100]	; (6000ef64 <z_unpend_thread+0x7c>)
6000eefe:	f7fe fb1b 	bl	6000d538 <z_spin_lock_valid>
6000ef02:	b968      	cbnz	r0, 6000ef20 <z_unpend_thread+0x38>
6000ef04:	2394      	movs	r3, #148	; 0x94
6000ef06:	4a18      	ldr	r2, [pc, #96]	; (6000ef68 <z_unpend_thread+0x80>)
6000ef08:	4918      	ldr	r1, [pc, #96]	; (6000ef6c <z_unpend_thread+0x84>)
6000ef0a:	4819      	ldr	r0, [pc, #100]	; (6000ef70 <z_unpend_thread+0x88>)
6000ef0c:	f003 fea5 	bl	60012c5a <assert_print>
6000ef10:	4914      	ldr	r1, [pc, #80]	; (6000ef64 <z_unpend_thread+0x7c>)
6000ef12:	4818      	ldr	r0, [pc, #96]	; (6000ef74 <z_unpend_thread+0x8c>)
6000ef14:	f003 fea1 	bl	60012c5a <assert_print>
6000ef18:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ef1a:	4813      	ldr	r0, [pc, #76]	; (6000ef68 <z_unpend_thread+0x80>)
6000ef1c:	f003 fe96 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000ef20:	4810      	ldr	r0, [pc, #64]	; (6000ef64 <z_unpend_thread+0x7c>)
6000ef22:	f7fe fb25 	bl	6000d570 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
6000ef26:	68a3      	ldr	r3, [r4, #8]
6000ef28:	b113      	cbz	r3, 6000ef30 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
6000ef2a:	4620      	mov	r0, r4
6000ef2c:	f7ff ffbc 	bl	6000eea8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ef30:	480c      	ldr	r0, [pc, #48]	; (6000ef64 <z_unpend_thread+0x7c>)
6000ef32:	f7fe fb0f 	bl	6000d554 <z_spin_unlock_valid>
6000ef36:	b958      	cbnz	r0, 6000ef50 <z_unpend_thread+0x68>
6000ef38:	23c2      	movs	r3, #194	; 0xc2
6000ef3a:	4a0b      	ldr	r2, [pc, #44]	; (6000ef68 <z_unpend_thread+0x80>)
6000ef3c:	490e      	ldr	r1, [pc, #56]	; (6000ef78 <z_unpend_thread+0x90>)
6000ef3e:	480c      	ldr	r0, [pc, #48]	; (6000ef70 <z_unpend_thread+0x88>)
6000ef40:	f003 fe8b 	bl	60012c5a <assert_print>
6000ef44:	4907      	ldr	r1, [pc, #28]	; (6000ef64 <z_unpend_thread+0x7c>)
6000ef46:	480d      	ldr	r0, [pc, #52]	; (6000ef7c <z_unpend_thread+0x94>)
6000ef48:	f003 fe87 	bl	60012c5a <assert_print>
6000ef4c:	21c2      	movs	r1, #194	; 0xc2
6000ef4e:	e7e4      	b.n	6000ef1a <z_unpend_thread+0x32>
	__asm__ volatile(
6000ef50:	f385 8811 	msr	BASEPRI, r5
6000ef54:	f3bf 8f6f 	isb	sy
6000ef58:	f104 0018 	add.w	r0, r4, #24
}
6000ef5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
6000ef60:	f000 bcfe 	b.w	6000f960 <z_abort_timeout>
6000ef64:	20204240 	.word	0x20204240
6000ef68:	6001717c 	.word	0x6001717c
6000ef6c:	600171a9 	.word	0x600171a9
6000ef70:	60016dfb 	.word	0x60016dfb
6000ef74:	600171be 	.word	0x600171be
6000ef78:	600171d6 	.word	0x600171d6
6000ef7c:	600171ed 	.word	0x600171ed

6000ef80 <z_thread_timeout>:
{
6000ef80:	b570      	push	{r4, r5, r6, lr}
6000ef82:	4604      	mov	r4, r0
	__asm__ volatile(
6000ef84:	f04f 0310 	mov.w	r3, #16
6000ef88:	f3ef 8611 	mrs	r6, BASEPRI
6000ef8c:	f383 8812 	msr	BASEPRI_MAX, r3
6000ef90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ef94:	481f      	ldr	r0, [pc, #124]	; (6000f014 <z_thread_timeout+0x94>)
6000ef96:	f7fe facf 	bl	6000d538 <z_spin_lock_valid>
6000ef9a:	b968      	cbnz	r0, 6000efb8 <z_thread_timeout+0x38>
6000ef9c:	2394      	movs	r3, #148	; 0x94
6000ef9e:	4a1e      	ldr	r2, [pc, #120]	; (6000f018 <z_thread_timeout+0x98>)
6000efa0:	491e      	ldr	r1, [pc, #120]	; (6000f01c <z_thread_timeout+0x9c>)
6000efa2:	481f      	ldr	r0, [pc, #124]	; (6000f020 <z_thread_timeout+0xa0>)
6000efa4:	f003 fe59 	bl	60012c5a <assert_print>
6000efa8:	491a      	ldr	r1, [pc, #104]	; (6000f014 <z_thread_timeout+0x94>)
6000efaa:	481e      	ldr	r0, [pc, #120]	; (6000f024 <z_thread_timeout+0xa4>)
6000efac:	f003 fe55 	bl	60012c5a <assert_print>
6000efb0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000efb2:	4819      	ldr	r0, [pc, #100]	; (6000f018 <z_thread_timeout+0x98>)
6000efb4:	f003 fe4a 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000efb8:	4816      	ldr	r0, [pc, #88]	; (6000f014 <z_thread_timeout+0x94>)
6000efba:	f7fe fad9 	bl	6000d570 <z_spin_lock_set_owner>
		if (!killed) {
6000efbe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
6000efc2:	f013 0f28 	tst.w	r3, #40	; 0x28
6000efc6:	d110      	bne.n	6000efea <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
6000efc8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
6000efcc:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
6000efd0:	b113      	cbz	r3, 6000efd8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
6000efd2:	4628      	mov	r0, r5
6000efd4:	f7ff ff68 	bl	6000eea8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
6000efd8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
6000efdc:	4628      	mov	r0, r5
6000efde:	f023 0314 	bic.w	r3, r3, #20
6000efe2:	f804 3c0b 	strb.w	r3, [r4, #-11]
6000efe6:	f7ff f9ed 	bl	6000e3c4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000efea:	480a      	ldr	r0, [pc, #40]	; (6000f014 <z_thread_timeout+0x94>)
6000efec:	f7fe fab2 	bl	6000d554 <z_spin_unlock_valid>
6000eff0:	b958      	cbnz	r0, 6000f00a <z_thread_timeout+0x8a>
6000eff2:	23c2      	movs	r3, #194	; 0xc2
6000eff4:	4a08      	ldr	r2, [pc, #32]	; (6000f018 <z_thread_timeout+0x98>)
6000eff6:	490c      	ldr	r1, [pc, #48]	; (6000f028 <z_thread_timeout+0xa8>)
6000eff8:	4809      	ldr	r0, [pc, #36]	; (6000f020 <z_thread_timeout+0xa0>)
6000effa:	f003 fe2e 	bl	60012c5a <assert_print>
6000effe:	4905      	ldr	r1, [pc, #20]	; (6000f014 <z_thread_timeout+0x94>)
6000f000:	480a      	ldr	r0, [pc, #40]	; (6000f02c <z_thread_timeout+0xac>)
6000f002:	f003 fe2a 	bl	60012c5a <assert_print>
6000f006:	21c2      	movs	r1, #194	; 0xc2
6000f008:	e7d3      	b.n	6000efb2 <z_thread_timeout+0x32>
	__asm__ volatile(
6000f00a:	f386 8811 	msr	BASEPRI, r6
6000f00e:	f3bf 8f6f 	isb	sy
}
6000f012:	bd70      	pop	{r4, r5, r6, pc}
6000f014:	20204240 	.word	0x20204240
6000f018:	6001717c 	.word	0x6001717c
6000f01c:	600171a9 	.word	0x600171a9
6000f020:	60016dfb 	.word	0x60016dfb
6000f024:	600171be 	.word	0x600171be
6000f028:	600171d6 	.word	0x600171d6
6000f02c:	600171ed 	.word	0x600171ed

6000f030 <z_unpend1_no_timeout>:
{
6000f030:	b570      	push	{r4, r5, r6, lr}
6000f032:	4605      	mov	r5, r0
	__asm__ volatile(
6000f034:	f04f 0310 	mov.w	r3, #16
6000f038:	f3ef 8611 	mrs	r6, BASEPRI
6000f03c:	f383 8812 	msr	BASEPRI_MAX, r3
6000f040:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f044:	4819      	ldr	r0, [pc, #100]	; (6000f0ac <z_unpend1_no_timeout+0x7c>)
6000f046:	f7fe fa77 	bl	6000d538 <z_spin_lock_valid>
6000f04a:	b968      	cbnz	r0, 6000f068 <z_unpend1_no_timeout+0x38>
6000f04c:	2394      	movs	r3, #148	; 0x94
6000f04e:	4a18      	ldr	r2, [pc, #96]	; (6000f0b0 <z_unpend1_no_timeout+0x80>)
6000f050:	4918      	ldr	r1, [pc, #96]	; (6000f0b4 <z_unpend1_no_timeout+0x84>)
6000f052:	4819      	ldr	r0, [pc, #100]	; (6000f0b8 <z_unpend1_no_timeout+0x88>)
6000f054:	f003 fe01 	bl	60012c5a <assert_print>
6000f058:	4914      	ldr	r1, [pc, #80]	; (6000f0ac <z_unpend1_no_timeout+0x7c>)
6000f05a:	4818      	ldr	r0, [pc, #96]	; (6000f0bc <z_unpend1_no_timeout+0x8c>)
6000f05c:	f003 fdfd 	bl	60012c5a <assert_print>
6000f060:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f062:	4813      	ldr	r0, [pc, #76]	; (6000f0b0 <z_unpend1_no_timeout+0x80>)
6000f064:	f003 fdf2 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000f068:	4810      	ldr	r0, [pc, #64]	; (6000f0ac <z_unpend1_no_timeout+0x7c>)
6000f06a:	f7fe fa81 	bl	6000d570 <z_spin_lock_set_owner>
	return list->head == list;
6000f06e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f070:	42a5      	cmp	r5, r4
6000f072:	d013      	beq.n	6000f09c <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
6000f074:	b114      	cbz	r4, 6000f07c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
6000f076:	4620      	mov	r0, r4
6000f078:	f7ff ff16 	bl	6000eea8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f07c:	480b      	ldr	r0, [pc, #44]	; (6000f0ac <z_unpend1_no_timeout+0x7c>)
6000f07e:	f7fe fa69 	bl	6000d554 <z_spin_unlock_valid>
6000f082:	b968      	cbnz	r0, 6000f0a0 <z_unpend1_no_timeout+0x70>
6000f084:	23c2      	movs	r3, #194	; 0xc2
6000f086:	4a0a      	ldr	r2, [pc, #40]	; (6000f0b0 <z_unpend1_no_timeout+0x80>)
6000f088:	490d      	ldr	r1, [pc, #52]	; (6000f0c0 <z_unpend1_no_timeout+0x90>)
6000f08a:	480b      	ldr	r0, [pc, #44]	; (6000f0b8 <z_unpend1_no_timeout+0x88>)
6000f08c:	f003 fde5 	bl	60012c5a <assert_print>
6000f090:	4906      	ldr	r1, [pc, #24]	; (6000f0ac <z_unpend1_no_timeout+0x7c>)
6000f092:	480c      	ldr	r0, [pc, #48]	; (6000f0c4 <z_unpend1_no_timeout+0x94>)
6000f094:	f003 fde1 	bl	60012c5a <assert_print>
6000f098:	21c2      	movs	r1, #194	; 0xc2
6000f09a:	e7e2      	b.n	6000f062 <z_unpend1_no_timeout+0x32>
6000f09c:	2400      	movs	r4, #0
6000f09e:	e7ed      	b.n	6000f07c <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
6000f0a0:	f386 8811 	msr	BASEPRI, r6
6000f0a4:	f3bf 8f6f 	isb	sy
}
6000f0a8:	4620      	mov	r0, r4
6000f0aa:	bd70      	pop	{r4, r5, r6, pc}
6000f0ac:	20204240 	.word	0x20204240
6000f0b0:	6001717c 	.word	0x6001717c
6000f0b4:	600171a9 	.word	0x600171a9
6000f0b8:	60016dfb 	.word	0x60016dfb
6000f0bc:	600171be 	.word	0x600171be
6000f0c0:	600171d6 	.word	0x600171d6
6000f0c4:	600171ed 	.word	0x600171ed

6000f0c8 <z_unpend_first_thread>:
{
6000f0c8:	b570      	push	{r4, r5, r6, lr}
6000f0ca:	4605      	mov	r5, r0
	__asm__ volatile(
6000f0cc:	f04f 0310 	mov.w	r3, #16
6000f0d0:	f3ef 8611 	mrs	r6, BASEPRI
6000f0d4:	f383 8812 	msr	BASEPRI_MAX, r3
6000f0d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f0dc:	481b      	ldr	r0, [pc, #108]	; (6000f14c <z_unpend_first_thread+0x84>)
6000f0de:	f7fe fa2b 	bl	6000d538 <z_spin_lock_valid>
6000f0e2:	b968      	cbnz	r0, 6000f100 <z_unpend_first_thread+0x38>
6000f0e4:	2394      	movs	r3, #148	; 0x94
6000f0e6:	4a1a      	ldr	r2, [pc, #104]	; (6000f150 <z_unpend_first_thread+0x88>)
6000f0e8:	491a      	ldr	r1, [pc, #104]	; (6000f154 <z_unpend_first_thread+0x8c>)
6000f0ea:	481b      	ldr	r0, [pc, #108]	; (6000f158 <z_unpend_first_thread+0x90>)
6000f0ec:	f003 fdb5 	bl	60012c5a <assert_print>
6000f0f0:	4916      	ldr	r1, [pc, #88]	; (6000f14c <z_unpend_first_thread+0x84>)
6000f0f2:	481a      	ldr	r0, [pc, #104]	; (6000f15c <z_unpend_first_thread+0x94>)
6000f0f4:	f003 fdb1 	bl	60012c5a <assert_print>
6000f0f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f0fa:	4815      	ldr	r0, [pc, #84]	; (6000f150 <z_unpend_first_thread+0x88>)
6000f0fc:	f003 fda6 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000f100:	4812      	ldr	r0, [pc, #72]	; (6000f14c <z_unpend_first_thread+0x84>)
6000f102:	f7fe fa35 	bl	6000d570 <z_spin_lock_set_owner>
	return list->head == list;
6000f106:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f108:	42a5      	cmp	r5, r4
6000f10a:	d017      	beq.n	6000f13c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
6000f10c:	b134      	cbz	r4, 6000f11c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
6000f10e:	4620      	mov	r0, r4
6000f110:	f7ff feca 	bl	6000eea8 <unpend_thread_no_timeout>
6000f114:	f104 0018 	add.w	r0, r4, #24
6000f118:	f000 fc22 	bl	6000f960 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f11c:	480b      	ldr	r0, [pc, #44]	; (6000f14c <z_unpend_first_thread+0x84>)
6000f11e:	f7fe fa19 	bl	6000d554 <z_spin_unlock_valid>
6000f122:	b968      	cbnz	r0, 6000f140 <z_unpend_first_thread+0x78>
6000f124:	23c2      	movs	r3, #194	; 0xc2
6000f126:	4a0a      	ldr	r2, [pc, #40]	; (6000f150 <z_unpend_first_thread+0x88>)
6000f128:	490d      	ldr	r1, [pc, #52]	; (6000f160 <z_unpend_first_thread+0x98>)
6000f12a:	480b      	ldr	r0, [pc, #44]	; (6000f158 <z_unpend_first_thread+0x90>)
6000f12c:	f003 fd95 	bl	60012c5a <assert_print>
6000f130:	4906      	ldr	r1, [pc, #24]	; (6000f14c <z_unpend_first_thread+0x84>)
6000f132:	480c      	ldr	r0, [pc, #48]	; (6000f164 <z_unpend_first_thread+0x9c>)
6000f134:	f003 fd91 	bl	60012c5a <assert_print>
6000f138:	21c2      	movs	r1, #194	; 0xc2
6000f13a:	e7de      	b.n	6000f0fa <z_unpend_first_thread+0x32>
6000f13c:	2400      	movs	r4, #0
6000f13e:	e7ed      	b.n	6000f11c <z_unpend_first_thread+0x54>
	__asm__ volatile(
6000f140:	f386 8811 	msr	BASEPRI, r6
6000f144:	f3bf 8f6f 	isb	sy
}
6000f148:	4620      	mov	r0, r4
6000f14a:	bd70      	pop	{r4, r5, r6, pc}
6000f14c:	20204240 	.word	0x20204240
6000f150:	6001717c 	.word	0x6001717c
6000f154:	600171a9 	.word	0x600171a9
6000f158:	60016dfb 	.word	0x60016dfb
6000f15c:	600171be 	.word	0x600171be
6000f160:	600171d6 	.word	0x600171d6
6000f164:	600171ed 	.word	0x600171ed

6000f168 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
6000f168:	4b04      	ldr	r3, [pc, #16]	; (6000f17c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
6000f16a:	2100      	movs	r1, #0
6000f16c:	f103 021c 	add.w	r2, r3, #28
6000f170:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
6000f172:	e9c3 2207 	strd	r2, r2, [r3, #28]
6000f176:	f7ff b96f 	b.w	6000e458 <k_sched_time_slice_set>
6000f17a:	bf00      	nop
6000f17c:	202041fc 	.word	0x202041fc

6000f180 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
6000f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000f182:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
6000f186:	b16b      	cbz	r3, 6000f1a4 <z_impl_k_yield+0x24>
6000f188:	493c      	ldr	r1, [pc, #240]	; (6000f27c <z_impl_k_yield+0xfc>)
6000f18a:	f240 5374 	movw	r3, #1396	; 0x574
6000f18e:	4a3c      	ldr	r2, [pc, #240]	; (6000f280 <z_impl_k_yield+0x100>)
6000f190:	483c      	ldr	r0, [pc, #240]	; (6000f284 <z_impl_k_yield+0x104>)
6000f192:	f003 fd62 	bl	60012c5a <assert_print>
6000f196:	483c      	ldr	r0, [pc, #240]	; (6000f288 <z_impl_k_yield+0x108>)
6000f198:	f003 fd5f 	bl	60012c5a <assert_print>
6000f19c:	f240 5174 	movw	r1, #1396	; 0x574
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000f1a0:	4837      	ldr	r0, [pc, #220]	; (6000f280 <z_impl_k_yield+0x100>)
6000f1a2:	e017      	b.n	6000f1d4 <z_impl_k_yield+0x54>
	__asm__ volatile(
6000f1a4:	f04f 0310 	mov.w	r3, #16
6000f1a8:	f3ef 8611 	mrs	r6, BASEPRI
6000f1ac:	f383 8812 	msr	BASEPRI_MAX, r3
6000f1b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f1b4:	4835      	ldr	r0, [pc, #212]	; (6000f28c <z_impl_k_yield+0x10c>)
6000f1b6:	f7fe f9bf 	bl	6000d538 <z_spin_lock_valid>
6000f1ba:	b968      	cbnz	r0, 6000f1d8 <z_impl_k_yield+0x58>
6000f1bc:	2394      	movs	r3, #148	; 0x94
6000f1be:	4a34      	ldr	r2, [pc, #208]	; (6000f290 <z_impl_k_yield+0x110>)
6000f1c0:	4934      	ldr	r1, [pc, #208]	; (6000f294 <z_impl_k_yield+0x114>)
6000f1c2:	4830      	ldr	r0, [pc, #192]	; (6000f284 <z_impl_k_yield+0x104>)
6000f1c4:	f003 fd49 	bl	60012c5a <assert_print>
6000f1c8:	4930      	ldr	r1, [pc, #192]	; (6000f28c <z_impl_k_yield+0x10c>)
6000f1ca:	4833      	ldr	r0, [pc, #204]	; (6000f298 <z_impl_k_yield+0x118>)
6000f1cc:	f003 fd45 	bl	60012c5a <assert_print>
6000f1d0:	2194      	movs	r1, #148	; 0x94
6000f1d2:	482f      	ldr	r0, [pc, #188]	; (6000f290 <z_impl_k_yield+0x110>)
6000f1d4:	f003 fd3a 	bl	60012c4c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
6000f1d8:	4c30      	ldr	r4, [pc, #192]	; (6000f29c <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
6000f1da:	482c      	ldr	r0, [pc, #176]	; (6000f28c <z_impl_k_yield+0x10c>)
6000f1dc:	f7fe f9c8 	bl	6000d570 <z_spin_lock_set_owner>
6000f1e0:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
6000f1e2:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000f1e6:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000f1e8:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000f1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6000f1ee:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000f1f0:	f7ff fb90 	bl	6000e914 <z_priq_dumb_remove>
	}
	queue_thread(_current);
6000f1f4:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
6000f1f6:	7b5a      	ldrb	r2, [r3, #13]
6000f1f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
6000f1fc:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6000f1fe:	4a28      	ldr	r2, [pc, #160]	; (6000f2a0 <z_impl_k_yield+0x120>)
6000f200:	4293      	cmp	r3, r2
6000f202:	d107      	bne.n	6000f214 <z_impl_k_yield+0x94>
6000f204:	4927      	ldr	r1, [pc, #156]	; (6000f2a4 <z_impl_k_yield+0x124>)
6000f206:	23bb      	movs	r3, #187	; 0xbb
6000f208:	4a1d      	ldr	r2, [pc, #116]	; (6000f280 <z_impl_k_yield+0x100>)
6000f20a:	481e      	ldr	r0, [pc, #120]	; (6000f284 <z_impl_k_yield+0x104>)
6000f20c:	f003 fd25 	bl	60012c5a <assert_print>
6000f210:	21bb      	movs	r1, #187	; 0xbb
6000f212:	e7c5      	b.n	6000f1a0 <z_impl_k_yield+0x20>
	return list->head == list;
6000f214:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
6000f216:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f218:	42aa      	cmp	r2, r5
6000f21a:	bf08      	it	eq
6000f21c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000f21e:	b922      	cbnz	r2, 6000f22a <z_impl_k_yield+0xaa>
	node->prev = tail;
6000f220:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
6000f224:	600b      	str	r3, [r1, #0]
	list->tail = node;
6000f226:	6223      	str	r3, [r4, #32]
}
6000f228:	e00c      	b.n	6000f244 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
6000f22a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
6000f22e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
6000f232:	42b8      	cmp	r0, r7
6000f234:	d019      	beq.n	6000f26a <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000f236:	4287      	cmp	r7, r0
6000f238:	dd17      	ble.n	6000f26a <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
6000f23a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
6000f23c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
6000f240:	600b      	str	r3, [r1, #0]
	successor->prev = node;
6000f242:	6053      	str	r3, [r2, #4]
	update_cache(1);
6000f244:	2001      	movs	r0, #1
6000f246:	f7ff f889 	bl	6000e35c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f24a:	4810      	ldr	r0, [pc, #64]	; (6000f28c <z_impl_k_yield+0x10c>)
6000f24c:	f7fe f982 	bl	6000d554 <z_spin_unlock_valid>
6000f250:	b978      	cbnz	r0, 6000f272 <z_impl_k_yield+0xf2>
6000f252:	23e1      	movs	r3, #225	; 0xe1
6000f254:	4a0e      	ldr	r2, [pc, #56]	; (6000f290 <z_impl_k_yield+0x110>)
6000f256:	4914      	ldr	r1, [pc, #80]	; (6000f2a8 <z_impl_k_yield+0x128>)
6000f258:	480a      	ldr	r0, [pc, #40]	; (6000f284 <z_impl_k_yield+0x104>)
6000f25a:	f003 fcfe 	bl	60012c5a <assert_print>
6000f25e:	490b      	ldr	r1, [pc, #44]	; (6000f28c <z_impl_k_yield+0x10c>)
6000f260:	4812      	ldr	r0, [pc, #72]	; (6000f2ac <z_impl_k_yield+0x12c>)
6000f262:	f003 fcfa 	bl	60012c5a <assert_print>
6000f266:	21e1      	movs	r1, #225	; 0xe1
6000f268:	e7b3      	b.n	6000f1d2 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
6000f26a:	428a      	cmp	r2, r1
6000f26c:	d0d8      	beq.n	6000f220 <z_impl_k_yield+0xa0>
6000f26e:	6812      	ldr	r2, [r2, #0]
6000f270:	e7d5      	b.n	6000f21e <z_impl_k_yield+0x9e>
6000f272:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
6000f274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
6000f278:	f7f8 bf52 	b.w	60008120 <arch_swap>
6000f27c:	60019427 	.word	0x60019427
6000f280:	60019664 	.word	0x60019664
6000f284:	60016dfb 	.word	0x60016dfb
6000f288:	60019350 	.word	0x60019350
6000f28c:	20204240 	.word	0x20204240
6000f290:	6001717c 	.word	0x6001717c
6000f294:	600171a9 	.word	0x600171a9
6000f298:	600171be 	.word	0x600171be
6000f29c:	202041fc 	.word	0x202041fc
6000f2a0:	20203a40 	.word	0x20203a40
6000f2a4:	600196ad 	.word	0x600196ad
6000f2a8:	600171d6 	.word	0x600171d6
6000f2ac:	600171ed 	.word	0x600171ed

6000f2b0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
6000f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000f2b4:	4605      	mov	r5, r0
6000f2b6:	460e      	mov	r6, r1
6000f2b8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
6000f2bc:	b16b      	cbz	r3, 6000f2da <z_tick_sleep+0x2a>
6000f2be:	493f      	ldr	r1, [pc, #252]	; (6000f3bc <z_tick_sleep+0x10c>)
6000f2c0:	f44f 63b2 	mov.w	r3, #1424	; 0x590
6000f2c4:	4a3e      	ldr	r2, [pc, #248]	; (6000f3c0 <z_tick_sleep+0x110>)
6000f2c6:	483f      	ldr	r0, [pc, #252]	; (6000f3c4 <z_tick_sleep+0x114>)
6000f2c8:	f003 fcc7 	bl	60012c5a <assert_print>
6000f2cc:	483e      	ldr	r0, [pc, #248]	; (6000f3c8 <z_tick_sleep+0x118>)
6000f2ce:	f003 fcc4 	bl	60012c5a <assert_print>
6000f2d2:	f44f 61b2 	mov.w	r1, #1424	; 0x590
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
6000f2d6:	483a      	ldr	r0, [pc, #232]	; (6000f3c0 <z_tick_sleep+0x110>)
6000f2d8:	e025      	b.n	6000f326 <z_tick_sleep+0x76>
	if (ticks == 0) {
6000f2da:	ea50 0301 	orrs.w	r3, r0, r1
6000f2de:	d103      	bne.n	6000f2e8 <z_tick_sleep+0x38>
	z_impl_k_yield();
6000f2e0:	f7ff ff4e 	bl	6000f180 <z_impl_k_yield>
		return 0;
6000f2e4:	2000      	movs	r0, #0
6000f2e6:	e066      	b.n	6000f3b6 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
6000f2e8:	1c82      	adds	r2, r0, #2
6000f2ea:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
6000f2ee:	db1c      	blt.n	6000f32a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
6000f2f0:	f005 fa14 	bl	6001471c <sys_clock_tick_get_32>
6000f2f4:	182c      	adds	r4, r5, r0
6000f2f6:	f04f 0310 	mov.w	r3, #16
6000f2fa:	f3ef 8811 	mrs	r8, BASEPRI
6000f2fe:	f383 8812 	msr	BASEPRI_MAX, r3
6000f302:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f306:	4831      	ldr	r0, [pc, #196]	; (6000f3cc <z_tick_sleep+0x11c>)
6000f308:	f7fe f916 	bl	6000d538 <z_spin_lock_valid>
6000f30c:	b988      	cbnz	r0, 6000f332 <z_tick_sleep+0x82>
6000f30e:	2394      	movs	r3, #148	; 0x94
6000f310:	4a2f      	ldr	r2, [pc, #188]	; (6000f3d0 <z_tick_sleep+0x120>)
6000f312:	4930      	ldr	r1, [pc, #192]	; (6000f3d4 <z_tick_sleep+0x124>)
6000f314:	482b      	ldr	r0, [pc, #172]	; (6000f3c4 <z_tick_sleep+0x114>)
6000f316:	f003 fca0 	bl	60012c5a <assert_print>
6000f31a:	492c      	ldr	r1, [pc, #176]	; (6000f3cc <z_tick_sleep+0x11c>)
6000f31c:	482e      	ldr	r0, [pc, #184]	; (6000f3d8 <z_tick_sleep+0x128>)
6000f31e:	f003 fc9c 	bl	60012c5a <assert_print>
6000f322:	2194      	movs	r1, #148	; 0x94
6000f324:	482a      	ldr	r0, [pc, #168]	; (6000f3d0 <z_tick_sleep+0x120>)
6000f326:	f003 fc91 	bl	60012c4c <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
6000f32a:	f06f 0401 	mvn.w	r4, #1
6000f32e:	1a24      	subs	r4, r4, r0
6000f330:	e7e1      	b.n	6000f2f6 <z_tick_sleep+0x46>
	pending_current = _current;
6000f332:	4f2a      	ldr	r7, [pc, #168]	; (6000f3dc <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
6000f334:	4825      	ldr	r0, [pc, #148]	; (6000f3cc <z_tick_sleep+0x11c>)
6000f336:	f7fe f91b 	bl	6000d570 <z_spin_lock_set_owner>
6000f33a:	68b8      	ldr	r0, [r7, #8]
6000f33c:	4b28      	ldr	r3, [pc, #160]	; (6000f3e0 <z_tick_sleep+0x130>)
6000f33e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
6000f340:	f7ff fbd0 	bl	6000eae4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
6000f344:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
6000f346:	462a      	mov	r2, r5
6000f348:	4633      	mov	r3, r6
6000f34a:	4926      	ldr	r1, [pc, #152]	; (6000f3e4 <z_tick_sleep+0x134>)
6000f34c:	3018      	adds	r0, #24
6000f34e:	f000 fa41 	bl	6000f7d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
6000f352:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f354:	481d      	ldr	r0, [pc, #116]	; (6000f3cc <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
6000f356:	7b53      	ldrb	r3, [r2, #13]
6000f358:	f043 0310 	orr.w	r3, r3, #16
6000f35c:	7353      	strb	r3, [r2, #13]
6000f35e:	f7fe f8f9 	bl	6000d554 <z_spin_unlock_valid>
6000f362:	b958      	cbnz	r0, 6000f37c <z_tick_sleep+0xcc>
6000f364:	23e1      	movs	r3, #225	; 0xe1
6000f366:	4a1a      	ldr	r2, [pc, #104]	; (6000f3d0 <z_tick_sleep+0x120>)
6000f368:	491f      	ldr	r1, [pc, #124]	; (6000f3e8 <z_tick_sleep+0x138>)
6000f36a:	4816      	ldr	r0, [pc, #88]	; (6000f3c4 <z_tick_sleep+0x114>)
6000f36c:	f003 fc75 	bl	60012c5a <assert_print>
6000f370:	4916      	ldr	r1, [pc, #88]	; (6000f3cc <z_tick_sleep+0x11c>)
6000f372:	481e      	ldr	r0, [pc, #120]	; (6000f3ec <z_tick_sleep+0x13c>)
6000f374:	f003 fc71 	bl	60012c5a <assert_print>
6000f378:	21e1      	movs	r1, #225	; 0xe1
6000f37a:	e7d3      	b.n	6000f324 <z_tick_sleep+0x74>
6000f37c:	4640      	mov	r0, r8
6000f37e:	f7f8 fecf 	bl	60008120 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
6000f382:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
6000f384:	7b5b      	ldrb	r3, [r3, #13]
6000f386:	06db      	lsls	r3, r3, #27
6000f388:	d50c      	bpl.n	6000f3a4 <z_tick_sleep+0xf4>
6000f38a:	4919      	ldr	r1, [pc, #100]	; (6000f3f0 <z_tick_sleep+0x140>)
6000f38c:	f240 53ac 	movw	r3, #1452	; 0x5ac
6000f390:	4a0b      	ldr	r2, [pc, #44]	; (6000f3c0 <z_tick_sleep+0x110>)
6000f392:	480c      	ldr	r0, [pc, #48]	; (6000f3c4 <z_tick_sleep+0x114>)
6000f394:	f003 fc61 	bl	60012c5a <assert_print>
6000f398:	480b      	ldr	r0, [pc, #44]	; (6000f3c8 <z_tick_sleep+0x118>)
6000f39a:	f003 fc5e 	bl	60012c5a <assert_print>
6000f39e:	f240 51ac 	movw	r1, #1452	; 0x5ac
6000f3a2:	e798      	b.n	6000f2d6 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
6000f3a4:	f005 f9ba 	bl	6001471c <sys_clock_tick_get_32>
6000f3a8:	1a20      	subs	r0, r4, r0
6000f3aa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
6000f3ae:	2801      	cmp	r0, #1
6000f3b0:	f173 0300 	sbcs.w	r3, r3, #0
6000f3b4:	db96      	blt.n	6000f2e4 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
6000f3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
6000f3ba:	bf00      	nop
6000f3bc:	60019427 	.word	0x60019427
6000f3c0:	60019664 	.word	0x60019664
6000f3c4:	60016dfb 	.word	0x60016dfb
6000f3c8:	60019350 	.word	0x60019350
6000f3cc:	20204240 	.word	0x20204240
6000f3d0:	6001717c 	.word	0x6001717c
6000f3d4:	600171a9 	.word	0x600171a9
6000f3d8:	600171be 	.word	0x600171be
6000f3dc:	202041fc 	.word	0x202041fc
6000f3e0:	20204234 	.word	0x20204234
6000f3e4:	6000ef81 	.word	0x6000ef81
6000f3e8:	600171d6 	.word	0x600171d6
6000f3ec:	600171ed 	.word	0x600171ed
6000f3f0:	600197a9 	.word	0x600197a9

6000f3f4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
6000f3f4:	b508      	push	{r3, lr}
6000f3f6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
6000f3fa:	b173      	cbz	r3, 6000f41a <z_impl_k_sleep+0x26>
6000f3fc:	4911      	ldr	r1, [pc, #68]	; (6000f444 <z_impl_k_sleep+0x50>)
6000f3fe:	f240 53bb 	movw	r3, #1467	; 0x5bb
6000f402:	4a11      	ldr	r2, [pc, #68]	; (6000f448 <z_impl_k_sleep+0x54>)
6000f404:	4811      	ldr	r0, [pc, #68]	; (6000f44c <z_impl_k_sleep+0x58>)
6000f406:	f003 fc28 	bl	60012c5a <assert_print>
6000f40a:	4811      	ldr	r0, [pc, #68]	; (6000f450 <z_impl_k_sleep+0x5c>)
6000f40c:	f003 fc25 	bl	60012c5a <assert_print>
6000f410:	f240 51bb 	movw	r1, #1467	; 0x5bb
6000f414:	480c      	ldr	r0, [pc, #48]	; (6000f448 <z_impl_k_sleep+0x54>)
6000f416:	f003 fc19 	bl	60012c4c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
6000f41a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
6000f41e:	bf08      	it	eq
6000f420:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
6000f424:	d106      	bne.n	6000f434 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
6000f426:	4b0b      	ldr	r3, [pc, #44]	; (6000f454 <z_impl_k_sleep+0x60>)
6000f428:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
6000f42a:	f7ff fcd5 	bl	6000edd8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
6000f42e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
6000f432:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
6000f434:	f7ff ff3c 	bl	6000f2b0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
6000f438:	220a      	movs	r2, #10
6000f43a:	2300      	movs	r3, #0
6000f43c:	17c1      	asrs	r1, r0, #31
6000f43e:	f7f3 ffa1 	bl	60003384 <__aeabi_uldivmod>
	return ret;
6000f442:	e7f6      	b.n	6000f432 <z_impl_k_sleep+0x3e>
6000f444:	60019427 	.word	0x60019427
6000f448:	60019664 	.word	0x60019664
6000f44c:	60016dfb 	.word	0x60016dfb
6000f450:	60019350 	.word	0x60019350
6000f454:	202041fc 	.word	0x202041fc

6000f458 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
6000f458:	4b01      	ldr	r3, [pc, #4]	; (6000f460 <z_impl_z_current_get+0x8>)
6000f45a:	6898      	ldr	r0, [r3, #8]
6000f45c:	4770      	bx	lr
6000f45e:	bf00      	nop
6000f460:	202041fc 	.word	0x202041fc

6000f464 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
6000f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000f468:	4604      	mov	r4, r0
6000f46a:	f04f 0310 	mov.w	r3, #16
6000f46e:	f3ef 8611 	mrs	r6, BASEPRI
6000f472:	f383 8812 	msr	BASEPRI_MAX, r3
6000f476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f47a:	4851      	ldr	r0, [pc, #324]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f47c:	f7fe f85c 	bl	6000d538 <z_spin_lock_valid>
6000f480:	b968      	cbnz	r0, 6000f49e <z_thread_abort+0x3a>
6000f482:	2394      	movs	r3, #148	; 0x94
6000f484:	4a4f      	ldr	r2, [pc, #316]	; (6000f5c4 <z_thread_abort+0x160>)
6000f486:	4950      	ldr	r1, [pc, #320]	; (6000f5c8 <z_thread_abort+0x164>)
6000f488:	4850      	ldr	r0, [pc, #320]	; (6000f5cc <z_thread_abort+0x168>)
6000f48a:	f003 fbe6 	bl	60012c5a <assert_print>
6000f48e:	494c      	ldr	r1, [pc, #304]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f490:	484f      	ldr	r0, [pc, #316]	; (6000f5d0 <z_thread_abort+0x16c>)
6000f492:	f003 fbe2 	bl	60012c5a <assert_print>
6000f496:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f498:	484a      	ldr	r0, [pc, #296]	; (6000f5c4 <z_thread_abort+0x160>)
6000f49a:	f003 fbd7 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000f49e:	4848      	ldr	r0, [pc, #288]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f4a0:	f7fe f866 	bl	6000d570 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
6000f4a4:	7b23      	ldrb	r3, [r4, #12]
6000f4a6:	07d9      	lsls	r1, r3, #31
6000f4a8:	d522      	bpl.n	6000f4f0 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f4aa:	4845      	ldr	r0, [pc, #276]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f4ac:	f7fe f852 	bl	6000d554 <z_spin_unlock_valid>
6000f4b0:	b958      	cbnz	r0, 6000f4ca <z_thread_abort+0x66>
6000f4b2:	23c2      	movs	r3, #194	; 0xc2
6000f4b4:	4a43      	ldr	r2, [pc, #268]	; (6000f5c4 <z_thread_abort+0x160>)
6000f4b6:	4947      	ldr	r1, [pc, #284]	; (6000f5d4 <z_thread_abort+0x170>)
6000f4b8:	4844      	ldr	r0, [pc, #272]	; (6000f5cc <z_thread_abort+0x168>)
6000f4ba:	f003 fbce 	bl	60012c5a <assert_print>
6000f4be:	4940      	ldr	r1, [pc, #256]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f4c0:	4845      	ldr	r0, [pc, #276]	; (6000f5d8 <z_thread_abort+0x174>)
6000f4c2:	f003 fbca 	bl	60012c5a <assert_print>
6000f4c6:	21c2      	movs	r1, #194	; 0xc2
6000f4c8:	e7e6      	b.n	6000f498 <z_thread_abort+0x34>
	__asm__ volatile(
6000f4ca:	f386 8811 	msr	BASEPRI, r6
6000f4ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
6000f4d2:	f240 63c7 	movw	r3, #1735	; 0x6c7
6000f4d6:	4a41      	ldr	r2, [pc, #260]	; (6000f5dc <z_thread_abort+0x178>)
6000f4d8:	4941      	ldr	r1, [pc, #260]	; (6000f5e0 <z_thread_abort+0x17c>)
6000f4da:	483c      	ldr	r0, [pc, #240]	; (6000f5cc <z_thread_abort+0x168>)
6000f4dc:	f003 fbbd 	bl	60012c5a <assert_print>
6000f4e0:	4621      	mov	r1, r4
6000f4e2:	4840      	ldr	r0, [pc, #256]	; (6000f5e4 <z_thread_abort+0x180>)
6000f4e4:	f003 fbb9 	bl	60012c5a <assert_print>
6000f4e8:	f240 61c7 	movw	r1, #1735	; 0x6c7
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
6000f4ec:	483b      	ldr	r0, [pc, #236]	; (6000f5dc <z_thread_abort+0x178>)
6000f4ee:	e7d4      	b.n	6000f49a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
6000f4f0:	7b63      	ldrb	r3, [r4, #13]
6000f4f2:	071a      	lsls	r2, r3, #28
6000f4f4:	d50a      	bpl.n	6000f50c <z_thread_abort+0xa8>
6000f4f6:	4832      	ldr	r0, [pc, #200]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f4f8:	f7fe f82c 	bl	6000d554 <z_spin_unlock_valid>
6000f4fc:	2800      	cmp	r0, #0
6000f4fe:	d0d8      	beq.n	6000f4b2 <z_thread_abort+0x4e>
6000f500:	f386 8811 	msr	BASEPRI, r6
6000f504:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
6000f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
6000f50c:	f023 0220 	bic.w	r2, r3, #32
6000f510:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
6000f514:	09d2      	lsrs	r2, r2, #7
6000f516:	d12c      	bne.n	6000f572 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
6000f518:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
6000f51a:	68a3      	ldr	r3, [r4, #8]
6000f51c:	b113      	cbz	r3, 6000f524 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
6000f51e:	4620      	mov	r0, r4
6000f520:	f7ff fcc2 	bl	6000eea8 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
6000f524:	f104 0758 	add.w	r7, r4, #88	; 0x58
6000f528:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
6000f52c:	f104 0018 	add.w	r0, r4, #24
6000f530:	f000 fa16 	bl	6000f960 <z_abort_timeout>
	return list->head == list;
6000f534:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f536:	42bd      	cmp	r5, r7
6000f538:	d000      	beq.n	6000f53c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
6000f53a:	bb25      	cbnz	r5, 6000f586 <z_thread_abort+0x122>
		update_cache(1);
6000f53c:	2001      	movs	r0, #1
6000f53e:	f7fe ff0d 	bl	6000e35c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
6000f542:	4b29      	ldr	r3, [pc, #164]	; (6000f5e8 <z_thread_abort+0x184>)
6000f544:	689b      	ldr	r3, [r3, #8]
6000f546:	42a3      	cmp	r3, r4
6000f548:	d1d5      	bne.n	6000f4f6 <z_thread_abort+0x92>
6000f54a:	f3ef 8305 	mrs	r3, IPSR
6000f54e:	2b00      	cmp	r3, #0
6000f550:	d1d1      	bne.n	6000f4f6 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f552:	481b      	ldr	r0, [pc, #108]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f554:	f7fd fffe 	bl	6000d554 <z_spin_unlock_valid>
6000f558:	bb10      	cbnz	r0, 6000f5a0 <z_thread_abort+0x13c>
6000f55a:	23e1      	movs	r3, #225	; 0xe1
6000f55c:	4a19      	ldr	r2, [pc, #100]	; (6000f5c4 <z_thread_abort+0x160>)
6000f55e:	491d      	ldr	r1, [pc, #116]	; (6000f5d4 <z_thread_abort+0x170>)
6000f560:	481a      	ldr	r0, [pc, #104]	; (6000f5cc <z_thread_abort+0x168>)
6000f562:	f003 fb7a 	bl	60012c5a <assert_print>
6000f566:	4916      	ldr	r1, [pc, #88]	; (6000f5c0 <z_thread_abort+0x15c>)
6000f568:	481b      	ldr	r0, [pc, #108]	; (6000f5d8 <z_thread_abort+0x174>)
6000f56a:	f003 fb76 	bl	60012c5a <assert_print>
6000f56e:	21e1      	movs	r1, #225	; 0xe1
6000f570:	e792      	b.n	6000f498 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000f572:	f003 035f 	and.w	r3, r3, #95	; 0x5f
	_priq_run_remove(thread_runq(thread), thread);
6000f576:	4621      	mov	r1, r4
6000f578:	481c      	ldr	r0, [pc, #112]	; (6000f5ec <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
6000f57a:	f043 0308 	orr.w	r3, r3, #8
6000f57e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
6000f580:	f7ff f9c8 	bl	6000e914 <z_priq_dumb_remove>
}
6000f584:	e7c9      	b.n	6000f51a <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
6000f586:	4628      	mov	r0, r5
6000f588:	f7ff fc8e 	bl	6000eea8 <unpend_thread_no_timeout>
6000f58c:	f105 0018 	add.w	r0, r5, #24
6000f590:	f000 f9e6 	bl	6000f960 <z_abort_timeout>
		ready_thread(thread);
6000f594:	4628      	mov	r0, r5
6000f596:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
6000f59a:	f7fe ff13 	bl	6000e3c4 <ready_thread>
6000f59e:	e7c9      	b.n	6000f534 <z_thread_abort+0xd0>
6000f5a0:	4630      	mov	r0, r6
6000f5a2:	f7f8 fdbd 	bl	60008120 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
6000f5a6:	490e      	ldr	r1, [pc, #56]	; (6000f5e0 <z_thread_abort+0x17c>)
6000f5a8:	f240 63f6 	movw	r3, #1782	; 0x6f6
6000f5ac:	4a0b      	ldr	r2, [pc, #44]	; (6000f5dc <z_thread_abort+0x178>)
6000f5ae:	4807      	ldr	r0, [pc, #28]	; (6000f5cc <z_thread_abort+0x168>)
6000f5b0:	f003 fb53 	bl	60012c5a <assert_print>
6000f5b4:	480e      	ldr	r0, [pc, #56]	; (6000f5f0 <z_thread_abort+0x18c>)
6000f5b6:	f003 fb50 	bl	60012c5a <assert_print>
6000f5ba:	f240 61f6 	movw	r1, #1782	; 0x6f6
6000f5be:	e795      	b.n	6000f4ec <z_thread_abort+0x88>
6000f5c0:	20204240 	.word	0x20204240
6000f5c4:	6001717c 	.word	0x6001717c
6000f5c8:	600171a9 	.word	0x600171a9
6000f5cc:	60016dfb 	.word	0x60016dfb
6000f5d0:	600171be 	.word	0x600171be
6000f5d4:	600171d6 	.word	0x600171d6
6000f5d8:	600171ed 	.word	0x600171ed
6000f5dc:	60019664 	.word	0x60019664
6000f5e0:	60017072 	.word	0x60017072
6000f5e4:	600197e9 	.word	0x600197e9
6000f5e8:	202041fc 	.word	0x202041fc
6000f5ec:	20204218 	.word	0x20204218
6000f5f0:	60019808 	.word	0x60019808

6000f5f4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
6000f5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6000f5f8:	4606      	mov	r6, r0
6000f5fa:	4688      	mov	r8, r1
6000f5fc:	4617      	mov	r7, r2
	__asm__ volatile(
6000f5fe:	f04f 0310 	mov.w	r3, #16
6000f602:	f3ef 8911 	mrs	r9, BASEPRI
6000f606:	f383 8812 	msr	BASEPRI_MAX, r3
6000f60a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f60e:	4821      	ldr	r0, [pc, #132]	; (6000f694 <z_sched_wake+0xa0>)
6000f610:	f7fd ff92 	bl	6000d538 <z_spin_lock_valid>
6000f614:	4605      	mov	r5, r0
6000f616:	b968      	cbnz	r0, 6000f634 <z_sched_wake+0x40>
6000f618:	2394      	movs	r3, #148	; 0x94
6000f61a:	4a1f      	ldr	r2, [pc, #124]	; (6000f698 <z_sched_wake+0xa4>)
6000f61c:	491f      	ldr	r1, [pc, #124]	; (6000f69c <z_sched_wake+0xa8>)
6000f61e:	4820      	ldr	r0, [pc, #128]	; (6000f6a0 <z_sched_wake+0xac>)
6000f620:	f003 fb1b 	bl	60012c5a <assert_print>
6000f624:	491b      	ldr	r1, [pc, #108]	; (6000f694 <z_sched_wake+0xa0>)
6000f626:	481f      	ldr	r0, [pc, #124]	; (6000f6a4 <z_sched_wake+0xb0>)
6000f628:	f003 fb17 	bl	60012c5a <assert_print>
6000f62c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f62e:	481a      	ldr	r0, [pc, #104]	; (6000f698 <z_sched_wake+0xa4>)
6000f630:	f003 fb0c 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000f634:	4817      	ldr	r0, [pc, #92]	; (6000f694 <z_sched_wake+0xa0>)
6000f636:	f7fd ff9b 	bl	6000d570 <z_spin_lock_set_owner>
	return list->head == list;
6000f63a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f63c:	42a6      	cmp	r6, r4
6000f63e:	d01d      	beq.n	6000f67c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
6000f640:	b1f4      	cbz	r4, 6000f680 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
6000f642:	4620      	mov	r0, r4
6000f644:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
6000f648:	6167      	str	r7, [r4, #20]
6000f64a:	f7ff fc2d 	bl	6000eea8 <unpend_thread_no_timeout>
6000f64e:	f104 0018 	add.w	r0, r4, #24
6000f652:	f000 f985 	bl	6000f960 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
6000f656:	4620      	mov	r0, r4
6000f658:	f7fe feb4 	bl	6000e3c4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f65c:	480d      	ldr	r0, [pc, #52]	; (6000f694 <z_sched_wake+0xa0>)
6000f65e:	f7fd ff79 	bl	6000d554 <z_spin_unlock_valid>
6000f662:	b978      	cbnz	r0, 6000f684 <z_sched_wake+0x90>
6000f664:	23c2      	movs	r3, #194	; 0xc2
6000f666:	4a0c      	ldr	r2, [pc, #48]	; (6000f698 <z_sched_wake+0xa4>)
6000f668:	490f      	ldr	r1, [pc, #60]	; (6000f6a8 <z_sched_wake+0xb4>)
6000f66a:	480d      	ldr	r0, [pc, #52]	; (6000f6a0 <z_sched_wake+0xac>)
6000f66c:	f003 faf5 	bl	60012c5a <assert_print>
6000f670:	4908      	ldr	r1, [pc, #32]	; (6000f694 <z_sched_wake+0xa0>)
6000f672:	480e      	ldr	r0, [pc, #56]	; (6000f6ac <z_sched_wake+0xb8>)
6000f674:	f003 faf1 	bl	60012c5a <assert_print>
6000f678:	21c2      	movs	r1, #194	; 0xc2
6000f67a:	e7d8      	b.n	6000f62e <z_sched_wake+0x3a>
	bool ret = false;
6000f67c:	2500      	movs	r5, #0
6000f67e:	e7ed      	b.n	6000f65c <z_sched_wake+0x68>
6000f680:	4625      	mov	r5, r4
6000f682:	e7eb      	b.n	6000f65c <z_sched_wake+0x68>
	__asm__ volatile(
6000f684:	f389 8811 	msr	BASEPRI, r9
6000f688:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
6000f68c:	4628      	mov	r0, r5
6000f68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
6000f692:	bf00      	nop
6000f694:	20204240 	.word	0x20204240
6000f698:	6001717c 	.word	0x6001717c
6000f69c:	600171a9 	.word	0x600171a9
6000f6a0:	60016dfb 	.word	0x60016dfb
6000f6a4:	600171be 	.word	0x600171be
6000f6a8:	600171d6 	.word	0x600171d6
6000f6ac:	600171ed 	.word	0x600171ed

6000f6b0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
6000f6b0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
6000f6b2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
6000f6b6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
6000f6b8:	e9cd 6700 	strd	r6, r7, [sp]
6000f6bc:	f7ff fa84 	bl	6000ebc8 <z_pend_curr>

	if (data != NULL) {
6000f6c0:	b11c      	cbz	r4, 6000f6ca <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
6000f6c2:	4b03      	ldr	r3, [pc, #12]	; (6000f6d0 <z_sched_wait+0x20>)
6000f6c4:	689b      	ldr	r3, [r3, #8]
6000f6c6:	695b      	ldr	r3, [r3, #20]
6000f6c8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
6000f6ca:	b002      	add	sp, #8
6000f6cc:	bdd0      	pop	{r4, r6, r7, pc}
6000f6ce:	bf00      	nop
6000f6d0:	202041fc 	.word	0x202041fc

6000f6d4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
6000f6d4:	480c      	ldr	r0, [pc, #48]	; (6000f708 <z_data_copy+0x34>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
6000f6d6:	4a0d      	ldr	r2, [pc, #52]	; (6000f70c <z_data_copy+0x38>)
6000f6d8:	490d      	ldr	r1, [pc, #52]	; (6000f710 <z_data_copy+0x3c>)
6000f6da:	1a12      	subs	r2, r2, r0
{
6000f6dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
6000f6de:	f004 ff88 	bl	600145f2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
6000f6e2:	4a0c      	ldr	r2, [pc, #48]	; (6000f714 <z_data_copy+0x40>)
6000f6e4:	490c      	ldr	r1, [pc, #48]	; (6000f718 <z_data_copy+0x44>)
6000f6e6:	480d      	ldr	r0, [pc, #52]	; (6000f71c <z_data_copy+0x48>)
6000f6e8:	f004 ff83 	bl	600145f2 <z_early_memcpy>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		       __ccm_data_end - __ccm_data_start);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_itcm), okay)
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
6000f6ec:	4a0c      	ldr	r2, [pc, #48]	; (6000f720 <z_data_copy+0x4c>)
6000f6ee:	490d      	ldr	r1, [pc, #52]	; (6000f724 <z_data_copy+0x50>)
6000f6f0:	480d      	ldr	r0, [pc, #52]	; (6000f728 <z_data_copy+0x54>)
6000f6f2:	f004 ff7e 	bl	600145f2 <z_early_memcpy>
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
6000f6f6:	480d      	ldr	r0, [pc, #52]	; (6000f72c <z_data_copy+0x58>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
6000f6f8:	4a0d      	ldr	r2, [pc, #52]	; (6000f730 <z_data_copy+0x5c>)
6000f6fa:	490e      	ldr	r1, [pc, #56]	; (6000f734 <z_data_copy+0x60>)
6000f6fc:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
6000f6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
6000f702:	f004 bf76 	b.w	600145f2 <z_early_memcpy>
6000f706:	bf00      	nop
6000f708:	20202000 	.word	0x20202000
6000f70c:	20202dd4 	.word	0x20202dd4
6000f710:	600198c8 	.word	0x600198c8
6000f714:	00000000 	.word	0x00000000
6000f718:	600198c8 	.word	0x600198c8
6000f71c:	20202000 	.word	0x20202000
6000f720:	00000000 	.word	0x00000000
6000f724:	6001a69c 	.word	0x6001a69c
6000f728:	00000000 	.word	0x00000000
6000f72c:	20000000 	.word	0x20000000
6000f730:	20000000 	.word	0x20000000
6000f734:	6001a69c 	.word	0x6001a69c

6000f738 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
6000f738:	4b03      	ldr	r3, [pc, #12]	; (6000f748 <elapsed+0x10>)
6000f73a:	681b      	ldr	r3, [r3, #0]
6000f73c:	b90b      	cbnz	r3, 6000f742 <elapsed+0xa>
6000f73e:	f7fb bae7 	b.w	6000ad10 <sys_clock_elapsed>
}
6000f742:	2000      	movs	r0, #0
6000f744:	4770      	bx	lr
6000f746:	bf00      	nop
6000f748:	20204244 	.word	0x20204244

6000f74c <next_timeout>:
	return list->head == list;
6000f74c:	4b11      	ldr	r3, [pc, #68]	; (6000f794 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
6000f74e:	b510      	push	{r4, lr}
6000f750:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f752:	429c      	cmp	r4, r3
6000f754:	d10a      	bne.n	6000f76c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
6000f756:	f7ff ffef 	bl	6000f738 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
6000f75a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
6000f75e:	4b0e      	ldr	r3, [pc, #56]	; (6000f798 <next_timeout+0x4c>)
6000f760:	691b      	ldr	r3, [r3, #16]
6000f762:	b113      	cbz	r3, 6000f76a <next_timeout+0x1e>
6000f764:	4298      	cmp	r0, r3
6000f766:	bfa8      	it	ge
6000f768:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
6000f76a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
6000f76c:	f7ff ffe4 	bl	6000f738 <elapsed>
	if ((to == NULL) ||
6000f770:	2c00      	cmp	r4, #0
6000f772:	d0f2      	beq.n	6000f75a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
6000f774:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
6000f778:	1a1b      	subs	r3, r3, r0
6000f77a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
6000f77e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
6000f782:	f172 0100 	sbcs.w	r1, r2, #0
6000f786:	dae8      	bge.n	6000f75a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
6000f788:	2a00      	cmp	r2, #0
6000f78a:	bfac      	ite	ge
6000f78c:	4618      	movge	r0, r3
6000f78e:	2000      	movlt	r0, #0
6000f790:	e7e5      	b.n	6000f75e <next_timeout+0x12>
6000f792:	bf00      	nop
6000f794:	20202a1c 	.word	0x20202a1c
6000f798:	202041fc 	.word	0x202041fc

6000f79c <remove_timeout>:
{
6000f79c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
6000f79e:	b170      	cbz	r0, 6000f7be <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
6000f7a0:	4b0b      	ldr	r3, [pc, #44]	; (6000f7d0 <remove_timeout+0x34>)
6000f7a2:	685b      	ldr	r3, [r3, #4]
6000f7a4:	4298      	cmp	r0, r3
6000f7a6:	d00a      	beq.n	6000f7be <remove_timeout+0x22>
6000f7a8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
6000f7aa:	b143      	cbz	r3, 6000f7be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
6000f7ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
6000f7b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
6000f7b4:	1912      	adds	r2, r2, r4
6000f7b6:	eb41 0105 	adc.w	r1, r1, r5
6000f7ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
6000f7be:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
6000f7c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
6000f7c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
6000f7c6:	2300      	movs	r3, #0
	node->prev = NULL;
6000f7c8:	e9c0 3300 	strd	r3, r3, [r0]
}
6000f7cc:	bd30      	pop	{r4, r5, pc}
6000f7ce:	bf00      	nop
6000f7d0:	20202a1c 	.word	0x20202a1c

6000f7d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
6000f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
6000f7d8:	bf08      	it	eq
6000f7da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
6000f7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000f7e2:	4604      	mov	r4, r0
6000f7e4:	4692      	mov	sl, r2
6000f7e6:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
6000f7e8:	f000 809e 	beq.w	6000f928 <z_add_timeout+0x154>
	return node->next != NULL;
6000f7ec:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
6000f7ee:	b166      	cbz	r6, 6000f80a <z_add_timeout+0x36>
6000f7f0:	494e      	ldr	r1, [pc, #312]	; (6000f92c <z_add_timeout+0x158>)
6000f7f2:	2363      	movs	r3, #99	; 0x63
6000f7f4:	4a4e      	ldr	r2, [pc, #312]	; (6000f930 <z_add_timeout+0x15c>)
6000f7f6:	484f      	ldr	r0, [pc, #316]	; (6000f934 <z_add_timeout+0x160>)
6000f7f8:	f003 fa2f 	bl	60012c5a <assert_print>
6000f7fc:	484e      	ldr	r0, [pc, #312]	; (6000f938 <z_add_timeout+0x164>)
6000f7fe:	f003 fa2c 	bl	60012c5a <assert_print>
6000f802:	2163      	movs	r1, #99	; 0x63
6000f804:	484a      	ldr	r0, [pc, #296]	; (6000f930 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f806:	f003 fa21 	bl	60012c4c <assert_post_action>
	to->fn = fn;
6000f80a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
6000f80c:	f04f 0310 	mov.w	r3, #16
6000f810:	f3ef 8711 	mrs	r7, BASEPRI
6000f814:	f383 8812 	msr	BASEPRI_MAX, r3
6000f818:	f3bf 8f6f 	isb	sy
6000f81c:	4847      	ldr	r0, [pc, #284]	; (6000f93c <z_add_timeout+0x168>)
6000f81e:	f7fd fe8b 	bl	6000d538 <z_spin_lock_valid>
6000f822:	b960      	cbnz	r0, 6000f83e <z_add_timeout+0x6a>
6000f824:	2394      	movs	r3, #148	; 0x94
6000f826:	4a46      	ldr	r2, [pc, #280]	; (6000f940 <z_add_timeout+0x16c>)
6000f828:	4946      	ldr	r1, [pc, #280]	; (6000f944 <z_add_timeout+0x170>)
6000f82a:	4842      	ldr	r0, [pc, #264]	; (6000f934 <z_add_timeout+0x160>)
6000f82c:	f003 fa15 	bl	60012c5a <assert_print>
6000f830:	4942      	ldr	r1, [pc, #264]	; (6000f93c <z_add_timeout+0x168>)
6000f832:	4845      	ldr	r0, [pc, #276]	; (6000f948 <z_add_timeout+0x174>)
6000f834:	f003 fa11 	bl	60012c5a <assert_print>
6000f838:	2194      	movs	r1, #148	; 0x94
6000f83a:	4841      	ldr	r0, [pc, #260]	; (6000f940 <z_add_timeout+0x16c>)
6000f83c:	e7e3      	b.n	6000f806 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
6000f83e:	483f      	ldr	r0, [pc, #252]	; (6000f93c <z_add_timeout+0x168>)
6000f840:	f7fd fe96 	bl	6000d570 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
6000f844:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
6000f848:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
6000f84c:	da23      	bge.n	6000f896 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
6000f84e:	493f      	ldr	r1, [pc, #252]	; (6000f94c <z_add_timeout+0x178>)
6000f850:	f06f 0301 	mvn.w	r3, #1
6000f854:	e9d1 2000 	ldrd	r2, r0, [r1]
6000f858:	1a9b      	subs	r3, r3, r2
6000f85a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000f85e:	eb62 0000 	sbc.w	r0, r2, r0
6000f862:	ebb3 030a 	subs.w	r3, r3, sl
6000f866:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
6000f86a:	2b01      	cmp	r3, #1
6000f86c:	f170 0200 	sbcs.w	r2, r0, #0
6000f870:	da01      	bge.n	6000f876 <z_add_timeout+0xa2>
6000f872:	2301      	movs	r3, #1
6000f874:	4630      	mov	r0, r6
6000f876:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
6000f87a:	4b35      	ldr	r3, [pc, #212]	; (6000f950 <z_add_timeout+0x17c>)
6000f87c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
6000f87e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f882:	429a      	cmp	r2, r3
6000f884:	bf18      	it	ne
6000f886:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
6000f888:	b986      	cbnz	r6, 6000f8ac <z_add_timeout+0xd8>
	node->prev = tail;
6000f88a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
6000f88e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
6000f892:	605c      	str	r4, [r3, #4]
}
6000f894:	e01c      	b.n	6000f8d0 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
6000f896:	f7ff ff4f 	bl	6000f738 <elapsed>
6000f89a:	f11a 0801 	adds.w	r8, sl, #1
6000f89e:	f145 0500 	adc.w	r5, r5, #0
6000f8a2:	eb18 0300 	adds.w	r3, r8, r0
6000f8a6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
6000f8aa:	e7e4      	b.n	6000f876 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
6000f8ac:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
6000f8b0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
6000f8b4:	428a      	cmp	r2, r1
6000f8b6:	eb70 0e05 	sbcs.w	lr, r0, r5
6000f8ba:	da28      	bge.n	6000f90e <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
6000f8bc:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
6000f8be:	6872      	ldr	r2, [r6, #4]
6000f8c0:	eb65 0500 	sbc.w	r5, r5, r0
6000f8c4:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
6000f8c8:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
6000f8cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
6000f8ce:	6074      	str	r4, [r6, #4]
	return list->head == list;
6000f8d0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000f8d2:	429a      	cmp	r2, r3
6000f8d4:	d00b      	beq.n	6000f8ee <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
6000f8d6:	4294      	cmp	r4, r2
6000f8d8:	d109      	bne.n	6000f8ee <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
6000f8da:	f7ff ff37 	bl	6000f74c <next_timeout>

			if (next_time == 0 ||
6000f8de:	b118      	cbz	r0, 6000f8e8 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
6000f8e0:	4b1c      	ldr	r3, [pc, #112]	; (6000f954 <z_add_timeout+0x180>)
			if (next_time == 0 ||
6000f8e2:	691b      	ldr	r3, [r3, #16]
6000f8e4:	4283      	cmp	r3, r0
6000f8e6:	d002      	beq.n	6000f8ee <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
6000f8e8:	2100      	movs	r1, #0
6000f8ea:	f7fb f96d 	bl	6000abc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f8ee:	4813      	ldr	r0, [pc, #76]	; (6000f93c <z_add_timeout+0x168>)
6000f8f0:	f7fd fe30 	bl	6000d554 <z_spin_unlock_valid>
6000f8f4:	b9a0      	cbnz	r0, 6000f920 <z_add_timeout+0x14c>
6000f8f6:	23c2      	movs	r3, #194	; 0xc2
6000f8f8:	4a11      	ldr	r2, [pc, #68]	; (6000f940 <z_add_timeout+0x16c>)
6000f8fa:	4917      	ldr	r1, [pc, #92]	; (6000f958 <z_add_timeout+0x184>)
6000f8fc:	480d      	ldr	r0, [pc, #52]	; (6000f934 <z_add_timeout+0x160>)
6000f8fe:	f003 f9ac 	bl	60012c5a <assert_print>
6000f902:	490e      	ldr	r1, [pc, #56]	; (6000f93c <z_add_timeout+0x168>)
6000f904:	4815      	ldr	r0, [pc, #84]	; (6000f95c <z_add_timeout+0x188>)
6000f906:	f003 f9a8 	bl	60012c5a <assert_print>
6000f90a:	21c2      	movs	r1, #194	; 0xc2
6000f90c:	e795      	b.n	6000f83a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
6000f90e:	1a52      	subs	r2, r2, r1
6000f910:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
6000f914:	4566      	cmp	r6, ip
6000f916:	e9c4 2004 	strd	r2, r0, [r4, #16]
6000f91a:	d0b6      	beq.n	6000f88a <z_add_timeout+0xb6>
6000f91c:	6836      	ldr	r6, [r6, #0]
6000f91e:	e7b3      	b.n	6000f888 <z_add_timeout+0xb4>
	__asm__ volatile(
6000f920:	f387 8811 	msr	BASEPRI, r7
6000f924:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
6000f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000f92c:	6001984e 	.word	0x6001984e
6000f930:	6001982a 	.word	0x6001982a
6000f934:	60016dfb 	.word	0x60016dfb
6000f938:	60019350 	.word	0x60019350
6000f93c:	20204248 	.word	0x20204248
6000f940:	6001717c 	.word	0x6001717c
6000f944:	600171a9 	.word	0x600171a9
6000f948:	600171be 	.word	0x600171be
6000f94c:	20203b40 	.word	0x20203b40
6000f950:	20202a1c 	.word	0x20202a1c
6000f954:	202041fc 	.word	0x202041fc
6000f958:	600171d6 	.word	0x600171d6
6000f95c:	600171ed 	.word	0x600171ed

6000f960 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
6000f960:	b538      	push	{r3, r4, r5, lr}
6000f962:	4604      	mov	r4, r0
	__asm__ volatile(
6000f964:	f04f 0310 	mov.w	r3, #16
6000f968:	f3ef 8511 	mrs	r5, BASEPRI
6000f96c:	f383 8812 	msr	BASEPRI_MAX, r3
6000f970:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000f974:	4819      	ldr	r0, [pc, #100]	; (6000f9dc <z_abort_timeout+0x7c>)
6000f976:	f7fd fddf 	bl	6000d538 <z_spin_lock_valid>
6000f97a:	b968      	cbnz	r0, 6000f998 <z_abort_timeout+0x38>
6000f97c:	2394      	movs	r3, #148	; 0x94
6000f97e:	4a18      	ldr	r2, [pc, #96]	; (6000f9e0 <z_abort_timeout+0x80>)
6000f980:	4918      	ldr	r1, [pc, #96]	; (6000f9e4 <z_abort_timeout+0x84>)
6000f982:	4819      	ldr	r0, [pc, #100]	; (6000f9e8 <z_abort_timeout+0x88>)
6000f984:	f003 f969 	bl	60012c5a <assert_print>
6000f988:	4914      	ldr	r1, [pc, #80]	; (6000f9dc <z_abort_timeout+0x7c>)
6000f98a:	4818      	ldr	r0, [pc, #96]	; (6000f9ec <z_abort_timeout+0x8c>)
6000f98c:	f003 f965 	bl	60012c5a <assert_print>
6000f990:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f992:	4813      	ldr	r0, [pc, #76]	; (6000f9e0 <z_abort_timeout+0x80>)
6000f994:	f003 f95a 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000f998:	4810      	ldr	r0, [pc, #64]	; (6000f9dc <z_abort_timeout+0x7c>)
6000f99a:	f7fd fde9 	bl	6000d570 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
6000f99e:	6823      	ldr	r3, [r4, #0]
6000f9a0:	b19b      	cbz	r3, 6000f9ca <z_abort_timeout+0x6a>
			remove_timeout(to);
6000f9a2:	4620      	mov	r0, r4
			ret = 0;
6000f9a4:	2400      	movs	r4, #0
			remove_timeout(to);
6000f9a6:	f7ff fef9 	bl	6000f79c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000f9aa:	480c      	ldr	r0, [pc, #48]	; (6000f9dc <z_abort_timeout+0x7c>)
6000f9ac:	f7fd fdd2 	bl	6000d554 <z_spin_unlock_valid>
6000f9b0:	b970      	cbnz	r0, 6000f9d0 <z_abort_timeout+0x70>
6000f9b2:	23c2      	movs	r3, #194	; 0xc2
6000f9b4:	4a0a      	ldr	r2, [pc, #40]	; (6000f9e0 <z_abort_timeout+0x80>)
6000f9b6:	490e      	ldr	r1, [pc, #56]	; (6000f9f0 <z_abort_timeout+0x90>)
6000f9b8:	480b      	ldr	r0, [pc, #44]	; (6000f9e8 <z_abort_timeout+0x88>)
6000f9ba:	f003 f94e 	bl	60012c5a <assert_print>
6000f9be:	4907      	ldr	r1, [pc, #28]	; (6000f9dc <z_abort_timeout+0x7c>)
6000f9c0:	480c      	ldr	r0, [pc, #48]	; (6000f9f4 <z_abort_timeout+0x94>)
6000f9c2:	f003 f94a 	bl	60012c5a <assert_print>
6000f9c6:	21c2      	movs	r1, #194	; 0xc2
6000f9c8:	e7e3      	b.n	6000f992 <z_abort_timeout+0x32>
	int ret = -EINVAL;
6000f9ca:	f06f 0415 	mvn.w	r4, #21
6000f9ce:	e7ec      	b.n	6000f9aa <z_abort_timeout+0x4a>
	__asm__ volatile(
6000f9d0:	f385 8811 	msr	BASEPRI, r5
6000f9d4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
6000f9d8:	4620      	mov	r0, r4
6000f9da:	bd38      	pop	{r3, r4, r5, pc}
6000f9dc:	20204248 	.word	0x20204248
6000f9e0:	6001717c 	.word	0x6001717c
6000f9e4:	600171a9 	.word	0x600171a9
6000f9e8:	60016dfb 	.word	0x60016dfb
6000f9ec:	600171be 	.word	0x600171be
6000f9f0:	600171d6 	.word	0x600171d6
6000f9f4:	600171ed 	.word	0x600171ed

6000f9f8 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
6000f9f8:	b570      	push	{r4, r5, r6, lr}
6000f9fa:	4604      	mov	r4, r0
6000f9fc:	460d      	mov	r5, r1
	__asm__ volatile(
6000f9fe:	f04f 0310 	mov.w	r3, #16
6000fa02:	f3ef 8611 	mrs	r6, BASEPRI
6000fa06:	f383 8812 	msr	BASEPRI_MAX, r3
6000fa0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fa0e:	481b      	ldr	r0, [pc, #108]	; (6000fa7c <z_set_timeout_expiry+0x84>)
6000fa10:	f7fd fd92 	bl	6000d538 <z_spin_lock_valid>
6000fa14:	b968      	cbnz	r0, 6000fa32 <z_set_timeout_expiry+0x3a>
6000fa16:	2394      	movs	r3, #148	; 0x94
6000fa18:	4a19      	ldr	r2, [pc, #100]	; (6000fa80 <z_set_timeout_expiry+0x88>)
6000fa1a:	491a      	ldr	r1, [pc, #104]	; (6000fa84 <z_set_timeout_expiry+0x8c>)
6000fa1c:	481a      	ldr	r0, [pc, #104]	; (6000fa88 <z_set_timeout_expiry+0x90>)
6000fa1e:	f003 f91c 	bl	60012c5a <assert_print>
6000fa22:	4916      	ldr	r1, [pc, #88]	; (6000fa7c <z_set_timeout_expiry+0x84>)
6000fa24:	4819      	ldr	r0, [pc, #100]	; (6000fa8c <z_set_timeout_expiry+0x94>)
6000fa26:	f003 f918 	bl	60012c5a <assert_print>
6000fa2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fa2c:	4814      	ldr	r0, [pc, #80]	; (6000fa80 <z_set_timeout_expiry+0x88>)
6000fa2e:	f003 f90d 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000fa32:	4812      	ldr	r0, [pc, #72]	; (6000fa7c <z_set_timeout_expiry+0x84>)
6000fa34:	f7fd fd9c 	bl	6000d570 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
6000fa38:	f7ff fe88 	bl	6000f74c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
6000fa3c:	2801      	cmp	r0, #1
6000fa3e:	dd07      	ble.n	6000fa50 <z_set_timeout_expiry+0x58>
6000fa40:	42a0      	cmp	r0, r4
6000fa42:	db05      	blt.n	6000fa50 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
6000fa44:	42a0      	cmp	r0, r4
6000fa46:	4629      	mov	r1, r5
6000fa48:	bfa8      	it	ge
6000fa4a:	4620      	movge	r0, r4
6000fa4c:	f7fb f8bc 	bl	6000abc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fa50:	480a      	ldr	r0, [pc, #40]	; (6000fa7c <z_set_timeout_expiry+0x84>)
6000fa52:	f7fd fd7f 	bl	6000d554 <z_spin_unlock_valid>
6000fa56:	b958      	cbnz	r0, 6000fa70 <z_set_timeout_expiry+0x78>
6000fa58:	23c2      	movs	r3, #194	; 0xc2
6000fa5a:	4a09      	ldr	r2, [pc, #36]	; (6000fa80 <z_set_timeout_expiry+0x88>)
6000fa5c:	490c      	ldr	r1, [pc, #48]	; (6000fa90 <z_set_timeout_expiry+0x98>)
6000fa5e:	480a      	ldr	r0, [pc, #40]	; (6000fa88 <z_set_timeout_expiry+0x90>)
6000fa60:	f003 f8fb 	bl	60012c5a <assert_print>
6000fa64:	4905      	ldr	r1, [pc, #20]	; (6000fa7c <z_set_timeout_expiry+0x84>)
6000fa66:	480b      	ldr	r0, [pc, #44]	; (6000fa94 <z_set_timeout_expiry+0x9c>)
6000fa68:	f003 f8f7 	bl	60012c5a <assert_print>
6000fa6c:	21c2      	movs	r1, #194	; 0xc2
6000fa6e:	e7dd      	b.n	6000fa2c <z_set_timeout_expiry+0x34>
	__asm__ volatile(
6000fa70:	f386 8811 	msr	BASEPRI, r6
6000fa74:	f3bf 8f6f 	isb	sy
		}
	}
}
6000fa78:	bd70      	pop	{r4, r5, r6, pc}
6000fa7a:	bf00      	nop
6000fa7c:	20204248 	.word	0x20204248
6000fa80:	6001717c 	.word	0x6001717c
6000fa84:	600171a9 	.word	0x600171a9
6000fa88:	60016dfb 	.word	0x60016dfb
6000fa8c:	600171be 	.word	0x600171be
6000fa90:	600171d6 	.word	0x600171d6
6000fa94:	600171ed 	.word	0x600171ed

6000fa98 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
6000fa98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000fa9c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
6000fa9e:	f7fe ffab 	bl	6000e9f8 <z_time_slice>
	__asm__ volatile(
6000faa2:	f04f 0310 	mov.w	r3, #16
6000faa6:	f3ef 8811 	mrs	r8, BASEPRI
6000faaa:	f383 8812 	msr	BASEPRI_MAX, r3
6000faae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fab2:	4846      	ldr	r0, [pc, #280]	; (6000fbcc <sys_clock_announce+0x134>)
6000fab4:	f7fd fd40 	bl	6000d538 <z_spin_lock_valid>
6000fab8:	b968      	cbnz	r0, 6000fad6 <sys_clock_announce+0x3e>
6000faba:	2394      	movs	r3, #148	; 0x94
6000fabc:	4a44      	ldr	r2, [pc, #272]	; (6000fbd0 <sys_clock_announce+0x138>)
6000fabe:	4945      	ldr	r1, [pc, #276]	; (6000fbd4 <sys_clock_announce+0x13c>)
6000fac0:	4845      	ldr	r0, [pc, #276]	; (6000fbd8 <sys_clock_announce+0x140>)
6000fac2:	f003 f8ca 	bl	60012c5a <assert_print>
6000fac6:	4941      	ldr	r1, [pc, #260]	; (6000fbcc <sys_clock_announce+0x134>)
6000fac8:	4844      	ldr	r0, [pc, #272]	; (6000fbdc <sys_clock_announce+0x144>)
6000faca:	f003 f8c6 	bl	60012c5a <assert_print>
6000face:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fad0:	483f      	ldr	r0, [pc, #252]	; (6000fbd0 <sys_clock_announce+0x138>)
6000fad2:	f003 f8bb 	bl	60012c4c <assert_post_action>
	return list->head == list;
6000fad6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 6000fbe0 <sys_clock_announce+0x148>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
6000fada:	2600      	movs	r6, #0
	announce_remaining = ticks;
6000fadc:	f8df b104 	ldr.w	fp, [pc, #260]	; 6000fbe4 <sys_clock_announce+0x14c>
		t->dticks = 0;
6000fae0:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
6000fae2:	483a      	ldr	r0, [pc, #232]	; (6000fbcc <sys_clock_announce+0x134>)
6000fae4:	f7fd fd44 	bl	6000d570 <z_spin_lock_set_owner>
	announce_remaining = ticks;
6000fae8:	f8cb 4000 	str.w	r4, [fp]
6000faec:	f8d9 4000 	ldr.w	r4, [r9]
		curr_tick += dt;
6000faf0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 6000fbe8 <sys_clock_announce+0x150>
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000faf4:	454c      	cmp	r4, r9
6000faf6:	bf08      	it	eq
6000faf8:	2400      	moveq	r4, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
6000fafa:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
6000fafe:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
6000fb02:	2c00      	cmp	r4, #0
6000fb04:	d049      	beq.n	6000fb9a <sys_clock_announce+0x102>
6000fb06:	ea4f 7ce3 	mov.w	ip, r3, asr #31
6000fb0a:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
6000fb0e:	42ab      	cmp	r3, r5
6000fb10:	eb7c 0e00 	sbcs.w	lr, ip, r0
6000fb14:	da05      	bge.n	6000fb22 <sys_clock_announce+0x8a>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
6000fb16:	1aed      	subs	r5, r5, r3
6000fb18:	eb60 000c 	sbc.w	r0, r0, ip
6000fb1c:	e9c4 5004 	strd	r5, r0, [r4, #16]
6000fb20:	e03b      	b.n	6000fb9a <sys_clock_announce+0x102>
		curr_tick += dt;
6000fb22:	18aa      	adds	r2, r5, r2
		remove_timeout(t);
6000fb24:	4620      	mov	r0, r4
		curr_tick += dt;
6000fb26:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		t->dticks = 0;
6000fb2a:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
6000fb2e:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
6000fb32:	f7ff fe33 	bl	6000f79c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fb36:	4825      	ldr	r0, [pc, #148]	; (6000fbcc <sys_clock_announce+0x134>)
6000fb38:	f7fd fd0c 	bl	6000d554 <z_spin_unlock_valid>
6000fb3c:	b958      	cbnz	r0, 6000fb56 <sys_clock_announce+0xbe>
6000fb3e:	23c2      	movs	r3, #194	; 0xc2
6000fb40:	4a23      	ldr	r2, [pc, #140]	; (6000fbd0 <sys_clock_announce+0x138>)
6000fb42:	492a      	ldr	r1, [pc, #168]	; (6000fbec <sys_clock_announce+0x154>)
6000fb44:	4824      	ldr	r0, [pc, #144]	; (6000fbd8 <sys_clock_announce+0x140>)
6000fb46:	f003 f888 	bl	60012c5a <assert_print>
6000fb4a:	4920      	ldr	r1, [pc, #128]	; (6000fbcc <sys_clock_announce+0x134>)
6000fb4c:	4828      	ldr	r0, [pc, #160]	; (6000fbf0 <sys_clock_announce+0x158>)
6000fb4e:	f003 f884 	bl	60012c5a <assert_print>
6000fb52:	21c2      	movs	r1, #194	; 0xc2
6000fb54:	e7bc      	b.n	6000fad0 <sys_clock_announce+0x38>
	__asm__ volatile(
6000fb56:	f388 8811 	msr	BASEPRI, r8
6000fb5a:	f3bf 8f6f 	isb	sy
		t->fn(t);
6000fb5e:	68a3      	ldr	r3, [r4, #8]
6000fb60:	4620      	mov	r0, r4
6000fb62:	4798      	blx	r3
	__asm__ volatile(
6000fb64:	f04f 0310 	mov.w	r3, #16
6000fb68:	f3ef 8811 	mrs	r8, BASEPRI
6000fb6c:	f383 8812 	msr	BASEPRI_MAX, r3
6000fb70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fb74:	4815      	ldr	r0, [pc, #84]	; (6000fbcc <sys_clock_announce+0x134>)
6000fb76:	f7fd fcdf 	bl	6000d538 <z_spin_lock_valid>
6000fb7a:	2800      	cmp	r0, #0
6000fb7c:	d09d      	beq.n	6000faba <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
6000fb7e:	4813      	ldr	r0, [pc, #76]	; (6000fbcc <sys_clock_announce+0x134>)
6000fb80:	f7fd fcf6 	bl	6000d570 <z_spin_lock_set_owner>
		announce_remaining -= dt;
6000fb84:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
6000fb88:	f8d9 4000 	ldr.w	r4, [r9]
6000fb8c:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000fb8e:	454c      	cmp	r4, r9
6000fb90:	f8cb 3000 	str.w	r3, [fp]
6000fb94:	d1b1      	bne.n	6000fafa <sys_clock_announce+0x62>
		curr_tick += dt;
6000fb96:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
6000fb9a:	189a      	adds	r2, r3, r2
	announce_remaining = 0;
6000fb9c:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
6000fba0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	announce_remaining = 0;
6000fba4:	f8cb 4000 	str.w	r4, [fp]
	curr_tick += announce_remaining;
6000fba8:	e9ca 2100 	strd	r2, r1, [sl]

	sys_clock_set_timeout(next_timeout(), false);
6000fbac:	f7ff fdce 	bl	6000f74c <next_timeout>
6000fbb0:	4621      	mov	r1, r4
6000fbb2:	f7fb f809 	bl	6000abc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fbb6:	4805      	ldr	r0, [pc, #20]	; (6000fbcc <sys_clock_announce+0x134>)
6000fbb8:	f7fd fccc 	bl	6000d554 <z_spin_unlock_valid>
6000fbbc:	2800      	cmp	r0, #0
6000fbbe:	d0be      	beq.n	6000fb3e <sys_clock_announce+0xa6>
	__asm__ volatile(
6000fbc0:	f388 8811 	msr	BASEPRI, r8
6000fbc4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
6000fbc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
6000fbcc:	20204248 	.word	0x20204248
6000fbd0:	6001717c 	.word	0x6001717c
6000fbd4:	600171a9 	.word	0x600171a9
6000fbd8:	60016dfb 	.word	0x60016dfb
6000fbdc:	600171be 	.word	0x600171be
6000fbe0:	20202a1c 	.word	0x20202a1c
6000fbe4:	20204244 	.word	0x20204244
6000fbe8:	20203b40 	.word	0x20203b40
6000fbec:	600171d6 	.word	0x600171d6
6000fbf0:	600171ed 	.word	0x600171ed

6000fbf4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
6000fbf4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
6000fbf6:	f04f 0310 	mov.w	r3, #16
6000fbfa:	f3ef 8611 	mrs	r6, BASEPRI
6000fbfe:	f383 8812 	msr	BASEPRI_MAX, r3
6000fc02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fc06:	481a      	ldr	r0, [pc, #104]	; (6000fc70 <sys_clock_tick_get+0x7c>)
6000fc08:	f7fd fc96 	bl	6000d538 <z_spin_lock_valid>
6000fc0c:	b968      	cbnz	r0, 6000fc2a <sys_clock_tick_get+0x36>
6000fc0e:	2394      	movs	r3, #148	; 0x94
6000fc10:	4a18      	ldr	r2, [pc, #96]	; (6000fc74 <sys_clock_tick_get+0x80>)
6000fc12:	4919      	ldr	r1, [pc, #100]	; (6000fc78 <sys_clock_tick_get+0x84>)
6000fc14:	4819      	ldr	r0, [pc, #100]	; (6000fc7c <sys_clock_tick_get+0x88>)
6000fc16:	f003 f820 	bl	60012c5a <assert_print>
6000fc1a:	4915      	ldr	r1, [pc, #84]	; (6000fc70 <sys_clock_tick_get+0x7c>)
6000fc1c:	4818      	ldr	r0, [pc, #96]	; (6000fc80 <sys_clock_tick_get+0x8c>)
6000fc1e:	f003 f81c 	bl	60012c5a <assert_print>
6000fc22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fc24:	4813      	ldr	r0, [pc, #76]	; (6000fc74 <sys_clock_tick_get+0x80>)
6000fc26:	f003 f811 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000fc2a:	4811      	ldr	r0, [pc, #68]	; (6000fc70 <sys_clock_tick_get+0x7c>)
6000fc2c:	f7fd fca0 	bl	6000d570 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
6000fc30:	f7ff fd82 	bl	6000f738 <elapsed>
6000fc34:	4a13      	ldr	r2, [pc, #76]	; (6000fc84 <sys_clock_tick_get+0x90>)
6000fc36:	e9d2 4500 	ldrd	r4, r5, [r2]
6000fc3a:	1904      	adds	r4, r0, r4
6000fc3c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fc40:	480b      	ldr	r0, [pc, #44]	; (6000fc70 <sys_clock_tick_get+0x7c>)
6000fc42:	f7fd fc87 	bl	6000d554 <z_spin_unlock_valid>
6000fc46:	b958      	cbnz	r0, 6000fc60 <sys_clock_tick_get+0x6c>
6000fc48:	23c2      	movs	r3, #194	; 0xc2
6000fc4a:	4a0a      	ldr	r2, [pc, #40]	; (6000fc74 <sys_clock_tick_get+0x80>)
6000fc4c:	490e      	ldr	r1, [pc, #56]	; (6000fc88 <sys_clock_tick_get+0x94>)
6000fc4e:	480b      	ldr	r0, [pc, #44]	; (6000fc7c <sys_clock_tick_get+0x88>)
6000fc50:	f003 f803 	bl	60012c5a <assert_print>
6000fc54:	4906      	ldr	r1, [pc, #24]	; (6000fc70 <sys_clock_tick_get+0x7c>)
6000fc56:	480d      	ldr	r0, [pc, #52]	; (6000fc8c <sys_clock_tick_get+0x98>)
6000fc58:	f002 ffff 	bl	60012c5a <assert_print>
6000fc5c:	21c2      	movs	r1, #194	; 0xc2
6000fc5e:	e7e1      	b.n	6000fc24 <sys_clock_tick_get+0x30>
	__asm__ volatile(
6000fc60:	f386 8811 	msr	BASEPRI, r6
6000fc64:	f3bf 8f6f 	isb	sy
	}
	return t;
}
6000fc68:	4620      	mov	r0, r4
6000fc6a:	4629      	mov	r1, r5
6000fc6c:	bd70      	pop	{r4, r5, r6, pc}
6000fc6e:	bf00      	nop
6000fc70:	20204248 	.word	0x20204248
6000fc74:	6001717c 	.word	0x6001717c
6000fc78:	600171a9 	.word	0x600171a9
6000fc7c:	60016dfb 	.word	0x60016dfb
6000fc80:	600171be 	.word	0x600171be
6000fc84:	20203b40 	.word	0x20203b40
6000fc88:	600171d6 	.word	0x600171d6
6000fc8c:	600171ed 	.word	0x600171ed

6000fc90 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
6000fc90:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
6000fc92:	4604      	mov	r4, r0
6000fc94:	b178      	cbz	r0, 6000fcb6 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
6000fc96:	f7fb f88d 	bl	6000adb4 <sys_clock_cycle_get_32>
6000fc9a:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
6000fc9c:	4806      	ldr	r0, [pc, #24]	; (6000fcb8 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
6000fc9e:	2300      	movs	r3, #0
6000fca0:	4a06      	ldr	r2, [pc, #24]	; (6000fcbc <z_impl_k_busy_wait+0x2c>)
6000fca2:	fba4 0100 	umull	r0, r1, r4, r0
6000fca6:	f7f3 fb6d 	bl	60003384 <__aeabi_uldivmod>
6000fcaa:	4604      	mov	r4, r0
6000fcac:	f7fb f882 	bl	6000adb4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
6000fcb0:	1b43      	subs	r3, r0, r5
6000fcb2:	42a3      	cmp	r3, r4
6000fcb4:	d3fa      	bcc.n	6000fcac <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
6000fcb6:	bd38      	pop	{r3, r4, r5, pc}
6000fcb8:	23c34600 	.word	0x23c34600
6000fcbc:	000f4240 	.word	0x000f4240

6000fcc0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
6000fcc0:	b570      	push	{r4, r5, r6, lr}
6000fcc2:	4604      	mov	r4, r0
	__asm__ volatile(
6000fcc4:	f04f 0310 	mov.w	r3, #16
6000fcc8:	f3ef 8511 	mrs	r5, BASEPRI
6000fccc:	f383 8812 	msr	BASEPRI_MAX, r3
6000fcd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fcd4:	484b      	ldr	r0, [pc, #300]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fcd6:	f7fd fc2f 	bl	6000d538 <z_spin_lock_valid>
6000fcda:	b968      	cbnz	r0, 6000fcf8 <z_timer_expiration_handler+0x38>
6000fcdc:	2394      	movs	r3, #148	; 0x94
6000fcde:	4a4a      	ldr	r2, [pc, #296]	; (6000fe08 <z_timer_expiration_handler+0x148>)
6000fce0:	494a      	ldr	r1, [pc, #296]	; (6000fe0c <z_timer_expiration_handler+0x14c>)
6000fce2:	484b      	ldr	r0, [pc, #300]	; (6000fe10 <z_timer_expiration_handler+0x150>)
6000fce4:	f002 ffb9 	bl	60012c5a <assert_print>
6000fce8:	4946      	ldr	r1, [pc, #280]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fcea:	484a      	ldr	r0, [pc, #296]	; (6000fe14 <z_timer_expiration_handler+0x154>)
6000fcec:	f002 ffb5 	bl	60012c5a <assert_print>
6000fcf0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fcf2:	4845      	ldr	r0, [pc, #276]	; (6000fe08 <z_timer_expiration_handler+0x148>)
6000fcf4:	f002 ffaa 	bl	60012c4c <assert_post_action>
	z_spin_lock_set_owner(l);
6000fcf8:	4842      	ldr	r0, [pc, #264]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fcfa:	f7fd fc39 	bl	6000d570 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
6000fcfe:	6823      	ldr	r3, [r4, #0]
6000fd00:	b183      	cbz	r3, 6000fd24 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fd02:	4840      	ldr	r0, [pc, #256]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fd04:	f7fd fc26 	bl	6000d554 <z_spin_unlock_valid>
6000fd08:	2800      	cmp	r0, #0
6000fd0a:	d176      	bne.n	6000fdfa <z_timer_expiration_handler+0x13a>
6000fd0c:	23c2      	movs	r3, #194	; 0xc2
6000fd0e:	4a3e      	ldr	r2, [pc, #248]	; (6000fe08 <z_timer_expiration_handler+0x148>)
6000fd10:	4941      	ldr	r1, [pc, #260]	; (6000fe18 <z_timer_expiration_handler+0x158>)
6000fd12:	483f      	ldr	r0, [pc, #252]	; (6000fe10 <z_timer_expiration_handler+0x150>)
6000fd14:	f002 ffa1 	bl	60012c5a <assert_print>
6000fd18:	493a      	ldr	r1, [pc, #232]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fd1a:	4840      	ldr	r0, [pc, #256]	; (6000fe1c <z_timer_expiration_handler+0x15c>)
6000fd1c:	f002 ff9d 	bl	60012c5a <assert_print>
6000fd20:	21c2      	movs	r1, #194	; 0xc2
6000fd22:	e7e6      	b.n	6000fcf2 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
6000fd24:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
6000fd28:	3301      	adds	r3, #1
6000fd2a:	f142 0200 	adc.w	r2, r2, #0
6000fd2e:	2b02      	cmp	r3, #2
6000fd30:	f172 0200 	sbcs.w	r2, r2, #0
6000fd34:	d322      	bcc.n	6000fd7c <z_timer_expiration_handler+0xbc>
	return z_impl_k_uptime_ticks();
6000fd36:	f004 fcf5 	bl	60014724 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
6000fd3a:	3001      	adds	r0, #1
6000fd3c:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
6000fd40:	f141 0100 	adc.w	r1, r1, #0
6000fd44:	18c0      	adds	r0, r0, r3
6000fd46:	eb41 0102 	adc.w	r1, r1, r2
6000fd4a:	2801      	cmp	r0, #1
6000fd4c:	f171 0100 	sbcs.w	r1, r1, #0
6000fd50:	db4e      	blt.n	6000fdf0 <z_timer_expiration_handler+0x130>
6000fd52:	f004 fce7 	bl	60014724 <z_impl_k_uptime_ticks>
6000fd56:	3001      	adds	r0, #1
6000fd58:	f141 0300 	adc.w	r3, r1, #0
6000fd5c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
6000fd60:	1880      	adds	r0, r0, r2
6000fd62:	f06f 0201 	mvn.w	r2, #1
6000fd66:	eb43 0301 	adc.w	r3, r3, r1
6000fd6a:	1a12      	subs	r2, r2, r0
6000fd6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
6000fd70:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
6000fd74:	492a      	ldr	r1, [pc, #168]	; (6000fe20 <z_timer_expiration_handler+0x160>)
6000fd76:	4620      	mov	r0, r4
6000fd78:	f7ff fd2c 	bl	6000f7d4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
6000fd7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
6000fd7e:	3301      	adds	r3, #1
6000fd80:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
6000fd82:	6a23      	ldr	r3, [r4, #32]
6000fd84:	b1db      	cbz	r3, 6000fdbe <z_timer_expiration_handler+0xfe>
6000fd86:	481f      	ldr	r0, [pc, #124]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fd88:	f7fd fbe4 	bl	6000d554 <z_spin_unlock_valid>
6000fd8c:	2800      	cmp	r0, #0
6000fd8e:	d0bd      	beq.n	6000fd0c <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
6000fd90:	f385 8811 	msr	BASEPRI, r5
6000fd94:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
6000fd98:	6a23      	ldr	r3, [r4, #32]
6000fd9a:	4620      	mov	r0, r4
6000fd9c:	4798      	blx	r3
	__asm__ volatile(
6000fd9e:	f04f 0310 	mov.w	r3, #16
6000fda2:	f3ef 8511 	mrs	r5, BASEPRI
6000fda6:	f383 8812 	msr	BASEPRI_MAX, r3
6000fdaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fdae:	4815      	ldr	r0, [pc, #84]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fdb0:	f7fd fbc2 	bl	6000d538 <z_spin_lock_valid>
6000fdb4:	2800      	cmp	r0, #0
6000fdb6:	d091      	beq.n	6000fcdc <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
6000fdb8:	4812      	ldr	r0, [pc, #72]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fdba:	f7fd fbd9 	bl	6000d570 <z_spin_lock_set_owner>
	return list->head == list;
6000fdbe:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000fdc2:	42a6      	cmp	r6, r4
6000fdc4:	d09d      	beq.n	6000fd02 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
6000fdc6:	2e00      	cmp	r6, #0
6000fdc8:	d09b      	beq.n	6000fd02 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
6000fdca:	4630      	mov	r0, r6
6000fdcc:	f7fe fbe6 	bl	6000e59c <z_unpend_thread_no_timeout>
6000fdd0:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fdd2:	480c      	ldr	r0, [pc, #48]	; (6000fe04 <z_timer_expiration_handler+0x144>)
6000fdd4:	67b3      	str	r3, [r6, #120]	; 0x78
6000fdd6:	f7fd fbbd 	bl	6000d554 <z_spin_unlock_valid>
6000fdda:	2800      	cmp	r0, #0
6000fddc:	d096      	beq.n	6000fd0c <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
6000fdde:	f385 8811 	msr	BASEPRI, r5
6000fde2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
6000fde6:	4630      	mov	r0, r6
}
6000fde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
6000fdec:	f7fe bb90 	b.w	6000e510 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
6000fdf0:	f06f 0201 	mvn.w	r2, #1
6000fdf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000fdf8:	e7bc      	b.n	6000fd74 <z_timer_expiration_handler+0xb4>
6000fdfa:	f385 8811 	msr	BASEPRI, r5
6000fdfe:	f3bf 8f6f 	isb	sy
}
6000fe02:	bd70      	pop	{r4, r5, r6, pc}
6000fe04:	2020424c 	.word	0x2020424c
6000fe08:	6001717c 	.word	0x6001717c
6000fe0c:	600171a9 	.word	0x600171a9
6000fe10:	60016dfb 	.word	0x60016dfb
6000fe14:	600171be 	.word	0x600171be
6000fe18:	600171d6 	.word	0x600171d6
6000fe1c:	600171ed 	.word	0x600171ed
6000fe20:	6000fcc1 	.word	0x6000fcc1

6000fe24 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
6000fe24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
6000fe28:	bf08      	it	eq
6000fe2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
6000fe2e:	4619      	mov	r1, r3
6000fe30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000fe34:	4605      	mov	r5, r0
6000fe36:	4614      	mov	r4, r2
6000fe38:	4691      	mov	r9, r2
6000fe3a:	4698      	mov	r8, r3
6000fe3c:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
6000fe40:	d037      	beq.n	6000feb2 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
6000fe42:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
6000fe46:	bf08      	it	eq
6000fe48:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
6000fe4c:	4637      	mov	r7, r6
6000fe4e:	4682      	mov	sl, r0
6000fe50:	d011      	beq.n	6000fe76 <z_impl_k_timer_start+0x52>
6000fe52:	ea50 0306 	orrs.w	r3, r0, r6
6000fe56:	d00e      	beq.n	6000fe76 <z_impl_k_timer_start+0x52>
6000fe58:	1c72      	adds	r2, r6, #1
6000fe5a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
6000fe5e:	db0a      	blt.n	6000fe76 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
6000fe60:	2e02      	cmp	r6, #2
6000fe62:	4684      	mov	ip, r0
6000fe64:	f170 0000 	sbcs.w	r0, r0, #0
6000fe68:	bfbc      	itt	lt
6000fe6a:	2702      	movlt	r7, #2
6000fe6c:	f04f 0c00 	movlt.w	ip, #0
6000fe70:	3f01      	subs	r7, #1
6000fe72:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
6000fe76:	1c63      	adds	r3, r4, #1
6000fe78:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
6000fe7c:	db0a      	blt.n	6000fe94 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
6000fe7e:	2c01      	cmp	r4, #1
6000fe80:	4622      	mov	r2, r4
6000fe82:	f171 0300 	sbcs.w	r3, r1, #0
6000fe86:	bfbc      	itt	lt
6000fe88:	2201      	movlt	r2, #1
6000fe8a:	2100      	movlt	r1, #0
6000fe8c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
6000fe90:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
6000fe94:	4628      	mov	r0, r5
6000fe96:	f7ff fd63 	bl	6000f960 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
6000fe9a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
6000fe9c:	464a      	mov	r2, r9
6000fe9e:	4628      	mov	r0, r5
	timer->status = 0U;
6000fea0:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
6000fea2:	4643      	mov	r3, r8
6000fea4:	4904      	ldr	r1, [pc, #16]	; (6000feb8 <z_impl_k_timer_start+0x94>)
	timer->period = period;
6000fea6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
		     duration);
}
6000feaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
6000feae:	f7ff bc91 	b.w	6000f7d4 <z_add_timeout>
}
6000feb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000feb6:	bf00      	nop
6000feb8:	6000fcc1 	.word	0x6000fcc1

6000febc <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
6000febc:	b573      	push	{r0, r1, r4, r5, r6, lr}
6000febe:	4606      	mov	r6, r0
6000fec0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
6000fec4:	b163      	cbz	r3, 6000fee0 <z_impl_k_timer_status_sync+0x24>
6000fec6:	4931      	ldr	r1, [pc, #196]	; (6000ff8c <z_impl_k_timer_status_sync+0xd0>)
6000fec8:	23e9      	movs	r3, #233	; 0xe9
6000feca:	4a31      	ldr	r2, [pc, #196]	; (6000ff90 <z_impl_k_timer_status_sync+0xd4>)
6000fecc:	4831      	ldr	r0, [pc, #196]	; (6000ff94 <z_impl_k_timer_status_sync+0xd8>)
6000fece:	f002 fec4 	bl	60012c5a <assert_print>
6000fed2:	4831      	ldr	r0, [pc, #196]	; (6000ff98 <z_impl_k_timer_status_sync+0xdc>)
6000fed4:	f002 fec1 	bl	60012c5a <assert_print>
6000fed8:	21e9      	movs	r1, #233	; 0xe9
6000feda:	482d      	ldr	r0, [pc, #180]	; (6000ff90 <z_impl_k_timer_status_sync+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fedc:	f002 feb6 	bl	60012c4c <assert_post_action>
	__asm__ volatile(
6000fee0:	f04f 0310 	mov.w	r3, #16
6000fee4:	f3ef 8411 	mrs	r4, BASEPRI
6000fee8:	f383 8812 	msr	BASEPRI_MAX, r3
6000feec:	f3bf 8f6f 	isb	sy
6000fef0:	482a      	ldr	r0, [pc, #168]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000fef2:	f7fd fb21 	bl	6000d538 <z_spin_lock_valid>
6000fef6:	b960      	cbnz	r0, 6000ff12 <z_impl_k_timer_status_sync+0x56>
6000fef8:	2394      	movs	r3, #148	; 0x94
6000fefa:	4a29      	ldr	r2, [pc, #164]	; (6000ffa0 <z_impl_k_timer_status_sync+0xe4>)
6000fefc:	4929      	ldr	r1, [pc, #164]	; (6000ffa4 <z_impl_k_timer_status_sync+0xe8>)
6000fefe:	4825      	ldr	r0, [pc, #148]	; (6000ff94 <z_impl_k_timer_status_sync+0xd8>)
6000ff00:	f002 feab 	bl	60012c5a <assert_print>
6000ff04:	4925      	ldr	r1, [pc, #148]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff06:	4828      	ldr	r0, [pc, #160]	; (6000ffa8 <z_impl_k_timer_status_sync+0xec>)
6000ff08:	f002 fea7 	bl	60012c5a <assert_print>
6000ff0c:	2194      	movs	r1, #148	; 0x94
6000ff0e:	4824      	ldr	r0, [pc, #144]	; (6000ffa0 <z_impl_k_timer_status_sync+0xe4>)
6000ff10:	e7e4      	b.n	6000fedc <z_impl_k_timer_status_sync+0x20>
	z_spin_lock_set_owner(l);
6000ff12:	4822      	ldr	r0, [pc, #136]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff14:	f7fd fb2c 	bl	6000d570 <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
6000ff18:	6b35      	ldr	r5, [r6, #48]	; 0x30

	if (result == 0U) {
6000ff1a:	b9f5      	cbnz	r5, 6000ff5a <z_impl_k_timer_status_sync+0x9e>
		if (!z_is_inactive_timeout(&timer->timeout)) {
6000ff1c:	6833      	ldr	r3, [r6, #0]
6000ff1e:	b1e3      	cbz	r3, 6000ff5a <z_impl_k_timer_status_sync+0x9e>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
6000ff20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000ff24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000ff28:	4621      	mov	r1, r4
6000ff2a:	481c      	ldr	r0, [pc, #112]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff2c:	e9cd 2300 	strd	r2, r3, [sp]
6000ff30:	f106 0218 	add.w	r2, r6, #24
6000ff34:	f7fe fe48 	bl	6000ebc8 <z_pend_curr>
6000ff38:	f04f 0310 	mov.w	r3, #16
6000ff3c:	f3ef 8411 	mrs	r4, BASEPRI
6000ff40:	f383 8812 	msr	BASEPRI_MAX, r3
6000ff44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ff48:	4814      	ldr	r0, [pc, #80]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff4a:	f7fd faf5 	bl	6000d538 <z_spin_lock_valid>
6000ff4e:	2800      	cmp	r0, #0
6000ff50:	d0d2      	beq.n	6000fef8 <z_impl_k_timer_status_sync+0x3c>
	z_spin_lock_set_owner(l);
6000ff52:	4812      	ldr	r0, [pc, #72]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff54:	f7fd fb0c 	bl	6000d570 <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
6000ff58:	6b35      	ldr	r5, [r6, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
6000ff5a:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ff5c:	480f      	ldr	r0, [pc, #60]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff5e:	6333      	str	r3, [r6, #48]	; 0x30
6000ff60:	f7fd faf8 	bl	6000d554 <z_spin_unlock_valid>
6000ff64:	b958      	cbnz	r0, 6000ff7e <z_impl_k_timer_status_sync+0xc2>
6000ff66:	23c2      	movs	r3, #194	; 0xc2
6000ff68:	4a0d      	ldr	r2, [pc, #52]	; (6000ffa0 <z_impl_k_timer_status_sync+0xe4>)
6000ff6a:	4910      	ldr	r1, [pc, #64]	; (6000ffac <z_impl_k_timer_status_sync+0xf0>)
6000ff6c:	4809      	ldr	r0, [pc, #36]	; (6000ff94 <z_impl_k_timer_status_sync+0xd8>)
6000ff6e:	f002 fe74 	bl	60012c5a <assert_print>
6000ff72:	490a      	ldr	r1, [pc, #40]	; (6000ff9c <z_impl_k_timer_status_sync+0xe0>)
6000ff74:	480e      	ldr	r0, [pc, #56]	; (6000ffb0 <z_impl_k_timer_status_sync+0xf4>)
6000ff76:	f002 fe70 	bl	60012c5a <assert_print>
6000ff7a:	21c2      	movs	r1, #194	; 0xc2
6000ff7c:	e7c7      	b.n	6000ff0e <z_impl_k_timer_status_sync+0x52>
	__asm__ volatile(
6000ff7e:	f384 8811 	msr	BASEPRI, r4
6000ff82:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
6000ff86:	4628      	mov	r0, r5
6000ff88:	b002      	add	sp, #8
6000ff8a:	bd70      	pop	{r4, r5, r6, pc}
6000ff8c:	60019427 	.word	0x60019427
6000ff90:	6001986e 	.word	0x6001986e
6000ff94:	60016dfb 	.word	0x60016dfb
6000ff98:	60019350 	.word	0x60019350
6000ff9c:	2020424c 	.word	0x2020424c
6000ffa0:	6001717c 	.word	0x6001717c
6000ffa4:	600171a9 	.word	0x600171a9
6000ffa8:	600171be 	.word	0x600171be
6000ffac:	600171d6 	.word	0x600171d6
6000ffb0:	600171ed 	.word	0x600171ed

6000ffb4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
6000ffb4:	4b01      	ldr	r3, [pc, #4]	; (6000ffbc <k_thread_system_pool_assign+0x8>)
6000ffb6:	6703      	str	r3, [r0, #112]	; 0x70
}
6000ffb8:	4770      	bx	lr
6000ffba:	bf00      	nop
6000ffbc:	20202c40 	.word	0x20202c40

6000ffc0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
6000ffc0:	4801      	ldr	r0, [pc, #4]	; (6000ffc8 <boot_banner+0x8>)
6000ffc2:	f002 bb9e 	b.w	60012702 <printk>
6000ffc6:	bf00      	nop
6000ffc8:	60019890 	.word	0x60019890

6000ffcc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
6000ffcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
6000ffce:	4b09      	ldr	r3, [pc, #36]	; (6000fff4 <k_sys_work_q_init+0x28>)
6000ffd0:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
6000ffd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000ffd6:	4908      	ldr	r1, [pc, #32]	; (6000fff8 <k_sys_work_q_init+0x2c>)
	struct k_work_queue_config cfg = {
6000ffd8:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
6000ffda:	ab02      	add	r3, sp, #8
6000ffdc:	4807      	ldr	r0, [pc, #28]	; (6000fffc <k_sys_work_q_init+0x30>)
6000ffde:	9300      	str	r3, [sp, #0]
6000ffe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct k_work_queue_config cfg = {
6000ffe4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
6000ffe8:	f7fe f89a 	bl	6000e120 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
6000ffec:	4620      	mov	r0, r4
6000ffee:	b004      	add	sp, #16
6000fff0:	bd10      	pop	{r4, pc}
6000fff2:	bf00      	nop
6000fff4:	600198bf 	.word	0x600198bf
6000fff8:	202061c0 	.word	0x202061c0
6000fffc:	20203b48 	.word	0x20203b48

60010000 <__assert_func>:
60010000:	b500      	push	{lr}
60010002:	4c0b      	ldr	r4, [pc, #44]	; (60010030 <__assert_func+0x30>)
60010004:	6825      	ldr	r5, [r4, #0]
60010006:	4614      	mov	r4, r2
60010008:	68ee      	ldr	r6, [r5, #12]
6001000a:	461a      	mov	r2, r3
6001000c:	b085      	sub	sp, #20
6001000e:	4603      	mov	r3, r0
60010010:	460d      	mov	r5, r1
60010012:	b14c      	cbz	r4, 60010028 <__assert_func+0x28>
60010014:	4907      	ldr	r1, [pc, #28]	; (60010034 <__assert_func+0x34>)
60010016:	9500      	str	r5, [sp, #0]
60010018:	e9cd 1401 	strd	r1, r4, [sp, #4]
6001001c:	4630      	mov	r0, r6
6001001e:	4906      	ldr	r1, [pc, #24]	; (60010038 <__assert_func+0x38>)
60010020:	f000 f80e 	bl	60010040 <fiprintf>
60010024:	f001 fadc 	bl	600115e0 <abort>
60010028:	4904      	ldr	r1, [pc, #16]	; (6001003c <__assert_func+0x3c>)
6001002a:	460c      	mov	r4, r1
6001002c:	e7f3      	b.n	60010016 <__assert_func+0x16>
6001002e:	bf00      	nop
60010030:	20202a24 	.word	0x20202a24
60010034:	60016ac0 	.word	0x60016ac0
60010038:	60016ad0 	.word	0x60016ad0
6001003c:	60016acc 	.word	0x60016acc

60010040 <fiprintf>:
60010040:	b40e      	push	{r1, r2, r3}
60010042:	b510      	push	{r4, lr}
60010044:	b083      	sub	sp, #12
60010046:	ab05      	add	r3, sp, #20
60010048:	4c06      	ldr	r4, [pc, #24]	; (60010064 <fiprintf+0x24>)
6001004a:	f853 2b04 	ldr.w	r2, [r3], #4
6001004e:	9301      	str	r3, [sp, #4]
60010050:	4601      	mov	r1, r0
60010052:	6820      	ldr	r0, [r4, #0]
60010054:	f000 fb56 	bl	60010704 <_vfiprintf_r>
60010058:	b003      	add	sp, #12
6001005a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6001005e:	b003      	add	sp, #12
60010060:	4770      	bx	lr
60010062:	bf00      	nop
60010064:	20202a24 	.word	0x20202a24

60010068 <malloc>:
60010068:	4b02      	ldr	r3, [pc, #8]	; (60010074 <malloc+0xc>)
6001006a:	4601      	mov	r1, r0
6001006c:	6818      	ldr	r0, [r3, #0]
6001006e:	f000 b80b 	b.w	60010088 <_malloc_r>
60010072:	bf00      	nop
60010074:	20202a24 	.word	0x20202a24

60010078 <free>:
60010078:	4b02      	ldr	r3, [pc, #8]	; (60010084 <free+0xc>)
6001007a:	4601      	mov	r1, r0
6001007c:	6818      	ldr	r0, [r3, #0]
6001007e:	f001 bc47 	b.w	60011910 <_free_r>
60010082:	bf00      	nop
60010084:	20202a24 	.word	0x20202a24

60010088 <_malloc_r>:
60010088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6001008c:	f101 050b 	add.w	r5, r1, #11
60010090:	2d16      	cmp	r5, #22
60010092:	b083      	sub	sp, #12
60010094:	4606      	mov	r6, r0
60010096:	d824      	bhi.n	600100e2 <_malloc_r+0x5a>
60010098:	2910      	cmp	r1, #16
6001009a:	f200 80b0 	bhi.w	600101fe <_malloc_r+0x176>
6001009e:	f000 fb01 	bl	600106a4 <__malloc_lock>
600100a2:	2510      	movs	r5, #16
600100a4:	2218      	movs	r2, #24
600100a6:	f04f 0c02 	mov.w	ip, #2
600100aa:	4fbc      	ldr	r7, [pc, #752]	; (6001039c <_malloc_r+0x314>)
600100ac:	443a      	add	r2, r7
600100ae:	f1a2 0308 	sub.w	r3, r2, #8
600100b2:	6854      	ldr	r4, [r2, #4]
600100b4:	429c      	cmp	r4, r3
600100b6:	f000 810b 	beq.w	600102d0 <_malloc_r+0x248>
600100ba:	6863      	ldr	r3, [r4, #4]
600100bc:	68e2      	ldr	r2, [r4, #12]
600100be:	68a1      	ldr	r1, [r4, #8]
600100c0:	f023 0303 	bic.w	r3, r3, #3
600100c4:	4423      	add	r3, r4
600100c6:	60ca      	str	r2, [r1, #12]
600100c8:	6091      	str	r1, [r2, #8]
600100ca:	685a      	ldr	r2, [r3, #4]
600100cc:	f042 0201 	orr.w	r2, r2, #1
600100d0:	4630      	mov	r0, r6
600100d2:	605a      	str	r2, [r3, #4]
600100d4:	3408      	adds	r4, #8
600100d6:	f000 faeb 	bl	600106b0 <__malloc_unlock>
600100da:	4620      	mov	r0, r4
600100dc:	b003      	add	sp, #12
600100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600100e2:	f035 0507 	bics.w	r5, r5, #7
600100e6:	f100 808a 	bmi.w	600101fe <_malloc_r+0x176>
600100ea:	42a9      	cmp	r1, r5
600100ec:	f200 8087 	bhi.w	600101fe <_malloc_r+0x176>
600100f0:	f000 fad8 	bl	600106a4 <__malloc_lock>
600100f4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
600100f8:	f0c0 8158 	bcc.w	600103ac <_malloc_r+0x324>
600100fc:	0a6b      	lsrs	r3, r5, #9
600100fe:	f000 8082 	beq.w	60010206 <_malloc_r+0x17e>
60010102:	2b04      	cmp	r3, #4
60010104:	f200 810b 	bhi.w	6001031e <_malloc_r+0x296>
60010108:	09ab      	lsrs	r3, r5, #6
6001010a:	f103 0c39 	add.w	ip, r3, #57	; 0x39
6001010e:	f103 0438 	add.w	r4, r3, #56	; 0x38
60010112:	ea4f 03cc 	mov.w	r3, ip, lsl #3
60010116:	4fa1      	ldr	r7, [pc, #644]	; (6001039c <_malloc_r+0x314>)
60010118:	443b      	add	r3, r7
6001011a:	f1a3 0008 	sub.w	r0, r3, #8
6001011e:	685b      	ldr	r3, [r3, #4]
60010120:	4298      	cmp	r0, r3
60010122:	d106      	bne.n	60010132 <_malloc_r+0xaa>
60010124:	e00c      	b.n	60010140 <_malloc_r+0xb8>
60010126:	2900      	cmp	r1, #0
60010128:	f280 80c0 	bge.w	600102ac <_malloc_r+0x224>
6001012c:	68db      	ldr	r3, [r3, #12]
6001012e:	4298      	cmp	r0, r3
60010130:	d006      	beq.n	60010140 <_malloc_r+0xb8>
60010132:	685a      	ldr	r2, [r3, #4]
60010134:	f022 0203 	bic.w	r2, r2, #3
60010138:	1b51      	subs	r1, r2, r5
6001013a:	290f      	cmp	r1, #15
6001013c:	ddf3      	ble.n	60010126 <_malloc_r+0x9e>
6001013e:	46a4      	mov	ip, r4
60010140:	f8df 825c 	ldr.w	r8, [pc, #604]	; 600103a0 <_malloc_r+0x318>
60010144:	693c      	ldr	r4, [r7, #16]
60010146:	4544      	cmp	r4, r8
60010148:	f000 809d 	beq.w	60010286 <_malloc_r+0x1fe>
6001014c:	6863      	ldr	r3, [r4, #4]
6001014e:	f023 0903 	bic.w	r9, r3, #3
60010152:	eba9 0305 	sub.w	r3, r9, r5
60010156:	2b0f      	cmp	r3, #15
60010158:	f300 812d 	bgt.w	600103b6 <_malloc_r+0x32e>
6001015c:	2b00      	cmp	r3, #0
6001015e:	e9c7 8804 	strd	r8, r8, [r7, #16]
60010162:	f280 810e 	bge.w	60010382 <_malloc_r+0x2fa>
60010166:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
6001016a:	f8d7 e004 	ldr.w	lr, [r7, #4]
6001016e:	f080 80b6 	bcs.w	600102de <_malloc_r+0x256>
60010172:	ea4f 01d9 	mov.w	r1, r9, lsr #3
60010176:	3101      	adds	r1, #1
60010178:	ea4f 1959 	mov.w	r9, r9, lsr #5
6001017c:	2301      	movs	r3, #1
6001017e:	fa03 f309 	lsl.w	r3, r3, r9
60010182:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
60010186:	60a2      	str	r2, [r4, #8]
60010188:	ea4e 0e03 	orr.w	lr, lr, r3
6001018c:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
60010190:	3b08      	subs	r3, #8
60010192:	60e3      	str	r3, [r4, #12]
60010194:	f8c7 e004 	str.w	lr, [r7, #4]
60010198:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
6001019c:	60d4      	str	r4, [r2, #12]
6001019e:	ea4f 03ac 	mov.w	r3, ip, asr #2
600101a2:	2001      	movs	r0, #1
600101a4:	4098      	lsls	r0, r3
600101a6:	4570      	cmp	r0, lr
600101a8:	d833      	bhi.n	60010212 <_malloc_r+0x18a>
600101aa:	ea10 0f0e 	tst.w	r0, lr
600101ae:	d107      	bne.n	600101c0 <_malloc_r+0x138>
600101b0:	f02c 0c03 	bic.w	ip, ip, #3
600101b4:	0040      	lsls	r0, r0, #1
600101b6:	ea10 0f0e 	tst.w	r0, lr
600101ba:	f10c 0c04 	add.w	ip, ip, #4
600101be:	d0f9      	beq.n	600101b4 <_malloc_r+0x12c>
600101c0:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
600101c4:	4653      	mov	r3, sl
600101c6:	46e1      	mov	r9, ip
600101c8:	68d9      	ldr	r1, [r3, #12]
600101ca:	e00e      	b.n	600101ea <_malloc_r+0x162>
600101cc:	684a      	ldr	r2, [r1, #4]
600101ce:	f022 0203 	bic.w	r2, r2, #3
600101d2:	eba2 0e05 	sub.w	lr, r2, r5
600101d6:	f1be 0f0f 	cmp.w	lr, #15
600101da:	460c      	mov	r4, r1
600101dc:	68c9      	ldr	r1, [r1, #12]
600101de:	f300 80ac 	bgt.w	6001033a <_malloc_r+0x2b2>
600101e2:	f1be 0f00 	cmp.w	lr, #0
600101e6:	f280 80bf 	bge.w	60010368 <_malloc_r+0x2e0>
600101ea:	428b      	cmp	r3, r1
600101ec:	d1ee      	bne.n	600101cc <_malloc_r+0x144>
600101ee:	f109 0901 	add.w	r9, r9, #1
600101f2:	f019 0f03 	tst.w	r9, #3
600101f6:	f103 0308 	add.w	r3, r3, #8
600101fa:	d1e5      	bne.n	600101c8 <_malloc_r+0x140>
600101fc:	e123      	b.n	60010446 <_malloc_r+0x3be>
600101fe:	230c      	movs	r3, #12
60010200:	6033      	str	r3, [r6, #0]
60010202:	2400      	movs	r4, #0
60010204:	e769      	b.n	600100da <_malloc_r+0x52>
60010206:	f44f 7300 	mov.w	r3, #512	; 0x200
6001020a:	f04f 0c40 	mov.w	ip, #64	; 0x40
6001020e:	243f      	movs	r4, #63	; 0x3f
60010210:	e781      	b.n	60010116 <_malloc_r+0x8e>
60010212:	68bc      	ldr	r4, [r7, #8]
60010214:	6863      	ldr	r3, [r4, #4]
60010216:	f023 0803 	bic.w	r8, r3, #3
6001021a:	45a8      	cmp	r8, r5
6001021c:	d303      	bcc.n	60010226 <_malloc_r+0x19e>
6001021e:	eba8 0305 	sub.w	r3, r8, r5
60010222:	2b0f      	cmp	r3, #15
60010224:	dc32      	bgt.n	6001028c <_malloc_r+0x204>
60010226:	4b5f      	ldr	r3, [pc, #380]	; (600103a4 <_malloc_r+0x31c>)
60010228:	681a      	ldr	r2, [r3, #0]
6001022a:	4b5f      	ldr	r3, [pc, #380]	; (600103a8 <_malloc_r+0x320>)
6001022c:	6819      	ldr	r1, [r3, #0]
6001022e:	3101      	adds	r1, #1
60010230:	442a      	add	r2, r5
60010232:	eb04 0a08 	add.w	sl, r4, r8
60010236:	f000 816b 	beq.w	60010510 <_malloc_r+0x488>
6001023a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
6001023e:	320f      	adds	r2, #15
60010240:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
60010244:	f022 020f 	bic.w	r2, r2, #15
60010248:	4611      	mov	r1, r2
6001024a:	4630      	mov	r0, r6
6001024c:	9200      	str	r2, [sp, #0]
6001024e:	f000 fa35 	bl	600106bc <_sbrk_r>
60010252:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
60010256:	9a00      	ldr	r2, [sp, #0]
60010258:	4b53      	ldr	r3, [pc, #332]	; (600103a8 <_malloc_r+0x320>)
6001025a:	4681      	mov	r9, r0
6001025c:	d005      	beq.n	6001026a <_malloc_r+0x1e2>
6001025e:	4582      	cmp	sl, r0
60010260:	f240 80c4 	bls.w	600103ec <_malloc_r+0x364>
60010264:	42bc      	cmp	r4, r7
60010266:	f000 8104 	beq.w	60010472 <_malloc_r+0x3ea>
6001026a:	68bc      	ldr	r4, [r7, #8]
6001026c:	6862      	ldr	r2, [r4, #4]
6001026e:	f022 0203 	bic.w	r2, r2, #3
60010272:	42aa      	cmp	r2, r5
60010274:	eba2 0305 	sub.w	r3, r2, r5
60010278:	d301      	bcc.n	6001027e <_malloc_r+0x1f6>
6001027a:	2b0f      	cmp	r3, #15
6001027c:	dc06      	bgt.n	6001028c <_malloc_r+0x204>
6001027e:	4630      	mov	r0, r6
60010280:	f000 fa16 	bl	600106b0 <__malloc_unlock>
60010284:	e7bd      	b.n	60010202 <_malloc_r+0x17a>
60010286:	f8d7 e004 	ldr.w	lr, [r7, #4]
6001028a:	e788      	b.n	6001019e <_malloc_r+0x116>
6001028c:	1962      	adds	r2, r4, r5
6001028e:	f043 0301 	orr.w	r3, r3, #1
60010292:	f045 0501 	orr.w	r5, r5, #1
60010296:	6065      	str	r5, [r4, #4]
60010298:	4630      	mov	r0, r6
6001029a:	60ba      	str	r2, [r7, #8]
6001029c:	6053      	str	r3, [r2, #4]
6001029e:	f000 fa07 	bl	600106b0 <__malloc_unlock>
600102a2:	3408      	adds	r4, #8
600102a4:	4620      	mov	r0, r4
600102a6:	b003      	add	sp, #12
600102a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600102ac:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
600102b0:	441a      	add	r2, r3
600102b2:	60e1      	str	r1, [r4, #12]
600102b4:	608c      	str	r4, [r1, #8]
600102b6:	6851      	ldr	r1, [r2, #4]
600102b8:	f041 0101 	orr.w	r1, r1, #1
600102bc:	4630      	mov	r0, r6
600102be:	6051      	str	r1, [r2, #4]
600102c0:	f103 0408 	add.w	r4, r3, #8
600102c4:	f000 f9f4 	bl	600106b0 <__malloc_unlock>
600102c8:	4620      	mov	r0, r4
600102ca:	b003      	add	sp, #12
600102cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600102d0:	68d4      	ldr	r4, [r2, #12]
600102d2:	42a2      	cmp	r2, r4
600102d4:	f47f aef1 	bne.w	600100ba <_malloc_r+0x32>
600102d8:	f10c 0c02 	add.w	ip, ip, #2
600102dc:	e730      	b.n	60010140 <_malloc_r+0xb8>
600102de:	f5b9 6f20 	cmp.w	r9, #2560	; 0xa00
600102e2:	ea4f 2259 	mov.w	r2, r9, lsr #9
600102e6:	d37a      	bcc.n	600103de <_malloc_r+0x356>
600102e8:	2a14      	cmp	r2, #20
600102ea:	f200 812d 	bhi.w	60010548 <_malloc_r+0x4c0>
600102ee:	f102 035c 	add.w	r3, r2, #92	; 0x5c
600102f2:	00db      	lsls	r3, r3, #3
600102f4:	325b      	adds	r2, #91	; 0x5b
600102f6:	18f9      	adds	r1, r7, r3
600102f8:	58fb      	ldr	r3, [r7, r3]
600102fa:	3908      	subs	r1, #8
600102fc:	4299      	cmp	r1, r3
600102fe:	d103      	bne.n	60010308 <_malloc_r+0x280>
60010300:	e108      	b.n	60010514 <_malloc_r+0x48c>
60010302:	689b      	ldr	r3, [r3, #8]
60010304:	4299      	cmp	r1, r3
60010306:	d004      	beq.n	60010312 <_malloc_r+0x28a>
60010308:	685a      	ldr	r2, [r3, #4]
6001030a:	f022 0203 	bic.w	r2, r2, #3
6001030e:	454a      	cmp	r2, r9
60010310:	d8f7      	bhi.n	60010302 <_malloc_r+0x27a>
60010312:	68d9      	ldr	r1, [r3, #12]
60010314:	e9c4 3102 	strd	r3, r1, [r4, #8]
60010318:	608c      	str	r4, [r1, #8]
6001031a:	60dc      	str	r4, [r3, #12]
6001031c:	e73f      	b.n	6001019e <_malloc_r+0x116>
6001031e:	2b14      	cmp	r3, #20
60010320:	f240 8085 	bls.w	6001042e <_malloc_r+0x3a6>
60010324:	2b54      	cmp	r3, #84	; 0x54
60010326:	f200 8118 	bhi.w	6001055a <_malloc_r+0x4d2>
6001032a:	0b2b      	lsrs	r3, r5, #12
6001032c:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
60010330:	f103 046e 	add.w	r4, r3, #110	; 0x6e
60010334:	ea4f 03cc 	mov.w	r3, ip, lsl #3
60010338:	e6ed      	b.n	60010116 <_malloc_r+0x8e>
6001033a:	4630      	mov	r0, r6
6001033c:	68a6      	ldr	r6, [r4, #8]
6001033e:	1963      	adds	r3, r4, r5
60010340:	f045 0501 	orr.w	r5, r5, #1
60010344:	6065      	str	r5, [r4, #4]
60010346:	60f1      	str	r1, [r6, #12]
60010348:	608e      	str	r6, [r1, #8]
6001034a:	f04e 0101 	orr.w	r1, lr, #1
6001034e:	e9c7 3304 	strd	r3, r3, [r7, #16]
60010352:	f8c3 8008 	str.w	r8, [r3, #8]
60010356:	f8c3 800c 	str.w	r8, [r3, #12]
6001035a:	6059      	str	r1, [r3, #4]
6001035c:	f844 e002 	str.w	lr, [r4, r2]
60010360:	f000 f9a6 	bl	600106b0 <__malloc_unlock>
60010364:	3408      	adds	r4, #8
60010366:	e6b8      	b.n	600100da <_malloc_r+0x52>
60010368:	4422      	add	r2, r4
6001036a:	4630      	mov	r0, r6
6001036c:	6853      	ldr	r3, [r2, #4]
6001036e:	f043 0301 	orr.w	r3, r3, #1
60010372:	6053      	str	r3, [r2, #4]
60010374:	f854 3f08 	ldr.w	r3, [r4, #8]!
60010378:	60d9      	str	r1, [r3, #12]
6001037a:	608b      	str	r3, [r1, #8]
6001037c:	f000 f998 	bl	600106b0 <__malloc_unlock>
60010380:	e6ab      	b.n	600100da <_malloc_r+0x52>
60010382:	44a1      	add	r9, r4
60010384:	4630      	mov	r0, r6
60010386:	f8d9 3004 	ldr.w	r3, [r9, #4]
6001038a:	f043 0301 	orr.w	r3, r3, #1
6001038e:	f8c9 3004 	str.w	r3, [r9, #4]
60010392:	3408      	adds	r4, #8
60010394:	f000 f98c 	bl	600106b0 <__malloc_unlock>
60010398:	e69f      	b.n	600100da <_malloc_r+0x52>
6001039a:	bf00      	nop
6001039c:	202025a8 	.word	0x202025a8
600103a0:	202025b0 	.word	0x202025b0
600103a4:	20204280 	.word	0x20204280
600103a8:	20202a28 	.word	0x20202a28
600103ac:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
600103b0:	f105 0208 	add.w	r2, r5, #8
600103b4:	e679      	b.n	600100aa <_malloc_r+0x22>
600103b6:	1962      	adds	r2, r4, r5
600103b8:	f043 0101 	orr.w	r1, r3, #1
600103bc:	f045 0501 	orr.w	r5, r5, #1
600103c0:	6065      	str	r5, [r4, #4]
600103c2:	4630      	mov	r0, r6
600103c4:	e9c7 2204 	strd	r2, r2, [r7, #16]
600103c8:	f8c2 8008 	str.w	r8, [r2, #8]
600103cc:	f8c2 800c 	str.w	r8, [r2, #12]
600103d0:	6051      	str	r1, [r2, #4]
600103d2:	f844 3009 	str.w	r3, [r4, r9]
600103d6:	f000 f96b 	bl	600106b0 <__malloc_unlock>
600103da:	3408      	adds	r4, #8
600103dc:	e67d      	b.n	600100da <_malloc_r+0x52>
600103de:	ea4f 1299 	mov.w	r2, r9, lsr #6
600103e2:	f102 0339 	add.w	r3, r2, #57	; 0x39
600103e6:	00db      	lsls	r3, r3, #3
600103e8:	3238      	adds	r2, #56	; 0x38
600103ea:	e784      	b.n	600102f6 <_malloc_r+0x26e>
600103ec:	f8df b204 	ldr.w	fp, [pc, #516]	; 600105f4 <_malloc_r+0x56c>
600103f0:	f8db 1000 	ldr.w	r1, [fp]
600103f4:	4411      	add	r1, r2
600103f6:	f8cb 1000 	str.w	r1, [fp]
600103fa:	4608      	mov	r0, r1
600103fc:	d140      	bne.n	60010480 <_malloc_r+0x3f8>
600103fe:	f3c9 0c0b 	ubfx	ip, r9, #0, #12
60010402:	f1bc 0f00 	cmp.w	ip, #0
60010406:	d13b      	bne.n	60010480 <_malloc_r+0x3f8>
60010408:	f8d7 9008 	ldr.w	r9, [r7, #8]
6001040c:	4442      	add	r2, r8
6001040e:	f042 0201 	orr.w	r2, r2, #1
60010412:	f8c9 2004 	str.w	r2, [r9, #4]
60010416:	4b78      	ldr	r3, [pc, #480]	; (600105f8 <_malloc_r+0x570>)
60010418:	6818      	ldr	r0, [r3, #0]
6001041a:	4288      	cmp	r0, r1
6001041c:	bf38      	it	cc
6001041e:	6019      	strcc	r1, [r3, #0]
60010420:	4b76      	ldr	r3, [pc, #472]	; (600105fc <_malloc_r+0x574>)
60010422:	6818      	ldr	r0, [r3, #0]
60010424:	4288      	cmp	r0, r1
60010426:	bf38      	it	cc
60010428:	6019      	strcc	r1, [r3, #0]
6001042a:	464c      	mov	r4, r9
6001042c:	e71f      	b.n	6001026e <_malloc_r+0x1e6>
6001042e:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
60010432:	f103 045b 	add.w	r4, r3, #91	; 0x5b
60010436:	ea4f 03cc 	mov.w	r3, ip, lsl #3
6001043a:	e66c      	b.n	60010116 <_malloc_r+0x8e>
6001043c:	f85a 3908 	ldr.w	r3, [sl], #-8
60010440:	4553      	cmp	r3, sl
60010442:	f040 80d5 	bne.w	600105f0 <_malloc_r+0x568>
60010446:	f01c 0f03 	tst.w	ip, #3
6001044a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
6001044e:	d1f5      	bne.n	6001043c <_malloc_r+0x3b4>
60010450:	687b      	ldr	r3, [r7, #4]
60010452:	ea23 0300 	bic.w	r3, r3, r0
60010456:	607b      	str	r3, [r7, #4]
60010458:	0040      	lsls	r0, r0, #1
6001045a:	4298      	cmp	r0, r3
6001045c:	f63f aed9 	bhi.w	60010212 <_malloc_r+0x18a>
60010460:	b918      	cbnz	r0, 6001046a <_malloc_r+0x3e2>
60010462:	e6d6      	b.n	60010212 <_malloc_r+0x18a>
60010464:	0040      	lsls	r0, r0, #1
60010466:	f109 0904 	add.w	r9, r9, #4
6001046a:	4218      	tst	r0, r3
6001046c:	d0fa      	beq.n	60010464 <_malloc_r+0x3dc>
6001046e:	46cc      	mov	ip, r9
60010470:	e6a6      	b.n	600101c0 <_malloc_r+0x138>
60010472:	f8df b180 	ldr.w	fp, [pc, #384]	; 600105f4 <_malloc_r+0x56c>
60010476:	f8db 0000 	ldr.w	r0, [fp]
6001047a:	4410      	add	r0, r2
6001047c:	f8cb 0000 	str.w	r0, [fp]
60010480:	6819      	ldr	r1, [r3, #0]
60010482:	3101      	adds	r1, #1
60010484:	bf1b      	ittet	ne
60010486:	eba9 030a 	subne.w	r3, r9, sl
6001048a:	181b      	addne	r3, r3, r0
6001048c:	f8c3 9000 	streq.w	r9, [r3]
60010490:	f8cb 3000 	strne.w	r3, [fp]
60010494:	f019 0307 	ands.w	r3, r9, #7
60010498:	d045      	beq.n	60010526 <_malloc_r+0x49e>
6001049a:	f1c3 0108 	rsb	r1, r3, #8
6001049e:	4489      	add	r9, r1
600104a0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
600104a4:	444a      	add	r2, r9
600104a6:	3108      	adds	r1, #8
600104a8:	1a89      	subs	r1, r1, r2
600104aa:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
600104ae:	4651      	mov	r1, sl
600104b0:	4630      	mov	r0, r6
600104b2:	9301      	str	r3, [sp, #4]
600104b4:	9200      	str	r2, [sp, #0]
600104b6:	f000 f901 	bl	600106bc <_sbrk_r>
600104ba:	1c42      	adds	r2, r0, #1
600104bc:	e9dd 2300 	ldrd	r2, r3, [sp]
600104c0:	d07a      	beq.n	600105b8 <_malloc_r+0x530>
600104c2:	eba0 0009 	sub.w	r0, r0, r9
600104c6:	eb00 020a 	add.w	r2, r0, sl
600104ca:	f8db 3000 	ldr.w	r3, [fp]
600104ce:	f8c7 9008 	str.w	r9, [r7, #8]
600104d2:	f042 0201 	orr.w	r2, r2, #1
600104d6:	eb0a 0103 	add.w	r1, sl, r3
600104da:	42bc      	cmp	r4, r7
600104dc:	f8c9 2004 	str.w	r2, [r9, #4]
600104e0:	f8cb 1000 	str.w	r1, [fp]
600104e4:	d097      	beq.n	60010416 <_malloc_r+0x38e>
600104e6:	f1b8 0f0f 	cmp.w	r8, #15
600104ea:	d941      	bls.n	60010570 <_malloc_r+0x4e8>
600104ec:	6862      	ldr	r2, [r4, #4]
600104ee:	f1a8 030c 	sub.w	r3, r8, #12
600104f2:	f023 0307 	bic.w	r3, r3, #7
600104f6:	f002 0201 	and.w	r2, r2, #1
600104fa:	431a      	orrs	r2, r3
600104fc:	6062      	str	r2, [r4, #4]
600104fe:	18e2      	adds	r2, r4, r3
60010500:	2005      	movs	r0, #5
60010502:	2b0f      	cmp	r3, #15
60010504:	6050      	str	r0, [r2, #4]
60010506:	6090      	str	r0, [r2, #8]
60010508:	d84c      	bhi.n	600105a4 <_malloc_r+0x51c>
6001050a:	f8d9 2004 	ldr.w	r2, [r9, #4]
6001050e:	e782      	b.n	60010416 <_malloc_r+0x38e>
60010510:	3210      	adds	r2, #16
60010512:	e699      	b.n	60010248 <_malloc_r+0x1c0>
60010514:	1092      	asrs	r2, r2, #2
60010516:	2001      	movs	r0, #1
60010518:	fa00 f202 	lsl.w	r2, r0, r2
6001051c:	ea4e 0e02 	orr.w	lr, lr, r2
60010520:	f8c7 e004 	str.w	lr, [r7, #4]
60010524:	e6f6      	b.n	60010314 <_malloc_r+0x28c>
60010526:	eb09 0102 	add.w	r1, r9, r2
6001052a:	4249      	negs	r1, r1
6001052c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
60010530:	4651      	mov	r1, sl
60010532:	4630      	mov	r0, r6
60010534:	9301      	str	r3, [sp, #4]
60010536:	9200      	str	r2, [sp, #0]
60010538:	f000 f8c0 	bl	600106bc <_sbrk_r>
6001053c:	1c43      	adds	r3, r0, #1
6001053e:	e9dd 2300 	ldrd	r2, r3, [sp]
60010542:	d1be      	bne.n	600104c2 <_malloc_r+0x43a>
60010544:	469a      	mov	sl, r3
60010546:	e7c0      	b.n	600104ca <_malloc_r+0x442>
60010548:	2a54      	cmp	r2, #84	; 0x54
6001054a:	d815      	bhi.n	60010578 <_malloc_r+0x4f0>
6001054c:	ea4f 3219 	mov.w	r2, r9, lsr #12
60010550:	f102 036f 	add.w	r3, r2, #111	; 0x6f
60010554:	00db      	lsls	r3, r3, #3
60010556:	326e      	adds	r2, #110	; 0x6e
60010558:	e6cd      	b.n	600102f6 <_malloc_r+0x26e>
6001055a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
6001055e:	d815      	bhi.n	6001058c <_malloc_r+0x504>
60010560:	0beb      	lsrs	r3, r5, #15
60010562:	f103 0c78 	add.w	ip, r3, #120	; 0x78
60010566:	f103 0477 	add.w	r4, r3, #119	; 0x77
6001056a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
6001056e:	e5d2      	b.n	60010116 <_malloc_r+0x8e>
60010570:	2301      	movs	r3, #1
60010572:	f8c9 3004 	str.w	r3, [r9, #4]
60010576:	e682      	b.n	6001027e <_malloc_r+0x1f6>
60010578:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
6001057c:	d823      	bhi.n	600105c6 <_malloc_r+0x53e>
6001057e:	ea4f 32d9 	mov.w	r2, r9, lsr #15
60010582:	f102 0378 	add.w	r3, r2, #120	; 0x78
60010586:	00db      	lsls	r3, r3, #3
60010588:	3277      	adds	r2, #119	; 0x77
6001058a:	e6b4      	b.n	600102f6 <_malloc_r+0x26e>
6001058c:	f240 5254 	movw	r2, #1364	; 0x554
60010590:	4293      	cmp	r3, r2
60010592:	d823      	bhi.n	600105dc <_malloc_r+0x554>
60010594:	0cab      	lsrs	r3, r5, #18
60010596:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
6001059a:	f103 047c 	add.w	r4, r3, #124	; 0x7c
6001059e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
600105a2:	e5b8      	b.n	60010116 <_malloc_r+0x8e>
600105a4:	f104 0108 	add.w	r1, r4, #8
600105a8:	4630      	mov	r0, r6
600105aa:	f001 f9b1 	bl	60011910 <_free_r>
600105ae:	f8d7 9008 	ldr.w	r9, [r7, #8]
600105b2:	f8db 1000 	ldr.w	r1, [fp]
600105b6:	e7a8      	b.n	6001050a <_malloc_r+0x482>
600105b8:	3b08      	subs	r3, #8
600105ba:	441a      	add	r2, r3
600105bc:	eba2 0209 	sub.w	r2, r2, r9
600105c0:	f04f 0a00 	mov.w	sl, #0
600105c4:	e781      	b.n	600104ca <_malloc_r+0x442>
600105c6:	f240 5354 	movw	r3, #1364	; 0x554
600105ca:	429a      	cmp	r2, r3
600105cc:	d80c      	bhi.n	600105e8 <_malloc_r+0x560>
600105ce:	ea4f 4299 	mov.w	r2, r9, lsr #18
600105d2:	f102 037d 	add.w	r3, r2, #125	; 0x7d
600105d6:	00db      	lsls	r3, r3, #3
600105d8:	327c      	adds	r2, #124	; 0x7c
600105da:	e68c      	b.n	600102f6 <_malloc_r+0x26e>
600105dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
600105e0:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
600105e4:	247e      	movs	r4, #126	; 0x7e
600105e6:	e596      	b.n	60010116 <_malloc_r+0x8e>
600105e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
600105ec:	227e      	movs	r2, #126	; 0x7e
600105ee:	e682      	b.n	600102f6 <_malloc_r+0x26e>
600105f0:	687b      	ldr	r3, [r7, #4]
600105f2:	e731      	b.n	60010458 <_malloc_r+0x3d0>
600105f4:	20204250 	.word	0x20204250
600105f8:	2020427c 	.word	0x2020427c
600105fc:	20204278 	.word	0x20204278

60010600 <memset>:
60010600:	0783      	lsls	r3, r0, #30
60010602:	b530      	push	{r4, r5, lr}
60010604:	d047      	beq.n	60010696 <memset+0x96>
60010606:	1e54      	subs	r4, r2, #1
60010608:	2a00      	cmp	r2, #0
6001060a:	d03e      	beq.n	6001068a <memset+0x8a>
6001060c:	b2ca      	uxtb	r2, r1
6001060e:	4603      	mov	r3, r0
60010610:	e001      	b.n	60010616 <memset+0x16>
60010612:	3c01      	subs	r4, #1
60010614:	d339      	bcc.n	6001068a <memset+0x8a>
60010616:	f803 2b01 	strb.w	r2, [r3], #1
6001061a:	079d      	lsls	r5, r3, #30
6001061c:	d1f9      	bne.n	60010612 <memset+0x12>
6001061e:	2c03      	cmp	r4, #3
60010620:	d92c      	bls.n	6001067c <memset+0x7c>
60010622:	b2cd      	uxtb	r5, r1
60010624:	eb05 2505 	add.w	r5, r5, r5, lsl #8
60010628:	2c0f      	cmp	r4, #15
6001062a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
6001062e:	d935      	bls.n	6001069c <memset+0x9c>
60010630:	f1a4 0210 	sub.w	r2, r4, #16
60010634:	f022 0c0f 	bic.w	ip, r2, #15
60010638:	f103 0e10 	add.w	lr, r3, #16
6001063c:	44e6      	add	lr, ip
6001063e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
60010642:	461a      	mov	r2, r3
60010644:	6015      	str	r5, [r2, #0]
60010646:	6055      	str	r5, [r2, #4]
60010648:	6095      	str	r5, [r2, #8]
6001064a:	60d5      	str	r5, [r2, #12]
6001064c:	3210      	adds	r2, #16
6001064e:	4572      	cmp	r2, lr
60010650:	d1f8      	bne.n	60010644 <memset+0x44>
60010652:	f10c 0201 	add.w	r2, ip, #1
60010656:	f014 0f0c 	tst.w	r4, #12
6001065a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
6001065e:	f004 0c0f 	and.w	ip, r4, #15
60010662:	d013      	beq.n	6001068c <memset+0x8c>
60010664:	f1ac 0304 	sub.w	r3, ip, #4
60010668:	f023 0303 	bic.w	r3, r3, #3
6001066c:	3304      	adds	r3, #4
6001066e:	4413      	add	r3, r2
60010670:	f842 5b04 	str.w	r5, [r2], #4
60010674:	429a      	cmp	r2, r3
60010676:	d1fb      	bne.n	60010670 <memset+0x70>
60010678:	f00c 0403 	and.w	r4, ip, #3
6001067c:	b12c      	cbz	r4, 6001068a <memset+0x8a>
6001067e:	b2c9      	uxtb	r1, r1
60010680:	441c      	add	r4, r3
60010682:	f803 1b01 	strb.w	r1, [r3], #1
60010686:	429c      	cmp	r4, r3
60010688:	d1fb      	bne.n	60010682 <memset+0x82>
6001068a:	bd30      	pop	{r4, r5, pc}
6001068c:	4664      	mov	r4, ip
6001068e:	4613      	mov	r3, r2
60010690:	2c00      	cmp	r4, #0
60010692:	d1f4      	bne.n	6001067e <memset+0x7e>
60010694:	e7f9      	b.n	6001068a <memset+0x8a>
60010696:	4603      	mov	r3, r0
60010698:	4614      	mov	r4, r2
6001069a:	e7c0      	b.n	6001061e <memset+0x1e>
6001069c:	461a      	mov	r2, r3
6001069e:	46a4      	mov	ip, r4
600106a0:	e7e0      	b.n	60010664 <memset+0x64>
600106a2:	bf00      	nop

600106a4 <__malloc_lock>:
600106a4:	4801      	ldr	r0, [pc, #4]	; (600106ac <__malloc_lock+0x8>)
600106a6:	f7f8 bbb3 	b.w	60008e10 <__retarget_lock_acquire_recursive>
600106aa:	bf00      	nop
600106ac:	20202c70 	.word	0x20202c70

600106b0 <__malloc_unlock>:
600106b0:	4801      	ldr	r0, [pc, #4]	; (600106b8 <__malloc_unlock+0x8>)
600106b2:	f7f8 bbc9 	b.w	60008e48 <__retarget_lock_release_recursive>
600106b6:	bf00      	nop
600106b8:	20202c70 	.word	0x20202c70

600106bc <_sbrk_r>:
600106bc:	b538      	push	{r3, r4, r5, lr}
600106be:	4d07      	ldr	r5, [pc, #28]	; (600106dc <_sbrk_r+0x20>)
600106c0:	2200      	movs	r2, #0
600106c2:	4604      	mov	r4, r0
600106c4:	4608      	mov	r0, r1
600106c6:	602a      	str	r2, [r5, #0]
600106c8:	f7f8 fb46 	bl	60008d58 <_sbrk>
600106cc:	1c43      	adds	r3, r0, #1
600106ce:	d000      	beq.n	600106d2 <_sbrk_r+0x16>
600106d0:	bd38      	pop	{r3, r4, r5, pc}
600106d2:	682b      	ldr	r3, [r5, #0]
600106d4:	2b00      	cmp	r3, #0
600106d6:	d0fb      	beq.n	600106d0 <_sbrk_r+0x14>
600106d8:	6023      	str	r3, [r4, #0]
600106da:	bd38      	pop	{r3, r4, r5, pc}
600106dc:	20204284 	.word	0x20204284

600106e0 <strnlen>:
600106e0:	b171      	cbz	r1, 60010700 <strnlen+0x20>
600106e2:	4603      	mov	r3, r0
600106e4:	eb00 0c01 	add.w	ip, r0, r1
600106e8:	e001      	b.n	600106ee <strnlen+0xe>
600106ea:	4563      	cmp	r3, ip
600106ec:	d006      	beq.n	600106fc <strnlen+0x1c>
600106ee:	461a      	mov	r2, r3
600106f0:	3301      	adds	r3, #1
600106f2:	7811      	ldrb	r1, [r2, #0]
600106f4:	2900      	cmp	r1, #0
600106f6:	d1f8      	bne.n	600106ea <strnlen+0xa>
600106f8:	1a10      	subs	r0, r2, r0
600106fa:	4770      	bx	lr
600106fc:	1a18      	subs	r0, r3, r0
600106fe:	4770      	bx	lr
60010700:	4608      	mov	r0, r1
60010702:	4770      	bx	lr

60010704 <_vfiprintf_r>:
60010704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60010708:	b0bd      	sub	sp, #244	; 0xf4
6001070a:	e9cd 0306 	strd	r0, r3, [sp, #24]
6001070e:	461c      	mov	r4, r3
60010710:	9104      	str	r1, [sp, #16]
60010712:	4691      	mov	r9, r2
60010714:	b118      	cbz	r0, 6001071e <_vfiprintf_r+0x1a>
60010716:	6b83      	ldr	r3, [r0, #56]	; 0x38
60010718:	2b00      	cmp	r3, #0
6001071a:	f000 8235 	beq.w	60010b88 <_vfiprintf_r+0x484>
6001071e:	9a04      	ldr	r2, [sp, #16]
60010720:	6e53      	ldr	r3, [r2, #100]	; 0x64
60010722:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
60010726:	07d8      	lsls	r0, r3, #31
60010728:	d402      	bmi.n	60010730 <_vfiprintf_r+0x2c>
6001072a:	0591      	lsls	r1, r2, #22
6001072c:	f140 85b0 	bpl.w	60011290 <_vfiprintf_r+0xb8c>
60010730:	0713      	lsls	r3, r2, #28
60010732:	f140 80ee 	bpl.w	60010912 <_vfiprintf_r+0x20e>
60010736:	9b04      	ldr	r3, [sp, #16]
60010738:	691b      	ldr	r3, [r3, #16]
6001073a:	2b00      	cmp	r3, #0
6001073c:	f000 80e9 	beq.w	60010912 <_vfiprintf_r+0x20e>
60010740:	f002 031a 	and.w	r3, r2, #26
60010744:	2b0a      	cmp	r3, #10
60010746:	f000 80f3 	beq.w	60010930 <_vfiprintf_r+0x22c>
6001074a:	ab13      	add	r3, sp, #76	; 0x4c
6001074c:	9310      	str	r3, [sp, #64]	; 0x40
6001074e:	2300      	movs	r3, #0
60010750:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60010754:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
60010758:	9309      	str	r3, [sp, #36]	; 0x24
6001075a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
6001075e:	930a      	str	r3, [sp, #40]	; 0x28
60010760:	9303      	str	r3, [sp, #12]
60010762:	f899 3000 	ldrb.w	r3, [r9]
60010766:	2b00      	cmp	r3, #0
60010768:	f000 81c3 	beq.w	60010af2 <_vfiprintf_r+0x3ee>
6001076c:	464c      	mov	r4, r9
6001076e:	e004      	b.n	6001077a <_vfiprintf_r+0x76>
60010770:	f814 3f01 	ldrb.w	r3, [r4, #1]!
60010774:	2b00      	cmp	r3, #0
60010776:	f000 80f9 	beq.w	6001096c <_vfiprintf_r+0x268>
6001077a:	2b25      	cmp	r3, #37	; 0x25
6001077c:	d1f8      	bne.n	60010770 <_vfiprintf_r+0x6c>
6001077e:	ebb4 0509 	subs.w	r5, r4, r9
60010782:	f040 80f7 	bne.w	60010974 <_vfiprintf_r+0x270>
60010786:	7823      	ldrb	r3, [r4, #0]
60010788:	2b00      	cmp	r3, #0
6001078a:	f000 81b2 	beq.w	60010af2 <_vfiprintf_r+0x3ee>
6001078e:	f04f 0300 	mov.w	r3, #0
60010792:	f04f 0b00 	mov.w	fp, #0
60010796:	7862      	ldrb	r2, [r4, #1]
60010798:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
6001079c:	f8cd b008 	str.w	fp, [sp, #8]
600107a0:	f104 0901 	add.w	r9, r4, #1
600107a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
600107a8:	f109 0901 	add.w	r9, r9, #1
600107ac:	f1a2 0320 	sub.w	r3, r2, #32
600107b0:	2b5a      	cmp	r3, #90	; 0x5a
600107b2:	f200 810c 	bhi.w	600109ce <_vfiprintf_r+0x2ca>
600107b6:	e8df f013 	tbh	[pc, r3, lsl #1]
600107ba:	02ef      	.short	0x02ef
600107bc:	010a010a 	.word	0x010a010a
600107c0:	010a02ea 	.word	0x010a02ea
600107c4:	010a010a 	.word	0x010a010a
600107c8:	010a006a 	.word	0x010a006a
600107cc:	02df010a 	.word	0x02df010a
600107d0:	010a02d9 	.word	0x010a02d9
600107d4:	02c000d4 	.word	0x02c000d4
600107d8:	02bb010a 	.word	0x02bb010a
600107dc:	005b005b 	.word	0x005b005b
600107e0:	005b005b 	.word	0x005b005b
600107e4:	005b005b 	.word	0x005b005b
600107e8:	005b005b 	.word	0x005b005b
600107ec:	010a005b 	.word	0x010a005b
600107f0:	010a010a 	.word	0x010a010a
600107f4:	010a010a 	.word	0x010a010a
600107f8:	010a010a 	.word	0x010a010a
600107fc:	010a010a 	.word	0x010a010a
60010800:	008501d9 	.word	0x008501d9
60010804:	010a010a 	.word	0x010a010a
60010808:	010a010a 	.word	0x010a010a
6001080c:	010a010a 	.word	0x010a010a
60010810:	010a010a 	.word	0x010a010a
60010814:	010a010a 	.word	0x010a010a
60010818:	010a0247 	.word	0x010a0247
6001081c:	010a010a 	.word	0x010a010a
60010820:	010a01bc 	.word	0x010a01bc
60010824:	010a0211 	.word	0x010a0211
60010828:	0573010a 	.word	0x0573010a
6001082c:	010a010a 	.word	0x010a010a
60010830:	010a010a 	.word	0x010a010a
60010834:	010a010a 	.word	0x010a010a
60010838:	010a010a 	.word	0x010a010a
6001083c:	010a010a 	.word	0x010a010a
60010840:	008701d9 	.word	0x008701d9
60010844:	010a010a 	.word	0x010a010a
60010848:	02ae010a 	.word	0x02ae010a
6001084c:	00800087 	.word	0x00800087
60010850:	02a1010a 	.word	0x02a1010a
60010854:	0293010a 	.word	0x0293010a
60010858:	02fa0569 	.word	0x02fa0569
6001085c:	010a0080 	.word	0x010a0080
60010860:	007d01bc 	.word	0x007d01bc
60010864:	010a0567 	.word	0x010a0567
60010868:	0591010a 	.word	0x0591010a
6001086c:	007d010a 	.word	0x007d010a
60010870:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60010874:	2100      	movs	r1, #0
60010876:	f819 2b01 	ldrb.w	r2, [r9], #1
6001087a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
6001087e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
60010882:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60010886:	2b09      	cmp	r3, #9
60010888:	d9f5      	bls.n	60010876 <_vfiprintf_r+0x172>
6001088a:	9102      	str	r1, [sp, #8]
6001088c:	e78e      	b.n	600107ac <_vfiprintf_r+0xa8>
6001088e:	9d06      	ldr	r5, [sp, #24]
60010890:	4628      	mov	r0, r5
60010892:	f001 fadb 	bl	60011e4c <_localeconv_r>
60010896:	6843      	ldr	r3, [r0, #4]
60010898:	930b      	str	r3, [sp, #44]	; 0x2c
6001089a:	4618      	mov	r0, r3
6001089c:	f7f1 fd10 	bl	600022c0 <strlen>
600108a0:	900c      	str	r0, [sp, #48]	; 0x30
600108a2:	4604      	mov	r4, r0
600108a4:	4628      	mov	r0, r5
600108a6:	f001 fad1 	bl	60011e4c <_localeconv_r>
600108aa:	6883      	ldr	r3, [r0, #8]
600108ac:	930a      	str	r3, [sp, #40]	; 0x28
600108ae:	2c00      	cmp	r4, #0
600108b0:	f040 84cb 	bne.w	6001124a <_vfiprintf_r+0xb46>
600108b4:	f899 2000 	ldrb.w	r2, [r9]
600108b8:	e776      	b.n	600107a8 <_vfiprintf_r+0xa4>
600108ba:	f899 2000 	ldrb.w	r2, [r9]
600108be:	f04b 0b20 	orr.w	fp, fp, #32
600108c2:	e771      	b.n	600107a8 <_vfiprintf_r+0xa4>
600108c4:	f04b 0b10 	orr.w	fp, fp, #16
600108c8:	f01b 0f20 	tst.w	fp, #32
600108cc:	f000 8122 	beq.w	60010b14 <_vfiprintf_r+0x410>
600108d0:	9b07      	ldr	r3, [sp, #28]
600108d2:	3307      	adds	r3, #7
600108d4:	f023 0307 	bic.w	r3, r3, #7
600108d8:	4619      	mov	r1, r3
600108da:	685a      	ldr	r2, [r3, #4]
600108dc:	f851 3b08 	ldr.w	r3, [r1], #8
600108e0:	9107      	str	r1, [sp, #28]
600108e2:	4611      	mov	r1, r2
600108e4:	2a00      	cmp	r2, #0
600108e6:	f2c0 815b 	blt.w	60010ba0 <_vfiprintf_r+0x49c>
600108ea:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
600108ee:	f000 8162 	beq.w	60010bb6 <_vfiprintf_r+0x4b2>
600108f2:	ea53 0201 	orrs.w	r2, r3, r1
600108f6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
600108fa:	f040 815c 	bne.w	60010bb6 <_vfiprintf_r+0x4b2>
600108fe:	f1b8 0f00 	cmp.w	r8, #0
60010902:	f040 857c 	bne.w	600113fe <_vfiprintf_r+0xcfa>
60010906:	f8cd 8004 	str.w	r8, [sp, #4]
6001090a:	f8cd 8014 	str.w	r8, [sp, #20]
6001090e:	ac3c      	add	r4, sp, #240	; 0xf0
60010910:	e191      	b.n	60010c36 <_vfiprintf_r+0x532>
60010912:	9d04      	ldr	r5, [sp, #16]
60010914:	9806      	ldr	r0, [sp, #24]
60010916:	4629      	mov	r1, r5
60010918:	f000 fe00 	bl	6001151c <__swsetup_r>
6001091c:	2800      	cmp	r0, #0
6001091e:	f040 8593 	bne.w	60011448 <_vfiprintf_r+0xd44>
60010922:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
60010926:	f002 031a 	and.w	r3, r2, #26
6001092a:	2b0a      	cmp	r3, #10
6001092c:	f47f af0d 	bne.w	6001074a <_vfiprintf_r+0x46>
60010930:	9904      	ldr	r1, [sp, #16]
60010932:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
60010936:	2b00      	cmp	r3, #0
60010938:	f6ff af07 	blt.w	6001074a <_vfiprintf_r+0x46>
6001093c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
6001093e:	07dd      	lsls	r5, r3, #31
60010940:	d402      	bmi.n	60010948 <_vfiprintf_r+0x244>
60010942:	0590      	lsls	r0, r2, #22
60010944:	f140 855e 	bpl.w	60011404 <_vfiprintf_r+0xd00>
60010948:	9904      	ldr	r1, [sp, #16]
6001094a:	9806      	ldr	r0, [sp, #24]
6001094c:	4623      	mov	r3, r4
6001094e:	464a      	mov	r2, r9
60010950:	b03d      	add	sp, #244	; 0xf4
60010952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60010956:	f000 bda1 	b.w	6001149c <__sbprintf>
6001095a:	9a02      	ldr	r2, [sp, #8]
6001095c:	9307      	str	r3, [sp, #28]
6001095e:	4252      	negs	r2, r2
60010960:	9202      	str	r2, [sp, #8]
60010962:	f899 2000 	ldrb.w	r2, [r9]
60010966:	f04b 0b04 	orr.w	fp, fp, #4
6001096a:	e71d      	b.n	600107a8 <_vfiprintf_r+0xa4>
6001096c:	ebb4 0509 	subs.w	r5, r4, r9
60010970:	f000 80bf 	beq.w	60010af2 <_vfiprintf_r+0x3ee>
60010974:	9b11      	ldr	r3, [sp, #68]	; 0x44
60010976:	9a12      	ldr	r2, [sp, #72]	; 0x48
60010978:	3301      	adds	r3, #1
6001097a:	442a      	add	r2, r5
6001097c:	2b07      	cmp	r3, #7
6001097e:	e9ca 9500 	strd	r9, r5, [sl]
60010982:	9212      	str	r2, [sp, #72]	; 0x48
60010984:	9311      	str	r3, [sp, #68]	; 0x44
60010986:	dc05      	bgt.n	60010994 <_vfiprintf_r+0x290>
60010988:	f10a 0a08 	add.w	sl, sl, #8
6001098c:	9b03      	ldr	r3, [sp, #12]
6001098e:	442b      	add	r3, r5
60010990:	9303      	str	r3, [sp, #12]
60010992:	e6f8      	b.n	60010786 <_vfiprintf_r+0x82>
60010994:	b91a      	cbnz	r2, 6001099e <_vfiprintf_r+0x29a>
60010996:	9211      	str	r2, [sp, #68]	; 0x44
60010998:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
6001099c:	e7f6      	b.n	6001098c <_vfiprintf_r+0x288>
6001099e:	9904      	ldr	r1, [sp, #16]
600109a0:	9806      	ldr	r0, [sp, #24]
600109a2:	aa10      	add	r2, sp, #64	; 0x40
600109a4:	f001 f8b2 	bl	60011b0c <__sfvwrite_r>
600109a8:	2300      	movs	r3, #0
600109aa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
600109ae:	2800      	cmp	r0, #0
600109b0:	d0f2      	beq.n	60010998 <_vfiprintf_r+0x294>
600109b2:	9b04      	ldr	r3, [sp, #16]
600109b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
600109b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
600109ba:	07d1      	lsls	r1, r2, #31
600109bc:	f140 80a0 	bpl.w	60010b00 <_vfiprintf_r+0x3fc>
600109c0:	065b      	lsls	r3, r3, #25
600109c2:	f100 854d 	bmi.w	60011460 <_vfiprintf_r+0xd5c>
600109c6:	9803      	ldr	r0, [sp, #12]
600109c8:	b03d      	add	sp, #244	; 0xf4
600109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600109ce:	2a00      	cmp	r2, #0
600109d0:	f000 808f 	beq.w	60010af2 <_vfiprintf_r+0x3ee>
600109d4:	2300      	movs	r3, #0
600109d6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
600109da:	2301      	movs	r3, #1
600109dc:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
600109e0:	9301      	str	r3, [sp, #4]
600109e2:	9305      	str	r3, [sp, #20]
600109e4:	ac23      	add	r4, sp, #140	; 0x8c
600109e6:	f04f 0800 	mov.w	r8, #0
600109ea:	f01b 0602 	ands.w	r6, fp, #2
600109ee:	d002      	beq.n	600109f6 <_vfiprintf_r+0x2f2>
600109f0:	9b01      	ldr	r3, [sp, #4]
600109f2:	3302      	adds	r3, #2
600109f4:	9301      	str	r3, [sp, #4]
600109f6:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
600109fa:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
600109fe:	f102 0c01 	add.w	ip, r2, #1
60010a02:	4661      	mov	r1, ip
60010a04:	9308      	str	r3, [sp, #32]
60010a06:	d105      	bne.n	60010a14 <_vfiprintf_r+0x310>
60010a08:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
60010a0c:	1b5d      	subs	r5, r3, r5
60010a0e:	2d00      	cmp	r5, #0
60010a10:	f300 8336 	bgt.w	60011080 <_vfiprintf_r+0x97c>
60010a14:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
60010a18:	2d00      	cmp	r5, #0
60010a1a:	f000 81fb 	beq.w	60010e14 <_vfiprintf_r+0x710>
60010a1e:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
60010a22:	3001      	adds	r0, #1
60010a24:	f8ca 2000 	str.w	r2, [sl]
60010a28:	2907      	cmp	r1, #7
60010a2a:	f04f 0201 	mov.w	r2, #1
60010a2e:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010a32:	f8ca 2004 	str.w	r2, [sl, #4]
60010a36:	f340 81e9 	ble.w	60010e0c <_vfiprintf_r+0x708>
60010a3a:	b148      	cbz	r0, 60010a50 <_vfiprintf_r+0x34c>
60010a3c:	aa10      	add	r2, sp, #64	; 0x40
60010a3e:	9904      	ldr	r1, [sp, #16]
60010a40:	9806      	ldr	r0, [sp, #24]
60010a42:	f001 f863 	bl	60011b0c <__sfvwrite_r>
60010a46:	2200      	movs	r2, #0
60010a48:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
60010a4c:	2800      	cmp	r0, #0
60010a4e:	d1b0      	bne.n	600109b2 <_vfiprintf_r+0x2ae>
60010a50:	2e00      	cmp	r6, #0
60010a52:	f000 81f2 	beq.w	60010e3a <_vfiprintf_r+0x736>
60010a56:	2002      	movs	r0, #2
60010a58:	ab0f      	add	r3, sp, #60	; 0x3c
60010a5a:	9014      	str	r0, [sp, #80]	; 0x50
60010a5c:	9313      	str	r3, [sp, #76]	; 0x4c
60010a5e:	2101      	movs	r1, #1
60010a60:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010a64:	460a      	mov	r2, r1
60010a66:	f10a 0a08 	add.w	sl, sl, #8
60010a6a:	3101      	adds	r1, #1
60010a6c:	9b08      	ldr	r3, [sp, #32]
60010a6e:	2b80      	cmp	r3, #128	; 0x80
60010a70:	f000 81ed 	beq.w	60010e4e <_vfiprintf_r+0x74a>
60010a74:	9b05      	ldr	r3, [sp, #20]
60010a76:	eba8 0703 	sub.w	r7, r8, r3
60010a7a:	2f00      	cmp	r7, #0
60010a7c:	f300 8230 	bgt.w	60010ee0 <_vfiprintf_r+0x7dc>
60010a80:	9b05      	ldr	r3, [sp, #20]
60010a82:	f8ca 4000 	str.w	r4, [sl]
60010a86:	4418      	add	r0, r3
60010a88:	2907      	cmp	r1, #7
60010a8a:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010a8e:	f8ca 3004 	str.w	r3, [sl, #4]
60010a92:	f340 8274 	ble.w	60010f7e <_vfiprintf_r+0x87a>
60010a96:	2800      	cmp	r0, #0
60010a98:	f040 82cf 	bne.w	6001103a <_vfiprintf_r+0x936>
60010a9c:	9011      	str	r0, [sp, #68]	; 0x44
60010a9e:	f01b 0f04 	tst.w	fp, #4
60010aa2:	f000 82ac 	beq.w	60010ffe <_vfiprintf_r+0x8fa>
60010aa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
60010aaa:	1a9c      	subs	r4, r3, r2
60010aac:	2c00      	cmp	r4, #0
60010aae:	9812      	ldr	r0, [sp, #72]	; 0x48
60010ab0:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010ab4:	f300 826f 	bgt.w	60010f96 <_vfiprintf_r+0x892>
60010ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60010abc:	9901      	ldr	r1, [sp, #4]
60010abe:	428a      	cmp	r2, r1
60010ac0:	bfac      	ite	ge
60010ac2:	189b      	addge	r3, r3, r2
60010ac4:	185b      	addlt	r3, r3, r1
60010ac6:	9303      	str	r3, [sp, #12]
60010ac8:	b150      	cbz	r0, 60010ae0 <_vfiprintf_r+0x3dc>
60010aca:	9904      	ldr	r1, [sp, #16]
60010acc:	9806      	ldr	r0, [sp, #24]
60010ace:	aa10      	add	r2, sp, #64	; 0x40
60010ad0:	f001 f81c 	bl	60011b0c <__sfvwrite_r>
60010ad4:	2300      	movs	r3, #0
60010ad6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60010ada:	2800      	cmp	r0, #0
60010adc:	f47f af69 	bne.w	600109b2 <_vfiprintf_r+0x2ae>
60010ae0:	2300      	movs	r3, #0
60010ae2:	9311      	str	r3, [sp, #68]	; 0x44
60010ae4:	f899 3000 	ldrb.w	r3, [r9]
60010ae8:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010aec:	2b00      	cmp	r3, #0
60010aee:	f47f ae3d 	bne.w	6001076c <_vfiprintf_r+0x68>
60010af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
60010af4:	2b00      	cmp	r3, #0
60010af6:	f040 8494 	bne.w	60011422 <_vfiprintf_r+0xd1e>
60010afa:	2300      	movs	r3, #0
60010afc:	9311      	str	r3, [sp, #68]	; 0x44
60010afe:	e758      	b.n	600109b2 <_vfiprintf_r+0x2ae>
60010b00:	059a      	lsls	r2, r3, #22
60010b02:	f53f af5d 	bmi.w	600109c0 <_vfiprintf_r+0x2bc>
60010b06:	9c04      	ldr	r4, [sp, #16]
60010b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
60010b0a:	f7f8 f99d 	bl	60008e48 <__retarget_lock_release_recursive>
60010b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60010b12:	e755      	b.n	600109c0 <_vfiprintf_r+0x2bc>
60010b14:	9a07      	ldr	r2, [sp, #28]
60010b16:	f01b 0f10 	tst.w	fp, #16
60010b1a:	f852 3b04 	ldr.w	r3, [r2], #4
60010b1e:	9207      	str	r2, [sp, #28]
60010b20:	d139      	bne.n	60010b96 <_vfiprintf_r+0x492>
60010b22:	f01b 0f40 	tst.w	fp, #64	; 0x40
60010b26:	d032      	beq.n	60010b8e <_vfiprintf_r+0x48a>
60010b28:	f343 31c0 	sbfx	r1, r3, #15, #1
60010b2c:	460a      	mov	r2, r1
60010b2e:	b21b      	sxth	r3, r3
60010b30:	e6d8      	b.n	600108e4 <_vfiprintf_r+0x1e0>
60010b32:	9d07      	ldr	r5, [sp, #28]
60010b34:	f855 4b04 	ldr.w	r4, [r5], #4
60010b38:	2600      	movs	r6, #0
60010b3a:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
60010b3e:	2c00      	cmp	r4, #0
60010b40:	f000 8435 	beq.w	600113ae <_vfiprintf_r+0xcaa>
60010b44:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60010b48:	f000 83fd 	beq.w	60011346 <_vfiprintf_r+0xc42>
60010b4c:	4642      	mov	r2, r8
60010b4e:	4631      	mov	r1, r6
60010b50:	4620      	mov	r0, r4
60010b52:	f7f1 fc25 	bl	600023a0 <memchr>
60010b56:	2800      	cmp	r0, #0
60010b58:	f000 8459 	beq.w	6001140e <_vfiprintf_r+0xd0a>
60010b5c:	1b03      	subs	r3, r0, r4
60010b5e:	9305      	str	r3, [sp, #20]
60010b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
60010b64:	9507      	str	r5, [sp, #28]
60010b66:	46b0      	mov	r8, r6
60010b68:	9301      	str	r3, [sp, #4]
60010b6a:	e064      	b.n	60010c36 <_vfiprintf_r+0x532>
60010b6c:	9b07      	ldr	r3, [sp, #28]
60010b6e:	2200      	movs	r2, #0
60010b70:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
60010b74:	f853 2b04 	ldr.w	r2, [r3], #4
60010b78:	9307      	str	r3, [sp, #28]
60010b7a:	2301      	movs	r3, #1
60010b7c:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
60010b80:	9301      	str	r3, [sp, #4]
60010b82:	9305      	str	r3, [sp, #20]
60010b84:	ac23      	add	r4, sp, #140	; 0x8c
60010b86:	e72e      	b.n	600109e6 <_vfiprintf_r+0x2e2>
60010b88:	f000 fdee 	bl	60011768 <__sinit>
60010b8c:	e5c7      	b.n	6001071e <_vfiprintf_r+0x1a>
60010b8e:	f41b 7f00 	tst.w	fp, #512	; 0x200
60010b92:	f040 8429 	bne.w	600113e8 <_vfiprintf_r+0xce4>
60010b96:	17d9      	asrs	r1, r3, #31
60010b98:	460a      	mov	r2, r1
60010b9a:	2a00      	cmp	r2, #0
60010b9c:	f6bf aea5 	bge.w	600108ea <_vfiprintf_r+0x1e6>
60010ba0:	425b      	negs	r3, r3
60010ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60010ba6:	222d      	movs	r2, #45	; 0x2d
60010ba8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60010bac:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
60010bb0:	d001      	beq.n	60010bb6 <_vfiprintf_r+0x4b2>
60010bb2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
60010bb6:	2b0a      	cmp	r3, #10
60010bb8:	f171 0200 	sbcs.w	r2, r1, #0
60010bbc:	f080 82e3 	bcs.w	60011186 <_vfiprintf_r+0xa82>
60010bc0:	3330      	adds	r3, #48	; 0x30
60010bc2:	b2db      	uxtb	r3, r3
60010bc4:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
60010bc8:	4643      	mov	r3, r8
60010bca:	2b01      	cmp	r3, #1
60010bcc:	bfb8      	it	lt
60010bce:	2301      	movlt	r3, #1
60010bd0:	9301      	str	r3, [sp, #4]
60010bd2:	2301      	movs	r3, #1
60010bd4:	9305      	str	r3, [sp, #20]
60010bd6:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
60010bda:	e02c      	b.n	60010c36 <_vfiprintf_r+0x532>
60010bdc:	f04b 0210 	orr.w	r2, fp, #16
60010be0:	f012 0120 	ands.w	r1, r2, #32
60010be4:	f000 82c0 	beq.w	60011168 <_vfiprintf_r+0xa64>
60010be8:	9b07      	ldr	r3, [sp, #28]
60010bea:	3307      	adds	r3, #7
60010bec:	f023 0307 	bic.w	r3, r3, #7
60010bf0:	4618      	mov	r0, r3
60010bf2:	6859      	ldr	r1, [r3, #4]
60010bf4:	f850 3b08 	ldr.w	r3, [r0], #8
60010bf8:	9007      	str	r0, [sp, #28]
60010bfa:	2000      	movs	r0, #0
60010bfc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60010c00:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
60010c04:	f000 83cc 	beq.w	600113a0 <_vfiprintf_r+0xc9c>
60010c08:	ea53 0001 	orrs.w	r0, r3, r1
60010c0c:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
60010c10:	d1d1      	bne.n	60010bb6 <_vfiprintf_r+0x4b2>
60010c12:	2001      	movs	r0, #1
60010c14:	f1b8 0f00 	cmp.w	r8, #0
60010c18:	d138      	bne.n	60010c8c <_vfiprintf_r+0x588>
60010c1a:	2800      	cmp	r0, #0
60010c1c:	f47f ae73 	bne.w	60010906 <_vfiprintf_r+0x202>
60010c20:	f012 0201 	ands.w	r2, r2, #1
60010c24:	9205      	str	r2, [sp, #20]
60010c26:	f000 82fd 	beq.w	60011224 <_vfiprintf_r+0xb20>
60010c2a:	2330      	movs	r3, #48	; 0x30
60010c2c:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
60010c30:	9201      	str	r2, [sp, #4]
60010c32:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
60010c36:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
60010c3a:	2b00      	cmp	r3, #0
60010c3c:	f43f aed5 	beq.w	600109ea <_vfiprintf_r+0x2e6>
60010c40:	9b01      	ldr	r3, [sp, #4]
60010c42:	3301      	adds	r3, #1
60010c44:	9301      	str	r3, [sp, #4]
60010c46:	e6d0      	b.n	600109ea <_vfiprintf_r+0x2e6>
60010c48:	f04b 0210 	orr.w	r2, fp, #16
60010c4c:	f012 0120 	ands.w	r1, r2, #32
60010c50:	f000 827b 	beq.w	6001114a <_vfiprintf_r+0xa46>
60010c54:	9b07      	ldr	r3, [sp, #28]
60010c56:	3307      	adds	r3, #7
60010c58:	f023 0307 	bic.w	r3, r3, #7
60010c5c:	4618      	mov	r0, r3
60010c5e:	6859      	ldr	r1, [r3, #4]
60010c60:	f850 3b08 	ldr.w	r3, [r0], #8
60010c64:	9007      	str	r0, [sp, #28]
60010c66:	2000      	movs	r0, #0
60010c68:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60010c6c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
60010c70:	f422 6b80 	bic.w	fp, r2, #1024	; 0x400
60010c74:	d012      	beq.n	60010c9c <_vfiprintf_r+0x598>
60010c76:	f422 6490 	bic.w	r4, r2, #1152	; 0x480
60010c7a:	ea53 0201 	orrs.w	r2, r3, r1
60010c7e:	f040 838d 	bne.w	6001139c <_vfiprintf_r+0xc98>
60010c82:	465a      	mov	r2, fp
60010c84:	46a3      	mov	fp, r4
60010c86:	f1b8 0f00 	cmp.w	r8, #0
60010c8a:	d0c6      	beq.n	60010c1a <_vfiprintf_r+0x516>
60010c8c:	2801      	cmp	r0, #1
60010c8e:	f000 83b6 	beq.w	600113fe <_vfiprintf_r+0xcfa>
60010c92:	2300      	movs	r3, #0
60010c94:	2802      	cmp	r0, #2
60010c96:	4619      	mov	r1, r3
60010c98:	f000 81dc 	beq.w	60011054 <_vfiprintf_r+0x950>
60010c9c:	ac3c      	add	r4, sp, #240	; 0xf0
60010c9e:	f003 0207 	and.w	r2, r3, #7
60010ca2:	08db      	lsrs	r3, r3, #3
60010ca4:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
60010ca8:	08c9      	lsrs	r1, r1, #3
60010caa:	3230      	adds	r2, #48	; 0x30
60010cac:	ea53 0501 	orrs.w	r5, r3, r1
60010cb0:	4620      	mov	r0, r4
60010cb2:	f804 2d01 	strb.w	r2, [r4, #-1]!
60010cb6:	d1f2      	bne.n	60010c9e <_vfiprintf_r+0x59a>
60010cb8:	f01b 0f01 	tst.w	fp, #1
60010cbc:	f000 81d8 	beq.w	60011070 <_vfiprintf_r+0x96c>
60010cc0:	2a30      	cmp	r2, #48	; 0x30
60010cc2:	f000 81d5 	beq.w	60011070 <_vfiprintf_r+0x96c>
60010cc6:	2330      	movs	r3, #48	; 0x30
60010cc8:	3802      	subs	r0, #2
60010cca:	f804 3c01 	strb.w	r3, [r4, #-1]
60010cce:	ab3c      	add	r3, sp, #240	; 0xf0
60010cd0:	1a1b      	subs	r3, r3, r0
60010cd2:	4543      	cmp	r3, r8
60010cd4:	9305      	str	r3, [sp, #20]
60010cd6:	bfb8      	it	lt
60010cd8:	4643      	movlt	r3, r8
60010cda:	4604      	mov	r4, r0
60010cdc:	9301      	str	r3, [sp, #4]
60010cde:	e7aa      	b.n	60010c36 <_vfiprintf_r+0x532>
60010ce0:	f01b 0f20 	tst.w	fp, #32
60010ce4:	f000 82bf 	beq.w	60011266 <_vfiprintf_r+0xb62>
60010ce8:	9b07      	ldr	r3, [sp, #28]
60010cea:	9a03      	ldr	r2, [sp, #12]
60010cec:	681b      	ldr	r3, [r3, #0]
60010cee:	601a      	str	r2, [r3, #0]
60010cf0:	17d2      	asrs	r2, r2, #31
60010cf2:	605a      	str	r2, [r3, #4]
60010cf4:	9b07      	ldr	r3, [sp, #28]
60010cf6:	3304      	adds	r3, #4
60010cf8:	9307      	str	r3, [sp, #28]
60010cfa:	e532      	b.n	60010762 <_vfiprintf_r+0x5e>
60010cfc:	f899 2000 	ldrb.w	r2, [r9]
60010d00:	2a6c      	cmp	r2, #108	; 0x6c
60010d02:	bf03      	ittte	eq
60010d04:	f899 2001 	ldrbeq.w	r2, [r9, #1]
60010d08:	f04b 0b20 	orreq.w	fp, fp, #32
60010d0c:	f109 0901 	addeq.w	r9, r9, #1
60010d10:	f04b 0b10 	orrne.w	fp, fp, #16
60010d14:	e548      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d16:	f899 2000 	ldrb.w	r2, [r9]
60010d1a:	2a68      	cmp	r2, #104	; 0x68
60010d1c:	bf03      	ittte	eq
60010d1e:	f899 2001 	ldrbeq.w	r2, [r9, #1]
60010d22:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
60010d26:	f109 0901 	addeq.w	r9, r9, #1
60010d2a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
60010d2e:	e53b      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d30:	f899 2000 	ldrb.w	r2, [r9]
60010d34:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
60010d38:	e536      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d3a:	4649      	mov	r1, r9
60010d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
60010d40:	2a2a      	cmp	r2, #42	; 0x2a
60010d42:	f000 839f 	beq.w	60011484 <_vfiprintf_r+0xd80>
60010d46:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60010d4a:	2b09      	cmp	r3, #9
60010d4c:	4689      	mov	r9, r1
60010d4e:	f04f 0800 	mov.w	r8, #0
60010d52:	f63f ad2b 	bhi.w	600107ac <_vfiprintf_r+0xa8>
60010d56:	f819 2b01 	ldrb.w	r2, [r9], #1
60010d5a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
60010d5e:	eb03 0848 	add.w	r8, r3, r8, lsl #1
60010d62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60010d66:	2b09      	cmp	r3, #9
60010d68:	d9f5      	bls.n	60010d56 <_vfiprintf_r+0x652>
60010d6a:	e51f      	b.n	600107ac <_vfiprintf_r+0xa8>
60010d6c:	232b      	movs	r3, #43	; 0x2b
60010d6e:	f899 2000 	ldrb.w	r2, [r9]
60010d72:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60010d76:	e517      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d78:	9b07      	ldr	r3, [sp, #28]
60010d7a:	f853 2b04 	ldr.w	r2, [r3], #4
60010d7e:	9202      	str	r2, [sp, #8]
60010d80:	2a00      	cmp	r2, #0
60010d82:	f6ff adea 	blt.w	6001095a <_vfiprintf_r+0x256>
60010d86:	f899 2000 	ldrb.w	r2, [r9]
60010d8a:	9307      	str	r3, [sp, #28]
60010d8c:	e50c      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d8e:	f899 2000 	ldrb.w	r2, [r9]
60010d92:	f04b 0b01 	orr.w	fp, fp, #1
60010d96:	e507      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010d98:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
60010d9c:	f899 2000 	ldrb.w	r2, [r9]
60010da0:	2b00      	cmp	r3, #0
60010da2:	f47f ad01 	bne.w	600107a8 <_vfiprintf_r+0xa4>
60010da6:	2320      	movs	r3, #32
60010da8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60010dac:	e4fc      	b.n	600107a8 <_vfiprintf_r+0xa4>
60010dae:	9a07      	ldr	r2, [sp, #28]
60010db0:	f852 3b04 	ldr.w	r3, [r2], #4
60010db4:	9207      	str	r2, [sp, #28]
60010db6:	f647 0230 	movw	r2, #30768	; 0x7830
60010dba:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
60010dbe:	4ab7      	ldr	r2, [pc, #732]	; (6001109c <_vfiprintf_r+0x998>)
60010dc0:	9209      	str	r2, [sp, #36]	; 0x24
60010dc2:	f04b 0b02 	orr.w	fp, fp, #2
60010dc6:	2100      	movs	r1, #0
60010dc8:	f04f 0200 	mov.w	r2, #0
60010dcc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60010dd0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
60010dd4:	f000 813e 	beq.w	60011054 <_vfiprintf_r+0x950>
60010dd8:	ea53 0201 	orrs.w	r2, r3, r1
60010ddc:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
60010de0:	f040 8137 	bne.w	60011052 <_vfiprintf_r+0x94e>
60010de4:	465a      	mov	r2, fp
60010de6:	4683      	mov	fp, r0
60010de8:	2002      	movs	r0, #2
60010dea:	e713      	b.n	60010c14 <_vfiprintf_r+0x510>
60010dec:	2800      	cmp	r0, #0
60010dee:	f040 828b 	bne.w	60011308 <_vfiprintf_r+0xc04>
60010df2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
60010df6:	2101      	movs	r1, #1
60010df8:	2a00      	cmp	r2, #0
60010dfa:	f000 8281 	beq.w	60011300 <_vfiprintf_r+0xbfc>
60010dfe:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
60010e02:	9114      	str	r1, [sp, #80]	; 0x50
60010e04:	9213      	str	r2, [sp, #76]	; 0x4c
60010e06:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010e0a:	4608      	mov	r0, r1
60010e0c:	460a      	mov	r2, r1
60010e0e:	f10a 0a08 	add.w	sl, sl, #8
60010e12:	3101      	adds	r1, #1
60010e14:	2e00      	cmp	r6, #0
60010e16:	f43f ae29 	beq.w	60010a6c <_vfiprintf_r+0x368>
60010e1a:	ab0f      	add	r3, sp, #60	; 0x3c
60010e1c:	3002      	adds	r0, #2
60010e1e:	f8ca 3000 	str.w	r3, [sl]
60010e22:	2907      	cmp	r1, #7
60010e24:	f04f 0302 	mov.w	r3, #2
60010e28:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010e2c:	f8ca 3004 	str.w	r3, [sl, #4]
60010e30:	f77f ae18 	ble.w	60010a64 <_vfiprintf_r+0x360>
60010e34:	2800      	cmp	r0, #0
60010e36:	f040 817c 	bne.w	60011132 <_vfiprintf_r+0xa2e>
60010e3a:	9b08      	ldr	r3, [sp, #32]
60010e3c:	2200      	movs	r2, #0
60010e3e:	2b80      	cmp	r3, #128	; 0x80
60010e40:	f04f 0101 	mov.w	r1, #1
60010e44:	4610      	mov	r0, r2
60010e46:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010e4a:	f47f ae13 	bne.w	60010a74 <_vfiprintf_r+0x370>
60010e4e:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
60010e52:	1b5f      	subs	r7, r3, r5
60010e54:	2f00      	cmp	r7, #0
60010e56:	f77f ae0d 	ble.w	60010a74 <_vfiprintf_r+0x370>
60010e5a:	2f10      	cmp	r7, #16
60010e5c:	f340 82f1 	ble.w	60011442 <_vfiprintf_r+0xd3e>
60010e60:	46d6      	mov	lr, sl
60010e62:	4d8f      	ldr	r5, [pc, #572]	; (600110a0 <_vfiprintf_r+0x99c>)
60010e64:	46ca      	mov	sl, r9
60010e66:	2600      	movs	r6, #0
60010e68:	46c1      	mov	r9, r8
60010e6a:	46a0      	mov	r8, r4
60010e6c:	9c06      	ldr	r4, [sp, #24]
60010e6e:	e007      	b.n	60010e80 <_vfiprintf_r+0x77c>
60010e70:	3f10      	subs	r7, #16
60010e72:	2f10      	cmp	r7, #16
60010e74:	f102 0c02 	add.w	ip, r2, #2
60010e78:	f10e 0e08 	add.w	lr, lr, #8
60010e7c:	460a      	mov	r2, r1
60010e7e:	dd17      	ble.n	60010eb0 <_vfiprintf_r+0x7ac>
60010e80:	1c51      	adds	r1, r2, #1
60010e82:	3010      	adds	r0, #16
60010e84:	2310      	movs	r3, #16
60010e86:	2907      	cmp	r1, #7
60010e88:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010e8c:	f8ce 5000 	str.w	r5, [lr]
60010e90:	f8ce 3004 	str.w	r3, [lr, #4]
60010e94:	ddec      	ble.n	60010e70 <_vfiprintf_r+0x76c>
60010e96:	aa10      	add	r2, sp, #64	; 0x40
60010e98:	2800      	cmp	r0, #0
60010e9a:	f040 80b9 	bne.w	60011010 <_vfiprintf_r+0x90c>
60010e9e:	3f10      	subs	r7, #16
60010ea0:	2200      	movs	r2, #0
60010ea2:	2f10      	cmp	r7, #16
60010ea4:	f04f 0c01 	mov.w	ip, #1
60010ea8:	4610      	mov	r0, r2
60010eaa:	f10d 0e4c 	add.w	lr, sp, #76	; 0x4c
60010eae:	dce7      	bgt.n	60010e80 <_vfiprintf_r+0x77c>
60010eb0:	4644      	mov	r4, r8
60010eb2:	46c8      	mov	r8, r9
60010eb4:	46d1      	mov	r9, sl
60010eb6:	46f2      	mov	sl, lr
60010eb8:	4438      	add	r0, r7
60010eba:	f1bc 0f07 	cmp.w	ip, #7
60010ebe:	e9ca 5700 	strd	r5, r7, [sl]
60010ec2:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
60010ec6:	f300 81b1 	bgt.w	6001122c <_vfiprintf_r+0xb28>
60010eca:	9b05      	ldr	r3, [sp, #20]
60010ecc:	eba8 0703 	sub.w	r7, r8, r3
60010ed0:	2f00      	cmp	r7, #0
60010ed2:	f10a 0a08 	add.w	sl, sl, #8
60010ed6:	f10c 0101 	add.w	r1, ip, #1
60010eda:	4662      	mov	r2, ip
60010edc:	f77f add0 	ble.w	60010a80 <_vfiprintf_r+0x37c>
60010ee0:	4d6f      	ldr	r5, [pc, #444]	; (600110a0 <_vfiprintf_r+0x99c>)
60010ee2:	2f10      	cmp	r7, #16
60010ee4:	dd2a      	ble.n	60010f3c <_vfiprintf_r+0x838>
60010ee6:	462b      	mov	r3, r5
60010ee8:	46d4      	mov	ip, sl
60010eea:	4625      	mov	r5, r4
60010eec:	9e06      	ldr	r6, [sp, #24]
60010eee:	f8dd a010 	ldr.w	sl, [sp, #16]
60010ef2:	f04f 0810 	mov.w	r8, #16
60010ef6:	461c      	mov	r4, r3
60010ef8:	e007      	b.n	60010f0a <_vfiprintf_r+0x806>
60010efa:	3f10      	subs	r7, #16
60010efc:	2f10      	cmp	r7, #16
60010efe:	f102 0102 	add.w	r1, r2, #2
60010f02:	f10c 0c08 	add.w	ip, ip, #8
60010f06:	461a      	mov	r2, r3
60010f08:	dd14      	ble.n	60010f34 <_vfiprintf_r+0x830>
60010f0a:	1c53      	adds	r3, r2, #1
60010f0c:	3010      	adds	r0, #16
60010f0e:	2b07      	cmp	r3, #7
60010f10:	e9cc 4800 	strd	r4, r8, [ip]
60010f14:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
60010f18:	ddef      	ble.n	60010efa <_vfiprintf_r+0x7f6>
60010f1a:	aa10      	add	r2, sp, #64	; 0x40
60010f1c:	2800      	cmp	r0, #0
60010f1e:	f040 8081 	bne.w	60011024 <_vfiprintf_r+0x920>
60010f22:	3f10      	subs	r7, #16
60010f24:	2200      	movs	r2, #0
60010f26:	2f10      	cmp	r7, #16
60010f28:	f04f 0101 	mov.w	r1, #1
60010f2c:	4610      	mov	r0, r2
60010f2e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
60010f32:	dcea      	bgt.n	60010f0a <_vfiprintf_r+0x806>
60010f34:	4623      	mov	r3, r4
60010f36:	46e2      	mov	sl, ip
60010f38:	462c      	mov	r4, r5
60010f3a:	461d      	mov	r5, r3
60010f3c:	4438      	add	r0, r7
60010f3e:	2907      	cmp	r1, #7
60010f40:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010f44:	f8ca 5000 	str.w	r5, [sl]
60010f48:	f8ca 7004 	str.w	r7, [sl, #4]
60010f4c:	dc03      	bgt.n	60010f56 <_vfiprintf_r+0x852>
60010f4e:	f10a 0a08 	add.w	sl, sl, #8
60010f52:	3101      	adds	r1, #1
60010f54:	e594      	b.n	60010a80 <_vfiprintf_r+0x37c>
60010f56:	b150      	cbz	r0, 60010f6e <_vfiprintf_r+0x86a>
60010f58:	9904      	ldr	r1, [sp, #16]
60010f5a:	9806      	ldr	r0, [sp, #24]
60010f5c:	aa10      	add	r2, sp, #64	; 0x40
60010f5e:	f000 fdd5 	bl	60011b0c <__sfvwrite_r>
60010f62:	2300      	movs	r3, #0
60010f64:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60010f68:	2800      	cmp	r0, #0
60010f6a:	f47f ad22 	bne.w	600109b2 <_vfiprintf_r+0x2ae>
60010f6e:	9805      	ldr	r0, [sp, #20]
60010f70:	9413      	str	r4, [sp, #76]	; 0x4c
60010f72:	2301      	movs	r3, #1
60010f74:	9014      	str	r0, [sp, #80]	; 0x50
60010f76:	9012      	str	r0, [sp, #72]	; 0x48
60010f78:	9311      	str	r3, [sp, #68]	; 0x44
60010f7a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010f7e:	f01b 0f04 	tst.w	fp, #4
60010f82:	f43f ad99 	beq.w	60010ab8 <_vfiprintf_r+0x3b4>
60010f86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
60010f8a:	1a9c      	subs	r4, r3, r2
60010f8c:	2c00      	cmp	r4, #0
60010f8e:	f10a 0a08 	add.w	sl, sl, #8
60010f92:	f77f ad91 	ble.w	60010ab8 <_vfiprintf_r+0x3b4>
60010f96:	2c10      	cmp	r4, #16
60010f98:	9a11      	ldr	r2, [sp, #68]	; 0x44
60010f9a:	f340 824f 	ble.w	6001143c <_vfiprintf_r+0xd38>
60010f9e:	4f41      	ldr	r7, [pc, #260]	; (600110a4 <_vfiprintf_r+0x9a0>)
60010fa0:	9e06      	ldr	r6, [sp, #24]
60010fa2:	f8dd b010 	ldr.w	fp, [sp, #16]
60010fa6:	2510      	movs	r5, #16
60010fa8:	f04f 0800 	mov.w	r8, #0
60010fac:	e007      	b.n	60010fbe <_vfiprintf_r+0x8ba>
60010fae:	3c10      	subs	r4, #16
60010fb0:	2c10      	cmp	r4, #16
60010fb2:	f102 0102 	add.w	r1, r2, #2
60010fb6:	f10a 0a08 	add.w	sl, sl, #8
60010fba:	461a      	mov	r2, r3
60010fbc:	dd14      	ble.n	60010fe8 <_vfiprintf_r+0x8e4>
60010fbe:	1c53      	adds	r3, r2, #1
60010fc0:	3010      	adds	r0, #16
60010fc2:	2b07      	cmp	r3, #7
60010fc4:	e9ca 7500 	strd	r7, r5, [sl]
60010fc8:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
60010fcc:	ddef      	ble.n	60010fae <_vfiprintf_r+0x8aa>
60010fce:	aa10      	add	r2, sp, #64	; 0x40
60010fd0:	2800      	cmp	r0, #0
60010fd2:	f040 80a4 	bne.w	6001111e <_vfiprintf_r+0xa1a>
60010fd6:	3c10      	subs	r4, #16
60010fd8:	2200      	movs	r2, #0
60010fda:	2c10      	cmp	r4, #16
60010fdc:	f04f 0101 	mov.w	r1, #1
60010fe0:	4610      	mov	r0, r2
60010fe2:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60010fe6:	dcea      	bgt.n	60010fbe <_vfiprintf_r+0x8ba>
60010fe8:	4420      	add	r0, r4
60010fea:	2907      	cmp	r1, #7
60010fec:	e9ca 7400 	strd	r7, r4, [sl]
60010ff0:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60010ff4:	f77f ad60 	ble.w	60010ab8 <_vfiprintf_r+0x3b4>
60010ff8:	2800      	cmp	r0, #0
60010ffa:	f040 8197 	bne.w	6001132c <_vfiprintf_r+0xc28>
60010ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60011002:	9901      	ldr	r1, [sp, #4]
60011004:	428a      	cmp	r2, r1
60011006:	bfac      	ite	ge
60011008:	189b      	addge	r3, r3, r2
6001100a:	185b      	addlt	r3, r3, r1
6001100c:	9303      	str	r3, [sp, #12]
6001100e:	e567      	b.n	60010ae0 <_vfiprintf_r+0x3dc>
60011010:	9904      	ldr	r1, [sp, #16]
60011012:	4620      	mov	r0, r4
60011014:	f000 fd7a 	bl	60011b0c <__sfvwrite_r>
60011018:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
6001101c:	2800      	cmp	r0, #0
6001101e:	f43f af3e 	beq.w	60010e9e <_vfiprintf_r+0x79a>
60011022:	e4c6      	b.n	600109b2 <_vfiprintf_r+0x2ae>
60011024:	4651      	mov	r1, sl
60011026:	4630      	mov	r0, r6
60011028:	f000 fd70 	bl	60011b0c <__sfvwrite_r>
6001102c:	2300      	movs	r3, #0
6001102e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60011032:	2800      	cmp	r0, #0
60011034:	f43f af75 	beq.w	60010f22 <_vfiprintf_r+0x81e>
60011038:	e4bb      	b.n	600109b2 <_vfiprintf_r+0x2ae>
6001103a:	9904      	ldr	r1, [sp, #16]
6001103c:	9806      	ldr	r0, [sp, #24]
6001103e:	aa10      	add	r2, sp, #64	; 0x40
60011040:	f000 fd64 	bl	60011b0c <__sfvwrite_r>
60011044:	2300      	movs	r3, #0
60011046:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
6001104a:	2800      	cmp	r0, #0
6001104c:	f43f ad27 	beq.w	60010a9e <_vfiprintf_r+0x39a>
60011050:	e4af      	b.n	600109b2 <_vfiprintf_r+0x2ae>
60011052:	4683      	mov	fp, r0
60011054:	9809      	ldr	r0, [sp, #36]	; 0x24
60011056:	ac3c      	add	r4, sp, #240	; 0xf0
60011058:	f003 020f 	and.w	r2, r3, #15
6001105c:	091b      	lsrs	r3, r3, #4
6001105e:	5c82      	ldrb	r2, [r0, r2]
60011060:	f804 2d01 	strb.w	r2, [r4, #-1]!
60011064:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
60011068:	0909      	lsrs	r1, r1, #4
6001106a:	ea53 0201 	orrs.w	r2, r3, r1
6001106e:	d1f3      	bne.n	60011058 <_vfiprintf_r+0x954>
60011070:	ab3c      	add	r3, sp, #240	; 0xf0
60011072:	1b1b      	subs	r3, r3, r4
60011074:	4543      	cmp	r3, r8
60011076:	9305      	str	r3, [sp, #20]
60011078:	bfb8      	it	lt
6001107a:	4643      	movlt	r3, r8
6001107c:	9301      	str	r3, [sp, #4]
6001107e:	e5da      	b.n	60010c36 <_vfiprintf_r+0x532>
60011080:	2d10      	cmp	r5, #16
60011082:	f340 81cb 	ble.w	6001141c <_vfiprintf_r+0xd18>
60011086:	960d      	str	r6, [sp, #52]	; 0x34
60011088:	46d4      	mov	ip, sl
6001108a:	4f06      	ldr	r7, [pc, #24]	; (600110a4 <_vfiprintf_r+0x9a0>)
6001108c:	9e04      	ldr	r6, [sp, #16]
6001108e:	46ca      	mov	sl, r9
60011090:	2310      	movs	r3, #16
60011092:	46c1      	mov	r9, r8
60011094:	46a0      	mov	r8, r4
60011096:	9c08      	ldr	r4, [sp, #32]
60011098:	e00f      	b.n	600110ba <_vfiprintf_r+0x9b6>
6001109a:	bf00      	nop
6001109c:	60016c18 	.word	0x60016c18
600110a0:	60016c34 	.word	0x60016c34
600110a4:	60016c44 	.word	0x60016c44
600110a8:	3d10      	subs	r5, #16
600110aa:	2d10      	cmp	r5, #16
600110ac:	f102 0e02 	add.w	lr, r2, #2
600110b0:	f10c 0c08 	add.w	ip, ip, #8
600110b4:	460a      	mov	r2, r1
600110b6:	dd13      	ble.n	600110e0 <_vfiprintf_r+0x9dc>
600110b8:	1c51      	adds	r1, r2, #1
600110ba:	3010      	adds	r0, #16
600110bc:	2907      	cmp	r1, #7
600110be:	e9cc 7300 	strd	r7, r3, [ip]
600110c2:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
600110c6:	ddef      	ble.n	600110a8 <_vfiprintf_r+0x9a4>
600110c8:	aa10      	add	r2, sp, #64	; 0x40
600110ca:	4631      	mov	r1, r6
600110cc:	b9f0      	cbnz	r0, 6001110c <_vfiprintf_r+0xa08>
600110ce:	3d10      	subs	r5, #16
600110d0:	2200      	movs	r2, #0
600110d2:	2d10      	cmp	r5, #16
600110d4:	f04f 0e01 	mov.w	lr, #1
600110d8:	4610      	mov	r0, r2
600110da:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
600110de:	dceb      	bgt.n	600110b8 <_vfiprintf_r+0x9b4>
600110e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
600110e2:	4644      	mov	r4, r8
600110e4:	46c8      	mov	r8, r9
600110e6:	46d1      	mov	r9, sl
600110e8:	46e2      	mov	sl, ip
600110ea:	4428      	add	r0, r5
600110ec:	f1be 0f07 	cmp.w	lr, #7
600110f0:	e9cd e011 	strd	lr, r0, [sp, #68]	; 0x44
600110f4:	f8ca 7000 	str.w	r7, [sl]
600110f8:	f8ca 5004 	str.w	r5, [sl, #4]
600110fc:	f73f ae76 	bgt.w	60010dec <_vfiprintf_r+0x6e8>
60011100:	f10a 0a08 	add.w	sl, sl, #8
60011104:	f10e 0101 	add.w	r1, lr, #1
60011108:	4672      	mov	r2, lr
6001110a:	e483      	b.n	60010a14 <_vfiprintf_r+0x310>
6001110c:	9806      	ldr	r0, [sp, #24]
6001110e:	f000 fcfd 	bl	60011b0c <__sfvwrite_r>
60011112:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
60011116:	2310      	movs	r3, #16
60011118:	2800      	cmp	r0, #0
6001111a:	d0d8      	beq.n	600110ce <_vfiprintf_r+0x9ca>
6001111c:	e449      	b.n	600109b2 <_vfiprintf_r+0x2ae>
6001111e:	4659      	mov	r1, fp
60011120:	4630      	mov	r0, r6
60011122:	f000 fcf3 	bl	60011b0c <__sfvwrite_r>
60011126:	e9cd 8811 	strd	r8, r8, [sp, #68]	; 0x44
6001112a:	2800      	cmp	r0, #0
6001112c:	f43f af53 	beq.w	60010fd6 <_vfiprintf_r+0x8d2>
60011130:	e43f      	b.n	600109b2 <_vfiprintf_r+0x2ae>
60011132:	9904      	ldr	r1, [sp, #16]
60011134:	9806      	ldr	r0, [sp, #24]
60011136:	aa10      	add	r2, sp, #64	; 0x40
60011138:	f000 fce8 	bl	60011b0c <__sfvwrite_r>
6001113c:	2300      	movs	r3, #0
6001113e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60011142:	2800      	cmp	r0, #0
60011144:	f43f ae79 	beq.w	60010e3a <_vfiprintf_r+0x736>
60011148:	e433      	b.n	600109b2 <_vfiprintf_r+0x2ae>
6001114a:	9807      	ldr	r0, [sp, #28]
6001114c:	f850 3b04 	ldr.w	r3, [r0], #4
60011150:	9007      	str	r0, [sp, #28]
60011152:	f012 0010 	ands.w	r0, r2, #16
60011156:	f47f ad86 	bne.w	60010c66 <_vfiprintf_r+0x562>
6001115a:	f012 0440 	ands.w	r4, r2, #64	; 0x40
6001115e:	f000 8136 	beq.w	600113ce <_vfiprintf_r+0xcca>
60011162:	b29b      	uxth	r3, r3
60011164:	4601      	mov	r1, r0
60011166:	e57e      	b.n	60010c66 <_vfiprintf_r+0x562>
60011168:	9807      	ldr	r0, [sp, #28]
6001116a:	f850 3b04 	ldr.w	r3, [r0], #4
6001116e:	9007      	str	r0, [sp, #28]
60011170:	f012 0010 	ands.w	r0, r2, #16
60011174:	f47f ad41 	bne.w	60010bfa <_vfiprintf_r+0x4f6>
60011178:	f012 0440 	ands.w	r4, r2, #64	; 0x40
6001117c:	f000 812d 	beq.w	600113da <_vfiprintf_r+0xcd6>
60011180:	b29b      	uxth	r3, r3
60011182:	4601      	mov	r1, r0
60011184:	e539      	b.n	60010bfa <_vfiprintf_r+0x4f6>
60011186:	f8cd 8014 	str.w	r8, [sp, #20]
6001118a:	4fb8      	ldr	r7, [pc, #736]	; (6001146c <_vfiprintf_r+0xd68>)
6001118c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
60011190:	f8cd b004 	str.w	fp, [sp, #4]
60011194:	f40b 6680 	and.w	r6, fp, #1024	; 0x400
60011198:	f04f 0c00 	mov.w	ip, #0
6001119c:	ac3c      	add	r4, sp, #240	; 0xf0
6001119e:	e005      	b.n	600111ac <_vfiprintf_r+0xaa8>
600111a0:	2b0a      	cmp	r3, #10
600111a2:	f171 0100 	sbcs.w	r1, r1, #0
600111a6:	d336      	bcc.n	60011216 <_vfiprintf_r+0xb12>
600111a8:	465b      	mov	r3, fp
600111aa:	4629      	mov	r1, r5
600111ac:	185a      	adds	r2, r3, r1
600111ae:	f142 0200 	adc.w	r2, r2, #0
600111b2:	fba7 0502 	umull	r0, r5, r7, r2
600111b6:	f025 0003 	bic.w	r0, r5, #3
600111ba:	eb00 0095 	add.w	r0, r0, r5, lsr #2
600111be:	1a12      	subs	r2, r2, r0
600111c0:	1a98      	subs	r0, r3, r2
600111c2:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
600111c6:	f161 0e00 	sbc.w	lr, r1, #0
600111ca:	fb05 f500 	mul.w	r5, r5, r0
600111ce:	fb07 550e 	mla	r5, r7, lr, r5
600111d2:	fba0 b007 	umull	fp, r0, r0, r7
600111d6:	4405      	add	r5, r0
600111d8:	f00b 0e01 	and.w	lr, fp, #1
600111dc:	2005      	movs	r0, #5
600111de:	fbae 0e00 	umull	r0, lr, lr, r0
600111e2:	1880      	adds	r0, r0, r2
600111e4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
600111e8:	3030      	adds	r0, #48	; 0x30
600111ea:	f804 0c01 	strb.w	r0, [r4, #-1]
600111ee:	ea4b 7bc5 	orr.w	fp, fp, r5, lsl #31
600111f2:	f10c 0c01 	add.w	ip, ip, #1
600111f6:	3c01      	subs	r4, #1
600111f8:	086d      	lsrs	r5, r5, #1
600111fa:	2e00      	cmp	r6, #0
600111fc:	d0d0      	beq.n	600111a0 <_vfiprintf_r+0xa9c>
600111fe:	f898 2000 	ldrb.w	r2, [r8]
60011202:	4562      	cmp	r2, ip
60011204:	d1cc      	bne.n	600111a0 <_vfiprintf_r+0xa9c>
60011206:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
6001120a:	d0c9      	beq.n	600111a0 <_vfiprintf_r+0xa9c>
6001120c:	2b0a      	cmp	r3, #10
6001120e:	f171 0100 	sbcs.w	r1, r1, #0
60011212:	f080 80b4 	bcs.w	6001137e <_vfiprintf_r+0xc7a>
60011216:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
6001121a:	f8dd b004 	ldr.w	fp, [sp, #4]
6001121e:	f8dd 8014 	ldr.w	r8, [sp, #20]
60011222:	e725      	b.n	60011070 <_vfiprintf_r+0x96c>
60011224:	f8cd 8004 	str.w	r8, [sp, #4]
60011228:	ac3c      	add	r4, sp, #240	; 0xf0
6001122a:	e504      	b.n	60010c36 <_vfiprintf_r+0x532>
6001122c:	2800      	cmp	r0, #0
6001122e:	f040 8094 	bne.w	6001135a <_vfiprintf_r+0xc56>
60011232:	9b05      	ldr	r3, [sp, #20]
60011234:	eba8 0703 	sub.w	r7, r8, r3
60011238:	2f00      	cmp	r7, #0
6001123a:	f77f ae98 	ble.w	60010f6e <_vfiprintf_r+0x86a>
6001123e:	2000      	movs	r0, #0
60011240:	4602      	mov	r2, r0
60011242:	2101      	movs	r1, #1
60011244:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60011248:	e64b      	b.n	60010ee2 <_vfiprintf_r+0x7de>
6001124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
6001124c:	f899 2000 	ldrb.w	r2, [r9]
60011250:	2b00      	cmp	r3, #0
60011252:	f43f aaa9 	beq.w	600107a8 <_vfiprintf_r+0xa4>
60011256:	781b      	ldrb	r3, [r3, #0]
60011258:	2b00      	cmp	r3, #0
6001125a:	f43f aaa5 	beq.w	600107a8 <_vfiprintf_r+0xa4>
6001125e:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
60011262:	f7ff baa1 	b.w	600107a8 <_vfiprintf_r+0xa4>
60011266:	f01b 0f10 	tst.w	fp, #16
6001126a:	f040 809b 	bne.w	600113a4 <_vfiprintf_r+0xca0>
6001126e:	f01b 0f40 	tst.w	fp, #64	; 0x40
60011272:	f040 80bf 	bne.w	600113f4 <_vfiprintf_r+0xcf0>
60011276:	f41b 7f00 	tst.w	fp, #512	; 0x200
6001127a:	f000 8093 	beq.w	600113a4 <_vfiprintf_r+0xca0>
6001127e:	9b07      	ldr	r3, [sp, #28]
60011280:	9a03      	ldr	r2, [sp, #12]
60011282:	681b      	ldr	r3, [r3, #0]
60011284:	701a      	strb	r2, [r3, #0]
60011286:	e535      	b.n	60010cf4 <_vfiprintf_r+0x5f0>
60011288:	465a      	mov	r2, fp
6001128a:	e4a9      	b.n	60010be0 <_vfiprintf_r+0x4dc>
6001128c:	465a      	mov	r2, fp
6001128e:	e4dd      	b.n	60010c4c <_vfiprintf_r+0x548>
60011290:	9d04      	ldr	r5, [sp, #16]
60011292:	6da8      	ldr	r0, [r5, #88]	; 0x58
60011294:	f7f7 fdbc 	bl	60008e10 <__retarget_lock_acquire_recursive>
60011298:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
6001129c:	f7ff ba48 	b.w	60010730 <_vfiprintf_r+0x2c>
600112a0:	4b73      	ldr	r3, [pc, #460]	; (60011470 <_vfiprintf_r+0xd6c>)
600112a2:	9309      	str	r3, [sp, #36]	; 0x24
600112a4:	f01b 0120 	ands.w	r1, fp, #32
600112a8:	d01d      	beq.n	600112e6 <_vfiprintf_r+0xbe2>
600112aa:	9b07      	ldr	r3, [sp, #28]
600112ac:	3307      	adds	r3, #7
600112ae:	f023 0307 	bic.w	r3, r3, #7
600112b2:	4618      	mov	r0, r3
600112b4:	6859      	ldr	r1, [r3, #4]
600112b6:	f850 3b08 	ldr.w	r3, [r0], #8
600112ba:	9007      	str	r0, [sp, #28]
600112bc:	f01b 0f01 	tst.w	fp, #1
600112c0:	d009      	beq.n	600112d6 <_vfiprintf_r+0xbd2>
600112c2:	ea53 0001 	orrs.w	r0, r3, r1
600112c6:	d006      	beq.n	600112d6 <_vfiprintf_r+0xbd2>
600112c8:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
600112cc:	2230      	movs	r2, #48	; 0x30
600112ce:	f04b 0b02 	orr.w	fp, fp, #2
600112d2:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
600112d6:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
600112da:	e575      	b.n	60010dc8 <_vfiprintf_r+0x6c4>
600112dc:	4b65      	ldr	r3, [pc, #404]	; (60011474 <_vfiprintf_r+0xd70>)
600112de:	9309      	str	r3, [sp, #36]	; 0x24
600112e0:	f01b 0120 	ands.w	r1, fp, #32
600112e4:	d1e1      	bne.n	600112aa <_vfiprintf_r+0xba6>
600112e6:	9807      	ldr	r0, [sp, #28]
600112e8:	f850 3b04 	ldr.w	r3, [r0], #4
600112ec:	9007      	str	r0, [sp, #28]
600112ee:	f01b 0010 	ands.w	r0, fp, #16
600112f2:	d1e3      	bne.n	600112bc <_vfiprintf_r+0xbb8>
600112f4:	f01b 0440 	ands.w	r4, fp, #64	; 0x40
600112f8:	d063      	beq.n	600113c2 <_vfiprintf_r+0xcbe>
600112fa:	b29b      	uxth	r3, r3
600112fc:	4601      	mov	r1, r0
600112fe:	e7dd      	b.n	600112bc <_vfiprintf_r+0xbb8>
60011300:	4610      	mov	r0, r2
60011302:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60011306:	e585      	b.n	60010e14 <_vfiprintf_r+0x710>
60011308:	aa10      	add	r2, sp, #64	; 0x40
6001130a:	9904      	ldr	r1, [sp, #16]
6001130c:	9806      	ldr	r0, [sp, #24]
6001130e:	f000 fbfd 	bl	60011b0c <__sfvwrite_r>
60011312:	2200      	movs	r2, #0
60011314:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
60011318:	2800      	cmp	r0, #0
6001131a:	f47f ab4a 	bne.w	600109b2 <_vfiprintf_r+0x2ae>
6001131e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
60011322:	2101      	movs	r1, #1
60011324:	2a00      	cmp	r2, #0
60011326:	f47f ad6a 	bne.w	60010dfe <_vfiprintf_r+0x6fa>
6001132a:	e7e9      	b.n	60011300 <_vfiprintf_r+0xbfc>
6001132c:	9904      	ldr	r1, [sp, #16]
6001132e:	9806      	ldr	r0, [sp, #24]
60011330:	aa10      	add	r2, sp, #64	; 0x40
60011332:	f000 fbeb 	bl	60011b0c <__sfvwrite_r>
60011336:	2300      	movs	r3, #0
60011338:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
6001133c:	2800      	cmp	r0, #0
6001133e:	f43f ae5e 	beq.w	60010ffe <_vfiprintf_r+0x8fa>
60011342:	f7ff bb36 	b.w	600109b2 <_vfiprintf_r+0x2ae>
60011346:	4620      	mov	r0, r4
60011348:	9507      	str	r5, [sp, #28]
6001134a:	f7f0 ffb9 	bl	600022c0 <strlen>
6001134e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
60011352:	46b0      	mov	r8, r6
60011354:	9005      	str	r0, [sp, #20]
60011356:	9301      	str	r3, [sp, #4]
60011358:	e46d      	b.n	60010c36 <_vfiprintf_r+0x532>
6001135a:	9904      	ldr	r1, [sp, #16]
6001135c:	9806      	ldr	r0, [sp, #24]
6001135e:	aa10      	add	r2, sp, #64	; 0x40
60011360:	f000 fbd4 	bl	60011b0c <__sfvwrite_r>
60011364:	2300      	movs	r3, #0
60011366:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
6001136a:	2800      	cmp	r0, #0
6001136c:	f47f ab21 	bne.w	600109b2 <_vfiprintf_r+0x2ae>
60011370:	9b05      	ldr	r3, [sp, #20]
60011372:	eba8 0703 	sub.w	r7, r8, r3
60011376:	2f00      	cmp	r7, #0
60011378:	f77f adf9 	ble.w	60010f6e <_vfiprintf_r+0x86a>
6001137c:	e75f      	b.n	6001123e <_vfiprintf_r+0xb3a>
6001137e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
60011380:	990b      	ldr	r1, [sp, #44]	; 0x2c
60011382:	1ae4      	subs	r4, r4, r3
60011384:	461a      	mov	r2, r3
60011386:	4620      	mov	r0, r4
60011388:	f001 f874 	bl	60012474 <strncpy>
6001138c:	f898 3001 	ldrb.w	r3, [r8, #1]
60011390:	b10b      	cbz	r3, 60011396 <_vfiprintf_r+0xc92>
60011392:	f108 0801 	add.w	r8, r8, #1
60011396:	f04f 0c00 	mov.w	ip, #0
6001139a:	e705      	b.n	600111a8 <_vfiprintf_r+0xaa4>
6001139c:	46a3      	mov	fp, r4
6001139e:	e47d      	b.n	60010c9c <_vfiprintf_r+0x598>
600113a0:	4693      	mov	fp, r2
600113a2:	e408      	b.n	60010bb6 <_vfiprintf_r+0x4b2>
600113a4:	9b07      	ldr	r3, [sp, #28]
600113a6:	9a03      	ldr	r2, [sp, #12]
600113a8:	681b      	ldr	r3, [r3, #0]
600113aa:	601a      	str	r2, [r3, #0]
600113ac:	e4a2      	b.n	60010cf4 <_vfiprintf_r+0x5f0>
600113ae:	4643      	mov	r3, r8
600113b0:	2b06      	cmp	r3, #6
600113b2:	bf28      	it	cs
600113b4:	2306      	movcs	r3, #6
600113b6:	4c30      	ldr	r4, [pc, #192]	; (60011478 <_vfiprintf_r+0xd74>)
600113b8:	9305      	str	r3, [sp, #20]
600113ba:	9507      	str	r5, [sp, #28]
600113bc:	9301      	str	r3, [sp, #4]
600113be:	f7ff bb12 	b.w	600109e6 <_vfiprintf_r+0x2e2>
600113c2:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
600113c6:	bf1c      	itt	ne
600113c8:	b2db      	uxtbne	r3, r3
600113ca:	4621      	movne	r1, r4
600113cc:	e776      	b.n	600112bc <_vfiprintf_r+0xbb8>
600113ce:	f412 7100 	ands.w	r1, r2, #512	; 0x200
600113d2:	bf1c      	itt	ne
600113d4:	b2db      	uxtbne	r3, r3
600113d6:	4621      	movne	r1, r4
600113d8:	e445      	b.n	60010c66 <_vfiprintf_r+0x562>
600113da:	f412 7100 	ands.w	r1, r2, #512	; 0x200
600113de:	f43f ac0c 	beq.w	60010bfa <_vfiprintf_r+0x4f6>
600113e2:	b2db      	uxtb	r3, r3
600113e4:	4621      	mov	r1, r4
600113e6:	e408      	b.n	60010bfa <_vfiprintf_r+0x4f6>
600113e8:	f343 11c0 	sbfx	r1, r3, #7, #1
600113ec:	460a      	mov	r2, r1
600113ee:	b25b      	sxtb	r3, r3
600113f0:	f7ff ba78 	b.w	600108e4 <_vfiprintf_r+0x1e0>
600113f4:	9b07      	ldr	r3, [sp, #28]
600113f6:	9a03      	ldr	r2, [sp, #12]
600113f8:	681b      	ldr	r3, [r3, #0]
600113fa:	801a      	strh	r2, [r3, #0]
600113fc:	e47a      	b.n	60010cf4 <_vfiprintf_r+0x5f0>
600113fe:	2330      	movs	r3, #48	; 0x30
60011400:	f7ff bbe0 	b.w	60010bc4 <_vfiprintf_r+0x4c0>
60011404:	6d88      	ldr	r0, [r1, #88]	; 0x58
60011406:	f7f7 fd1f 	bl	60008e48 <__retarget_lock_release_recursive>
6001140a:	f7ff ba9d 	b.w	60010948 <_vfiprintf_r+0x244>
6001140e:	f8cd 8004 	str.w	r8, [sp, #4]
60011412:	f8cd 8014 	str.w	r8, [sp, #20]
60011416:	9507      	str	r5, [sp, #28]
60011418:	4680      	mov	r8, r0
6001141a:	e40c      	b.n	60010c36 <_vfiprintf_r+0x532>
6001141c:	4f17      	ldr	r7, [pc, #92]	; (6001147c <_vfiprintf_r+0xd78>)
6001141e:	46e6      	mov	lr, ip
60011420:	e663      	b.n	600110ea <_vfiprintf_r+0x9e6>
60011422:	9904      	ldr	r1, [sp, #16]
60011424:	9806      	ldr	r0, [sp, #24]
60011426:	aa10      	add	r2, sp, #64	; 0x40
60011428:	f000 fb70 	bl	60011b0c <__sfvwrite_r>
6001142c:	2300      	movs	r3, #0
6001142e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60011432:	2800      	cmp	r0, #0
60011434:	f43f ab61 	beq.w	60010afa <_vfiprintf_r+0x3f6>
60011438:	f7ff babb 	b.w	600109b2 <_vfiprintf_r+0x2ae>
6001143c:	4f0f      	ldr	r7, [pc, #60]	; (6001147c <_vfiprintf_r+0xd78>)
6001143e:	1c51      	adds	r1, r2, #1
60011440:	e5d2      	b.n	60010fe8 <_vfiprintf_r+0x8e4>
60011442:	4d0f      	ldr	r5, [pc, #60]	; (60011480 <_vfiprintf_r+0xd7c>)
60011444:	468c      	mov	ip, r1
60011446:	e537      	b.n	60010eb8 <_vfiprintf_r+0x7b4>
60011448:	9b04      	ldr	r3, [sp, #16]
6001144a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
6001144c:	07df      	lsls	r7, r3, #31
6001144e:	d407      	bmi.n	60011460 <_vfiprintf_r+0xd5c>
60011450:	9b04      	ldr	r3, [sp, #16]
60011452:	899b      	ldrh	r3, [r3, #12]
60011454:	059e      	lsls	r6, r3, #22
60011456:	d403      	bmi.n	60011460 <_vfiprintf_r+0xd5c>
60011458:	9b04      	ldr	r3, [sp, #16]
6001145a:	6d98      	ldr	r0, [r3, #88]	; 0x58
6001145c:	f7f7 fcf4 	bl	60008e48 <__retarget_lock_release_recursive>
60011460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60011464:	9303      	str	r3, [sp, #12]
60011466:	f7ff baae 	b.w	600109c6 <_vfiprintf_r+0x2c2>
6001146a:	bf00      	nop
6001146c:	cccccccd 	.word	0xcccccccd
60011470:	60016c04 	.word	0x60016c04
60011474:	60016c18 	.word	0x60016c18
60011478:	60016c2c 	.word	0x60016c2c
6001147c:	60016c44 	.word	0x60016c44
60011480:	60016c34 	.word	0x60016c34
60011484:	9b07      	ldr	r3, [sp, #28]
60011486:	f899 2001 	ldrb.w	r2, [r9, #1]
6001148a:	4689      	mov	r9, r1
6001148c:	f853 1b04 	ldr.w	r1, [r3], #4
60011490:	9307      	str	r3, [sp, #28]
60011492:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
60011496:	f7ff b987 	b.w	600107a8 <_vfiprintf_r+0xa4>
6001149a:	bf00      	nop

6001149c <__sbprintf>:
6001149c:	b5f0      	push	{r4, r5, r6, r7, lr}
6001149e:	461f      	mov	r7, r3
600114a0:	898b      	ldrh	r3, [r1, #12]
600114a2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
600114a6:	f023 0302 	bic.w	r3, r3, #2
600114aa:	f8ad 300c 	strh.w	r3, [sp, #12]
600114ae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
600114b0:	9319      	str	r3, [sp, #100]	; 0x64
600114b2:	89cb      	ldrh	r3, [r1, #14]
600114b4:	f8ad 300e 	strh.w	r3, [sp, #14]
600114b8:	69cb      	ldr	r3, [r1, #28]
600114ba:	9307      	str	r3, [sp, #28]
600114bc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
600114be:	9309      	str	r3, [sp, #36]	; 0x24
600114c0:	ab1a      	add	r3, sp, #104	; 0x68
600114c2:	9300      	str	r3, [sp, #0]
600114c4:	9304      	str	r3, [sp, #16]
600114c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
600114ca:	4615      	mov	r5, r2
600114cc:	4606      	mov	r6, r0
600114ce:	9302      	str	r3, [sp, #8]
600114d0:	9305      	str	r3, [sp, #20]
600114d2:	a816      	add	r0, sp, #88	; 0x58
600114d4:	2300      	movs	r3, #0
600114d6:	460c      	mov	r4, r1
600114d8:	9306      	str	r3, [sp, #24]
600114da:	f7f7 fc51 	bl	60008d80 <__retarget_lock_init_recursive>
600114de:	462a      	mov	r2, r5
600114e0:	463b      	mov	r3, r7
600114e2:	4669      	mov	r1, sp
600114e4:	4630      	mov	r0, r6
600114e6:	f7ff f90d 	bl	60010704 <_vfiprintf_r>
600114ea:	1e05      	subs	r5, r0, #0
600114ec:	db07      	blt.n	600114fe <__sbprintf+0x62>
600114ee:	4669      	mov	r1, sp
600114f0:	4630      	mov	r0, r6
600114f2:	f000 f905 	bl	60011700 <_fflush_r>
600114f6:	2800      	cmp	r0, #0
600114f8:	bf18      	it	ne
600114fa:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
600114fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
60011502:	065b      	lsls	r3, r3, #25
60011504:	d503      	bpl.n	6001150e <__sbprintf+0x72>
60011506:	89a3      	ldrh	r3, [r4, #12]
60011508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6001150c:	81a3      	strh	r3, [r4, #12]
6001150e:	9816      	ldr	r0, [sp, #88]	; 0x58
60011510:	f7f7 fc66 	bl	60008de0 <__retarget_lock_close_recursive>
60011514:	4628      	mov	r0, r5
60011516:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
6001151a:	bdf0      	pop	{r4, r5, r6, r7, pc}

6001151c <__swsetup_r>:
6001151c:	b538      	push	{r3, r4, r5, lr}
6001151e:	4b2f      	ldr	r3, [pc, #188]	; (600115dc <__swsetup_r+0xc0>)
60011520:	681b      	ldr	r3, [r3, #0]
60011522:	4605      	mov	r5, r0
60011524:	460c      	mov	r4, r1
60011526:	b10b      	cbz	r3, 6001152c <__swsetup_r+0x10>
60011528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6001152a:	b302      	cbz	r2, 6001156e <__swsetup_r+0x52>
6001152c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011530:	0718      	lsls	r0, r3, #28
60011532:	d523      	bpl.n	6001157c <__swsetup_r+0x60>
60011534:	6922      	ldr	r2, [r4, #16]
60011536:	b35a      	cbz	r2, 60011590 <__swsetup_r+0x74>
60011538:	f013 0101 	ands.w	r1, r3, #1
6001153c:	d007      	beq.n	6001154e <__swsetup_r+0x32>
6001153e:	6961      	ldr	r1, [r4, #20]
60011540:	2000      	movs	r0, #0
60011542:	4249      	negs	r1, r1
60011544:	60a0      	str	r0, [r4, #8]
60011546:	61a1      	str	r1, [r4, #24]
60011548:	b13a      	cbz	r2, 6001155a <__swsetup_r+0x3e>
6001154a:	2000      	movs	r0, #0
6001154c:	bd38      	pop	{r3, r4, r5, pc}
6001154e:	0798      	lsls	r0, r3, #30
60011550:	bf58      	it	pl
60011552:	6961      	ldrpl	r1, [r4, #20]
60011554:	60a1      	str	r1, [r4, #8]
60011556:	2a00      	cmp	r2, #0
60011558:	d1f7      	bne.n	6001154a <__swsetup_r+0x2e>
6001155a:	0619      	lsls	r1, r3, #24
6001155c:	bf58      	it	pl
6001155e:	4610      	movpl	r0, r2
60011560:	d5f4      	bpl.n	6001154c <__swsetup_r+0x30>
60011562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60011566:	81a3      	strh	r3, [r4, #12]
60011568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
6001156c:	bd38      	pop	{r3, r4, r5, pc}
6001156e:	4618      	mov	r0, r3
60011570:	f000 f8fa 	bl	60011768 <__sinit>
60011574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011578:	0718      	lsls	r0, r3, #28
6001157a:	d4db      	bmi.n	60011534 <__swsetup_r+0x18>
6001157c:	06d9      	lsls	r1, r3, #27
6001157e:	d528      	bpl.n	600115d2 <__swsetup_r+0xb6>
60011580:	075a      	lsls	r2, r3, #29
60011582:	d412      	bmi.n	600115aa <__swsetup_r+0x8e>
60011584:	6922      	ldr	r2, [r4, #16]
60011586:	f043 0308 	orr.w	r3, r3, #8
6001158a:	81a3      	strh	r3, [r4, #12]
6001158c:	2a00      	cmp	r2, #0
6001158e:	d1d3      	bne.n	60011538 <__swsetup_r+0x1c>
60011590:	f403 7120 	and.w	r1, r3, #640	; 0x280
60011594:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
60011598:	d0ce      	beq.n	60011538 <__swsetup_r+0x1c>
6001159a:	4621      	mov	r1, r4
6001159c:	4628      	mov	r0, r5
6001159e:	f000 fc59 	bl	60011e54 <__smakebuf_r>
600115a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600115a6:	6922      	ldr	r2, [r4, #16]
600115a8:	e7c6      	b.n	60011538 <__swsetup_r+0x1c>
600115aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
600115ac:	b151      	cbz	r1, 600115c4 <__swsetup_r+0xa8>
600115ae:	f104 0240 	add.w	r2, r4, #64	; 0x40
600115b2:	4291      	cmp	r1, r2
600115b4:	d004      	beq.n	600115c0 <__swsetup_r+0xa4>
600115b6:	4628      	mov	r0, r5
600115b8:	f000 f9aa 	bl	60011910 <_free_r>
600115bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600115c0:	2200      	movs	r2, #0
600115c2:	6322      	str	r2, [r4, #48]	; 0x30
600115c4:	6922      	ldr	r2, [r4, #16]
600115c6:	2100      	movs	r1, #0
600115c8:	e9c4 2100 	strd	r2, r1, [r4]
600115cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
600115d0:	e7d9      	b.n	60011586 <__swsetup_r+0x6a>
600115d2:	2209      	movs	r2, #9
600115d4:	602a      	str	r2, [r5, #0]
600115d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600115da:	e7c4      	b.n	60011566 <__swsetup_r+0x4a>
600115dc:	20202a24 	.word	0x20202a24

600115e0 <abort>:
600115e0:	b508      	push	{r3, lr}
600115e2:	2006      	movs	r0, #6
600115e4:	f000 feba 	bl	6001235c <raise>
600115e8:	2001      	movs	r0, #1
600115ea:	f7f7 fbad 	bl	60008d48 <_exit>
600115ee:	bf00      	nop

600115f0 <__sflush_r>:
600115f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600115f2:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
600115f6:	4607      	mov	r7, r0
600115f8:	0718      	lsls	r0, r3, #28
600115fa:	460c      	mov	r4, r1
600115fc:	d439      	bmi.n	60011672 <__sflush_r+0x82>
600115fe:	684a      	ldr	r2, [r1, #4]
60011600:	2a00      	cmp	r2, #0
60011602:	dd53      	ble.n	600116ac <__sflush_r+0xbc>
60011604:	6aa5      	ldr	r5, [r4, #40]	; 0x28
60011606:	2d00      	cmp	r5, #0
60011608:	d031      	beq.n	6001166e <__sflush_r+0x7e>
6001160a:	2200      	movs	r2, #0
6001160c:	683e      	ldr	r6, [r7, #0]
6001160e:	603a      	str	r2, [r7, #0]
60011610:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
60011614:	69e1      	ldr	r1, [r4, #28]
60011616:	d155      	bne.n	600116c4 <__sflush_r+0xd4>
60011618:	2301      	movs	r3, #1
6001161a:	4638      	mov	r0, r7
6001161c:	47a8      	blx	r5
6001161e:	1c41      	adds	r1, r0, #1
60011620:	4602      	mov	r2, r0
60011622:	d05e      	beq.n	600116e2 <__sflush_r+0xf2>
60011624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011628:	6aa5      	ldr	r5, [r4, #40]	; 0x28
6001162a:	69e1      	ldr	r1, [r4, #28]
6001162c:	075b      	lsls	r3, r3, #29
6001162e:	d505      	bpl.n	6001163c <__sflush_r+0x4c>
60011630:	6863      	ldr	r3, [r4, #4]
60011632:	1ad2      	subs	r2, r2, r3
60011634:	6b23      	ldr	r3, [r4, #48]	; 0x30
60011636:	b10b      	cbz	r3, 6001163c <__sflush_r+0x4c>
60011638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
6001163a:	1ad2      	subs	r2, r2, r3
6001163c:	2300      	movs	r3, #0
6001163e:	4638      	mov	r0, r7
60011640:	47a8      	blx	r5
60011642:	1c45      	adds	r5, r0, #1
60011644:	d040      	beq.n	600116c8 <__sflush_r+0xd8>
60011646:	2300      	movs	r3, #0
60011648:	6063      	str	r3, [r4, #4]
6001164a:	6923      	ldr	r3, [r4, #16]
6001164c:	6023      	str	r3, [r4, #0]
6001164e:	89a3      	ldrh	r3, [r4, #12]
60011650:	04d9      	lsls	r1, r3, #19
60011652:	d500      	bpl.n	60011656 <__sflush_r+0x66>
60011654:	6520      	str	r0, [r4, #80]	; 0x50
60011656:	6b21      	ldr	r1, [r4, #48]	; 0x30
60011658:	603e      	str	r6, [r7, #0]
6001165a:	b141      	cbz	r1, 6001166e <__sflush_r+0x7e>
6001165c:	f104 0340 	add.w	r3, r4, #64	; 0x40
60011660:	4299      	cmp	r1, r3
60011662:	d002      	beq.n	6001166a <__sflush_r+0x7a>
60011664:	4638      	mov	r0, r7
60011666:	f000 f953 	bl	60011910 <_free_r>
6001166a:	2300      	movs	r3, #0
6001166c:	6323      	str	r3, [r4, #48]	; 0x30
6001166e:	2000      	movs	r0, #0
60011670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60011672:	690e      	ldr	r6, [r1, #16]
60011674:	2e00      	cmp	r6, #0
60011676:	d0fa      	beq.n	6001166e <__sflush_r+0x7e>
60011678:	079b      	lsls	r3, r3, #30
6001167a:	680d      	ldr	r5, [r1, #0]
6001167c:	bf08      	it	eq
6001167e:	694b      	ldreq	r3, [r1, #20]
60011680:	600e      	str	r6, [r1, #0]
60011682:	bf18      	it	ne
60011684:	2300      	movne	r3, #0
60011686:	1bad      	subs	r5, r5, r6
60011688:	608b      	str	r3, [r1, #8]
6001168a:	e00c      	b.n	600116a6 <__sflush_r+0xb6>
6001168c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
60011690:	69e1      	ldr	r1, [r4, #28]
60011692:	462b      	mov	r3, r5
60011694:	4632      	mov	r2, r6
60011696:	4638      	mov	r0, r7
60011698:	47e0      	blx	ip
6001169a:	f1b0 0c00 	subs.w	ip, r0, #0
6001169e:	eba5 050c 	sub.w	r5, r5, ip
600116a2:	4466      	add	r6, ip
600116a4:	dd06      	ble.n	600116b4 <__sflush_r+0xc4>
600116a6:	2d00      	cmp	r5, #0
600116a8:	dcf0      	bgt.n	6001168c <__sflush_r+0x9c>
600116aa:	e7e0      	b.n	6001166e <__sflush_r+0x7e>
600116ac:	6bca      	ldr	r2, [r1, #60]	; 0x3c
600116ae:	2a00      	cmp	r2, #0
600116b0:	dca8      	bgt.n	60011604 <__sflush_r+0x14>
600116b2:	e7dc      	b.n	6001166e <__sflush_r+0x7e>
600116b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600116b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600116bc:	81a3      	strh	r3, [r4, #12]
600116be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600116c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600116c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
600116c6:	e7b1      	b.n	6001162c <__sflush_r+0x3c>
600116c8:	683a      	ldr	r2, [r7, #0]
600116ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600116ce:	b18a      	cbz	r2, 600116f4 <__sflush_r+0x104>
600116d0:	2a1d      	cmp	r2, #29
600116d2:	d001      	beq.n	600116d8 <__sflush_r+0xe8>
600116d4:	2a16      	cmp	r2, #22
600116d6:	d1ef      	bne.n	600116b8 <__sflush_r+0xc8>
600116d8:	6923      	ldr	r3, [r4, #16]
600116da:	2200      	movs	r2, #0
600116dc:	e9c4 3200 	strd	r3, r2, [r4]
600116e0:	e7b9      	b.n	60011656 <__sflush_r+0x66>
600116e2:	683b      	ldr	r3, [r7, #0]
600116e4:	2b00      	cmp	r3, #0
600116e6:	d09d      	beq.n	60011624 <__sflush_r+0x34>
600116e8:	2b1d      	cmp	r3, #29
600116ea:	d001      	beq.n	600116f0 <__sflush_r+0x100>
600116ec:	2b16      	cmp	r3, #22
600116ee:	d1e1      	bne.n	600116b4 <__sflush_r+0xc4>
600116f0:	603e      	str	r6, [r7, #0]
600116f2:	e7bc      	b.n	6001166e <__sflush_r+0x7e>
600116f4:	6062      	str	r2, [r4, #4]
600116f6:	6922      	ldr	r2, [r4, #16]
600116f8:	6022      	str	r2, [r4, #0]
600116fa:	04da      	lsls	r2, r3, #19
600116fc:	d4aa      	bmi.n	60011654 <__sflush_r+0x64>
600116fe:	e7aa      	b.n	60011656 <__sflush_r+0x66>

60011700 <_fflush_r>:
60011700:	b538      	push	{r3, r4, r5, lr}
60011702:	460c      	mov	r4, r1
60011704:	4605      	mov	r5, r0
60011706:	b108      	cbz	r0, 6001170c <_fflush_r+0xc>
60011708:	6b83      	ldr	r3, [r0, #56]	; 0x38
6001170a:	b1a3      	cbz	r3, 60011736 <_fflush_r+0x36>
6001170c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
60011710:	b1b8      	cbz	r0, 60011742 <_fflush_r+0x42>
60011712:	6e63      	ldr	r3, [r4, #100]	; 0x64
60011714:	07db      	lsls	r3, r3, #31
60011716:	d401      	bmi.n	6001171c <_fflush_r+0x1c>
60011718:	0581      	lsls	r1, r0, #22
6001171a:	d515      	bpl.n	60011748 <_fflush_r+0x48>
6001171c:	4628      	mov	r0, r5
6001171e:	4621      	mov	r1, r4
60011720:	f7ff ff66 	bl	600115f0 <__sflush_r>
60011724:	6e63      	ldr	r3, [r4, #100]	; 0x64
60011726:	07da      	lsls	r2, r3, #31
60011728:	4605      	mov	r5, r0
6001172a:	d402      	bmi.n	60011732 <_fflush_r+0x32>
6001172c:	89a3      	ldrh	r3, [r4, #12]
6001172e:	059b      	lsls	r3, r3, #22
60011730:	d50e      	bpl.n	60011750 <_fflush_r+0x50>
60011732:	4628      	mov	r0, r5
60011734:	bd38      	pop	{r3, r4, r5, pc}
60011736:	f000 f817 	bl	60011768 <__sinit>
6001173a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
6001173e:	2800      	cmp	r0, #0
60011740:	d1e7      	bne.n	60011712 <_fflush_r+0x12>
60011742:	4605      	mov	r5, r0
60011744:	4628      	mov	r0, r5
60011746:	bd38      	pop	{r3, r4, r5, pc}
60011748:	6da0      	ldr	r0, [r4, #88]	; 0x58
6001174a:	f7f7 fb61 	bl	60008e10 <__retarget_lock_acquire_recursive>
6001174e:	e7e5      	b.n	6001171c <_fflush_r+0x1c>
60011750:	6da0      	ldr	r0, [r4, #88]	; 0x58
60011752:	f7f7 fb79 	bl	60008e48 <__retarget_lock_release_recursive>
60011756:	4628      	mov	r0, r5
60011758:	bd38      	pop	{r3, r4, r5, pc}
6001175a:	bf00      	nop

6001175c <_cleanup_r>:
6001175c:	4901      	ldr	r1, [pc, #4]	; (60011764 <_cleanup_r+0x8>)
6001175e:	f000 bb51 	b.w	60011e04 <_fwalk_reent>
60011762:	bf00      	nop
60011764:	60011701 	.word	0x60011701

60011768 <__sinit>:
60011768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6001176c:	4682      	mov	sl, r0
6001176e:	4839      	ldr	r0, [pc, #228]	; (60011854 <__sinit+0xec>)
60011770:	f7f7 fb4e 	bl	60008e10 <__retarget_lock_acquire_recursive>
60011774:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
60011778:	2c00      	cmp	r4, #0
6001177a:	d166      	bne.n	6001184a <__sinit+0xe2>
6001177c:	f8da 5004 	ldr.w	r5, [sl, #4]
60011780:	4a35      	ldr	r2, [pc, #212]	; (60011858 <__sinit+0xf0>)
60011782:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
60011786:	2303      	movs	r3, #3
60011788:	e9ca 4353 	strd	r4, r3, [sl, #332]	; 0x14c
6001178c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6001185c <__sinit+0xf4>
60011790:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 60011860 <__sinit+0xf8>
60011794:	4f33      	ldr	r7, [pc, #204]	; (60011864 <__sinit+0xfc>)
60011796:	4e34      	ldr	r6, [pc, #208]	; (60011868 <__sinit+0x100>)
60011798:	2304      	movs	r3, #4
6001179a:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
6001179e:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
600117a2:	4621      	mov	r1, r4
600117a4:	60eb      	str	r3, [r5, #12]
600117a6:	e9c5 4400 	strd	r4, r4, [r5]
600117aa:	e9c5 4404 	strd	r4, r4, [r5, #16]
600117ae:	60ac      	str	r4, [r5, #8]
600117b0:	666c      	str	r4, [r5, #100]	; 0x64
600117b2:	2208      	movs	r2, #8
600117b4:	61ac      	str	r4, [r5, #24]
600117b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
600117ba:	f7fe ff21 	bl	60010600 <memset>
600117be:	e9c5 5907 	strd	r5, r9, [r5, #28]
600117c2:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
600117c6:	62ee      	str	r6, [r5, #44]	; 0x2c
600117c8:	f105 0058 	add.w	r0, r5, #88	; 0x58
600117cc:	f7f7 fad8 	bl	60008d80 <__retarget_lock_init_recursive>
600117d0:	f8da 5008 	ldr.w	r5, [sl, #8]
600117d4:	4b25      	ldr	r3, [pc, #148]	; (6001186c <__sinit+0x104>)
600117d6:	60eb      	str	r3, [r5, #12]
600117d8:	4621      	mov	r1, r4
600117da:	e9c5 4400 	strd	r4, r4, [r5]
600117de:	e9c5 4404 	strd	r4, r4, [r5, #16]
600117e2:	60ac      	str	r4, [r5, #8]
600117e4:	666c      	str	r4, [r5, #100]	; 0x64
600117e6:	61ac      	str	r4, [r5, #24]
600117e8:	2208      	movs	r2, #8
600117ea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
600117ee:	f7fe ff07 	bl	60010600 <memset>
600117f2:	e9c5 5907 	strd	r5, r9, [r5, #28]
600117f6:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
600117fa:	62ee      	str	r6, [r5, #44]	; 0x2c
600117fc:	f105 0058 	add.w	r0, r5, #88	; 0x58
60011800:	f7f7 fabe 	bl	60008d80 <__retarget_lock_init_recursive>
60011804:	f8da 500c 	ldr.w	r5, [sl, #12]
60011808:	4b19      	ldr	r3, [pc, #100]	; (60011870 <__sinit+0x108>)
6001180a:	60eb      	str	r3, [r5, #12]
6001180c:	4621      	mov	r1, r4
6001180e:	e9c5 4400 	strd	r4, r4, [r5]
60011812:	e9c5 4404 	strd	r4, r4, [r5, #16]
60011816:	60ac      	str	r4, [r5, #8]
60011818:	666c      	str	r4, [r5, #100]	; 0x64
6001181a:	61ac      	str	r4, [r5, #24]
6001181c:	2208      	movs	r2, #8
6001181e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
60011822:	f7fe feed 	bl	60010600 <memset>
60011826:	f105 0058 	add.w	r0, r5, #88	; 0x58
6001182a:	e9c5 5907 	strd	r5, r9, [r5, #28]
6001182e:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
60011832:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
60011836:	f7f7 faa3 	bl	60008d80 <__retarget_lock_init_recursive>
6001183a:	2301      	movs	r3, #1
6001183c:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
60011840:	4804      	ldr	r0, [pc, #16]	; (60011854 <__sinit+0xec>)
60011842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60011846:	f7f7 baff 	b.w	60008e48 <__retarget_lock_release_recursive>
6001184a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6001184e:	4801      	ldr	r0, [pc, #4]	; (60011854 <__sinit+0xec>)
60011850:	f7f7 bafa 	b.w	60008e48 <__retarget_lock_release_recursive>
60011854:	20202c84 	.word	0x20202c84
60011858:	6001175d 	.word	0x6001175d
6001185c:	600123e5 	.word	0x600123e5
60011860:	60012409 	.word	0x60012409
60011864:	60012449 	.word	0x60012449
60011868:	6001246d 	.word	0x6001246d
6001186c:	00010009 	.word	0x00010009
60011870:	00020012 	.word	0x00020012

60011874 <_malloc_trim_r>:
60011874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60011876:	4f23      	ldr	r7, [pc, #140]	; (60011904 <_malloc_trim_r+0x90>)
60011878:	460c      	mov	r4, r1
6001187a:	4606      	mov	r6, r0
6001187c:	f7fe ff12 	bl	600106a4 <__malloc_lock>
60011880:	68bb      	ldr	r3, [r7, #8]
60011882:	685d      	ldr	r5, [r3, #4]
60011884:	f025 0503 	bic.w	r5, r5, #3
60011888:	f605 73ef 	addw	r3, r5, #4079	; 0xfef
6001188c:	1b19      	subs	r1, r3, r4
6001188e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
60011892:	f021 010f 	bic.w	r1, r1, #15
60011896:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
6001189a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
6001189e:	db07      	blt.n	600118b0 <_malloc_trim_r+0x3c>
600118a0:	2100      	movs	r1, #0
600118a2:	4630      	mov	r0, r6
600118a4:	f7fe ff0a 	bl	600106bc <_sbrk_r>
600118a8:	68bb      	ldr	r3, [r7, #8]
600118aa:	442b      	add	r3, r5
600118ac:	4298      	cmp	r0, r3
600118ae:	d004      	beq.n	600118ba <_malloc_trim_r+0x46>
600118b0:	4630      	mov	r0, r6
600118b2:	f7fe fefd 	bl	600106b0 <__malloc_unlock>
600118b6:	2000      	movs	r0, #0
600118b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600118ba:	4261      	negs	r1, r4
600118bc:	4630      	mov	r0, r6
600118be:	f7fe fefd 	bl	600106bc <_sbrk_r>
600118c2:	3001      	adds	r0, #1
600118c4:	d00d      	beq.n	600118e2 <_malloc_trim_r+0x6e>
600118c6:	4a10      	ldr	r2, [pc, #64]	; (60011908 <_malloc_trim_r+0x94>)
600118c8:	68bb      	ldr	r3, [r7, #8]
600118ca:	1b2d      	subs	r5, r5, r4
600118cc:	f045 0501 	orr.w	r5, r5, #1
600118d0:	605d      	str	r5, [r3, #4]
600118d2:	6813      	ldr	r3, [r2, #0]
600118d4:	4630      	mov	r0, r6
600118d6:	1b1b      	subs	r3, r3, r4
600118d8:	6013      	str	r3, [r2, #0]
600118da:	f7fe fee9 	bl	600106b0 <__malloc_unlock>
600118de:	2001      	movs	r0, #1
600118e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600118e2:	2100      	movs	r1, #0
600118e4:	4630      	mov	r0, r6
600118e6:	f7fe fee9 	bl	600106bc <_sbrk_r>
600118ea:	68ba      	ldr	r2, [r7, #8]
600118ec:	1a83      	subs	r3, r0, r2
600118ee:	2b0f      	cmp	r3, #15
600118f0:	ddde      	ble.n	600118b0 <_malloc_trim_r+0x3c>
600118f2:	f043 0301 	orr.w	r3, r3, #1
600118f6:	6053      	str	r3, [r2, #4]
600118f8:	4b04      	ldr	r3, [pc, #16]	; (6001190c <_malloc_trim_r+0x98>)
600118fa:	4903      	ldr	r1, [pc, #12]	; (60011908 <_malloc_trim_r+0x94>)
600118fc:	681b      	ldr	r3, [r3, #0]
600118fe:	1ac0      	subs	r0, r0, r3
60011900:	6008      	str	r0, [r1, #0]
60011902:	e7d5      	b.n	600118b0 <_malloc_trim_r+0x3c>
60011904:	202025a8 	.word	0x202025a8
60011908:	20204250 	.word	0x20204250
6001190c:	20202a28 	.word	0x20202a28

60011910 <_free_r>:
60011910:	2900      	cmp	r1, #0
60011912:	d07c      	beq.n	60011a0e <_free_r+0xfe>
60011914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60011916:	460c      	mov	r4, r1
60011918:	4606      	mov	r6, r0
6001191a:	f7fe fec3 	bl	600106a4 <__malloc_lock>
6001191e:	f854 3c04 	ldr.w	r3, [r4, #-4]
60011922:	4f77      	ldr	r7, [pc, #476]	; (60011b00 <_free_r+0x1f0>)
60011924:	f1a4 0508 	sub.w	r5, r4, #8
60011928:	f023 0101 	bic.w	r1, r3, #1
6001192c:	1868      	adds	r0, r5, r1
6001192e:	f8d7 c008 	ldr.w	ip, [r7, #8]
60011932:	6842      	ldr	r2, [r0, #4]
60011934:	4584      	cmp	ip, r0
60011936:	f022 0203 	bic.w	r2, r2, #3
6001193a:	f000 8083 	beq.w	60011a44 <_free_r+0x134>
6001193e:	07db      	lsls	r3, r3, #31
60011940:	6042      	str	r2, [r0, #4]
60011942:	eb00 0c02 	add.w	ip, r0, r2
60011946:	d433      	bmi.n	600119b0 <_free_r+0xa0>
60011948:	f854 4c08 	ldr.w	r4, [r4, #-8]
6001194c:	f8dc 3004 	ldr.w	r3, [ip, #4]
60011950:	1b2d      	subs	r5, r5, r4
60011952:	4421      	add	r1, r4
60011954:	68ac      	ldr	r4, [r5, #8]
60011956:	f107 0c08 	add.w	ip, r7, #8
6001195a:	4564      	cmp	r4, ip
6001195c:	f003 0301 	and.w	r3, r3, #1
60011960:	d064      	beq.n	60011a2c <_free_r+0x11c>
60011962:	f8d5 e00c 	ldr.w	lr, [r5, #12]
60011966:	f8c4 e00c 	str.w	lr, [r4, #12]
6001196a:	f8ce 4008 	str.w	r4, [lr, #8]
6001196e:	2b00      	cmp	r3, #0
60011970:	f000 8081 	beq.w	60011a76 <_free_r+0x166>
60011974:	f041 0301 	orr.w	r3, r1, #1
60011978:	606b      	str	r3, [r5, #4]
6001197a:	6001      	str	r1, [r0, #0]
6001197c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
60011980:	d222      	bcs.n	600119c8 <_free_r+0xb8>
60011982:	6878      	ldr	r0, [r7, #4]
60011984:	08cb      	lsrs	r3, r1, #3
60011986:	2201      	movs	r2, #1
60011988:	0949      	lsrs	r1, r1, #5
6001198a:	3301      	adds	r3, #1
6001198c:	408a      	lsls	r2, r1
6001198e:	4302      	orrs	r2, r0
60011990:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
60011994:	607a      	str	r2, [r7, #4]
60011996:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
6001199a:	3a08      	subs	r2, #8
6001199c:	e9c5 1202 	strd	r1, r2, [r5, #8]
600119a0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
600119a4:	60cd      	str	r5, [r1, #12]
600119a6:	4630      	mov	r0, r6
600119a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
600119ac:	f7fe be80 	b.w	600106b0 <__malloc_unlock>
600119b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
600119b4:	07db      	lsls	r3, r3, #31
600119b6:	d52b      	bpl.n	60011a10 <_free_r+0x100>
600119b8:	f041 0301 	orr.w	r3, r1, #1
600119bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
600119c0:	f844 3c04 	str.w	r3, [r4, #-4]
600119c4:	6001      	str	r1, [r0, #0]
600119c6:	d3dc      	bcc.n	60011982 <_free_r+0x72>
600119c8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
600119cc:	ea4f 2351 	mov.w	r3, r1, lsr #9
600119d0:	d253      	bcs.n	60011a7a <_free_r+0x16a>
600119d2:	098b      	lsrs	r3, r1, #6
600119d4:	f103 0039 	add.w	r0, r3, #57	; 0x39
600119d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
600119dc:	00c3      	lsls	r3, r0, #3
600119de:	18f8      	adds	r0, r7, r3
600119e0:	58fb      	ldr	r3, [r7, r3]
600119e2:	3808      	subs	r0, #8
600119e4:	4298      	cmp	r0, r3
600119e6:	d103      	bne.n	600119f0 <_free_r+0xe0>
600119e8:	e063      	b.n	60011ab2 <_free_r+0x1a2>
600119ea:	689b      	ldr	r3, [r3, #8]
600119ec:	4298      	cmp	r0, r3
600119ee:	d004      	beq.n	600119fa <_free_r+0xea>
600119f0:	685a      	ldr	r2, [r3, #4]
600119f2:	f022 0203 	bic.w	r2, r2, #3
600119f6:	428a      	cmp	r2, r1
600119f8:	d8f7      	bhi.n	600119ea <_free_r+0xda>
600119fa:	68d8      	ldr	r0, [r3, #12]
600119fc:	e9c5 3002 	strd	r3, r0, [r5, #8]
60011a00:	6085      	str	r5, [r0, #8]
60011a02:	60dd      	str	r5, [r3, #12]
60011a04:	4630      	mov	r0, r6
60011a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
60011a0a:	f7fe be51 	b.w	600106b0 <__malloc_unlock>
60011a0e:	4770      	bx	lr
60011a10:	4411      	add	r1, r2
60011a12:	f107 0c08 	add.w	ip, r7, #8
60011a16:	6883      	ldr	r3, [r0, #8]
60011a18:	4563      	cmp	r3, ip
60011a1a:	d03f      	beq.n	60011a9c <_free_r+0x18c>
60011a1c:	68c2      	ldr	r2, [r0, #12]
60011a1e:	60da      	str	r2, [r3, #12]
60011a20:	6093      	str	r3, [r2, #8]
60011a22:	f041 0301 	orr.w	r3, r1, #1
60011a26:	606b      	str	r3, [r5, #4]
60011a28:	5069      	str	r1, [r5, r1]
60011a2a:	e7a7      	b.n	6001197c <_free_r+0x6c>
60011a2c:	2b00      	cmp	r3, #0
60011a2e:	d161      	bne.n	60011af4 <_free_r+0x1e4>
60011a30:	440a      	add	r2, r1
60011a32:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
60011a36:	60cb      	str	r3, [r1, #12]
60011a38:	6099      	str	r1, [r3, #8]
60011a3a:	f042 0301 	orr.w	r3, r2, #1
60011a3e:	606b      	str	r3, [r5, #4]
60011a40:	50aa      	str	r2, [r5, r2]
60011a42:	e7b0      	b.n	600119a6 <_free_r+0x96>
60011a44:	440a      	add	r2, r1
60011a46:	07d9      	lsls	r1, r3, #31
60011a48:	d407      	bmi.n	60011a5a <_free_r+0x14a>
60011a4a:	f854 3c08 	ldr.w	r3, [r4, #-8]
60011a4e:	1aed      	subs	r5, r5, r3
60011a50:	441a      	add	r2, r3
60011a52:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
60011a56:	60cb      	str	r3, [r1, #12]
60011a58:	6099      	str	r1, [r3, #8]
60011a5a:	f042 0301 	orr.w	r3, r2, #1
60011a5e:	606b      	str	r3, [r5, #4]
60011a60:	4b28      	ldr	r3, [pc, #160]	; (60011b04 <_free_r+0x1f4>)
60011a62:	60bd      	str	r5, [r7, #8]
60011a64:	681b      	ldr	r3, [r3, #0]
60011a66:	4293      	cmp	r3, r2
60011a68:	d89d      	bhi.n	600119a6 <_free_r+0x96>
60011a6a:	4b27      	ldr	r3, [pc, #156]	; (60011b08 <_free_r+0x1f8>)
60011a6c:	4630      	mov	r0, r6
60011a6e:	6819      	ldr	r1, [r3, #0]
60011a70:	f7ff ff00 	bl	60011874 <_malloc_trim_r>
60011a74:	e797      	b.n	600119a6 <_free_r+0x96>
60011a76:	4411      	add	r1, r2
60011a78:	e7cd      	b.n	60011a16 <_free_r+0x106>
60011a7a:	2b14      	cmp	r3, #20
60011a7c:	d908      	bls.n	60011a90 <_free_r+0x180>
60011a7e:	2b54      	cmp	r3, #84	; 0x54
60011a80:	d81f      	bhi.n	60011ac2 <_free_r+0x1b2>
60011a82:	0b0b      	lsrs	r3, r1, #12
60011a84:	f103 006f 	add.w	r0, r3, #111	; 0x6f
60011a88:	f103 026e 	add.w	r2, r3, #110	; 0x6e
60011a8c:	00c3      	lsls	r3, r0, #3
60011a8e:	e7a6      	b.n	600119de <_free_r+0xce>
60011a90:	f103 005c 	add.w	r0, r3, #92	; 0x5c
60011a94:	f103 025b 	add.w	r2, r3, #91	; 0x5b
60011a98:	00c3      	lsls	r3, r0, #3
60011a9a:	e7a0      	b.n	600119de <_free_r+0xce>
60011a9c:	f041 0301 	orr.w	r3, r1, #1
60011aa0:	613d      	str	r5, [r7, #16]
60011aa2:	617d      	str	r5, [r7, #20]
60011aa4:	f8c5 c008 	str.w	ip, [r5, #8]
60011aa8:	f8c5 c00c 	str.w	ip, [r5, #12]
60011aac:	606b      	str	r3, [r5, #4]
60011aae:	5069      	str	r1, [r5, r1]
60011ab0:	e779      	b.n	600119a6 <_free_r+0x96>
60011ab2:	6879      	ldr	r1, [r7, #4]
60011ab4:	1092      	asrs	r2, r2, #2
60011ab6:	2401      	movs	r4, #1
60011ab8:	fa04 f202 	lsl.w	r2, r4, r2
60011abc:	430a      	orrs	r2, r1
60011abe:	607a      	str	r2, [r7, #4]
60011ac0:	e79c      	b.n	600119fc <_free_r+0xec>
60011ac2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
60011ac6:	d806      	bhi.n	60011ad6 <_free_r+0x1c6>
60011ac8:	0bcb      	lsrs	r3, r1, #15
60011aca:	f103 0078 	add.w	r0, r3, #120	; 0x78
60011ace:	f103 0277 	add.w	r2, r3, #119	; 0x77
60011ad2:	00c3      	lsls	r3, r0, #3
60011ad4:	e783      	b.n	600119de <_free_r+0xce>
60011ad6:	f240 5254 	movw	r2, #1364	; 0x554
60011ada:	4293      	cmp	r3, r2
60011adc:	d806      	bhi.n	60011aec <_free_r+0x1dc>
60011ade:	0c8b      	lsrs	r3, r1, #18
60011ae0:	f103 007d 	add.w	r0, r3, #125	; 0x7d
60011ae4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
60011ae8:	00c3      	lsls	r3, r0, #3
60011aea:	e778      	b.n	600119de <_free_r+0xce>
60011aec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
60011af0:	227e      	movs	r2, #126	; 0x7e
60011af2:	e774      	b.n	600119de <_free_r+0xce>
60011af4:	f041 0301 	orr.w	r3, r1, #1
60011af8:	606b      	str	r3, [r5, #4]
60011afa:	6001      	str	r1, [r0, #0]
60011afc:	e753      	b.n	600119a6 <_free_r+0x96>
60011afe:	bf00      	nop
60011b00:	202025a8 	.word	0x202025a8
60011b04:	20202a2c 	.word	0x20202a2c
60011b08:	20204280 	.word	0x20204280

60011b0c <__sfvwrite_r>:
60011b0c:	6893      	ldr	r3, [r2, #8]
60011b0e:	2b00      	cmp	r3, #0
60011b10:	f000 80f6 	beq.w	60011d00 <__sfvwrite_r+0x1f4>
60011b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60011b18:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
60011b1c:	f01c 0f08 	tst.w	ip, #8
60011b20:	b083      	sub	sp, #12
60011b22:	4690      	mov	r8, r2
60011b24:	4681      	mov	r9, r0
60011b26:	460c      	mov	r4, r1
60011b28:	d031      	beq.n	60011b8e <__sfvwrite_r+0x82>
60011b2a:	690b      	ldr	r3, [r1, #16]
60011b2c:	b37b      	cbz	r3, 60011b8e <__sfvwrite_r+0x82>
60011b2e:	f01c 0702 	ands.w	r7, ip, #2
60011b32:	f8d8 6000 	ldr.w	r6, [r8]
60011b36:	d038      	beq.n	60011baa <__sfvwrite_r+0x9e>
60011b38:	2700      	movs	r7, #0
60011b3a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
60011b3e:	69e1      	ldr	r1, [r4, #28]
60011b40:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 60011e00 <__sfvwrite_r+0x2f4>
60011b44:	463d      	mov	r5, r7
60011b46:	4555      	cmp	r5, sl
60011b48:	462b      	mov	r3, r5
60011b4a:	463a      	mov	r2, r7
60011b4c:	bf28      	it	cs
60011b4e:	4653      	movcs	r3, sl
60011b50:	4648      	mov	r0, r9
60011b52:	b1c5      	cbz	r5, 60011b86 <__sfvwrite_r+0x7a>
60011b54:	47d8      	blx	fp
60011b56:	2800      	cmp	r0, #0
60011b58:	f340 80c8 	ble.w	60011cec <__sfvwrite_r+0x1e0>
60011b5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
60011b60:	1a1b      	subs	r3, r3, r0
60011b62:	4407      	add	r7, r0
60011b64:	1a2d      	subs	r5, r5, r0
60011b66:	f8c8 3008 	str.w	r3, [r8, #8]
60011b6a:	2b00      	cmp	r3, #0
60011b6c:	f000 80b4 	beq.w	60011cd8 <__sfvwrite_r+0x1cc>
60011b70:	4555      	cmp	r5, sl
60011b72:	462b      	mov	r3, r5
60011b74:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
60011b78:	69e1      	ldr	r1, [r4, #28]
60011b7a:	bf28      	it	cs
60011b7c:	4653      	movcs	r3, sl
60011b7e:	463a      	mov	r2, r7
60011b80:	4648      	mov	r0, r9
60011b82:	2d00      	cmp	r5, #0
60011b84:	d1e6      	bne.n	60011b54 <__sfvwrite_r+0x48>
60011b86:	e9d6 7500 	ldrd	r7, r5, [r6]
60011b8a:	3608      	adds	r6, #8
60011b8c:	e7db      	b.n	60011b46 <__sfvwrite_r+0x3a>
60011b8e:	4621      	mov	r1, r4
60011b90:	4648      	mov	r0, r9
60011b92:	f7ff fcc3 	bl	6001151c <__swsetup_r>
60011b96:	2800      	cmp	r0, #0
60011b98:	f040 80ad 	bne.w	60011cf6 <__sfvwrite_r+0x1ea>
60011b9c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
60011ba0:	f8d8 6000 	ldr.w	r6, [r8]
60011ba4:	f01c 0702 	ands.w	r7, ip, #2
60011ba8:	d1c6      	bne.n	60011b38 <__sfvwrite_r+0x2c>
60011baa:	f01c 0a01 	ands.w	sl, ip, #1
60011bae:	d163      	bne.n	60011c78 <__sfvwrite_r+0x16c>
60011bb0:	6823      	ldr	r3, [r4, #0]
60011bb2:	68a1      	ldr	r1, [r4, #8]
60011bb4:	4657      	mov	r7, sl
60011bb6:	4618      	mov	r0, r3
60011bb8:	468b      	mov	fp, r1
60011bba:	2f00      	cmp	r7, #0
60011bbc:	d058      	beq.n	60011c70 <__sfvwrite_r+0x164>
60011bbe:	f41c 7f00 	tst.w	ip, #512	; 0x200
60011bc2:	f000 80b1 	beq.w	60011d28 <__sfvwrite_r+0x21c>
60011bc6:	42b9      	cmp	r1, r7
60011bc8:	460a      	mov	r2, r1
60011bca:	f200 80dd 	bhi.w	60011d88 <__sfvwrite_r+0x27c>
60011bce:	f41c 6f90 	tst.w	ip, #1152	; 0x480
60011bd2:	d02f      	beq.n	60011c34 <__sfvwrite_r+0x128>
60011bd4:	6921      	ldr	r1, [r4, #16]
60011bd6:	6962      	ldr	r2, [r4, #20]
60011bd8:	1a5d      	subs	r5, r3, r1
60011bda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
60011bde:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
60011be2:	1c6b      	adds	r3, r5, #1
60011be4:	1052      	asrs	r2, r2, #1
60011be6:	443b      	add	r3, r7
60011be8:	4293      	cmp	r3, r2
60011bea:	bf92      	itee	ls
60011bec:	4693      	movls	fp, r2
60011bee:	469b      	movhi	fp, r3
60011bf0:	461a      	movhi	r2, r3
60011bf2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
60011bf6:	f000 80e6 	beq.w	60011dc6 <__sfvwrite_r+0x2ba>
60011bfa:	4611      	mov	r1, r2
60011bfc:	4648      	mov	r0, r9
60011bfe:	f7fe fa43 	bl	60010088 <_malloc_r>
60011c02:	2800      	cmp	r0, #0
60011c04:	f000 80f5 	beq.w	60011df2 <__sfvwrite_r+0x2e6>
60011c08:	462a      	mov	r2, r5
60011c0a:	6921      	ldr	r1, [r4, #16]
60011c0c:	9001      	str	r0, [sp, #4]
60011c0e:	f7f1 fbd3 	bl	600033b8 <memcpy>
60011c12:	89a2      	ldrh	r2, [r4, #12]
60011c14:	9b01      	ldr	r3, [sp, #4]
60011c16:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
60011c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
60011c1e:	81a2      	strh	r2, [r4, #12]
60011c20:	1958      	adds	r0, r3, r5
60011c22:	ebab 0505 	sub.w	r5, fp, r5
60011c26:	f8c4 b014 	str.w	fp, [r4, #20]
60011c2a:	6123      	str	r3, [r4, #16]
60011c2c:	60a5      	str	r5, [r4, #8]
60011c2e:	6020      	str	r0, [r4, #0]
60011c30:	46bb      	mov	fp, r7
60011c32:	463a      	mov	r2, r7
60011c34:	4651      	mov	r1, sl
60011c36:	9201      	str	r2, [sp, #4]
60011c38:	f000 f96e 	bl	60011f18 <memmove>
60011c3c:	68a1      	ldr	r1, [r4, #8]
60011c3e:	6823      	ldr	r3, [r4, #0]
60011c40:	9a01      	ldr	r2, [sp, #4]
60011c42:	eba1 010b 	sub.w	r1, r1, fp
60011c46:	441a      	add	r2, r3
60011c48:	463d      	mov	r5, r7
60011c4a:	60a1      	str	r1, [r4, #8]
60011c4c:	6022      	str	r2, [r4, #0]
60011c4e:	2700      	movs	r7, #0
60011c50:	f8d8 3008 	ldr.w	r3, [r8, #8]
60011c54:	1b5b      	subs	r3, r3, r5
60011c56:	44aa      	add	sl, r5
60011c58:	f8c8 3008 	str.w	r3, [r8, #8]
60011c5c:	2b00      	cmp	r3, #0
60011c5e:	d03b      	beq.n	60011cd8 <__sfvwrite_r+0x1cc>
60011c60:	6823      	ldr	r3, [r4, #0]
60011c62:	68a1      	ldr	r1, [r4, #8]
60011c64:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
60011c68:	4618      	mov	r0, r3
60011c6a:	468b      	mov	fp, r1
60011c6c:	2f00      	cmp	r7, #0
60011c6e:	d1a6      	bne.n	60011bbe <__sfvwrite_r+0xb2>
60011c70:	e9d6 a700 	ldrd	sl, r7, [r6]
60011c74:	3608      	adds	r6, #8
60011c76:	e79e      	b.n	60011bb6 <__sfvwrite_r+0xaa>
60011c78:	4638      	mov	r0, r7
60011c7a:	46bb      	mov	fp, r7
60011c7c:	463d      	mov	r5, r7
60011c7e:	2d00      	cmp	r5, #0
60011c80:	d040      	beq.n	60011d04 <__sfvwrite_r+0x1f8>
60011c82:	2800      	cmp	r0, #0
60011c84:	d045      	beq.n	60011d12 <__sfvwrite_r+0x206>
60011c86:	463a      	mov	r2, r7
60011c88:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
60011c8c:	6820      	ldr	r0, [r4, #0]
60011c8e:	68a1      	ldr	r1, [r4, #8]
60011c90:	42aa      	cmp	r2, r5
60011c92:	bf28      	it	cs
60011c94:	462a      	movcs	r2, r5
60011c96:	4560      	cmp	r0, ip
60011c98:	d904      	bls.n	60011ca4 <__sfvwrite_r+0x198>
60011c9a:	eb01 0a03 	add.w	sl, r1, r3
60011c9e:	4552      	cmp	r2, sl
60011ca0:	f300 8082 	bgt.w	60011da8 <__sfvwrite_r+0x29c>
60011ca4:	4293      	cmp	r3, r2
60011ca6:	dc72      	bgt.n	60011d8e <__sfvwrite_r+0x282>
60011ca8:	69e1      	ldr	r1, [r4, #28]
60011caa:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
60011cae:	465a      	mov	r2, fp
60011cb0:	4648      	mov	r0, r9
60011cb2:	47e0      	blx	ip
60011cb4:	f1b0 0a00 	subs.w	sl, r0, #0
60011cb8:	dd18      	ble.n	60011cec <__sfvwrite_r+0x1e0>
60011cba:	ebb7 070a 	subs.w	r7, r7, sl
60011cbe:	d00f      	beq.n	60011ce0 <__sfvwrite_r+0x1d4>
60011cc0:	2001      	movs	r0, #1
60011cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
60011cc6:	eba3 030a 	sub.w	r3, r3, sl
60011cca:	44d3      	add	fp, sl
60011ccc:	eba5 050a 	sub.w	r5, r5, sl
60011cd0:	f8c8 3008 	str.w	r3, [r8, #8]
60011cd4:	2b00      	cmp	r3, #0
60011cd6:	d1d2      	bne.n	60011c7e <__sfvwrite_r+0x172>
60011cd8:	2000      	movs	r0, #0
60011cda:	b003      	add	sp, #12
60011cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60011ce0:	4621      	mov	r1, r4
60011ce2:	4648      	mov	r0, r9
60011ce4:	f7ff fd0c 	bl	60011700 <_fflush_r>
60011ce8:	2800      	cmp	r0, #0
60011cea:	d0ea      	beq.n	60011cc2 <__sfvwrite_r+0x1b6>
60011cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60011cf4:	81a3      	strh	r3, [r4, #12]
60011cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60011cfa:	b003      	add	sp, #12
60011cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60011d00:	2000      	movs	r0, #0
60011d02:	4770      	bx	lr
60011d04:	6875      	ldr	r5, [r6, #4]
60011d06:	4633      	mov	r3, r6
60011d08:	3608      	adds	r6, #8
60011d0a:	2d00      	cmp	r5, #0
60011d0c:	d0fa      	beq.n	60011d04 <__sfvwrite_r+0x1f8>
60011d0e:	f8d3 b000 	ldr.w	fp, [r3]
60011d12:	462a      	mov	r2, r5
60011d14:	210a      	movs	r1, #10
60011d16:	4658      	mov	r0, fp
60011d18:	f7f0 fb42 	bl	600023a0 <memchr>
60011d1c:	2800      	cmp	r0, #0
60011d1e:	d065      	beq.n	60011dec <__sfvwrite_r+0x2e0>
60011d20:	3001      	adds	r0, #1
60011d22:	eba0 070b 	sub.w	r7, r0, fp
60011d26:	e7ae      	b.n	60011c86 <__sfvwrite_r+0x17a>
60011d28:	6922      	ldr	r2, [r4, #16]
60011d2a:	429a      	cmp	r2, r3
60011d2c:	d314      	bcc.n	60011d58 <__sfvwrite_r+0x24c>
60011d2e:	6962      	ldr	r2, [r4, #20]
60011d30:	42ba      	cmp	r2, r7
60011d32:	d811      	bhi.n	60011d58 <__sfvwrite_r+0x24c>
60011d34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
60011d38:	42bb      	cmp	r3, r7
60011d3a:	bf28      	it	cs
60011d3c:	463b      	movcs	r3, r7
60011d3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
60011d40:	fb93 f3f2 	sdiv	r3, r3, r2
60011d44:	69e1      	ldr	r1, [r4, #28]
60011d46:	fb02 f303 	mul.w	r3, r2, r3
60011d4a:	4648      	mov	r0, r9
60011d4c:	4652      	mov	r2, sl
60011d4e:	47a8      	blx	r5
60011d50:	1e05      	subs	r5, r0, #0
60011d52:	ddcb      	ble.n	60011cec <__sfvwrite_r+0x1e0>
60011d54:	1b7f      	subs	r7, r7, r5
60011d56:	e77b      	b.n	60011c50 <__sfvwrite_r+0x144>
60011d58:	42b9      	cmp	r1, r7
60011d5a:	bf28      	it	cs
60011d5c:	4639      	movcs	r1, r7
60011d5e:	460d      	mov	r5, r1
60011d60:	4618      	mov	r0, r3
60011d62:	460a      	mov	r2, r1
60011d64:	4651      	mov	r1, sl
60011d66:	f000 f8d7 	bl	60011f18 <memmove>
60011d6a:	68a1      	ldr	r1, [r4, #8]
60011d6c:	6823      	ldr	r3, [r4, #0]
60011d6e:	1b49      	subs	r1, r1, r5
60011d70:	442b      	add	r3, r5
60011d72:	60a1      	str	r1, [r4, #8]
60011d74:	6023      	str	r3, [r4, #0]
60011d76:	2900      	cmp	r1, #0
60011d78:	d1ec      	bne.n	60011d54 <__sfvwrite_r+0x248>
60011d7a:	4621      	mov	r1, r4
60011d7c:	4648      	mov	r0, r9
60011d7e:	f7ff fcbf 	bl	60011700 <_fflush_r>
60011d82:	2800      	cmp	r0, #0
60011d84:	d0e6      	beq.n	60011d54 <__sfvwrite_r+0x248>
60011d86:	e7b1      	b.n	60011cec <__sfvwrite_r+0x1e0>
60011d88:	46bb      	mov	fp, r7
60011d8a:	463a      	mov	r2, r7
60011d8c:	e752      	b.n	60011c34 <__sfvwrite_r+0x128>
60011d8e:	4659      	mov	r1, fp
60011d90:	9201      	str	r2, [sp, #4]
60011d92:	f000 f8c1 	bl	60011f18 <memmove>
60011d96:	9a01      	ldr	r2, [sp, #4]
60011d98:	68a3      	ldr	r3, [r4, #8]
60011d9a:	1a9b      	subs	r3, r3, r2
60011d9c:	60a3      	str	r3, [r4, #8]
60011d9e:	6823      	ldr	r3, [r4, #0]
60011da0:	4413      	add	r3, r2
60011da2:	6023      	str	r3, [r4, #0]
60011da4:	4692      	mov	sl, r2
60011da6:	e788      	b.n	60011cba <__sfvwrite_r+0x1ae>
60011da8:	4659      	mov	r1, fp
60011daa:	4652      	mov	r2, sl
60011dac:	f000 f8b4 	bl	60011f18 <memmove>
60011db0:	6823      	ldr	r3, [r4, #0]
60011db2:	4453      	add	r3, sl
60011db4:	6023      	str	r3, [r4, #0]
60011db6:	4621      	mov	r1, r4
60011db8:	4648      	mov	r0, r9
60011dba:	f7ff fca1 	bl	60011700 <_fflush_r>
60011dbe:	2800      	cmp	r0, #0
60011dc0:	f43f af7b 	beq.w	60011cba <__sfvwrite_r+0x1ae>
60011dc4:	e792      	b.n	60011cec <__sfvwrite_r+0x1e0>
60011dc6:	4648      	mov	r0, r9
60011dc8:	f000 f926 	bl	60012018 <_realloc_r>
60011dcc:	4603      	mov	r3, r0
60011dce:	2800      	cmp	r0, #0
60011dd0:	f47f af26 	bne.w	60011c20 <__sfvwrite_r+0x114>
60011dd4:	6921      	ldr	r1, [r4, #16]
60011dd6:	4648      	mov	r0, r9
60011dd8:	f7ff fd9a 	bl	60011910 <_free_r>
60011ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011de0:	220c      	movs	r2, #12
60011de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
60011de6:	f8c9 2000 	str.w	r2, [r9]
60011dea:	e781      	b.n	60011cf0 <__sfvwrite_r+0x1e4>
60011dec:	1c6a      	adds	r2, r5, #1
60011dee:	4617      	mov	r7, r2
60011df0:	e74a      	b.n	60011c88 <__sfvwrite_r+0x17c>
60011df2:	220c      	movs	r2, #12
60011df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011df8:	f8c9 2000 	str.w	r2, [r9]
60011dfc:	e778      	b.n	60011cf0 <__sfvwrite_r+0x1e4>
60011dfe:	bf00      	nop
60011e00:	7ffffc00 	.word	0x7ffffc00

60011e04 <_fwalk_reent>:
60011e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60011e08:	4607      	mov	r7, r0
60011e0a:	4688      	mov	r8, r1
60011e0c:	f500 76a6 	add.w	r6, r0, #332	; 0x14c
60011e10:	f04f 0900 	mov.w	r9, #0
60011e14:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
60011e18:	3d01      	subs	r5, #1
60011e1a:	d411      	bmi.n	60011e40 <_fwalk_reent+0x3c>
60011e1c:	89a3      	ldrh	r3, [r4, #12]
60011e1e:	2b01      	cmp	r3, #1
60011e20:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
60011e24:	d908      	bls.n	60011e38 <_fwalk_reent+0x34>
60011e26:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
60011e2a:	3301      	adds	r3, #1
60011e2c:	4621      	mov	r1, r4
60011e2e:	d003      	beq.n	60011e38 <_fwalk_reent+0x34>
60011e30:	4638      	mov	r0, r7
60011e32:	47c0      	blx	r8
60011e34:	ea49 0900 	orr.w	r9, r9, r0
60011e38:	1c6b      	adds	r3, r5, #1
60011e3a:	f104 0468 	add.w	r4, r4, #104	; 0x68
60011e3e:	d1ed      	bne.n	60011e1c <_fwalk_reent+0x18>
60011e40:	6836      	ldr	r6, [r6, #0]
60011e42:	2e00      	cmp	r6, #0
60011e44:	d1e6      	bne.n	60011e14 <_fwalk_reent+0x10>
60011e46:	4648      	mov	r0, r9
60011e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

60011e4c <_localeconv_r>:
60011e4c:	4800      	ldr	r0, [pc, #0]	; (60011e50 <_localeconv_r+0x4>)
60011e4e:	4770      	bx	lr
60011e50:	20202b20 	.word	0x20202b20

60011e54 <__smakebuf_r>:
60011e54:	b5f0      	push	{r4, r5, r6, r7, lr}
60011e56:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
60011e5a:	460c      	mov	r4, r1
60011e5c:	0799      	lsls	r1, r3, #30
60011e5e:	b097      	sub	sp, #92	; 0x5c
60011e60:	d507      	bpl.n	60011e72 <__smakebuf_r+0x1e>
60011e62:	f104 0343 	add.w	r3, r4, #67	; 0x43
60011e66:	2201      	movs	r2, #1
60011e68:	e9c4 3204 	strd	r3, r2, [r4, #16]
60011e6c:	6023      	str	r3, [r4, #0]
60011e6e:	b017      	add	sp, #92	; 0x5c
60011e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
60011e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
60011e76:	2900      	cmp	r1, #0
60011e78:	4605      	mov	r5, r0
60011e7a:	db2e      	blt.n	60011eda <__smakebuf_r+0x86>
60011e7c:	466a      	mov	r2, sp
60011e7e:	f000 fb55 	bl	6001252c <_fstat_r>
60011e82:	2800      	cmp	r0, #0
60011e84:	db27      	blt.n	60011ed6 <__smakebuf_r+0x82>
60011e86:	9e01      	ldr	r6, [sp, #4]
60011e88:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
60011e8c:	f44f 6780 	mov.w	r7, #1024	; 0x400
60011e90:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
60011e94:	fab6 f686 	clz	r6, r6
60011e98:	4639      	mov	r1, r7
60011e9a:	4628      	mov	r0, r5
60011e9c:	0976      	lsrs	r6, r6, #5
60011e9e:	f7fe f8f3 	bl	60010088 <_malloc_r>
60011ea2:	b338      	cbz	r0, 60011ef4 <__smakebuf_r+0xa0>
60011ea4:	89a3      	ldrh	r3, [r4, #12]
60011ea6:	4a1b      	ldr	r2, [pc, #108]	; (60011f14 <__smakebuf_r+0xc0>)
60011ea8:	63ea      	str	r2, [r5, #60]	; 0x3c
60011eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60011eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
60011eb2:	81a3      	strh	r3, [r4, #12]
60011eb4:	6020      	str	r0, [r4, #0]
60011eb6:	2e00      	cmp	r6, #0
60011eb8:	d0d9      	beq.n	60011e6e <__smakebuf_r+0x1a>
60011eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
60011ebe:	4628      	mov	r0, r5
60011ec0:	f000 fb4a 	bl	60012558 <_isatty_r>
60011ec4:	2800      	cmp	r0, #0
60011ec6:	d0d2      	beq.n	60011e6e <__smakebuf_r+0x1a>
60011ec8:	89a3      	ldrh	r3, [r4, #12]
60011eca:	f023 0303 	bic.w	r3, r3, #3
60011ece:	f043 0301 	orr.w	r3, r3, #1
60011ed2:	81a3      	strh	r3, [r4, #12]
60011ed4:	e7cb      	b.n	60011e6e <__smakebuf_r+0x1a>
60011ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011eda:	f013 0f80 	tst.w	r3, #128	; 0x80
60011ede:	bf0c      	ite	eq
60011ee0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
60011ee4:	2740      	movne	r7, #64	; 0x40
60011ee6:	4639      	mov	r1, r7
60011ee8:	4628      	mov	r0, r5
60011eea:	2600      	movs	r6, #0
60011eec:	f7fe f8cc 	bl	60010088 <_malloc_r>
60011ef0:	2800      	cmp	r0, #0
60011ef2:	d1d7      	bne.n	60011ea4 <__smakebuf_r+0x50>
60011ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60011ef8:	059a      	lsls	r2, r3, #22
60011efa:	d4b8      	bmi.n	60011e6e <__smakebuf_r+0x1a>
60011efc:	f023 0303 	bic.w	r3, r3, #3
60011f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
60011f04:	f043 0302 	orr.w	r3, r3, #2
60011f08:	2101      	movs	r1, #1
60011f0a:	e9c4 2104 	strd	r2, r1, [r4, #16]
60011f0e:	81a3      	strh	r3, [r4, #12]
60011f10:	6022      	str	r2, [r4, #0]
60011f12:	e7ac      	b.n	60011e6e <__smakebuf_r+0x1a>
60011f14:	6001175d 	.word	0x6001175d

60011f18 <memmove>:
60011f18:	4288      	cmp	r0, r1
60011f1a:	d90e      	bls.n	60011f3a <memmove+0x22>
60011f1c:	188b      	adds	r3, r1, r2
60011f1e:	4283      	cmp	r3, r0
60011f20:	d90b      	bls.n	60011f3a <memmove+0x22>
60011f22:	eb00 0c02 	add.w	ip, r0, r2
60011f26:	2a00      	cmp	r2, #0
60011f28:	d06e      	beq.n	60012008 <memmove+0xf0>
60011f2a:	4662      	mov	r2, ip
60011f2c:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
60011f30:	f802 cd01 	strb.w	ip, [r2, #-1]!
60011f34:	4299      	cmp	r1, r3
60011f36:	d1f9      	bne.n	60011f2c <memmove+0x14>
60011f38:	4770      	bx	lr
60011f3a:	2a0f      	cmp	r2, #15
60011f3c:	d80f      	bhi.n	60011f5e <memmove+0x46>
60011f3e:	4603      	mov	r3, r0
60011f40:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
60011f44:	2a00      	cmp	r2, #0
60011f46:	d05f      	beq.n	60012008 <memmove+0xf0>
60011f48:	f10c 0c01 	add.w	ip, ip, #1
60011f4c:	3b01      	subs	r3, #1
60011f4e:	448c      	add	ip, r1
60011f50:	f811 2b01 	ldrb.w	r2, [r1], #1
60011f54:	f803 2f01 	strb.w	r2, [r3, #1]!
60011f58:	4561      	cmp	r1, ip
60011f5a:	d1f9      	bne.n	60011f50 <memmove+0x38>
60011f5c:	4770      	bx	lr
60011f5e:	ea40 0301 	orr.w	r3, r0, r1
60011f62:	079b      	lsls	r3, r3, #30
60011f64:	d151      	bne.n	6001200a <memmove+0xf2>
60011f66:	f1a2 0310 	sub.w	r3, r2, #16
60011f6a:	b570      	push	{r4, r5, r6, lr}
60011f6c:	f101 0c20 	add.w	ip, r1, #32
60011f70:	f023 050f 	bic.w	r5, r3, #15
60011f74:	f101 0e10 	add.w	lr, r1, #16
60011f78:	f100 0410 	add.w	r4, r0, #16
60011f7c:	44ac      	add	ip, r5
60011f7e:	091b      	lsrs	r3, r3, #4
60011f80:	f85e 5c10 	ldr.w	r5, [lr, #-16]
60011f84:	f844 5c10 	str.w	r5, [r4, #-16]
60011f88:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
60011f8c:	f844 5c0c 	str.w	r5, [r4, #-12]
60011f90:	f85e 5c08 	ldr.w	r5, [lr, #-8]
60011f94:	f844 5c08 	str.w	r5, [r4, #-8]
60011f98:	f85e 5c04 	ldr.w	r5, [lr, #-4]
60011f9c:	f844 5c04 	str.w	r5, [r4, #-4]
60011fa0:	f10e 0e10 	add.w	lr, lr, #16
60011fa4:	45e6      	cmp	lr, ip
60011fa6:	f104 0410 	add.w	r4, r4, #16
60011faa:	d1e9      	bne.n	60011f80 <memmove+0x68>
60011fac:	3301      	adds	r3, #1
60011fae:	f012 0f0c 	tst.w	r2, #12
60011fb2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
60011fb6:	f002 040f 	and.w	r4, r2, #15
60011fba:	eb00 1303 	add.w	r3, r0, r3, lsl #4
60011fbe:	d028      	beq.n	60012012 <memmove+0xfa>
60011fc0:	3c04      	subs	r4, #4
60011fc2:	f024 0603 	bic.w	r6, r4, #3
60011fc6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
60011fca:	441e      	add	r6, r3
60011fcc:	1f1c      	subs	r4, r3, #4
60011fce:	468e      	mov	lr, r1
60011fd0:	f85e 5b04 	ldr.w	r5, [lr], #4
60011fd4:	f844 5f04 	str.w	r5, [r4, #4]!
60011fd8:	42b4      	cmp	r4, r6
60011fda:	d1f9      	bne.n	60011fd0 <memmove+0xb8>
60011fdc:	f10c 0401 	add.w	r4, ip, #1
60011fe0:	f002 0203 	and.w	r2, r2, #3
60011fe4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
60011fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
60011fec:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
60011ff0:	b14a      	cbz	r2, 60012006 <memmove+0xee>
60011ff2:	f10c 0c01 	add.w	ip, ip, #1
60011ff6:	3b01      	subs	r3, #1
60011ff8:	448c      	add	ip, r1
60011ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
60011ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
60012002:	4561      	cmp	r1, ip
60012004:	d1f9      	bne.n	60011ffa <memmove+0xe2>
60012006:	bd70      	pop	{r4, r5, r6, pc}
60012008:	4770      	bx	lr
6001200a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
6001200e:	4603      	mov	r3, r0
60012010:	e79a      	b.n	60011f48 <memmove+0x30>
60012012:	4622      	mov	r2, r4
60012014:	e7ea      	b.n	60011fec <memmove+0xd4>
60012016:	bf00      	nop

60012018 <_realloc_r>:
60012018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
6001201c:	4616      	mov	r6, r2
6001201e:	2900      	cmp	r1, #0
60012020:	f000 8096 	beq.w	60012150 <_realloc_r+0x138>
60012024:	460c      	mov	r4, r1
60012026:	4680      	mov	r8, r0
60012028:	f106 050b 	add.w	r5, r6, #11
6001202c:	f7fe fb3a 	bl	600106a4 <__malloc_lock>
60012030:	f854 1c04 	ldr.w	r1, [r4, #-4]
60012034:	2d16      	cmp	r5, #22
60012036:	f1a4 0908 	sub.w	r9, r4, #8
6001203a:	f021 0703 	bic.w	r7, r1, #3
6001203e:	d858      	bhi.n	600120f2 <_realloc_r+0xda>
60012040:	2510      	movs	r5, #16
60012042:	42ae      	cmp	r6, r5
60012044:	d858      	bhi.n	600120f8 <_realloc_r+0xe0>
60012046:	42af      	cmp	r7, r5
60012048:	da60      	bge.n	6001210c <_realloc_r+0xf4>
6001204a:	4bbe      	ldr	r3, [pc, #760]	; (60012344 <_realloc_r+0x32c>)
6001204c:	689a      	ldr	r2, [r3, #8]
6001204e:	eb09 0c07 	add.w	ip, r9, r7
60012052:	4562      	cmp	r2, ip
60012054:	f8dc 0004 	ldr.w	r0, [ip, #4]
60012058:	f000 8090 	beq.w	6001217c <_realloc_r+0x164>
6001205c:	f020 0301 	bic.w	r3, r0, #1
60012060:	4463      	add	r3, ip
60012062:	685b      	ldr	r3, [r3, #4]
60012064:	07da      	lsls	r2, r3, #31
60012066:	d468      	bmi.n	6001213a <_realloc_r+0x122>
60012068:	f020 0003 	bic.w	r0, r0, #3
6001206c:	183b      	adds	r3, r7, r0
6001206e:	429d      	cmp	r5, r3
60012070:	dd47      	ble.n	60012102 <_realloc_r+0xea>
60012072:	07cb      	lsls	r3, r1, #31
60012074:	d412      	bmi.n	6001209c <_realloc_r+0x84>
60012076:	f854 3c08 	ldr.w	r3, [r4, #-8]
6001207a:	eba9 0b03 	sub.w	fp, r9, r3
6001207e:	f8db 3004 	ldr.w	r3, [fp, #4]
60012082:	f023 0203 	bic.w	r2, r3, #3
60012086:	4410      	add	r0, r2
60012088:	eb00 0a07 	add.w	sl, r0, r7
6001208c:	4555      	cmp	r5, sl
6001208e:	f340 80f6 	ble.w	6001227e <_realloc_r+0x266>
60012092:	eb07 0a02 	add.w	sl, r7, r2
60012096:	4555      	cmp	r5, sl
60012098:	f340 80cc 	ble.w	60012234 <_realloc_r+0x21c>
6001209c:	4631      	mov	r1, r6
6001209e:	4640      	mov	r0, r8
600120a0:	f7fd fff2 	bl	60010088 <_malloc_r>
600120a4:	4606      	mov	r6, r0
600120a6:	2800      	cmp	r0, #0
600120a8:	f000 8120 	beq.w	600122ec <_realloc_r+0x2d4>
600120ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
600120b0:	f023 0301 	bic.w	r3, r3, #1
600120b4:	444b      	add	r3, r9
600120b6:	f1a0 0208 	sub.w	r2, r0, #8
600120ba:	4293      	cmp	r3, r2
600120bc:	f000 80b4 	beq.w	60012228 <_realloc_r+0x210>
600120c0:	1f3a      	subs	r2, r7, #4
600120c2:	2a24      	cmp	r2, #36	; 0x24
600120c4:	f200 80d7 	bhi.w	60012276 <_realloc_r+0x25e>
600120c8:	2a13      	cmp	r2, #19
600120ca:	f200 80a2 	bhi.w	60012212 <_realloc_r+0x1fa>
600120ce:	4603      	mov	r3, r0
600120d0:	4622      	mov	r2, r4
600120d2:	6811      	ldr	r1, [r2, #0]
600120d4:	6019      	str	r1, [r3, #0]
600120d6:	6851      	ldr	r1, [r2, #4]
600120d8:	6059      	str	r1, [r3, #4]
600120da:	6892      	ldr	r2, [r2, #8]
600120dc:	609a      	str	r2, [r3, #8]
600120de:	4621      	mov	r1, r4
600120e0:	4640      	mov	r0, r8
600120e2:	f7ff fc15 	bl	60011910 <_free_r>
600120e6:	4640      	mov	r0, r8
600120e8:	f7fe fae2 	bl	600106b0 <__malloc_unlock>
600120ec:	4630      	mov	r0, r6
600120ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
600120f2:	f035 0507 	bics.w	r5, r5, #7
600120f6:	d5a4      	bpl.n	60012042 <_realloc_r+0x2a>
600120f8:	230c      	movs	r3, #12
600120fa:	f8c8 3000 	str.w	r3, [r8]
600120fe:	2600      	movs	r6, #0
60012100:	e018      	b.n	60012134 <_realloc_r+0x11c>
60012102:	461f      	mov	r7, r3
60012104:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
60012108:	60d3      	str	r3, [r2, #12]
6001210a:	609a      	str	r2, [r3, #8]
6001210c:	f8d9 3004 	ldr.w	r3, [r9, #4]
60012110:	1b7a      	subs	r2, r7, r5
60012112:	2a0f      	cmp	r2, #15
60012114:	f003 0301 	and.w	r3, r3, #1
60012118:	eb09 0007 	add.w	r0, r9, r7
6001211c:	d81d      	bhi.n	6001215a <_realloc_r+0x142>
6001211e:	433b      	orrs	r3, r7
60012120:	f8c9 3004 	str.w	r3, [r9, #4]
60012124:	6843      	ldr	r3, [r0, #4]
60012126:	f043 0301 	orr.w	r3, r3, #1
6001212a:	6043      	str	r3, [r0, #4]
6001212c:	4640      	mov	r0, r8
6001212e:	f7fe fabf 	bl	600106b0 <__malloc_unlock>
60012132:	4626      	mov	r6, r4
60012134:	4630      	mov	r0, r6
60012136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
6001213a:	07c9      	lsls	r1, r1, #31
6001213c:	d4ae      	bmi.n	6001209c <_realloc_r+0x84>
6001213e:	f854 3c08 	ldr.w	r3, [r4, #-8]
60012142:	eba9 0b03 	sub.w	fp, r9, r3
60012146:	f8db 3004 	ldr.w	r3, [fp, #4]
6001214a:	f023 0203 	bic.w	r2, r3, #3
6001214e:	e7a0      	b.n	60012092 <_realloc_r+0x7a>
60012150:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60012154:	4611      	mov	r1, r2
60012156:	f7fd bf97 	b.w	60010088 <_malloc_r>
6001215a:	eb09 0105 	add.w	r1, r9, r5
6001215e:	432b      	orrs	r3, r5
60012160:	f042 0201 	orr.w	r2, r2, #1
60012164:	f8c9 3004 	str.w	r3, [r9, #4]
60012168:	604a      	str	r2, [r1, #4]
6001216a:	6843      	ldr	r3, [r0, #4]
6001216c:	f043 0301 	orr.w	r3, r3, #1
60012170:	6043      	str	r3, [r0, #4]
60012172:	3108      	adds	r1, #8
60012174:	4640      	mov	r0, r8
60012176:	f7ff fbcb 	bl	60011910 <_free_r>
6001217a:	e7d7      	b.n	6001212c <_realloc_r+0x114>
6001217c:	f020 0003 	bic.w	r0, r0, #3
60012180:	19c2      	adds	r2, r0, r7
60012182:	f105 0c10 	add.w	ip, r5, #16
60012186:	4562      	cmp	r2, ip
60012188:	f280 8091 	bge.w	600122ae <_realloc_r+0x296>
6001218c:	07ca      	lsls	r2, r1, #31
6001218e:	d485      	bmi.n	6001209c <_realloc_r+0x84>
60012190:	f854 2c08 	ldr.w	r2, [r4, #-8]
60012194:	eba9 0b02 	sub.w	fp, r9, r2
60012198:	f8db 2004 	ldr.w	r2, [fp, #4]
6001219c:	f022 0203 	bic.w	r2, r2, #3
600121a0:	4410      	add	r0, r2
600121a2:	eb00 0a07 	add.w	sl, r0, r7
600121a6:	45d4      	cmp	ip, sl
600121a8:	f73f af73 	bgt.w	60012092 <_realloc_r+0x7a>
600121ac:	465e      	mov	r6, fp
600121ae:	f8db 100c 	ldr.w	r1, [fp, #12]
600121b2:	f856 0f08 	ldr.w	r0, [r6, #8]!
600121b6:	1f3a      	subs	r2, r7, #4
600121b8:	2a24      	cmp	r2, #36	; 0x24
600121ba:	60c1      	str	r1, [r0, #12]
600121bc:	6088      	str	r0, [r1, #8]
600121be:	f200 80ae 	bhi.w	6001231e <_realloc_r+0x306>
600121c2:	2a13      	cmp	r2, #19
600121c4:	f240 80a9 	bls.w	6001231a <_realloc_r+0x302>
600121c8:	6821      	ldr	r1, [r4, #0]
600121ca:	f8cb 1008 	str.w	r1, [fp, #8]
600121ce:	6861      	ldr	r1, [r4, #4]
600121d0:	f8cb 100c 	str.w	r1, [fp, #12]
600121d4:	2a1b      	cmp	r2, #27
600121d6:	f200 80a8 	bhi.w	6001232a <_realloc_r+0x312>
600121da:	3408      	adds	r4, #8
600121dc:	f10b 0210 	add.w	r2, fp, #16
600121e0:	6821      	ldr	r1, [r4, #0]
600121e2:	6011      	str	r1, [r2, #0]
600121e4:	6861      	ldr	r1, [r4, #4]
600121e6:	6051      	str	r1, [r2, #4]
600121e8:	68a1      	ldr	r1, [r4, #8]
600121ea:	6091      	str	r1, [r2, #8]
600121ec:	eb0b 0105 	add.w	r1, fp, r5
600121f0:	ebaa 0205 	sub.w	r2, sl, r5
600121f4:	f042 0201 	orr.w	r2, r2, #1
600121f8:	6099      	str	r1, [r3, #8]
600121fa:	604a      	str	r2, [r1, #4]
600121fc:	f8db 3004 	ldr.w	r3, [fp, #4]
60012200:	f003 0301 	and.w	r3, r3, #1
60012204:	432b      	orrs	r3, r5
60012206:	4640      	mov	r0, r8
60012208:	f8cb 3004 	str.w	r3, [fp, #4]
6001220c:	f7fe fa50 	bl	600106b0 <__malloc_unlock>
60012210:	e790      	b.n	60012134 <_realloc_r+0x11c>
60012212:	6823      	ldr	r3, [r4, #0]
60012214:	6003      	str	r3, [r0, #0]
60012216:	6863      	ldr	r3, [r4, #4]
60012218:	6043      	str	r3, [r0, #4]
6001221a:	2a1b      	cmp	r2, #27
6001221c:	d83c      	bhi.n	60012298 <_realloc_r+0x280>
6001221e:	f104 0208 	add.w	r2, r4, #8
60012222:	f100 0308 	add.w	r3, r0, #8
60012226:	e754      	b.n	600120d2 <_realloc_r+0xba>
60012228:	f850 3c04 	ldr.w	r3, [r0, #-4]
6001222c:	f023 0303 	bic.w	r3, r3, #3
60012230:	441f      	add	r7, r3
60012232:	e76b      	b.n	6001210c <_realloc_r+0xf4>
60012234:	1f3a      	subs	r2, r7, #4
60012236:	465e      	mov	r6, fp
60012238:	f8db 300c 	ldr.w	r3, [fp, #12]
6001223c:	f856 1f08 	ldr.w	r1, [r6, #8]!
60012240:	2a24      	cmp	r2, #36	; 0x24
60012242:	60cb      	str	r3, [r1, #12]
60012244:	6099      	str	r1, [r3, #8]
60012246:	d822      	bhi.n	6001228e <_realloc_r+0x276>
60012248:	2a13      	cmp	r2, #19
6001224a:	d91e      	bls.n	6001228a <_realloc_r+0x272>
6001224c:	6823      	ldr	r3, [r4, #0]
6001224e:	f8cb 3008 	str.w	r3, [fp, #8]
60012252:	6863      	ldr	r3, [r4, #4]
60012254:	f8cb 300c 	str.w	r3, [fp, #12]
60012258:	2a1b      	cmp	r2, #27
6001225a:	d83b      	bhi.n	600122d4 <_realloc_r+0x2bc>
6001225c:	3408      	adds	r4, #8
6001225e:	f10b 0310 	add.w	r3, fp, #16
60012262:	6822      	ldr	r2, [r4, #0]
60012264:	601a      	str	r2, [r3, #0]
60012266:	6862      	ldr	r2, [r4, #4]
60012268:	605a      	str	r2, [r3, #4]
6001226a:	68a2      	ldr	r2, [r4, #8]
6001226c:	609a      	str	r2, [r3, #8]
6001226e:	4634      	mov	r4, r6
60012270:	4657      	mov	r7, sl
60012272:	46d9      	mov	r9, fp
60012274:	e74a      	b.n	6001210c <_realloc_r+0xf4>
60012276:	4621      	mov	r1, r4
60012278:	f7ff fe4e 	bl	60011f18 <memmove>
6001227c:	e72f      	b.n	600120de <_realloc_r+0xc6>
6001227e:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
60012282:	1f3a      	subs	r2, r7, #4
60012284:	60cb      	str	r3, [r1, #12]
60012286:	6099      	str	r1, [r3, #8]
60012288:	e7d5      	b.n	60012236 <_realloc_r+0x21e>
6001228a:	4633      	mov	r3, r6
6001228c:	e7e9      	b.n	60012262 <_realloc_r+0x24a>
6001228e:	4621      	mov	r1, r4
60012290:	4630      	mov	r0, r6
60012292:	f7ff fe41 	bl	60011f18 <memmove>
60012296:	e7ea      	b.n	6001226e <_realloc_r+0x256>
60012298:	68a3      	ldr	r3, [r4, #8]
6001229a:	6083      	str	r3, [r0, #8]
6001229c:	68e3      	ldr	r3, [r4, #12]
6001229e:	60c3      	str	r3, [r0, #12]
600122a0:	2a24      	cmp	r2, #36	; 0x24
600122a2:	d027      	beq.n	600122f4 <_realloc_r+0x2dc>
600122a4:	f104 0210 	add.w	r2, r4, #16
600122a8:	f100 0310 	add.w	r3, r0, #16
600122ac:	e711      	b.n	600120d2 <_realloc_r+0xba>
600122ae:	eb09 0105 	add.w	r1, r9, r5
600122b2:	6099      	str	r1, [r3, #8]
600122b4:	1b53      	subs	r3, r2, r5
600122b6:	f043 0301 	orr.w	r3, r3, #1
600122ba:	604b      	str	r3, [r1, #4]
600122bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
600122c0:	f003 0301 	and.w	r3, r3, #1
600122c4:	432b      	orrs	r3, r5
600122c6:	4640      	mov	r0, r8
600122c8:	f844 3c04 	str.w	r3, [r4, #-4]
600122cc:	f7fe f9f0 	bl	600106b0 <__malloc_unlock>
600122d0:	4626      	mov	r6, r4
600122d2:	e72f      	b.n	60012134 <_realloc_r+0x11c>
600122d4:	68a3      	ldr	r3, [r4, #8]
600122d6:	f8cb 3010 	str.w	r3, [fp, #16]
600122da:	68e3      	ldr	r3, [r4, #12]
600122dc:	f8cb 3014 	str.w	r3, [fp, #20]
600122e0:	2a24      	cmp	r2, #36	; 0x24
600122e2:	d010      	beq.n	60012306 <_realloc_r+0x2ee>
600122e4:	3410      	adds	r4, #16
600122e6:	f10b 0318 	add.w	r3, fp, #24
600122ea:	e7ba      	b.n	60012262 <_realloc_r+0x24a>
600122ec:	4640      	mov	r0, r8
600122ee:	f7fe f9df 	bl	600106b0 <__malloc_unlock>
600122f2:	e704      	b.n	600120fe <_realloc_r+0xe6>
600122f4:	6923      	ldr	r3, [r4, #16]
600122f6:	6103      	str	r3, [r0, #16]
600122f8:	6961      	ldr	r1, [r4, #20]
600122fa:	6141      	str	r1, [r0, #20]
600122fc:	f104 0218 	add.w	r2, r4, #24
60012300:	f100 0318 	add.w	r3, r0, #24
60012304:	e6e5      	b.n	600120d2 <_realloc_r+0xba>
60012306:	6923      	ldr	r3, [r4, #16]
60012308:	f8cb 3018 	str.w	r3, [fp, #24]
6001230c:	6963      	ldr	r3, [r4, #20]
6001230e:	f8cb 301c 	str.w	r3, [fp, #28]
60012312:	3418      	adds	r4, #24
60012314:	f10b 0320 	add.w	r3, fp, #32
60012318:	e7a3      	b.n	60012262 <_realloc_r+0x24a>
6001231a:	4632      	mov	r2, r6
6001231c:	e760      	b.n	600121e0 <_realloc_r+0x1c8>
6001231e:	4621      	mov	r1, r4
60012320:	4630      	mov	r0, r6
60012322:	f7ff fdf9 	bl	60011f18 <memmove>
60012326:	4b07      	ldr	r3, [pc, #28]	; (60012344 <_realloc_r+0x32c>)
60012328:	e760      	b.n	600121ec <_realloc_r+0x1d4>
6001232a:	68a1      	ldr	r1, [r4, #8]
6001232c:	f8cb 1010 	str.w	r1, [fp, #16]
60012330:	68e1      	ldr	r1, [r4, #12]
60012332:	f8cb 1014 	str.w	r1, [fp, #20]
60012336:	2a24      	cmp	r2, #36	; 0x24
60012338:	d006      	beq.n	60012348 <_realloc_r+0x330>
6001233a:	3410      	adds	r4, #16
6001233c:	f10b 0218 	add.w	r2, fp, #24
60012340:	e74e      	b.n	600121e0 <_realloc_r+0x1c8>
60012342:	bf00      	nop
60012344:	202025a8 	.word	0x202025a8
60012348:	6922      	ldr	r2, [r4, #16]
6001234a:	f8cb 2018 	str.w	r2, [fp, #24]
6001234e:	6962      	ldr	r2, [r4, #20]
60012350:	f8cb 201c 	str.w	r2, [fp, #28]
60012354:	3418      	adds	r4, #24
60012356:	f10b 0220 	add.w	r2, fp, #32
6001235a:	e741      	b.n	600121e0 <_realloc_r+0x1c8>

6001235c <raise>:
6001235c:	b538      	push	{r3, r4, r5, lr}
6001235e:	4b14      	ldr	r3, [pc, #80]	; (600123b0 <raise+0x54>)
60012360:	281f      	cmp	r0, #31
60012362:	681d      	ldr	r5, [r3, #0]
60012364:	d81e      	bhi.n	600123a4 <raise+0x48>
60012366:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
6001236a:	4604      	mov	r4, r0
6001236c:	b162      	cbz	r2, 60012388 <raise+0x2c>
6001236e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
60012372:	b14b      	cbz	r3, 60012388 <raise+0x2c>
60012374:	2b01      	cmp	r3, #1
60012376:	d005      	beq.n	60012384 <raise+0x28>
60012378:	1c59      	adds	r1, r3, #1
6001237a:	d00f      	beq.n	6001239c <raise+0x40>
6001237c:	2100      	movs	r1, #0
6001237e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
60012382:	4798      	blx	r3
60012384:	2000      	movs	r0, #0
60012386:	bd38      	pop	{r3, r4, r5, pc}
60012388:	4628      	mov	r0, r5
6001238a:	f000 f829 	bl	600123e0 <_getpid_r>
6001238e:	4622      	mov	r2, r4
60012390:	4601      	mov	r1, r0
60012392:	4628      	mov	r0, r5
60012394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
60012398:	f000 b80c 	b.w	600123b4 <_kill_r>
6001239c:	2316      	movs	r3, #22
6001239e:	602b      	str	r3, [r5, #0]
600123a0:	2001      	movs	r0, #1
600123a2:	bd38      	pop	{r3, r4, r5, pc}
600123a4:	2316      	movs	r3, #22
600123a6:	602b      	str	r3, [r5, #0]
600123a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600123ac:	bd38      	pop	{r3, r4, r5, pc}
600123ae:	bf00      	nop
600123b0:	20202a24 	.word	0x20202a24

600123b4 <_kill_r>:
600123b4:	b570      	push	{r4, r5, r6, lr}
600123b6:	460c      	mov	r4, r1
600123b8:	4d08      	ldr	r5, [pc, #32]	; (600123dc <_kill_r+0x28>)
600123ba:	4603      	mov	r3, r0
600123bc:	2600      	movs	r6, #0
600123be:	4620      	mov	r0, r4
600123c0:	4611      	mov	r1, r2
600123c2:	461c      	mov	r4, r3
600123c4:	602e      	str	r6, [r5, #0]
600123c6:	f000 ff08 	bl	600131da <_kill>
600123ca:	1c43      	adds	r3, r0, #1
600123cc:	d000      	beq.n	600123d0 <_kill_r+0x1c>
600123ce:	bd70      	pop	{r4, r5, r6, pc}
600123d0:	682b      	ldr	r3, [r5, #0]
600123d2:	2b00      	cmp	r3, #0
600123d4:	d0fb      	beq.n	600123ce <_kill_r+0x1a>
600123d6:	6023      	str	r3, [r4, #0]
600123d8:	bd70      	pop	{r4, r5, r6, pc}
600123da:	bf00      	nop
600123dc:	20204284 	.word	0x20204284

600123e0 <_getpid_r>:
600123e0:	f000 befd 	b.w	600131de <_getpid>

600123e4 <__sread>:
600123e4:	b510      	push	{r4, lr}
600123e6:	460c      	mov	r4, r1
600123e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
600123ec:	f000 f8f2 	bl	600125d4 <_read_r>
600123f0:	2800      	cmp	r0, #0
600123f2:	db03      	blt.n	600123fc <__sread+0x18>
600123f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
600123f6:	4403      	add	r3, r0
600123f8:	6523      	str	r3, [r4, #80]	; 0x50
600123fa:	bd10      	pop	{r4, pc}
600123fc:	89a3      	ldrh	r3, [r4, #12]
600123fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
60012402:	81a3      	strh	r3, [r4, #12]
60012404:	bd10      	pop	{r4, pc}
60012406:	bf00      	nop

60012408 <__swrite>:
60012408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6001240c:	460c      	mov	r4, r1
6001240e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
60012412:	461f      	mov	r7, r3
60012414:	05cb      	lsls	r3, r1, #23
60012416:	4605      	mov	r5, r0
60012418:	4616      	mov	r6, r2
6001241a:	d40b      	bmi.n	60012434 <__swrite+0x2c>
6001241c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
60012420:	81a1      	strh	r1, [r4, #12]
60012422:	463b      	mov	r3, r7
60012424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
60012428:	4632      	mov	r2, r6
6001242a:	4628      	mov	r0, r5
6001242c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60012430:	f000 b854 	b.w	600124dc <_write_r>
60012434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
60012438:	2302      	movs	r3, #2
6001243a:	2200      	movs	r2, #0
6001243c:	f000 f89e 	bl	6001257c <_lseek_r>
60012440:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
60012444:	e7ea      	b.n	6001241c <__swrite+0x14>
60012446:	bf00      	nop

60012448 <__sseek>:
60012448:	b510      	push	{r4, lr}
6001244a:	460c      	mov	r4, r1
6001244c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
60012450:	f000 f894 	bl	6001257c <_lseek_r>
60012454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60012458:	1c42      	adds	r2, r0, #1
6001245a:	bf0e      	itee	eq
6001245c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
60012460:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
60012464:	6520      	strne	r0, [r4, #80]	; 0x50
60012466:	81a3      	strh	r3, [r4, #12]
60012468:	bd10      	pop	{r4, pc}
6001246a:	bf00      	nop

6001246c <__sclose>:
6001246c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
60012470:	f000 b84a 	b.w	60012508 <_close_r>

60012474 <strncpy>:
60012474:	ea40 0301 	orr.w	r3, r0, r1
60012478:	079b      	lsls	r3, r3, #30
6001247a:	b510      	push	{r4, lr}
6001247c:	d101      	bne.n	60012482 <strncpy+0xe>
6001247e:	2a03      	cmp	r2, #3
60012480:	d817      	bhi.n	600124b2 <strncpy+0x3e>
60012482:	4684      	mov	ip, r0
60012484:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
60012488:	e007      	b.n	6001249a <strncpy+0x26>
6001248a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
6001248e:	f803 1b01 	strb.w	r1, [r3], #1
60012492:	1e54      	subs	r4, r2, #1
60012494:	b129      	cbz	r1, 600124a2 <strncpy+0x2e>
60012496:	469c      	mov	ip, r3
60012498:	4622      	mov	r2, r4
6001249a:	4663      	mov	r3, ip
6001249c:	2a00      	cmp	r2, #0
6001249e:	d1f4      	bne.n	6001248a <strncpy+0x16>
600124a0:	bd10      	pop	{r4, pc}
600124a2:	4494      	add	ip, r2
600124a4:	2c00      	cmp	r4, #0
600124a6:	d0fb      	beq.n	600124a0 <strncpy+0x2c>
600124a8:	f803 1b01 	strb.w	r1, [r3], #1
600124ac:	4563      	cmp	r3, ip
600124ae:	d1fb      	bne.n	600124a8 <strncpy+0x34>
600124b0:	bd10      	pop	{r4, pc}
600124b2:	468e      	mov	lr, r1
600124b4:	4684      	mov	ip, r0
600124b6:	f8de 4000 	ldr.w	r4, [lr]
600124ba:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
600124be:	ea23 0304 	bic.w	r3, r3, r4
600124c2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
600124c6:	4671      	mov	r1, lr
600124c8:	f10e 0e04 	add.w	lr, lr, #4
600124cc:	d1da      	bne.n	60012484 <strncpy+0x10>
600124ce:	3a04      	subs	r2, #4
600124d0:	2a03      	cmp	r2, #3
600124d2:	f84c 4b04 	str.w	r4, [ip], #4
600124d6:	d8ee      	bhi.n	600124b6 <strncpy+0x42>
600124d8:	4671      	mov	r1, lr
600124da:	e7d3      	b.n	60012484 <strncpy+0x10>

600124dc <_write_r>:
600124dc:	b538      	push	{r3, r4, r5, lr}
600124de:	460c      	mov	r4, r1
600124e0:	4d08      	ldr	r5, [pc, #32]	; (60012504 <_write_r+0x28>)
600124e2:	4684      	mov	ip, r0
600124e4:	4611      	mov	r1, r2
600124e6:	4620      	mov	r0, r4
600124e8:	461a      	mov	r2, r3
600124ea:	2300      	movs	r3, #0
600124ec:	602b      	str	r3, [r5, #0]
600124ee:	4664      	mov	r4, ip
600124f0:	f000 fe65 	bl	600131be <_write>
600124f4:	1c43      	adds	r3, r0, #1
600124f6:	d000      	beq.n	600124fa <_write_r+0x1e>
600124f8:	bd38      	pop	{r3, r4, r5, pc}
600124fa:	682b      	ldr	r3, [r5, #0]
600124fc:	2b00      	cmp	r3, #0
600124fe:	d0fb      	beq.n	600124f8 <_write_r+0x1c>
60012500:	6023      	str	r3, [r4, #0]
60012502:	bd38      	pop	{r3, r4, r5, pc}
60012504:	20204284 	.word	0x20204284

60012508 <_close_r>:
60012508:	b538      	push	{r3, r4, r5, lr}
6001250a:	4d07      	ldr	r5, [pc, #28]	; (60012528 <_close_r+0x20>)
6001250c:	2200      	movs	r2, #0
6001250e:	4604      	mov	r4, r0
60012510:	4608      	mov	r0, r1
60012512:	602a      	str	r2, [r5, #0]
60012514:	f000 fe57 	bl	600131c6 <_close>
60012518:	1c43      	adds	r3, r0, #1
6001251a:	d000      	beq.n	6001251e <_close_r+0x16>
6001251c:	bd38      	pop	{r3, r4, r5, pc}
6001251e:	682b      	ldr	r3, [r5, #0]
60012520:	2b00      	cmp	r3, #0
60012522:	d0fb      	beq.n	6001251c <_close_r+0x14>
60012524:	6023      	str	r3, [r4, #0]
60012526:	bd38      	pop	{r3, r4, r5, pc}
60012528:	20204284 	.word	0x20204284

6001252c <_fstat_r>:
6001252c:	b570      	push	{r4, r5, r6, lr}
6001252e:	460c      	mov	r4, r1
60012530:	4d08      	ldr	r5, [pc, #32]	; (60012554 <_fstat_r+0x28>)
60012532:	4603      	mov	r3, r0
60012534:	2600      	movs	r6, #0
60012536:	4620      	mov	r0, r4
60012538:	4611      	mov	r1, r2
6001253a:	461c      	mov	r4, r3
6001253c:	602e      	str	r6, [r5, #0]
6001253e:	f000 fe50 	bl	600131e2 <_fstat>
60012542:	1c43      	adds	r3, r0, #1
60012544:	d000      	beq.n	60012548 <_fstat_r+0x1c>
60012546:	bd70      	pop	{r4, r5, r6, pc}
60012548:	682b      	ldr	r3, [r5, #0]
6001254a:	2b00      	cmp	r3, #0
6001254c:	d0fb      	beq.n	60012546 <_fstat_r+0x1a>
6001254e:	6023      	str	r3, [r4, #0]
60012550:	bd70      	pop	{r4, r5, r6, pc}
60012552:	bf00      	nop
60012554:	20204284 	.word	0x20204284

60012558 <_isatty_r>:
60012558:	b538      	push	{r3, r4, r5, lr}
6001255a:	4d07      	ldr	r5, [pc, #28]	; (60012578 <_isatty_r+0x20>)
6001255c:	2200      	movs	r2, #0
6001255e:	4604      	mov	r4, r0
60012560:	4608      	mov	r0, r1
60012562:	602a      	str	r2, [r5, #0]
60012564:	f000 fe34 	bl	600131d0 <_isatty>
60012568:	1c43      	adds	r3, r0, #1
6001256a:	d000      	beq.n	6001256e <_isatty_r+0x16>
6001256c:	bd38      	pop	{r3, r4, r5, pc}
6001256e:	682b      	ldr	r3, [r5, #0]
60012570:	2b00      	cmp	r3, #0
60012572:	d0fb      	beq.n	6001256c <_isatty_r+0x14>
60012574:	6023      	str	r3, [r4, #0]
60012576:	bd38      	pop	{r3, r4, r5, pc}
60012578:	20204284 	.word	0x20204284

6001257c <_lseek_r>:
6001257c:	b538      	push	{r3, r4, r5, lr}
6001257e:	460c      	mov	r4, r1
60012580:	4d08      	ldr	r5, [pc, #32]	; (600125a4 <_lseek_r+0x28>)
60012582:	4684      	mov	ip, r0
60012584:	4611      	mov	r1, r2
60012586:	4620      	mov	r0, r4
60012588:	461a      	mov	r2, r3
6001258a:	2300      	movs	r3, #0
6001258c:	602b      	str	r3, [r5, #0]
6001258e:	4664      	mov	r4, ip
60012590:	f000 fe1c 	bl	600131cc <_lseek>
60012594:	1c43      	adds	r3, r0, #1
60012596:	d000      	beq.n	6001259a <_lseek_r+0x1e>
60012598:	bd38      	pop	{r3, r4, r5, pc}
6001259a:	682b      	ldr	r3, [r5, #0]
6001259c:	2b00      	cmp	r3, #0
6001259e:	d0fb      	beq.n	60012598 <_lseek_r+0x1c>
600125a0:	6023      	str	r3, [r4, #0]
600125a2:	bd38      	pop	{r3, r4, r5, pc}
600125a4:	20204284 	.word	0x20204284

600125a8 <__ascii_mbtowc>:
600125a8:	b082      	sub	sp, #8
600125aa:	b149      	cbz	r1, 600125c0 <__ascii_mbtowc+0x18>
600125ac:	b15a      	cbz	r2, 600125c6 <__ascii_mbtowc+0x1e>
600125ae:	b16b      	cbz	r3, 600125cc <__ascii_mbtowc+0x24>
600125b0:	7813      	ldrb	r3, [r2, #0]
600125b2:	600b      	str	r3, [r1, #0]
600125b4:	7812      	ldrb	r2, [r2, #0]
600125b6:	1e10      	subs	r0, r2, #0
600125b8:	bf18      	it	ne
600125ba:	2001      	movne	r0, #1
600125bc:	b002      	add	sp, #8
600125be:	4770      	bx	lr
600125c0:	a901      	add	r1, sp, #4
600125c2:	2a00      	cmp	r2, #0
600125c4:	d1f3      	bne.n	600125ae <__ascii_mbtowc+0x6>
600125c6:	4610      	mov	r0, r2
600125c8:	b002      	add	sp, #8
600125ca:	4770      	bx	lr
600125cc:	f06f 0001 	mvn.w	r0, #1
600125d0:	e7f4      	b.n	600125bc <__ascii_mbtowc+0x14>
600125d2:	bf00      	nop

600125d4 <_read_r>:
600125d4:	b538      	push	{r3, r4, r5, lr}
600125d6:	460c      	mov	r4, r1
600125d8:	4d08      	ldr	r5, [pc, #32]	; (600125fc <_read_r+0x28>)
600125da:	4684      	mov	ip, r0
600125dc:	4611      	mov	r1, r2
600125de:	4620      	mov	r0, r4
600125e0:	461a      	mov	r2, r3
600125e2:	2300      	movs	r3, #0
600125e4:	602b      	str	r3, [r5, #0]
600125e6:	4664      	mov	r4, ip
600125e8:	f000 fde5 	bl	600131b6 <_read>
600125ec:	1c43      	adds	r3, r0, #1
600125ee:	d000      	beq.n	600125f2 <_read_r+0x1e>
600125f0:	bd38      	pop	{r3, r4, r5, pc}
600125f2:	682b      	ldr	r3, [r5, #0]
600125f4:	2b00      	cmp	r3, #0
600125f6:	d0fb      	beq.n	600125f0 <_read_r+0x1c>
600125f8:	6023      	str	r3, [r4, #0]
600125fa:	bd38      	pop	{r3, r4, r5, pc}
600125fc:	20204284 	.word	0x20204284

60012600 <__ascii_wctomb>:
60012600:	b149      	cbz	r1, 60012616 <__ascii_wctomb+0x16>
60012602:	2aff      	cmp	r2, #255	; 0xff
60012604:	d802      	bhi.n	6001260c <__ascii_wctomb+0xc>
60012606:	700a      	strb	r2, [r1, #0]
60012608:	2001      	movs	r0, #1
6001260a:	4770      	bx	lr
6001260c:	238a      	movs	r3, #138	; 0x8a
6001260e:	6003      	str	r3, [r0, #0]
60012610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60012614:	4770      	bx	lr
60012616:	4608      	mov	r0, r1
60012618:	4770      	bx	lr
6001261a:	bf00      	nop

6001261c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
6001261c:	4770      	bx	lr

6001261e <main>:

K_THREAD_DEFINE(pot_id, STACKSIZE, read_pot_adc, NULL, NULL, NULL,
PRIORITY, 0, 0);

int main(void)
{
6001261e:	b508      	push	{r3, lr}
    usb_enable(NULL);
60012620:	2000      	movs	r0, #0
60012622:	f7f4 fe8b 	bl	6000733c <usb_enable>
    return 0;

}
60012626:	2000      	movs	r0, #0
60012628:	bd08      	pop	{r3, pc}

6001262a <cbpprintf_external>:
{
6001262a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6001262e:	4606      	mov	r6, r0
60012630:	460d      	mov	r5, r1
60012632:	4617      	mov	r7, r2
	if (buf == NULL) {
60012634:	4698      	mov	r8, r3
60012636:	b32b      	cbz	r3, 60012684 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
60012638:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
6001263c:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
60012640:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
60012644:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
60012646:	78db      	ldrb	r3, [r3, #3]
60012648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
6001264c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
60012650:	441c      	add	r4, r3
60012652:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
60012654:	45ca      	cmp	sl, r9
60012656:	d309      	bcc.n	6001266c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
60012658:	f108 0308 	add.w	r3, r8, #8
6001265c:	f8d8 2004 	ldr.w	r2, [r8, #4]
60012660:	4639      	mov	r1, r7
60012662:	4630      	mov	r0, r6
60012664:	46ac      	mov	ip, r5
}
60012666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
6001266a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
6001266c:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
60012670:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
60012674:	4620      	mov	r0, r4
		*ps = s;
60012676:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
6001267a:	f7ef fe21 	bl	600022c0 <strlen>
6001267e:	3001      	adds	r0, #1
60012680:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
60012682:	e7e7      	b.n	60012654 <cbpprintf_external+0x2a>
}
60012684:	f06f 0015 	mvn.w	r0, #21
60012688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

6001268c <is_ptr>:
{
6001268c:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
6001268e:	2500      	movs	r5, #0
{
60012690:	4602      	mov	r2, r0
	bool mod = false;
60012692:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
60012694:	4614      	mov	r4, r2
60012696:	f814 3b01 	ldrb.w	r3, [r4], #1
6001269a:	b90b      	cbnz	r3, 600126a0 <is_ptr+0x14>
					return false;
6001269c:	4618      	mov	r0, r3
6001269e:	e009      	b.n	600126b4 <is_ptr+0x28>
		if (mod) {
600126a0:	b198      	cbz	r0, 600126ca <is_ptr+0x3e>
			if (cnt == n) {
600126a2:	428d      	cmp	r5, r1
600126a4:	d107      	bne.n	600126b6 <is_ptr+0x2a>
				if (c == 'p') {
600126a6:	2b70      	cmp	r3, #112	; 0x70
600126a8:	d004      	beq.n	600126b4 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
600126aa:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
600126ae:	2a3a      	cmp	r2, #58	; 0x3a
600126b0:	d80b      	bhi.n	600126ca <is_ptr+0x3e>
					return false;
600126b2:	2000      	movs	r0, #0
}
600126b4:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
600126b6:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
600126ba:	2e3a      	cmp	r6, #58	; 0x3a
600126bc:	d805      	bhi.n	600126ca <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
600126be:	7853      	ldrb	r3, [r2, #1]
				cnt++;
600126c0:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
600126c2:	1c94      	adds	r4, r2, #2
600126c4:	2b00      	cmp	r3, #0
600126c6:	d0e9      	beq.n	6001269c <is_ptr+0x10>
600126c8:	2000      	movs	r0, #0
		if (c == '%') {
600126ca:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
600126cc:	4622      	mov	r2, r4
			mod = !mod;
600126ce:	bf08      	it	eq
600126d0:	f080 0001 	eoreq.w	r0, r0, #1
600126d4:	e7de      	b.n	60012694 <is_ptr+0x8>

600126d6 <arch_printk_char_out>:
}
600126d6:	2000      	movs	r0, #0
600126d8:	4770      	bx	lr

600126da <str_out>:
{
600126da:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
600126dc:	688a      	ldr	r2, [r1, #8]
600126de:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
600126e0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
600126e2:	b114      	cbz	r4, 600126ea <str_out+0x10>
600126e4:	684b      	ldr	r3, [r1, #4]
600126e6:	4293      	cmp	r3, r2
600126e8:	dc01      	bgt.n	600126ee <str_out+0x14>
		ctx->count++;
600126ea:	608d      	str	r5, [r1, #8]
}
600126ec:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
600126ee:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
600126f0:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
600126f2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
600126f4:	bf0a      	itet	eq
600126f6:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
600126f8:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
600126fa:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
600126fc:	e7f6      	b.n	600126ec <str_out+0x12>

600126fe <vprintk>:
		z_log_vprintk(fmt, ap);
600126fe:	f000 bbeb 	b.w	60012ed8 <z_log_vprintk>

60012702 <printk>:
{
60012702:	b40f      	push	{r0, r1, r2, r3}
60012704:	b507      	push	{r0, r1, r2, lr}
60012706:	a904      	add	r1, sp, #16
60012708:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
6001270c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
6001270e:	f000 fbe3 	bl	60012ed8 <z_log_vprintk>
}
60012712:	b003      	add	sp, #12
60012714:	f85d eb04 	ldr.w	lr, [sp], #4
60012718:	b004      	add	sp, #16
6001271a:	4770      	bx	lr

6001271c <snprintk>:
{
6001271c:	b40c      	push	{r2, r3}
6001271e:	b507      	push	{r0, r1, r2, lr}
60012720:	ab04      	add	r3, sp, #16
60012722:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
60012726:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
60012728:	f7f1 fe72 	bl	60004410 <vsnprintk>
}
6001272c:	b003      	add	sp, #12
6001272e:	f85d eb04 	ldr.w	lr, [sp], #4
60012732:	b002      	add	sp, #8
60012734:	4770      	bx	lr

60012736 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
60012736:	4604      	mov	r4, r0
60012738:	4608      	mov	r0, r1
6001273a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
6001273c:	461a      	mov	r2, r3
{
6001273e:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
60012740:	47a0      	blx	r4
	return z_impl_z_current_get();
60012742:	f7fc fe89 	bl	6000f458 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
60012746:	f7f6 f923 	bl	60008990 <z_impl_k_thread_abort>

6001274a <chunk_field>:
	if (big_heap(h)) {
6001274a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
6001274c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
60012750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
60012754:	bf2c      	ite	cs
60012756:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
6001275a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
6001275e:	4770      	bx	lr

60012760 <chunk_set>:
	void *cmem = &buf[c];
60012760:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
60012764:	6880      	ldr	r0, [r0, #8]
60012766:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
6001276a:	bf2c      	ite	cs
6001276c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
60012770:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
60012774:	4770      	bx	lr

60012776 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
60012776:	2201      	movs	r2, #1
{
60012778:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
6001277a:	f7ff ffe6 	bl	6001274a <chunk_field>
}
6001277e:	40d0      	lsrs	r0, r2
60012780:	bd08      	pop	{r3, pc}

60012782 <set_chunk_used>:
	if (big_heap(h)) {
60012782:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
60012784:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
60012788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
6001278c:	d308      	bcc.n	600127a0 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
6001278e:	684b      	ldr	r3, [r1, #4]
		if (used) {
60012790:	b11a      	cbz	r2, 6001279a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
60012792:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
60012796:	604b      	str	r3, [r1, #4]
60012798:	4770      	bx	lr
6001279a:	f023 0301 	bic.w	r3, r3, #1
6001279e:	e7fa      	b.n	60012796 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
600127a0:	884b      	ldrh	r3, [r1, #2]
		if (used) {
600127a2:	b11a      	cbz	r2, 600127ac <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
600127a4:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
600127a8:	804b      	strh	r3, [r1, #2]
}
600127aa:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
600127ac:	f023 0301 	bic.w	r3, r3, #1
600127b0:	e7fa      	b.n	600127a8 <set_chunk_used+0x26>

600127b2 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
600127b2:	0053      	lsls	r3, r2, #1
600127b4:	2201      	movs	r2, #1
600127b6:	f7ff bfd3 	b.w	60012760 <chunk_set>

600127ba <mem_to_chunkid>:
	return big_heap(h) ? 8 : 4;
600127ba:	6883      	ldr	r3, [r0, #8]
600127bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
600127c0:	bf34      	ite	cc
600127c2:	2304      	movcc	r3, #4
600127c4:	2308      	movcs	r3, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
600127c6:	1ac9      	subs	r1, r1, r3
600127c8:	1a08      	subs	r0, r1, r0
}
600127ca:	08c0      	lsrs	r0, r0, #3
600127cc:	4770      	bx	lr

600127ce <bytes_to_chunksz.isra.0>:
600127ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
600127d2:	f101 0107 	add.w	r1, r1, #7
	return big_heap(h) ? 8 : 4;
600127d6:	bf34      	ite	cc
600127d8:	2304      	movcc	r3, #4
600127da:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
600127dc:	18c8      	adds	r0, r1, r3
}
600127de:	08c0      	lsrs	r0, r0, #3
600127e0:	4770      	bx	lr

600127e2 <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
600127e2:	460a      	mov	r2, r1
	return bytes_to_chunksz(h, 1);
600127e4:	2101      	movs	r1, #1
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
600127e6:	3201      	adds	r2, #1
static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
600127e8:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
600127ea:	f7ff fff0 	bl	600127ce <bytes_to_chunksz.isra.0>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
600127ee:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
600127f0:	fab2 f082 	clz	r0, r2
}
600127f4:	f1c0 001f 	rsb	r0, r0, #31
600127f8:	bd08      	pop	{r3, pc}

600127fa <free_list_remove_bidx>:
{
600127fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600127fe:	460e      	mov	r6, r1
60012800:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
60012802:	2203      	movs	r2, #3
60012804:	4604      	mov	r4, r0
60012806:	f7ff ffa0 	bl	6001274a <chunk_field>
	if (next_free_chunk(h, c) == c) {
6001280a:	4286      	cmp	r6, r0
6001280c:	4605      	mov	r5, r0
6001280e:	f107 0804 	add.w	r8, r7, #4
60012812:	d10a      	bne.n	6001282a <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
60012814:	2201      	movs	r2, #1
60012816:	68e3      	ldr	r3, [r4, #12]
60012818:	40ba      	lsls	r2, r7
6001281a:	ea23 0302 	bic.w	r3, r3, r2
6001281e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
60012820:	2300      	movs	r3, #0
60012822:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
60012826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
6001282a:	4631      	mov	r1, r6
6001282c:	2202      	movs	r2, #2
6001282e:	4620      	mov	r0, r4
60012830:	f7ff ff8b 	bl	6001274a <chunk_field>
60012834:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
60012836:	462b      	mov	r3, r5
60012838:	4601      	mov	r1, r0
6001283a:	2203      	movs	r2, #3
6001283c:	4620      	mov	r0, r4
		b->next = second;
6001283e:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
60012842:	f7ff ff8d 	bl	60012760 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
60012846:	4633      	mov	r3, r6
60012848:	4629      	mov	r1, r5
6001284a:	4620      	mov	r0, r4
6001284c:	2202      	movs	r2, #2
}
6001284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60012852:	f7ff bf85 	b.w	60012760 <chunk_set>

60012856 <free_list_remove>:
{
60012856:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
60012858:	6886      	ldr	r6, [r0, #8]
6001285a:	460d      	mov	r5, r1
6001285c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
6001285e:	f7ff ff8a 	bl	60012776 <chunk_size>
60012862:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
60012866:	4601      	mov	r1, r0
60012868:	d301      	bcc.n	6001286e <free_list_remove+0x18>
6001286a:	2801      	cmp	r0, #1
6001286c:	d009      	beq.n	60012882 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
6001286e:	4630      	mov	r0, r6
60012870:	f7ff ffb7 	bl	600127e2 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
60012874:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
60012876:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
60012878:	4620      	mov	r0, r4
}
6001287a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
6001287e:	f7ff bfbc 	b.w	600127fa <free_list_remove_bidx>
}
60012882:	bd70      	pop	{r4, r5, r6, pc}

60012884 <alloc_chunk>:
{
60012884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60012888:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
6001288a:	6880      	ldr	r0, [r0, #8]
{
6001288c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
6001288e:	f7ff ffa8 	bl	600127e2 <bucket_idx.isra.0>
60012892:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
60012896:	4606      	mov	r6, r0
	if (b->next) {
60012898:	f8da 9010 	ldr.w	r9, [sl, #16]
6001289c:	f1b9 0f00 	cmp.w	r9, #0
600128a0:	d01b      	beq.n	600128da <alloc_chunk+0x56>
600128a2:	2703      	movs	r7, #3
			chunkid_t c = b->next;
600128a4:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
600128a8:	4628      	mov	r0, r5
600128aa:	4621      	mov	r1, r4
600128ac:	f7ff ff63 	bl	60012776 <chunk_size>
600128b0:	4540      	cmp	r0, r8
600128b2:	d307      	bcc.n	600128c4 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
600128b4:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
600128b6:	4621      	mov	r1, r4
600128b8:	4628      	mov	r0, r5
600128ba:	f7ff ff9e 	bl	600127fa <free_list_remove_bidx>
}
600128be:	4620      	mov	r0, r4
600128c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
600128c4:	2203      	movs	r2, #3
600128c6:	4621      	mov	r1, r4
600128c8:	4628      	mov	r0, r5
600128ca:	f7ff ff3e 	bl	6001274a <chunk_field>
		} while (--i && b->next != first);
600128ce:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
600128d0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
600128d4:	d001      	beq.n	600128da <alloc_chunk+0x56>
600128d6:	4581      	cmp	r9, r0
600128d8:	d1e4      	bne.n	600128a4 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
600128da:	3601      	adds	r6, #1
600128dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
600128e0:	68eb      	ldr	r3, [r5, #12]
600128e2:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
600128e4:	401c      	ands	r4, r3
600128e6:	d0ea      	beq.n	600128be <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
600128e8:	fa94 f2a4 	rbit	r2, r4
600128ec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
600128f0:	1d13      	adds	r3, r2, #4
600128f2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
600128f6:	e7de      	b.n	600128b6 <alloc_chunk+0x32>

600128f8 <split_chunks>:
{
600128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600128fc:	4614      	mov	r4, r2
600128fe:	460e      	mov	r6, r1
60012900:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
60012902:	f7ff ff38 	bl	60012776 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
60012906:	1b37      	subs	r7, r6, r4
	chunksz_t lsz = rc - lc;
60012908:	eba4 0806 	sub.w	r8, r4, r6
	set_chunk_size(h, lc, lsz);
6001290c:	4631      	mov	r1, r6
	chunksz_t rsz = sz0 - lsz;
6001290e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
60012910:	4642      	mov	r2, r8
60012912:	4628      	mov	r0, r5
60012914:	f7ff ff4d 	bl	600127b2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
60012918:	463a      	mov	r2, r7
6001291a:	4621      	mov	r1, r4
6001291c:	4628      	mov	r0, r5
6001291e:	f7ff ff48 	bl	600127b2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60012922:	4643      	mov	r3, r8
60012924:	2200      	movs	r2, #0
60012926:	4621      	mov	r1, r4
60012928:	4628      	mov	r0, r5
6001292a:	f7ff ff19 	bl	60012760 <chunk_set>
	return c + chunk_size(h, c);
6001292e:	4621      	mov	r1, r4
60012930:	4628      	mov	r0, r5
60012932:	f7ff ff20 	bl	60012776 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60012936:	463b      	mov	r3, r7
60012938:	1821      	adds	r1, r4, r0
6001293a:	2200      	movs	r2, #0
6001293c:	4628      	mov	r0, r5
}
6001293e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60012942:	f7ff bf0d 	b.w	60012760 <chunk_set>

60012946 <merge_chunks>:
{
60012946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6001294a:	4616      	mov	r6, r2
6001294c:	4604      	mov	r4, r0
6001294e:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
60012950:	f7ff ff11 	bl	60012776 <chunk_size>
60012954:	4605      	mov	r5, r0
60012956:	4631      	mov	r1, r6
60012958:	4620      	mov	r0, r4
6001295a:	f7ff ff0c 	bl	60012776 <chunk_size>
6001295e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
60012960:	4639      	mov	r1, r7
60012962:	4620      	mov	r0, r4
60012964:	462a      	mov	r2, r5
60012966:	f7ff ff24 	bl	600127b2 <set_chunk_size>
	return c + chunk_size(h, c);
6001296a:	4631      	mov	r1, r6
6001296c:	4620      	mov	r0, r4
6001296e:	f7ff ff02 	bl	60012776 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60012972:	462b      	mov	r3, r5
60012974:	1831      	adds	r1, r6, r0
60012976:	2200      	movs	r2, #0
60012978:	4620      	mov	r0, r4
}
6001297a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
6001297e:	f7ff beef 	b.w	60012760 <chunk_set>

60012982 <free_list_add>:
{
60012982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
60012986:	6886      	ldr	r6, [r0, #8]
60012988:	460d      	mov	r5, r1
6001298a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
6001298c:	f7ff fef3 	bl	60012776 <chunk_size>
60012990:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
60012994:	4601      	mov	r1, r0
60012996:	d301      	bcc.n	6001299c <free_list_add+0x1a>
60012998:	2801      	cmp	r0, #1
6001299a:	d032      	beq.n	60012a02 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
6001299c:	4630      	mov	r0, r6
6001299e:	f7ff ff20 	bl	600127e2 <bucket_idx.isra.0>
	if (b->next == 0U) {
600129a2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
600129a6:	690e      	ldr	r6, [r1, #16]
600129a8:	b996      	cbnz	r6, 600129d0 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
600129aa:	2201      	movs	r2, #1
600129ac:	68e3      	ldr	r3, [r4, #12]
600129ae:	4082      	lsls	r2, r0
	chunk_set(h, c, FREE_PREV, prev);
600129b0:	4620      	mov	r0, r4
600129b2:	4313      	orrs	r3, r2
600129b4:	2202      	movs	r2, #2
600129b6:	60e3      	str	r3, [r4, #12]
600129b8:	462b      	mov	r3, r5
		b->next = c;
600129ba:	610d      	str	r5, [r1, #16]
600129bc:	4629      	mov	r1, r5
600129be:	f7ff fecf 	bl	60012760 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
600129c2:	2203      	movs	r2, #3
600129c4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
600129c6:	4620      	mov	r0, r4
}
600129c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
600129cc:	f7ff bec8 	b.w	60012760 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
600129d0:	2202      	movs	r2, #2
600129d2:	4631      	mov	r1, r6
600129d4:	4620      	mov	r0, r4
600129d6:	f7ff feb8 	bl	6001274a <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
600129da:	4629      	mov	r1, r5
600129dc:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
600129de:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
600129e0:	4620      	mov	r0, r4
600129e2:	f7ff febd 	bl	60012760 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
600129e6:	2203      	movs	r2, #3
600129e8:	4633      	mov	r3, r6
600129ea:	4629      	mov	r1, r5
600129ec:	4620      	mov	r0, r4
600129ee:	f7ff feb7 	bl	60012760 <chunk_set>
600129f2:	4639      	mov	r1, r7
600129f4:	462b      	mov	r3, r5
600129f6:	4620      	mov	r0, r4
600129f8:	f7ff feb2 	bl	60012760 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
600129fc:	2202      	movs	r2, #2
600129fe:	4631      	mov	r1, r6
60012a00:	e7e1      	b.n	600129c6 <free_list_add+0x44>
60012a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

60012a06 <free_chunk>:
{
60012a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60012a08:	460c      	mov	r4, r1
60012a0a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
60012a0c:	f7ff feb3 	bl	60012776 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60012a10:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
60012a12:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60012a14:	4628      	mov	r0, r5
60012a16:	4631      	mov	r1, r6
60012a18:	f7ff fe97 	bl	6001274a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
60012a1c:	07c3      	lsls	r3, r0, #31
60012a1e:	d40c      	bmi.n	60012a3a <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
60012a20:	4631      	mov	r1, r6
60012a22:	4628      	mov	r0, r5
60012a24:	f7ff ff17 	bl	60012856 <free_list_remove>
	return c + chunk_size(h, c);
60012a28:	4621      	mov	r1, r4
60012a2a:	4628      	mov	r0, r5
60012a2c:	f7ff fea3 	bl	60012776 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
60012a30:	4621      	mov	r1, r4
60012a32:	1822      	adds	r2, r4, r0
60012a34:	4628      	mov	r0, r5
60012a36:	f7ff ff86 	bl	60012946 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
60012a3a:	2200      	movs	r2, #0
60012a3c:	4621      	mov	r1, r4
60012a3e:	4628      	mov	r0, r5
60012a40:	f7ff fe83 	bl	6001274a <chunk_field>
60012a44:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60012a46:	2201      	movs	r2, #1
60012a48:	4628      	mov	r0, r5
60012a4a:	4639      	mov	r1, r7
60012a4c:	f7ff fe7d 	bl	6001274a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
60012a50:	ea10 0602 	ands.w	r6, r0, r2
60012a54:	d113      	bne.n	60012a7e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
60012a56:	4639      	mov	r1, r7
60012a58:	4628      	mov	r0, r5
60012a5a:	f7ff fefc 	bl	60012856 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
60012a5e:	4621      	mov	r1, r4
60012a60:	4632      	mov	r2, r6
60012a62:	4628      	mov	r0, r5
60012a64:	f7ff fe71 	bl	6001274a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
60012a68:	4622      	mov	r2, r4
60012a6a:	1a21      	subs	r1, r4, r0
60012a6c:	4628      	mov	r0, r5
60012a6e:	f7ff ff6a 	bl	60012946 <merge_chunks>
60012a72:	4621      	mov	r1, r4
60012a74:	4632      	mov	r2, r6
60012a76:	4628      	mov	r0, r5
60012a78:	f7ff fe67 	bl	6001274a <chunk_field>
60012a7c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
60012a7e:	4621      	mov	r1, r4
60012a80:	4628      	mov	r0, r5
}
60012a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
60012a86:	f7ff bf7c 	b.w	60012982 <free_list_add>

60012a8a <sys_heap_alloc>:
{
60012a8a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
60012a8c:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
60012a8e:	b909      	cbnz	r1, 60012a94 <sys_heap_alloc+0xa>
		return NULL;
60012a90:	2000      	movs	r0, #0
}
60012a92:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
60012a94:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
60012a96:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
60012a9a:	d9f9      	bls.n	60012a90 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
60012a9c:	f7ff fe97 	bl	600127ce <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
60012aa0:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
60012aa2:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
60012aa4:	4630      	mov	r0, r6
60012aa6:	f7ff feed 	bl	60012884 <alloc_chunk>
	if (c == 0U) {
60012aaa:	4604      	mov	r4, r0
60012aac:	2800      	cmp	r0, #0
60012aae:	d0ef      	beq.n	60012a90 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
60012ab0:	4601      	mov	r1, r0
60012ab2:	4630      	mov	r0, r6
60012ab4:	f7ff fe5f 	bl	60012776 <chunk_size>
60012ab8:	42a8      	cmp	r0, r5
60012aba:	d909      	bls.n	60012ad0 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
60012abc:	4425      	add	r5, r4
60012abe:	4621      	mov	r1, r4
60012ac0:	4630      	mov	r0, r6
60012ac2:	462a      	mov	r2, r5
60012ac4:	f7ff ff18 	bl	600128f8 <split_chunks>
		free_list_add(h, c + chunk_sz);
60012ac8:	4629      	mov	r1, r5
60012aca:	4630      	mov	r0, r6
60012acc:	f7ff ff59 	bl	60012982 <free_list_add>
	set_chunk_used(h, c, true);
60012ad0:	4630      	mov	r0, r6
60012ad2:	2201      	movs	r2, #1
60012ad4:	4621      	mov	r1, r4
60012ad6:	f7ff fe54 	bl	60012782 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
60012ada:	68b3      	ldr	r3, [r6, #8]
60012adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60012ae0:	bf34      	ite	cc
60012ae2:	2304      	movcc	r3, #4
60012ae4:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
60012ae6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
60012aea:	4418      	add	r0, r3
	return mem;
60012aec:	e7d1      	b.n	60012a92 <sys_heap_alloc+0x8>

60012aee <_ldiv5>:
	uint32_t v_lo = *v;
60012aee:	e9d0 2100 	ldrd	r2, r1, [r0]
{
60012af2:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
60012af4:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
60012af8:	fba2 2403 	umull	r2, r4, r2, r3
60012afc:	18d5      	adds	r5, r2, r3
60012afe:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
60012b02:	fba1 1303 	umull	r1, r3, r1, r3
60012b06:	1852      	adds	r2, r2, r1
60012b08:	eb44 0403 	adc.w	r4, r4, r3
60012b0c:	1952      	adds	r2, r2, r5
60012b0e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
60012b12:	1889      	adds	r1, r1, r2
60012b14:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
60012b18:	e9c0 1300 	strd	r1, r3, [r0]
}
60012b1c:	bd30      	pop	{r4, r5, pc}

60012b1e <_get_digit>:
{
60012b1e:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
60012b20:	680a      	ldr	r2, [r1, #0]
{
60012b22:	4603      	mov	r3, r0
	if (*digit_count > 0) {
60012b24:	2a00      	cmp	r2, #0
60012b26:	dd0f      	ble.n	60012b48 <_get_digit+0x2a>
		--*digit_count;
60012b28:	3a01      	subs	r2, #1
60012b2a:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
60012b2c:	6844      	ldr	r4, [r0, #4]
60012b2e:	200a      	movs	r0, #10
60012b30:	681a      	ldr	r2, [r3, #0]
60012b32:	fba2 1200 	umull	r1, r2, r2, r0
60012b36:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
60012b3a:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
60012b3c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
		rval = ((*fr >> 60) & 0xF) + '0';
60012b40:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
60012b42:	e9c3 1200 	strd	r1, r2, [r3]
}
60012b46:	bd10      	pop	{r4, pc}
		rval = '0';
60012b48:	2030      	movs	r0, #48	; 0x30
60012b4a:	e7fc      	b.n	60012b46 <_get_digit+0x28>

60012b4c <outs>:
{
60012b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60012b50:	4607      	mov	r7, r0
60012b52:	4688      	mov	r8, r1
60012b54:	4615      	mov	r5, r2
60012b56:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
60012b58:	4614      	mov	r4, r2
60012b5a:	42b4      	cmp	r4, r6
60012b5c:	d305      	bcc.n	60012b6a <outs+0x1e>
60012b5e:	b10e      	cbz	r6, 60012b64 <outs+0x18>
	return (int)count;
60012b60:	1b60      	subs	r0, r4, r5
60012b62:	e008      	b.n	60012b76 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
60012b64:	7823      	ldrb	r3, [r4, #0]
60012b66:	2b00      	cmp	r3, #0
60012b68:	d0fa      	beq.n	60012b60 <outs+0x14>
		int rc = out((int)*sp++, ctx);
60012b6a:	4641      	mov	r1, r8
60012b6c:	f814 0b01 	ldrb.w	r0, [r4], #1
60012b70:	47b8      	blx	r7
		if (rc < 0) {
60012b72:	2800      	cmp	r0, #0
60012b74:	daf1      	bge.n	60012b5a <outs+0xe>
}
60012b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

60012b7a <ring_buf_put_claim>:
{
60012b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
60012b7c:	4604      	mov	r4, r0
	if (unlikely(wrap_size >= buf->size)) {
60012b7e:	69c3      	ldr	r3, [r0, #28]
	base = buf->put_base;
60012b80:	68c6      	ldr	r6, [r0, #12]
{
60012b82:	4694      	mov	ip, r2
	wrap_size = buf->put_head - base;
60012b84:	6845      	ldr	r5, [r0, #4]
60012b86:	6940      	ldr	r0, [r0, #20]
60012b88:	1baf      	subs	r7, r5, r6
60012b8a:	1a28      	subs	r0, r5, r0
	if (unlikely(wrap_size >= buf->size)) {
60012b8c:	42bb      	cmp	r3, r7
60012b8e:	eba3 0200 	sub.w	r2, r3, r0
		wrap_size -= buf->size;
60012b92:	bf9c      	itt	ls
60012b94:	1aff      	subls	r7, r7, r3
		base += buf->size;
60012b96:	18f6      	addls	r6, r6, r3
	size = MIN(size, free_space);
60012b98:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
60012b9a:	eba3 0007 	sub.w	r0, r3, r7
	*data = &buf->buffer[buf->put_head - base];
60012b9e:	eba5 0506 	sub.w	r5, r5, r6
	size = MIN(size, free_space);
60012ba2:	bf28      	it	cs
60012ba4:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
60012ba6:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
60012ba8:	4290      	cmp	r0, r2
	*data = &buf->buffer[buf->put_head - base];
60012baa:	442b      	add	r3, r5
	size = MIN(size, wrap_size);
60012bac:	bf28      	it	cs
60012bae:	4610      	movcs	r0, r2
	*data = &buf->buffer[buf->put_head - base];
60012bb0:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
60012bb2:	6863      	ldr	r3, [r4, #4]
60012bb4:	4403      	add	r3, r0
60012bb6:	6063      	str	r3, [r4, #4]
}
60012bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

60012bba <ring_buf_put_finish>:
	finish_space = buf->put_head - buf->put_tail;
60012bba:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
60012bbe:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
60012bc0:	428a      	cmp	r2, r1
60012bc2:	d30c      	bcc.n	60012bde <ring_buf_put_finish+0x24>
	buf->put_tail += size;
60012bc4:	4419      	add	r1, r3
	wrap_size = buf->put_tail - buf->put_base;
60012bc6:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
60012bc8:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
60012bca:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
60012bce:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60012bd0:	428a      	cmp	r2, r1
60012bd2:	d901      	bls.n	60012bd8 <ring_buf_put_finish+0x1e>
	return 0;
60012bd4:	2000      	movs	r0, #0
60012bd6:	4770      	bx	lr
		buf->put_base += buf->size;
60012bd8:	4413      	add	r3, r2
60012bda:	60c3      	str	r3, [r0, #12]
60012bdc:	e7fa      	b.n	60012bd4 <ring_buf_put_finish+0x1a>
		return -EINVAL;
60012bde:	f06f 0015 	mvn.w	r0, #21
}
60012be2:	4770      	bx	lr

60012be4 <ring_buf_get_claim>:
{
60012be4:	b5f0      	push	{r4, r5, r6, r7, lr}
60012be6:	4604      	mov	r4, r0
	base = buf->get_base;
60012be8:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
60012bea:	6905      	ldr	r5, [r0, #16]
{
60012bec:	4694      	mov	ip, r2
	if (unlikely(wrap_size >= buf->size)) {
60012bee:	69c0      	ldr	r0, [r0, #28]
	wrap_size = buf->get_head - base;
60012bf0:	1baf      	subs	r7, r5, r6
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
60012bf2:	68a3      	ldr	r3, [r4, #8]
	if (unlikely(wrap_size >= buf->size)) {
60012bf4:	42b8      	cmp	r0, r7
60012bf6:	eba3 0205 	sub.w	r2, r3, r5
	*data = &buf->buffer[buf->get_head - base];
60012bfa:	6823      	ldr	r3, [r4, #0]
		base += buf->size;
60012bfc:	bf9c      	itt	ls
60012bfe:	1836      	addls	r6, r6, r0
		wrap_size -= buf->size;
60012c00:	1a3f      	subls	r7, r7, r0
	size = MIN(size, available_size);
60012c02:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
60012c04:	eba0 0007 	sub.w	r0, r0, r7
	*data = &buf->buffer[buf->get_head - base];
60012c08:	eba5 0506 	sub.w	r5, r5, r6
	size = MIN(size, available_size);
60012c0c:	bf28      	it	cs
60012c0e:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
60012c10:	442b      	add	r3, r5
	size = MIN(size, wrap_size);
60012c12:	4290      	cmp	r0, r2
	*data = &buf->buffer[buf->get_head - base];
60012c14:	600b      	str	r3, [r1, #0]
	size = MIN(size, wrap_size);
60012c16:	bf28      	it	cs
60012c18:	4610      	movcs	r0, r2
	buf->get_head += size;
60012c1a:	6923      	ldr	r3, [r4, #16]
60012c1c:	4403      	add	r3, r0
60012c1e:	6123      	str	r3, [r4, #16]
}
60012c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

60012c22 <ring_buf_get_finish>:
	finish_space = buf->get_head - buf->get_tail;
60012c22:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
60012c26:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
60012c28:	428a      	cmp	r2, r1
60012c2a:	d30c      	bcc.n	60012c46 <ring_buf_get_finish+0x24>
	buf->get_tail += size;
60012c2c:	4419      	add	r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60012c2e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
60012c32:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
60012c36:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60012c38:	428a      	cmp	r2, r1
60012c3a:	d901      	bls.n	60012c40 <ring_buf_get_finish+0x1e>
	return 0;
60012c3c:	2000      	movs	r0, #0
60012c3e:	4770      	bx	lr
		buf->get_base += buf->size;
60012c40:	4413      	add	r3, r2
60012c42:	6183      	str	r3, [r0, #24]
60012c44:	e7fa      	b.n	60012c3c <ring_buf_get_finish+0x1a>
		return -EINVAL;
60012c46:	f06f 0015 	mvn.w	r0, #21
}
60012c4a:	4770      	bx	lr

60012c4c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
60012c4c:	4040      	eors	r0, r0
60012c4e:	f380 8811 	msr	BASEPRI, r0
60012c52:	f04f 0004 	mov.w	r0, #4
60012c56:	df02      	svc	2
}
60012c58:	4770      	bx	lr

60012c5a <assert_print>:

void assert_print(const char *fmt, ...)
{
60012c5a:	b40f      	push	{r0, r1, r2, r3}
60012c5c:	b507      	push	{r0, r1, r2, lr}
60012c5e:	a904      	add	r1, sp, #16
60012c60:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
60012c64:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
60012c66:	f7ff fd4a 	bl	600126fe <vprintk>

	va_end(ap);
}
60012c6a:	b003      	add	sp, #12
60012c6c:	f85d eb04 	ldr.w	lr, [sp], #4
60012c70:	b004      	add	sp, #16
60012c72:	4770      	bx	lr

60012c74 <free_space>:
{
60012c74:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
60012c76:	6903      	ldr	r3, [r0, #16]
{
60012c78:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
60012c7a:	f013 0008 	ands.w	r0, r3, #8
60012c7e:	d109      	bne.n	60012c94 <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
60012c80:	6813      	ldr	r3, [r2, #0]
60012c82:	68d4      	ldr	r4, [r2, #12]
60012c84:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
60012c86:	bf97      	itett	ls
60012c88:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
60012c8a:	1ae3      	subhi	r3, r4, r3
	return true;
60012c8c:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
60012c8e:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
60012c90:	600b      	str	r3, [r1, #0]
}
60012c92:	bd10      	pop	{r4, pc}
60012c94:	2300      	movs	r3, #0
		return false;
60012c96:	4618      	mov	r0, r3
60012c98:	e7fa      	b.n	60012c90 <free_space+0x1c>

60012c9a <get_usage>:
{
60012c9a:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
60012c9c:	a901      	add	r1, sp, #4
{
60012c9e:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
60012ca0:	f7ff ffe8 	bl	60012c74 <free_space>
60012ca4:	b120      	cbz	r0, 60012cb0 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
60012ca6:	9b01      	ldr	r3, [sp, #4]
60012ca8:	68e2      	ldr	r2, [r4, #12]
60012caa:	3b01      	subs	r3, #1
60012cac:	4413      	add	r3, r2
60012cae:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
60012cb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
60012cb2:	9b01      	ldr	r3, [sp, #4]
60012cb4:	1ac0      	subs	r0, r0, r3
}
60012cb6:	3801      	subs	r0, #1
60012cb8:	b002      	add	sp, #8
60012cba:	bd10      	pop	{r4, pc}

60012cbc <idx_inc>:
{
60012cbc:	b510      	push	{r4, lr}
60012cbe:	4604      	mov	r4, r0
	uint32_t i = idx + val;
60012cc0:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
60012cc2:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
60012cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
60012cc6:	07d2      	lsls	r2, r2, #31
60012cc8:	d502      	bpl.n	60012cd0 <idx_inc+0x14>
		return i & (buffer->size - 1);
60012cca:	3b01      	subs	r3, #1
60012ccc:	4018      	ands	r0, r3
}
60012cce:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
60012cd0:	4298      	cmp	r0, r3
60012cd2:	bf28      	it	cs
60012cd4:	1ac0      	subcs	r0, r0, r3
60012cd6:	e7fa      	b.n	60012cce <idx_inc+0x12>

60012cd8 <rd_idx_inc>:
{
60012cd8:	b510      	push	{r4, lr}
60012cda:	4604      	mov	r4, r0
60012cdc:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
60012cde:	68c1      	ldr	r1, [r0, #12]
60012ce0:	f7ff ffec 	bl	60012cbc <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
60012ce4:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
60012ce6:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
60012ce8:	f023 0308 	bic.w	r3, r3, #8
60012cec:	6123      	str	r3, [r4, #16]
}
60012cee:	bd10      	pop	{r4, pc}

60012cf0 <add_skip_item>:
{
60012cf0:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
60012cf2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60012cf4:	6a02      	ldr	r2, [r0, #32]
{
60012cf6:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60012cf8:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
60012cfa:	f043 0302 	orr.w	r3, r3, #2
{
60012cfe:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60012d00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60012d04:	462a      	mov	r2, r5
60012d06:	6801      	ldr	r1, [r0, #0]
60012d08:	f7ff ffd8 	bl	60012cbc <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60012d0c:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60012d0e:	6861      	ldr	r1, [r4, #4]
60012d10:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60012d12:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60012d14:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60012d16:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
60012d18:	bf02      	ittt	eq
60012d1a:	6923      	ldreq	r3, [r4, #16]
60012d1c:	f043 0308 	orreq.w	r3, r3, #8
60012d20:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60012d22:	f7ff ffcb 	bl	60012cbc <idx_inc>
60012d26:	6060      	str	r0, [r4, #4]
}
60012d28:	bd38      	pop	{r3, r4, r5, pc}

60012d2a <drop_item_locked>:
{
60012d2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60012d2e:	68c7      	ldr	r7, [r0, #12]
{
60012d30:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60012d32:	6a06      	ldr	r6, [r0, #32]
{
60012d34:	4604      	mov	r4, r0
60012d36:	4688      	mov	r8, r1
60012d38:	4691      	mov	r9, r2
	if (item->hdr.busy && !item->hdr.valid) {
60012d3a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60012d3e:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
60012d42:	f003 0303 	and.w	r3, r3, #3
60012d46:	2b02      	cmp	r3, #2
60012d48:	f04f 0300 	mov.w	r3, #0
60012d4c:	d009      	beq.n	60012d62 <drop_item_locked+0x38>
	*item_to_drop = NULL;
60012d4e:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
60012d50:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
60012d54:	6923      	ldr	r3, [r4, #16]
60012d56:	0799      	lsls	r1, r3, #30
60012d58:	d410      	bmi.n	60012d7c <drop_item_locked+0x52>
		return false;
60012d5a:	2000      	movs	r0, #0
}
60012d5c:	b003      	add	sp, #12
60012d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
60012d62:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
60012d66:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
60012d68:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
60012d6a:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
60012d6e:	d0f1      	beq.n	60012d54 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
60012d70:	f7ff ffb2 	bl	60012cd8 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
60012d74:	68e3      	ldr	r3, [r4, #12]
60012d76:	60a3      	str	r3, [r4, #8]
		return true;
60012d78:	2001      	movs	r0, #1
60012d7a:	e7ef      	b.n	60012d5c <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
60012d7c:	69e3      	ldr	r3, [r4, #28]
60012d7e:	4650      	mov	r0, sl
60012d80:	4798      	blx	r3
	return item->hdr.valid;
60012d82:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
60012d86:	4605      	mov	r5, r0
	if (!is_valid(item)) {
60012d88:	07da      	lsls	r2, r3, #31
60012d8a:	d5e6      	bpl.n	60012d5a <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
60012d8c:	f013 0302 	ands.w	r3, r3, #2
60012d90:	d01d      	beq.n	60012dce <drop_item_locked+0xa4>
		if (free_wlen) {
60012d92:	f1b8 0f00 	cmp.w	r8, #0
60012d96:	d003      	beq.n	60012da0 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
60012d98:	4641      	mov	r1, r8
60012d9a:	4620      	mov	r0, r4
60012d9c:	f7ff ffa8 	bl	60012cf0 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
60012da0:	6861      	ldr	r1, [r4, #4]
60012da2:	462a      	mov	r2, r5
60012da4:	4620      	mov	r0, r4
60012da6:	f7ff ff89 	bl	60012cbc <idx_inc>
60012daa:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
60012dac:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
60012db0:	4299      	cmp	r1, r3
60012db2:	d104      	bne.n	60012dbe <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
60012db4:	462a      	mov	r2, r5
60012db6:	4620      	mov	r0, r4
60012db8:	f7ff ff80 	bl	60012cbc <idx_inc>
60012dbc:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
60012dbe:	68a3      	ldr	r3, [r4, #8]
60012dc0:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
60012dc2:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
60012dc4:	6923      	ldr	r3, [r4, #16]
60012dc6:	f043 0308 	orr.w	r3, r3, #8
60012dca:	6123      	str	r3, [r4, #16]
60012dcc:	e7d4      	b.n	60012d78 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
60012dce:	4601      	mov	r1, r0
60012dd0:	4620      	mov	r0, r4
60012dd2:	9301      	str	r3, [sp, #4]
60012dd4:	f7ff ff80 	bl	60012cd8 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
60012dd8:	68e2      	ldr	r2, [r4, #12]
60012dda:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
60012ddc:	f1b8 0f00 	cmp.w	r8, #0
60012de0:	d004      	beq.n	60012dec <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
60012de2:	6821      	ldr	r1, [r4, #0]
60012de4:	6a22      	ldr	r2, [r4, #32]
60012de6:	9b01      	ldr	r3, [sp, #4]
60012de8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
60012dec:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60012df0:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
60012df2:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60012df6:	6821      	ldr	r1, [r4, #0]
60012df8:	f7ff ff60 	bl	60012cbc <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
60012dfc:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60012dfe:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
60012e00:	f043 0308 	orr.w	r3, r3, #8
60012e04:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
60012e06:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
60012e0a:	f36f 0300 	bfc	r3, #0, #1
60012e0e:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
60012e12:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
60012e16:	e7af      	b.n	60012d78 <drop_item_locked+0x4e>

60012e18 <post_drop_action>:
{
60012e18:	b570      	push	{r4, r5, r6, lr}
60012e1a:	4604      	mov	r4, r0
60012e1c:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
60012e1e:	f7ff ff4d 	bl	60012cbc <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
60012e22:	6823      	ldr	r3, [r4, #0]
60012e24:	4283      	cmp	r3, r0
60012e26:	d105      	bne.n	60012e34 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
60012e28:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
60012e2a:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
60012e2c:	f023 0308 	bic.w	r3, r3, #8
60012e30:	6123      	str	r3, [r4, #16]
}
60012e32:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
60012e34:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
60012e36:	6a22      	ldr	r2, [r4, #32]
	buffer->wr_idx = idx_inc(buffer,
60012e38:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
60012e3a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
60012e3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
60012e42:	462a      	mov	r2, r5
60012e44:	6861      	ldr	r1, [r4, #4]
60012e46:	f7ff ff39 	bl	60012cbc <idx_inc>
60012e4a:	6060      	str	r0, [r4, #4]
60012e4c:	e7f1      	b.n	60012e32 <post_drop_action+0x1a>

60012e4e <max_utilization_update>:
{
60012e4e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
60012e50:	6903      	ldr	r3, [r0, #16]
{
60012e52:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
60012e54:	075b      	lsls	r3, r3, #29
60012e56:	d506      	bpl.n	60012e66 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
60012e58:	6a85      	ldr	r5, [r0, #40]	; 0x28
60012e5a:	f7ff ff1e 	bl	60012c9a <get_usage>
60012e5e:	4285      	cmp	r5, r0
60012e60:	bf2c      	ite	cs
60012e62:	62a5      	strcs	r5, [r4, #40]	; 0x28
60012e64:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
60012e66:	bd38      	pop	{r3, r4, r5, pc}

60012e68 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
60012e68:	6902      	ldr	r2, [r0, #16]
60012e6a:	6883      	ldr	r3, [r0, #8]
60012e6c:	0712      	lsls	r2, r2, #28
60012e6e:	d402      	bmi.n	60012e76 <mpsc_pbuf_is_pending+0xe>
60012e70:	6842      	ldr	r2, [r0, #4]
60012e72:	429a      	cmp	r2, r3
60012e74:	d200      	bcs.n	60012e78 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
60012e76:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
60012e78:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
60012e7a:	1e18      	subs	r0, r3, #0
60012e7c:	bf18      	it	ne
60012e7e:	2001      	movne	r0, #1
60012e80:	4770      	bx	lr

60012e82 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
60012e82:	4770      	bx	lr

60012e84 <z_arm_platform_init>:
		(&__ocram_data_end - &__ocram_data_start));
	/* Zero BSS region */
	memset(&__ocram_bss_start, 0, (&__ocram_bss_end - &__ocram_bss_start));
#endif
	/* Call CMSIS SystemInit */
	SystemInit();
60012e84:	f7f8 ba3c 	b.w	6000b300 <SystemInit>

60012e88 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
60012e88:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
60012e8a:	075b      	lsls	r3, r3, #29
60012e8c:	d40b      	bmi.n	60012ea6 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
60012e8e:	6803      	ldr	r3, [r0, #0]
60012e90:	8842      	ldrh	r2, [r0, #2]
60012e92:	f3c3 2349 	ubfx	r3, r3, #9, #10
60012e96:	f3c2 02cb 	ubfx	r2, r2, #3, #12
60012e9a:	1898      	adds	r0, r3, r2
60012e9c:	3017      	adds	r0, #23
60012e9e:	f020 0007 	bic.w	r0, r0, #7
60012ea2:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
60012ea4:	4770      	bx	lr
	return 0;
60012ea6:	2000      	movs	r0, #0
}
60012ea8:	4770      	bx	lr

60012eaa <dummy_timestamp>:
}
60012eaa:	2000      	movs	r0, #0
60012eac:	4770      	bx	lr

60012eae <atomic_inc>:
{
60012eae:	4603      	mov	r3, r0
}
60012eb0:	f3bf 8f5b 	dmb	ish
60012eb4:	e853 0f00 	ldrex	r0, [r3]
60012eb8:	1c42      	adds	r2, r0, #1
60012eba:	e843 2100 	strex	r1, r2, [r3]
60012ebe:	2900      	cmp	r1, #0
60012ec0:	d1f8      	bne.n	60012eb4 <atomic_inc+0x6>
60012ec2:	f3bf 8f5b 	dmb	ish
60012ec6:	4770      	bx	lr

60012ec8 <default_lf_get_timestamp>:
{
60012ec8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
60012eca:	f001 fc2b 	bl	60014724 <z_impl_k_uptime_ticks>
60012ece:	220a      	movs	r2, #10
60012ed0:	2300      	movs	r3, #0
60012ed2:	f7f0 fa57 	bl	60003384 <__aeabi_uldivmod>
}
60012ed6:	bd08      	pop	{r3, pc}

60012ed8 <z_log_vprintk>:
{
60012ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
60012eda:	2300      	movs	r3, #0
60012edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
60012ee0:	461a      	mov	r2, r3
60012ee2:	4619      	mov	r1, r3
60012ee4:	4618      	mov	r0, r3
60012ee6:	e9cd 3300 	strd	r3, r3, [sp]
60012eea:	f7f3 fa0d 	bl	60006308 <z_impl_z_log_msg_runtime_vcreate>
}
60012eee:	b005      	add	sp, #20
60012ef0:	f85d fb04 	ldr.w	pc, [sp], #4

60012ef4 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
60012ef4:	2001      	movs	r0, #1
60012ef6:	f7f2 bf2d 	b.w	60005d54 <z_log_dropped>

60012efa <z_log_get_tag>:
}
60012efa:	2000      	movs	r0, #0
60012efc:	4770      	bx	lr

60012efe <z_cbprintf_cpy>:
{
60012efe:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
60012f00:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
60012f04:	460c      	mov	r4, r1
60012f06:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
60012f08:	1b9b      	subs	r3, r3, r6
60012f0a:	428b      	cmp	r3, r1
60012f0c:	d30a      	bcc.n	60012f24 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
60012f0e:	6813      	ldr	r3, [r2, #0]
60012f10:	460a      	mov	r2, r1
60012f12:	4601      	mov	r1, r0
60012f14:	1998      	adds	r0, r3, r6
60012f16:	f7f0 fa4f 	bl	600033b8 <memcpy>
	desc->off += len;
60012f1a:	68ab      	ldr	r3, [r5, #8]
	return len;
60012f1c:	4620      	mov	r0, r4
	desc->off += len;
60012f1e:	4423      	add	r3, r4
60012f20:	60ab      	str	r3, [r5, #8]
}
60012f22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
60012f24:	f06f 001b 	mvn.w	r0, #27
60012f28:	e7fb      	b.n	60012f22 <z_cbprintf_cpy+0x24>

60012f2a <z_log_msg_finalize>:
{
60012f2a:	b570      	push	{r4, r5, r6, lr}
60012f2c:	460e      	mov	r6, r1
60012f2e:	4615      	mov	r5, r2
60012f30:	4619      	mov	r1, r3
60012f32:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
60012f36:	4604      	mov	r4, r0
60012f38:	b918      	cbnz	r0, 60012f42 <z_log_msg_finalize+0x18>
}
60012f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
60012f3e:	f7f2 bf09 	b.w	60005d54 <z_log_dropped>
	if (data) {
60012f42:	b12b      	cbz	r3, 60012f50 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
60012f44:	3010      	adds	r0, #16
60012f46:	f3c5 2349 	ubfx	r3, r5, #9, #10
60012f4a:	4418      	add	r0, r3
60012f4c:	f7f0 fa34 	bl	600033b8 <memcpy>
	z_log_msg_commit(msg);
60012f50:	4620      	mov	r0, r4
	msg->hdr.source = source;
60012f52:	e9c4 5600 	strd	r5, r6, [r4]
}
60012f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
60012f5a:	f7f3 b929 	b.w	600061b0 <z_log_msg_commit>

60012f5e <buffer_write>:
{
60012f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60012f60:	4606      	mov	r6, r0
60012f62:	460d      	mov	r5, r1
60012f64:	4614      	mov	r4, r2
60012f66:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
60012f68:	4621      	mov	r1, r4
60012f6a:	4628      	mov	r0, r5
60012f6c:	463a      	mov	r2, r7
60012f6e:	47b0      	blx	r6
	} while (len != 0);
60012f70:	1a24      	subs	r4, r4, r0
		buf += processed;
60012f72:	4405      	add	r5, r0
	} while (len != 0);
60012f74:	d1f8      	bne.n	60012f68 <buffer_write+0xa>
}
60012f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60012f78 <cbvprintf>:
{
60012f78:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
60012f7a:	2400      	movs	r4, #0
60012f7c:	9400      	str	r4, [sp, #0]
60012f7e:	f7f1 fc2f 	bl	600047e0 <z_cbvprintf_impl>
}
60012f82:	b002      	add	sp, #8
60012f84:	bd10      	pop	{r4, pc}

60012f86 <log_output_flush>:
{
60012f86:	b510      	push	{r4, lr}
		     output->control_block->offset,
60012f88:	6842      	ldr	r2, [r0, #4]
{
60012f8a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
60012f8c:	6881      	ldr	r1, [r0, #8]
60012f8e:	6800      	ldr	r0, [r0, #0]
60012f90:	e9d2 2300 	ldrd	r2, r3, [r2]
60012f94:	f7ff ffe3 	bl	60012f5e <buffer_write>
	output->control_block->offset = 0;
60012f98:	6863      	ldr	r3, [r4, #4]
60012f9a:	2200      	movs	r2, #0
60012f9c:	601a      	str	r2, [r3, #0]
}
60012f9e:	bd10      	pop	{r4, pc}

60012fa0 <cr_out_func>:
	if (c == '\n') {
60012fa0:	280a      	cmp	r0, #10
{
60012fa2:	b538      	push	{r3, r4, r5, lr}
60012fa4:	4604      	mov	r4, r0
60012fa6:	460d      	mov	r5, r1
	if (c == '\n') {
60012fa8:	d102      	bne.n	60012fb0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
60012faa:	200d      	movs	r0, #13
60012fac:	f7f3 fa30 	bl	60006410 <out_func>
	out_func(c, ctx);
60012fb0:	4629      	mov	r1, r5
60012fb2:	4620      	mov	r0, r4
60012fb4:	f7f3 fa2c 	bl	60006410 <out_func>
}
60012fb8:	2000      	movs	r0, #0
60012fba:	bd38      	pop	{r3, r4, r5, pc}

60012fbc <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
60012fbc:	2300      	movs	r3, #0
60012fbe:	f7f3 b93d 	b.w	6000623c <z_impl_z_log_msg_static_create>

60012fc2 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
60012fc2:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
60012fc6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
60012fca:	d001      	beq.n	60012fd0 <get_ep_bm_from_addr+0xe>
60012fcc:	f7f3 bda4 	b.w	60006b18 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
60012fd0:	f010 0f80 	tst.w	r0, #128	; 0x80
60012fd4:	f04f 0001 	mov.w	r0, #1
		ep_bm = BIT(ep_idx + 16);
60012fd8:	bf18      	it	ne
60012fda:	3210      	addne	r2, #16
		ep_bm = BIT(ep_idx);
60012fdc:	4090      	lsls	r0, r2
}
60012fde:	4770      	bx	lr

60012fe0 <usb_get_dev_data_by_cfg>:
	return list->head;
60012fe0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60012fe2:	b138      	cbz	r0, 60012ff4 <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
60012fe4:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60012fe8:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
60012fea:	685b      	ldr	r3, [r3, #4]
60012fec:	428b      	cmp	r3, r1
60012fee:	d001      	beq.n	60012ff4 <usb_get_dev_data_by_cfg+0x14>
	return node->next;
60012ff0:	6840      	ldr	r0, [r0, #4]
60012ff2:	e7f6      	b.n	60012fe2 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
60012ff4:	4770      	bx	lr

60012ff6 <usb_get_dev_data_by_iface>:
	return list->head;
60012ff6:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60012ff8:	b148      	cbz	r0, 6001300e <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
60012ffa:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60012ffe:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
60013000:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
60013002:	685b      	ldr	r3, [r3, #4]
60013004:	789b      	ldrb	r3, [r3, #2]
60013006:	428b      	cmp	r3, r1
60013008:	d001      	beq.n	6001300e <usb_get_dev_data_by_iface+0x18>
	return node->next;
6001300a:	6840      	ldr	r0, [r0, #4]
6001300c:	e7f4      	b.n	60012ff8 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
6001300e:	4770      	bx	lr

60013010 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
60013010:	b530      	push	{r4, r5, lr}
	return list->head;
60013012:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60013014:	b188      	cbz	r0, 6001303a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
60013016:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
6001301a:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
6001301c:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
6001301e:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
60013020:	7f1d      	ldrb	r5, [r3, #28]
60013022:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
60013024:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
60013026:	b2dc      	uxtb	r4, r3
60013028:	42a5      	cmp	r5, r4
6001302a:	d801      	bhi.n	60013030 <usb_get_dev_data_by_ep+0x20>
	return node->next;
6001302c:	6840      	ldr	r0, [r0, #4]
6001302e:	e7f1      	b.n	60013014 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
60013030:	3301      	adds	r3, #1
60013032:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
60013036:	428c      	cmp	r4, r1
60013038:	d1f5      	bne.n	60013026 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
6001303a:	bd30      	pop	{r4, r5, pc}

6001303c <usb_transfer_is_busy>:
{
6001303c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
6001303e:	f7f4 fbb9 	bl	600077b4 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
60013042:	b128      	cbz	r0, 60013050 <usb_transfer_is_busy+0x14>
60013044:	6840      	ldr	r0, [r0, #4]
60013046:	f110 0f10 	cmn.w	r0, #16
6001304a:	bf14      	ite	ne
6001304c:	2000      	movne	r0, #0
6001304e:	2001      	moveq	r0, #1
}
60013050:	bd08      	pop	{r3, pc}

60013052 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
60013052:	1c4b      	adds	r3, r1, #1
	desc->if0.bInterfaceNumber = bInterfaceNumber;
60013054:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
60013056:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
60013058:	b2db      	uxtb	r3, r3
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
6001305a:	f800 1c06 	strb.w	r1, [r0, #-6]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
6001305e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
60013062:	76c3      	strb	r3, [r0, #27]
}
60013064:	4770      	bx	lr

60013066 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
60013066:	e950 3102 	ldrd	r3, r1, [r0, #-8]
6001306a:	f8d0 025c 	ldr.w	r0, [r0, #604]	; 0x25c
6001306e:	4718      	bx	r3

60013070 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60013070:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
60013072:	2200      	movs	r2, #0
60013074:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
60013078:	4770      	bx	lr

6001307a <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6001307a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
6001307c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
60013080:	b108      	cbz	r0, 60013086 <cdc_acm_irq_tx_ready+0xc>
60013082:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
60013086:	4770      	bx	lr

60013088 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60013088:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
6001308a:	2200      	movs	r2, #0
6001308c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
60013090:	4770      	bx	lr

60013092 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
60013092:	6903      	ldr	r3, [r0, #16]
}
60013094:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
60013098:	4770      	bx	lr

6001309a <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6001309a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
6001309c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
600130a0:	b112      	cbz	r2, 600130a8 <cdc_acm_irq_is_pending+0xe>
600130a2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
600130a6:	b92a      	cbnz	r2, 600130b4 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
600130a8:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
600130ac:	b118      	cbz	r0, 600130b6 <cdc_acm_irq_is_pending+0x1c>
600130ae:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
600130b2:	4770      	bx	lr
		return 1;
600130b4:	2001      	movs	r0, #1
}
600130b6:	4770      	bx	lr

600130b8 <cdc_acm_irq_update>:
}
600130b8:	2001      	movs	r0, #1
600130ba:	4770      	bx	lr

600130bc <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
600130bc:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
600130be:	e9c3 1200 	strd	r1, r2, [r3]
}
600130c2:	4770      	bx	lr

600130c4 <cdc_acm_configure>:
}
600130c4:	2000      	movs	r0, #0
600130c6:	4770      	bx	lr

600130c8 <cdc_acm_config_get>:
{
600130c8:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
600130ca:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
600130cc:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
600130d0:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
600130d2:	f893 2258 	ldrb.w	r2, [r3, #600]	; 0x258
600130d6:	b16a      	cbz	r2, 600130f4 <cdc_acm_config_get+0x2c>
600130d8:	2a01      	cmp	r2, #1
600130da:	bf0c      	ite	eq
600130dc:	2202      	moveq	r2, #2
600130de:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
600130e0:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
600130e2:	f893 2259 	ldrb.w	r2, [r3, #601]	; 0x259
600130e6:	1e50      	subs	r0, r2, #1
600130e8:	2803      	cmp	r0, #3
600130ea:	d805      	bhi.n	600130f8 <cdc_acm_config_get+0x30>
600130ec:	e8df f000 	tbb	[pc, r0]
600130f0:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
600130f4:	2201      	movs	r2, #1
600130f6:	e7f3      	b.n	600130e0 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
600130f8:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
600130fa:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
600130fc:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
60013100:	2b06      	cmp	r3, #6
60013102:	d009      	beq.n	60013118 <cdc_acm_config_get+0x50>
60013104:	2b07      	cmp	r3, #7
60013106:	d009      	beq.n	6001311c <cdc_acm_config_get+0x54>
60013108:	2b05      	cmp	r3, #5
6001310a:	bf0c      	ite	eq
6001310c:	2300      	moveq	r3, #0
6001310e:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
60013110:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
60013112:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
60013114:	71c8      	strb	r0, [r1, #7]
}
60013116:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
60013118:	2301      	movs	r3, #1
6001311a:	e7f9      	b.n	60013110 <cdc_acm_config_get+0x48>
6001311c:	2302      	movs	r3, #2
6001311e:	e7f7      	b.n	60013110 <cdc_acm_config_get+0x48>

60013120 <cdc_acm_fifo_read>:
{
60013120:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60013122:	6904      	ldr	r4, [r0, #16]
{
60013124:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
60013126:	f8d4 024c 	ldr.w	r0, [r4, #588]	; 0x24c
6001312a:	f7f2 f9f3 	bl	60005514 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
6001312e:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
60013132:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
60013134:	691a      	ldr	r2, [r3, #16]
60013136:	6899      	ldr	r1, [r3, #8]
60013138:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
6001313a:	bf04      	itt	eq
6001313c:	2200      	moveq	r2, #0
6001313e:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
60013142:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
60013146:	b1a2      	cbz	r2, 60013172 <cdc_acm_fifo_read+0x52>
	return buf->size - (buf->put_head - buf->get_tail);
60013148:	685a      	ldr	r2, [r3, #4]
6001314a:	6959      	ldr	r1, [r3, #20]
6001314c:	69db      	ldr	r3, [r3, #28]
6001314e:	1a52      	subs	r2, r2, r1
60013150:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
60013152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
60013156:	d30c      	bcc.n	60013172 <cdc_acm_fifo_read+0x52>
			if (dev_data->configured) {
60013158:	f894 325e 	ldrb.w	r3, [r4, #606]	; 0x25e
6001315c:	b133      	cbz	r3, 6001316c <cdc_acm_fifo_read+0x4c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
6001315e:	686b      	ldr	r3, [r5, #4]
60013160:	4622      	mov	r2, r4
60013162:	2100      	movs	r1, #0
60013164:	6a1b      	ldr	r3, [r3, #32]
60013166:	7b18      	ldrb	r0, [r3, #12]
60013168:	f7f4 fe62 	bl	60007e30 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
6001316c:	2300      	movs	r3, #0
6001316e:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
}
60013172:	4630      	mov	r0, r6
60013174:	bd70      	pop	{r4, r5, r6, pc}

60013176 <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
60013176:	2201      	movs	r2, #1
{
60013178:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
6001317a:	f7ff ffd1 	bl	60013120 <cdc_acm_fifo_read>
}
6001317e:	3801      	subs	r0, #1
60013180:	bf18      	it	ne
60013182:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60013186:	bd08      	pop	{r3, pc}

60013188 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
60013188:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
6001318a:	6800      	ldr	r0, [r0, #0]
6001318c:	f7f4 befa 	b.w	60007f84 <z_arm_fatal_error>

60013190 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
60013190:	2100      	movs	r1, #0
60013192:	2001      	movs	r0, #1
60013194:	f7f4 bef6 	b.w	60007f84 <z_arm_fatal_error>

60013198 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
60013198:	b508      	push	{r3, lr}
	handler();
6001319a:	f7f4 ff99 	bl	600080d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
6001319e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
600131a2:	f7f5 b867 	b.w	60008274 <z_arm_exc_exit>

600131a6 <z_log_msg_static_create.constprop.0>:
600131a6:	2300      	movs	r3, #0
600131a8:	f7f3 b848 	b.w	6000623c <z_impl_z_log_msg_static_create>

600131ac <_stdout_hook_default>:
}
600131ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600131b0:	4770      	bx	lr

600131b2 <_stdin_hook_default>:
}
600131b2:	2000      	movs	r0, #0
600131b4:	4770      	bx	lr

600131b6 <_read>:
{
600131b6:	4608      	mov	r0, r1
600131b8:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
600131ba:	f7f5 bd99 	b.w	60008cf0 <z_impl_zephyr_read_stdin>

600131be <_write>:
{
600131be:	4608      	mov	r0, r1
600131c0:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
600131c2:	f7f5 bda9 	b.w	60008d18 <z_impl_zephyr_write_stdout>

600131c6 <_close>:
int _close(int file)
600131c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600131ca:	4770      	bx	lr

600131cc <_lseek>:
}
600131cc:	2000      	movs	r0, #0
600131ce:	4770      	bx	lr

600131d0 <_isatty>:
}
600131d0:	2802      	cmp	r0, #2
600131d2:	bfcc      	ite	gt
600131d4:	2000      	movgt	r0, #0
600131d6:	2001      	movle	r0, #1
600131d8:	4770      	bx	lr

600131da <_kill>:
}
600131da:	2000      	movs	r0, #0
600131dc:	4770      	bx	lr

600131de <_getpid>:
}
600131de:	2000      	movs	r0, #0
600131e0:	4770      	bx	lr

600131e2 <_fstat>:
	st->st_mode = S_IFCHR;
600131e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
600131e6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
600131e8:	604b      	str	r3, [r1, #4]
}
600131ea:	4770      	bx	lr

600131ec <z_log_msg_static_create.constprop.0>:
600131ec:	2300      	movs	r3, #0
600131ee:	f7f3 b825 	b.w	6000623c <z_impl_z_log_msg_static_create>

600131f2 <usb_dc_ep_read>:
{
600131f2:	b570      	push	{r4, r5, r6, lr}
600131f4:	4604      	mov	r4, r0
600131f6:	460e      	mov	r6, r1
600131f8:	4615      	mov	r5, r2
	int retval = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
600131fa:	f7f6 fad9 	bl	600097b0 <usb_dc_ep_read_wait>
	if (retval) {
600131fe:	b930      	cbnz	r0, 6001320e <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
60013200:	b906      	cbnz	r6, 60013204 <usb_dc_ep_read+0x12>
60013202:	b125      	cbz	r5, 6001320e <usb_dc_ep_read+0x1c>
	return usb_dc_ep_read_continue(ep);
60013204:	4620      	mov	r0, r4
}
60013206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return usb_dc_ep_read_continue(ep);
6001320a:	f7f6 bb69 	b.w	600098e0 <usb_dc_ep_read_continue>
}
6001320e:	bd70      	pop	{r4, r5, r6, pc}

60013210 <mcux_12b1msps_sar_adc_start_channel>:
{
60013210:	b513      	push	{r0, r1, r4, lr}
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
60013212:	6902      	ldr	r2, [r0, #16]
	ADC_SetChannelConfig(config->base, channel_group, &channel_config);
60013214:	2100      	movs	r1, #0
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
60013216:	6844      	ldr	r4, [r0, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
60013218:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
6001321c:	2b00      	cmp	r3, #0
6001321e:	fa93 f3a3 	rbit	r3, r3
60013222:	fab3 f383 	clz	r3, r3
	data->channel_id = find_lsb_set(data->channels) - 1;
60013226:	bf08      	it	eq
60013228:	23ff      	moveq	r3, #255	; 0xff
6001322a:	f882 30a4 	strb.w	r3, [r2, #164]	; 0xa4
	channel_config.enableInterruptOnConversionCompleted = true;
6001322e:	2201      	movs	r2, #1
	channel_config.channelNumber = data->channel_id;
60013230:	9300      	str	r3, [sp, #0]
	channel_config.enableInterruptOnConversionCompleted = true;
60013232:	f88d 2004 	strb.w	r2, [sp, #4]
	ADC_SetChannelConfig(config->base, channel_group, &channel_config);
60013236:	466a      	mov	r2, sp
60013238:	6820      	ldr	r0, [r4, #0]
6001323a:	f7f9 faab 	bl	6000c794 <ADC_SetChannelConfig>
}
6001323e:	b002      	add	sp, #8
60013240:	bd10      	pop	{r4, pc}

60013242 <adc_context_start_sampling>:
	data->channels = ctx->sequence.channels;
60013242:	6e83      	ldr	r3, [r0, #104]	; 0x68
60013244:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	data->repeat_buffer = data->buffer;
60013248:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
6001324c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	mcux_12b1msps_sar_adc_start_channel(data->dev);
60013250:	f850 0c08 	ldr.w	r0, [r0, #-8]
60013254:	f7ff bfdc 	b.w	60013210 <mcux_12b1msps_sar_adc_start_channel>

60013258 <mcux_12b1msps_sar_adc_config_func_0>:
			    mcux_12b1msps_sar_adc_isr, DEVICE_DT_INST_GET(n), 0);	       \
									       \
		irq_enable(DT_INST_IRQN(n));				       \
	}

DT_INST_FOREACH_STATUS_OKAY(ACD_MCUX_12B1MSPS_SAR_INIT)
60013258:	2200      	movs	r2, #0
6001325a:	2043      	movs	r0, #67	; 0x43
6001325c:	b508      	push	{r3, lr}
6001325e:	4611      	mov	r1, r2
60013260:	f7f4 ff04 	bl	6000806c <z_arm_irq_priority_set>
60013264:	2043      	movs	r0, #67	; 0x43
60013266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
6001326a:	f7f4 bef1 	b.w	60008050 <arch_irq_enable>

6001326e <adc_context_on_timer_expired>:
{
6001326e:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
60013270:	3808      	subs	r0, #8
60013272:	b410      	push	{r4}
60013274:	f3bf 8f5b 	dmb	ish
60013278:	e850 2f00 	ldrex	r2, [r0]
6001327c:	1c51      	adds	r1, r2, #1
6001327e:	e840 1400 	strex	r4, r1, [r0]
60013282:	2c00      	cmp	r4, #0
60013284:	d1f8      	bne.n	60013278 <adc_context_on_timer_expired+0xa>
60013286:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
6001328a:	b912      	cbnz	r2, 60013292 <adc_context_on_timer_expired+0x24>
}
6001328c:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
6001328e:	f7ff bfd8 	b.w	60013242 <adc_context_start_sampling>
		ctx->status = -EBUSY;
60013292:	f06f 020f 	mvn.w	r2, #15
}
60013296:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
60013298:	659a      	str	r2, [r3, #88]	; 0x58
}
6001329a:	4770      	bx	lr

6001329c <mcux_12b1msps_sar_adc_isr>:
{
6001329c:	b510      	push	{r4, lr}
	ADC_Type *base = config->base;
6001329e:	6843      	ldr	r3, [r0, #4]
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
600132a0:	6904      	ldr	r4, [r0, #16]
	ADC_Type *base = config->base;
600132a2:	681b      	ldr	r3, [r3, #0]
    return base->R[channelGroup];
600132a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	*data->buffer++ = result;
600132a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
600132aa:	1c99      	adds	r1, r3, #2
600132ac:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	result = ADC_GetChannelConversionValue(base, channel_group);
600132b0:	801a      	strh	r2, [r3, #0]
	data->channels &= ~BIT(data->channel_id);
600132b2:	2201      	movs	r2, #1
600132b4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
600132b8:	409a      	lsls	r2, r3
600132ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
600132be:	ea23 0302 	bic.w	r3, r3, r2
600132c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (data->channels) {
600132c6:	b11b      	cbz	r3, 600132d0 <mcux_12b1msps_sar_adc_isr+0x34>
}
600132c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mcux_12b1msps_sar_adc_start_channel(dev);
600132cc:	f7ff bfa0 	b.w	60013210 <mcux_12b1msps_sar_adc_start_channel>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
600132d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
600132d2:	b3bb      	cbz	r3, 60013344 <mcux_12b1msps_sar_adc_isr+0xa8>
		adc_sequence_callback callback = ctx->options.callback;
600132d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
600132d8:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
		if (callback) {
600132dc:	b133      	cbz	r3, 600132ec <mcux_12b1msps_sar_adc_isr+0x50>
			action = callback(dev,
600132de:	f104 016c 	add.w	r1, r4, #108	; 0x6c
600132e2:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
600132e4:	2801      	cmp	r0, #1
600132e6:	d00b      	beq.n	60013300 <mcux_12b1msps_sar_adc_isr+0x64>
600132e8:	2802      	cmp	r0, #2
600132ea:	d024      	beq.n	60013336 <mcux_12b1msps_sar_adc_isr+0x9a>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
600132ec:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
600132f0:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
600132f4:	429a      	cmp	r2, r3
600132f6:	d91e      	bls.n	60013336 <mcux_12b1msps_sar_adc_isr+0x9a>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
600132f8:	3301      	adds	r3, #1
600132fa:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			} else {
				finish = true;
			}
		}

		if (!finish) {
600132fe:	e003      	b.n	60013308 <mcux_12b1msps_sar_adc_isr+0x6c>
		data->buffer = data->repeat_buffer;
60013300:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
60013304:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
60013308:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		adc_context_on_sampling_done(&data->ctx, dev);
6001330c:	f104 0008 	add.w	r0, r4, #8
60013310:	b91b      	cbnz	r3, 6001331a <mcux_12b1msps_sar_adc_isr+0x7e>
}
60013312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
60013316:	f7ff bf94 	b.w	60013242 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
6001331a:	f3bf 8f5b 	dmb	ish
6001331e:	e850 3f00 	ldrex	r3, [r0]
60013322:	1e5a      	subs	r2, r3, #1
60013324:	e840 2100 	strex	r1, r2, [r0]
60013328:	2900      	cmp	r1, #0
6001332a:	d1f8      	bne.n	6001331e <mcux_12b1msps_sar_adc_isr+0x82>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
6001332c:	2b01      	cmp	r3, #1
6001332e:	f3bf 8f5b 	dmb	ish
60013332:	dcee      	bgt.n	60013312 <mcux_12b1msps_sar_adc_isr+0x76>
60013334:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
60013336:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
6001333a:	b11b      	cbz	r3, 60013344 <mcux_12b1msps_sar_adc_isr+0xa8>
	z_impl_k_timer_stop(timer);
6001333c:	f104 0010 	add.w	r0, r4, #16
60013340:	f001 fa20 	bl	60014784 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
60013344:	f104 0058 	add.w	r0, r4, #88	; 0x58
60013348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6001334c:	f7fa bbe4 	b.w	6000db18 <z_impl_k_sem_give>

60013350 <mcux_ccm_on>:
}
60013350:	2000      	movs	r0, #0
60013352:	4770      	bx	lr

60013354 <mcux_ccm_init>:

static int mcux_ccm_init(const struct device *dev)
{
	return 0;
}
60013354:	2000      	movs	r0, #0
60013356:	4770      	bx	lr

60013358 <mcux_ccm_off>:
static int mcux_ccm_off(const struct device *dev,
60013358:	2000      	movs	r0, #0
6001335a:	4770      	bx	lr

6001335c <mcux_igpio_port_get_raw>:
	GPIO_Type *base = config->base;
6001335c:	6843      	ldr	r3, [r0, #4]
}
6001335e:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60013360:	685b      	ldr	r3, [r3, #4]
	*value = base->DR;
60013362:	681b      	ldr	r3, [r3, #0]
60013364:	600b      	str	r3, [r1, #0]
}
60013366:	4770      	bx	lr

60013368 <mcux_igpio_port_set_masked_raw>:
	GPIO_Type *base = config->base;
60013368:	6843      	ldr	r3, [r0, #4]
6001336a:	685b      	ldr	r3, [r3, #4]
	base->DR = (base->DR & ~mask) | (mask & value);
6001336c:	6818      	ldr	r0, [r3, #0]
6001336e:	4042      	eors	r2, r0
60013370:	400a      	ands	r2, r1
60013372:	4042      	eors	r2, r0
}
60013374:	2000      	movs	r0, #0
	base->DR = (base->DR & ~mask) | (mask & value);
60013376:	601a      	str	r2, [r3, #0]
}
60013378:	4770      	bx	lr

6001337a <mcux_igpio_port_set_bits_raw>:
	GPIO_Type *base = config->base;
6001337a:	6843      	ldr	r3, [r0, #4]
}
6001337c:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6001337e:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortSet(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_SET) && (FSL_FEATURE_IGPIO_HAS_DR_SET == 1))
    base->DR_SET = mask;
60013380:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
60013384:	4770      	bx	lr

60013386 <mcux_igpio_port_clear_bits_raw>:
	GPIO_Type *base = config->base;
60013386:	6843      	ldr	r3, [r0, #4]
}
60013388:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6001338a:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortClear(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && (FSL_FEATURE_IGPIO_HAS_DR_CLEAR == 1))
    base->DR_CLEAR = mask;
6001338c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
}
60013390:	4770      	bx	lr

60013392 <mcux_igpio_port_toggle_bits>:
	GPIO_Type *base = config->base;
60013392:	6843      	ldr	r3, [r0, #4]
}
60013394:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60013396:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortToggle(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_TOGGLE) && (FSL_FEATURE_IGPIO_HAS_DR_TOGGLE == 1))
    base->DR_TOGGLE = mask;
60013398:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
}
6001339c:	4770      	bx	lr

6001339e <mcux_igpio_pin_interrupt_configure>:
{
6001339e:	b570      	push	{r4, r5, r6, lr}
	if (mode == GPIO_INT_MODE_DISABLED) {
600133a0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	GPIO_Type *base = config->base;
600133a4:	6840      	ldr	r0, [r0, #4]
600133a6:	6840      	ldr	r0, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
600133a8:	d113      	bne.n	600133d2 <mcux_igpio_pin_interrupt_configure+0x34>
	__asm__ volatile(
600133aa:	f04f 0310 	mov.w	r3, #16
600133ae:	f3ef 8411 	mrs	r4, BASEPRI
600133b2:	f383 8812 	msr	BASEPRI_MAX, r3
600133b6:	f3bf 8f6f 	isb	sy
		WRITE_BIT(base->IMR, pin, 0);
600133ba:	2201      	movs	r2, #1
600133bc:	6943      	ldr	r3, [r0, #20]
600133be:	408a      	lsls	r2, r1
600133c0:	ea23 0302 	bic.w	r3, r3, r2
	WRITE_BIT(base->IMR, pin, 1);
600133c4:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
600133c6:	f384 8811 	msr	BASEPRI, r4
600133ca:	f3bf 8f6f 	isb	sy
		return 0;
600133ce:	2000      	movs	r0, #0
}
600133d0:	bd70      	pop	{r4, r5, r6, pc}
	if ((mode == GPIO_INT_MODE_EDGE) && (trig == GPIO_INT_TRIG_LOW)) {
600133d2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
600133d6:	d12b      	bne.n	60013430 <mcux_igpio_pin_interrupt_configure+0x92>
600133d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
600133dc:	d030      	beq.n	60013440 <mcux_igpio_pin_interrupt_configure+0xa2>
	} else if ((mode == GPIO_INT_MODE_EDGE) &&
600133de:	f103 457c 	add.w	r5, r3, #4227858432	; 0xfc000000
600133e2:	426a      	negs	r2, r5
600133e4:	416a      	adcs	r2, r5
600133e6:	0052      	lsls	r2, r2, #1
	if (pin < 16) {
600133e8:	290f      	cmp	r1, #15
600133ea:	d82d      	bhi.n	60013448 <mcux_igpio_pin_interrupt_configure+0xaa>
		shift = 2 * pin;
600133ec:	004d      	lsls	r5, r1, #1
		base->ICR1 = (base->ICR1 & ~(3 << shift)) | (icr << shift);
600133ee:	2603      	movs	r6, #3
600133f0:	68c4      	ldr	r4, [r0, #12]
600133f2:	40ae      	lsls	r6, r5
600133f4:	fa02 f505 	lsl.w	r5, r2, r5
600133f8:	ea24 0406 	bic.w	r4, r4, r6
600133fc:	432c      	orrs	r4, r5
600133fe:	60c4      	str	r4, [r0, #12]
	__asm__ volatile(
60013400:	f04f 0210 	mov.w	r2, #16
60013404:	f3ef 8411 	mrs	r4, BASEPRI
60013408:	f382 8812 	msr	BASEPRI_MAX, r2
6001340c:	f3bf 8f6f 	isb	sy
	WRITE_BIT(base->EDGE_SEL, pin, trig == GPIO_INT_TRIG_BOTH);
60013410:	2201      	movs	r2, #1
60013412:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
60013416:	69c3      	ldr	r3, [r0, #28]
60013418:	fa02 f201 	lsl.w	r2, r2, r1
6001341c:	bf0c      	ite	eq
6001341e:	4313      	orreq	r3, r2
60013420:	4393      	bicne	r3, r2
60013422:	61c3      	str	r3, [r0, #28]
	WRITE_BIT(base->ISR, pin, 1);
60013424:	6983      	ldr	r3, [r0, #24]
60013426:	4313      	orrs	r3, r2
60013428:	6183      	str	r3, [r0, #24]
	WRITE_BIT(base->IMR, pin, 1);
6001342a:	6943      	ldr	r3, [r0, #20]
6001342c:	4313      	orrs	r3, r2
6001342e:	e7c9      	b.n	600133c4 <mcux_igpio_pin_interrupt_configure+0x26>
	} else if ((mode == GPIO_INT_MODE_LEVEL) &&
60013430:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
60013434:	d106      	bne.n	60013444 <mcux_igpio_pin_interrupt_configure+0xa6>
60013436:	f103 447c 	add.w	r4, r3, #4227858432	; 0xfc000000
6001343a:	4262      	negs	r2, r4
6001343c:	4162      	adcs	r2, r4
6001343e:	e7d3      	b.n	600133e8 <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 3;
60013440:	2203      	movs	r2, #3
60013442:	e7d1      	b.n	600133e8 <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 0;
60013444:	2200      	movs	r2, #0
60013446:	e7cf      	b.n	600133e8 <mcux_igpio_pin_interrupt_configure+0x4a>
	} else if (pin < 32) {
60013448:	291f      	cmp	r1, #31
6001344a:	d80b      	bhi.n	60013464 <mcux_igpio_pin_interrupt_configure+0xc6>
		shift = 2 * (pin - 16);
6001344c:	f1a1 0510 	sub.w	r5, r1, #16
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
60013450:	2603      	movs	r6, #3
60013452:	6904      	ldr	r4, [r0, #16]
		shift = 2 * (pin - 16);
60013454:	006d      	lsls	r5, r5, #1
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
60013456:	40ae      	lsls	r6, r5
60013458:	40aa      	lsls	r2, r5
6001345a:	ea24 0406 	bic.w	r4, r4, r6
6001345e:	4322      	orrs	r2, r4
60013460:	6102      	str	r2, [r0, #16]
60013462:	e7cd      	b.n	60013400 <mcux_igpio_pin_interrupt_configure+0x62>
		return -EINVAL;
60013464:	f06f 0015 	mvn.w	r0, #21
60013468:	e7b2      	b.n	600133d0 <mcux_igpio_pin_interrupt_configure+0x32>

6001346a <mcux_igpio_5_init>:
			   (MCUX_IGPIO_IRQ_INIT(n, 1);))		\
									\
		return 0;						\
	}

DT_INST_FOREACH_STATUS_OKAY(MCUX_IGPIO_INIT)
6001346a:	2000      	movs	r0, #0
6001346c:	4770      	bx	lr

6001346e <mcux_igpio_configure>:
{
6001346e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct mcux_igpio_config *config = dev->config;
60013470:	6843      	ldr	r3, [r0, #4]
{
60013472:	4615      	mov	r5, r2
60013474:	b087      	sub	sp, #28
60013476:	460f      	mov	r7, r1
	GPIO_Type *base = config->base;
60013478:	685e      	ldr	r6, [r3, #4]
	for (i = 0; i < config->gap_count; i++) {
6001347a:	2200      	movs	r2, #0
6001347c:	f893 c011 	ldrb.w	ip, [r3, #17]
60013480:	4594      	cmp	ip, r2
60013482:	dc4f      	bgt.n	60013524 <mcux_igpio_configure+0xb6>
	if (cfg_idx >= config->mux_count) {
60013484:	7c1a      	ldrb	r2, [r3, #16]
60013486:	428a      	cmp	r2, r1
60013488:	dd57      	ble.n	6001353a <mcux_igpio_configure+0xcc>
		(volatile uint32_t *)config->pin_muxes[cfg_idx].config_register;
6001348a:	689c      	ldr	r4, [r3, #8]
6001348c:	2314      	movs	r3, #20
6001348e:	fb03 4401 	mla	r4, r3, r1, r4
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
60013492:	07a9      	lsls	r1, r5, #30
	volatile uint32_t *gpio_cfg_reg =
60013494:	6863      	ldr	r3, [r4, #4]
	uint32_t reg = *gpio_cfg_reg;
60013496:	681b      	ldr	r3, [r3, #0]
		reg |= IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
60013498:	bf4c      	ite	mi
6001349a:	f443 6300 	orrmi.w	r3, r3, #2048	; 0x800
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
6001349e:	f423 6300 	bicpl.w	r3, r3, #2048	; 0x800
	if (((flags & GPIO_PULL_UP) != 0) || ((flags & GPIO_PULL_DOWN) != 0)) {
600134a2:	f015 0f30 	tst.w	r5, #48	; 0x30
600134a6:	d04f      	beq.n	60013548 <mcux_igpio_configure+0xda>
		if (((flags & GPIO_PULL_UP) != 0)) {
600134a8:	06ea      	lsls	r2, r5, #27
			reg |= IOMUXC_SW_PAD_CTL_PAD_PUS(2);
600134aa:	bf56      	itet	pl
600134ac:	f423 4340 	bicpl.w	r3, r3, #49152	; 0xc000
600134b0:	f443 4320 	orrmi.w	r3, r3, #40960	; 0xa000
			reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUS_MASK;
600134b4:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
	memcpy(&pin_cfg.pinmux, &config->pin_muxes[cfg_idx], sizeof(pin_cfg));
600134b8:	466a      	mov	r2, sp
600134ba:	f104 0e10 	add.w	lr, r4, #16
600134be:	6820      	ldr	r0, [r4, #0]
600134c0:	3408      	adds	r4, #8
600134c2:	f854 1c04 	ldr.w	r1, [r4, #-4]
600134c6:	4694      	mov	ip, r2
600134c8:	4574      	cmp	r4, lr
600134ca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
600134ce:	4662      	mov	r2, ip
600134d0:	d1f5      	bne.n	600134be <mcux_igpio_configure+0x50>
600134d2:	6820      	ldr	r0, [r4, #0]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
600134d4:	2200      	movs	r2, #0
600134d6:	2101      	movs	r1, #1
	memcpy(&pin_cfg.pinmux, &config->pin_muxes[cfg_idx], sizeof(pin_cfg));
600134d8:	f8cc 0000 	str.w	r0, [ip]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
600134dc:	4668      	mov	r0, sp
	pin_cfg.pin_ctrl_flags = reg;
600134de:	9305      	str	r3, [sp, #20]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
600134e0:	f000 fafa 	bl	60013ad8 <pinctrl_configure_pins>
	if (((flags & GPIO_INPUT) != 0) && ((flags & GPIO_OUTPUT) != 0)) {
600134e4:	f405 3340 	and.w	r3, r5, #196608	; 0x30000
600134e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
600134ec:	d025      	beq.n	6001353a <mcux_igpio_configure+0xcc>
	if (flags & GPIO_OUTPUT_INIT_HIGH) {
600134ee:	032c      	lsls	r4, r5, #12
600134f0:	d504      	bpl.n	600134fc <mcux_igpio_configure+0x8e>
    GPIO_PinWrite(base, pin, output);
600134f2:	2201      	movs	r2, #1
600134f4:	4639      	mov	r1, r7
600134f6:	4630      	mov	r0, r6
600134f8:	f7f8 fc14 	bl	6000bd24 <GPIO_PinWrite>
	if (flags & GPIO_OUTPUT_INIT_LOW) {
600134fc:	0368      	lsls	r0, r5, #13
600134fe:	d504      	bpl.n	6001350a <mcux_igpio_configure+0x9c>
60013500:	2200      	movs	r2, #0
60013502:	4639      	mov	r1, r7
60013504:	4630      	mov	r0, r6
60013506:	f7f8 fc0d 	bl	6000bd24 <GPIO_PinWrite>
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
6001350a:	2301      	movs	r3, #1
6001350c:	6872      	ldr	r2, [r6, #4]
6001350e:	03a9      	lsls	r1, r5, #14
	return 0;
60013510:	f04f 0000 	mov.w	r0, #0
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
60013514:	fa03 f307 	lsl.w	r3, r3, r7
60013518:	bf4c      	ite	mi
6001351a:	4313      	orrmi	r3, r2
6001351c:	ea22 0303 	bicpl.w	r3, r2, r3
60013520:	6073      	str	r3, [r6, #4]
	return 0;
60013522:	e00c      	b.n	6001353e <mcux_igpio_configure+0xd0>
		if (pin >= config->pin_gaps[i].start) {
60013524:	68d8      	ldr	r0, [r3, #12]
60013526:	eb00 0442 	add.w	r4, r0, r2, lsl #1
6001352a:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
6001352e:	42b8      	cmp	r0, r7
60013530:	d808      	bhi.n	60013544 <mcux_igpio_configure+0xd6>
				config->pin_gaps[i].len)) {
60013532:	7864      	ldrb	r4, [r4, #1]
			if (pin < (config->pin_gaps[i].start +
60013534:	4420      	add	r0, r4
60013536:	42b8      	cmp	r0, r7
60013538:	dd03      	ble.n	60013542 <mcux_igpio_configure+0xd4>
				return -ENOTSUP;
6001353a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
6001353e:	b007      	add	sp, #28
60013540:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cfg_idx -= config->pin_gaps[i].len;
60013542:	1b09      	subs	r1, r1, r4
	for (i = 0; i < config->gap_count; i++) {
60013544:	3201      	adds	r2, #1
60013546:	e79b      	b.n	60013480 <mcux_igpio_configure+0x12>
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUE_MASK;
60013548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
6001354c:	e7b4      	b.n	600134b8 <mcux_igpio_configure+0x4a>

6001354e <mcux_igpio_0_init>:
DT_INST_FOREACH_STATUS_OKAY(MCUX_IGPIO_INIT)
6001354e:	2200      	movs	r2, #0
60013550:	2050      	movs	r0, #80	; 0x50
60013552:	b508      	push	{r3, lr}
60013554:	4611      	mov	r1, r2
60013556:	f7f4 fd89 	bl	6000806c <z_arm_irq_priority_set>
6001355a:	2050      	movs	r0, #80	; 0x50
6001355c:	f7f4 fd78 	bl	60008050 <arch_irq_enable>
60013560:	2200      	movs	r2, #0
60013562:	2051      	movs	r0, #81	; 0x51
60013564:	4611      	mov	r1, r2
60013566:	f7f4 fd81 	bl	6000806c <z_arm_irq_priority_set>
6001356a:	2051      	movs	r0, #81	; 0x51
6001356c:	f7f4 fd70 	bl	60008050 <arch_irq_enable>
60013570:	2000      	movs	r0, #0
60013572:	bd08      	pop	{r3, pc}

60013574 <mcux_igpio_1_init>:
60013574:	2200      	movs	r2, #0
60013576:	2052      	movs	r0, #82	; 0x52
60013578:	b508      	push	{r3, lr}
6001357a:	4611      	mov	r1, r2
6001357c:	f7f4 fd76 	bl	6000806c <z_arm_irq_priority_set>
60013580:	2052      	movs	r0, #82	; 0x52
60013582:	f7f4 fd65 	bl	60008050 <arch_irq_enable>
60013586:	2200      	movs	r2, #0
60013588:	2053      	movs	r0, #83	; 0x53
6001358a:	4611      	mov	r1, r2
6001358c:	f7f4 fd6e 	bl	6000806c <z_arm_irq_priority_set>
60013590:	2053      	movs	r0, #83	; 0x53
60013592:	f7f4 fd5d 	bl	60008050 <arch_irq_enable>
60013596:	2000      	movs	r0, #0
60013598:	bd08      	pop	{r3, pc}

6001359a <mcux_igpio_2_init>:
6001359a:	2200      	movs	r2, #0
6001359c:	2054      	movs	r0, #84	; 0x54
6001359e:	b508      	push	{r3, lr}
600135a0:	4611      	mov	r1, r2
600135a2:	f7f4 fd63 	bl	6000806c <z_arm_irq_priority_set>
600135a6:	2054      	movs	r0, #84	; 0x54
600135a8:	f7f4 fd52 	bl	60008050 <arch_irq_enable>
600135ac:	2200      	movs	r2, #0
600135ae:	2055      	movs	r0, #85	; 0x55
600135b0:	4611      	mov	r1, r2
600135b2:	f7f4 fd5b 	bl	6000806c <z_arm_irq_priority_set>
600135b6:	2055      	movs	r0, #85	; 0x55
600135b8:	f7f4 fd4a 	bl	60008050 <arch_irq_enable>
600135bc:	2000      	movs	r0, #0
600135be:	bd08      	pop	{r3, pc}

600135c0 <mcux_igpio_3_init>:
600135c0:	2200      	movs	r2, #0
600135c2:	2056      	movs	r0, #86	; 0x56
600135c4:	b508      	push	{r3, lr}
600135c6:	4611      	mov	r1, r2
600135c8:	f7f4 fd50 	bl	6000806c <z_arm_irq_priority_set>
600135cc:	2056      	movs	r0, #86	; 0x56
600135ce:	f7f4 fd3f 	bl	60008050 <arch_irq_enable>
600135d2:	2200      	movs	r2, #0
600135d4:	2057      	movs	r0, #87	; 0x57
600135d6:	4611      	mov	r1, r2
600135d8:	f7f4 fd48 	bl	6000806c <z_arm_irq_priority_set>
600135dc:	2057      	movs	r0, #87	; 0x57
600135de:	f7f4 fd37 	bl	60008050 <arch_irq_enable>
600135e2:	2000      	movs	r0, #0
600135e4:	bd08      	pop	{r3, pc}

600135e6 <mcux_igpio_4_init>:
600135e6:	2200      	movs	r2, #0
600135e8:	2058      	movs	r0, #88	; 0x58
600135ea:	b508      	push	{r3, lr}
600135ec:	4611      	mov	r1, r2
600135ee:	f7f4 fd3d 	bl	6000806c <z_arm_irq_priority_set>
600135f2:	2058      	movs	r0, #88	; 0x58
600135f4:	f7f4 fd2c 	bl	60008050 <arch_irq_enable>
600135f8:	2200      	movs	r2, #0
600135fa:	2059      	movs	r0, #89	; 0x59
600135fc:	4611      	mov	r1, r2
600135fe:	f7f4 fd35 	bl	6000806c <z_arm_irq_priority_set>
60013602:	2059      	movs	r0, #89	; 0x59
60013604:	f7f4 fd24 	bl	60008050 <arch_irq_enable>
60013608:	2000      	movs	r0, #0
6001360a:	bd08      	pop	{r3, pc}

6001360c <mcux_igpio_7_init>:
6001360c:	2000      	movs	r0, #0
6001360e:	4770      	bx	lr

60013610 <mcux_igpio_8_init>:
60013610:	2000      	movs	r0, #0
60013612:	4770      	bx	lr

60013614 <mcux_igpio_6_init>:
60013614:	2000      	movs	r0, #0
60013616:	4770      	bx	lr

60013618 <mcux_lpi2c_config_func_0>:
			    DEVICE_DT_INST_GET(n), 0);			\
									\
		irq_enable(DT_INST_IRQN(n));				\
	}

DT_INST_FOREACH_STATUS_OKAY(I2C_MCUX_LPI2C_INIT)
60013618:	2200      	movs	r2, #0
6001361a:	201c      	movs	r0, #28
6001361c:	b508      	push	{r3, lr}
6001361e:	4611      	mov	r1, r2
60013620:	f7f4 fd24 	bl	6000806c <z_arm_irq_priority_set>
60013624:	201c      	movs	r0, #28
60013626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
6001362a:	f7f4 bd11 	b.w	60008050 <arch_irq_enable>

6001362e <mcux_lpi2c_isr>:
	LPI2C_Type *base = config->base;
6001362e:	6843      	ldr	r3, [r0, #4]
	LPI2C_MasterTransferHandleIRQ(base, &data->handle);
60013630:	6901      	ldr	r1, [r0, #16]
60013632:	6818      	ldr	r0, [r3, #0]
60013634:	f7f8 b8e2 	b.w	6000b7fc <LPI2C_MasterTransferHandleIRQ>

60013638 <mcux_lpi2c_master_transfer_callback>:
	data->callback_status = status;
60013638:	655a      	str	r2, [r3, #84]	; 0x54
6001363a:	f103 0044 	add.w	r0, r3, #68	; 0x44
6001363e:	f7fa ba6b 	b.w	6000db18 <z_impl_k_sem_give>

60013642 <mcux_pwm_get_cycles_per_sec>:
{
60013642:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_mcux_config *config = dev->config;
60013644:	6845      	ldr	r5, [r0, #4]
{
60013646:	4614      	mov	r4, r2
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
60013648:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
	if (api->get_rate == NULL) {
6001364c:	6883      	ldr	r3, [r0, #8]
6001364e:	68db      	ldr	r3, [r3, #12]
60013650:	b91b      	cbnz	r3, 6001365a <mcux_pwm_get_cycles_per_sec+0x18>
		return -EINVAL;
60013652:	f06f 0015 	mvn.w	r0, #21
}
60013656:	b003      	add	sp, #12
60013658:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
6001365a:	aa01      	add	r2, sp, #4
6001365c:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6001365e:	2800      	cmp	r0, #0
60013660:	d1f7      	bne.n	60013652 <mcux_pwm_get_cycles_per_sec+0x10>
	*cycles = clock_freq >> config->prescale;
60013662:	7c2a      	ldrb	r2, [r5, #16]
60013664:	9b01      	ldr	r3, [sp, #4]
60013666:	40d3      	lsrs	r3, r2
60013668:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
6001366c:	e7f3      	b.n	60013656 <mcux_pwm_get_cycles_per_sec+0x14>

6001366e <z_log_msg_static_create.constprop.0>:
6001366e:	2300      	movs	r3, #0
60013670:	f7f2 bde4 	b.w	6000623c <z_impl_z_log_msg_static_create>

60013674 <ina219_reg_read.isra.0>:
static int ina219_reg_read(const struct device *dev,
60013674:	b530      	push	{r4, r5, lr}
60013676:	b08b      	sub	sp, #44	; 0x2c
60013678:	4614      	mov	r4, r2
6001367a:	4603      	mov	r3, r0
	return i2c_write_read(spec->bus, spec->addr,
6001367c:	6800      	ldr	r0, [r0, #0]
	msg[0].buf = (uint8_t *)write_buf;
6001367e:	f10d 0207 	add.w	r2, sp, #7
60013682:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
60013686:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
60013688:	889b      	ldrh	r3, [r3, #4]
	msg[0].buf = (uint8_t *)write_buf;
6001368a:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
6001368c:	2201      	movs	r2, #1
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6001368e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	msg[0].len = num_write;
60013692:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
60013694:	2200      	movs	r2, #0
60013696:	f88d 2018 	strb.w	r2, [sp, #24]
	msg[1].buf = (uint8_t *)read_buf;
6001369a:	aa03      	add	r2, sp, #12
6001369c:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
6001369e:	2202      	movs	r2, #2
600136a0:	9208      	str	r2, [sp, #32]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
600136a2:	6881      	ldr	r1, [r0, #8]
600136a4:	688d      	ldr	r5, [r1, #8]
600136a6:	a904      	add	r1, sp, #16
600136a8:	47a8      	blx	r5
	*reg_data = sys_get_be16(rx_buf);
600136aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
600136ae:	ba5b      	rev16	r3, r3
600136b0:	8023      	strh	r3, [r4, #0]
}
600136b2:	b00b      	add	sp, #44	; 0x2c
600136b4:	bd30      	pop	{r4, r5, pc}

600136b6 <ina219_reg_write.isra.0>:
static int ina219_reg_write(const struct device *dev,
600136b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	tx_buf[0] = addr;
600136b8:	f88d 1000 	strb.w	r1, [sp]
	dst[0] = val >> 8;
600136bc:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
600136be:	f88d 2002 	strb.w	r2, [sp, #2]
	msg.len = num_bytes;
600136c2:	2203      	movs	r2, #3
static int ina219_reg_write(const struct device *dev,
600136c4:	4603      	mov	r3, r0
	dst[0] = val >> 8;
600136c6:	f88d 1001 	strb.w	r1, [sp, #1]
600136ca:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
600136cc:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
600136ce:	6800      	ldr	r0, [r0, #0]
600136d0:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
600136d2:	f8cd d004 	str.w	sp, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
600136d6:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
600136da:	6882      	ldr	r2, [r0, #8]
600136dc:	a901      	add	r1, sp, #4
600136de:	6894      	ldr	r4, [r2, #8]
600136e0:	2201      	movs	r2, #1
600136e2:	47a0      	blx	r4
}
600136e4:	b004      	add	sp, #16
600136e6:	bd10      	pop	{r4, pc}

600136e8 <z_impl_i2c_transfer>:
{
600136e8:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
600136ea:	6884      	ldr	r4, [r0, #8]
600136ec:	68a4      	ldr	r4, [r4, #8]
600136ee:	46a4      	mov	ip, r4
}
600136f0:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
600136f2:	4760      	bx	ip

600136f4 <mcux_lpuart_irq_update>:
}

static int mcux_lpuart_irq_update(const struct device *dev)
{
	return 1;
}
600136f4:	2001      	movs	r0, #1
600136f6:	4770      	bx	lr

600136f8 <mcux_lpuart_irq_callback_set>:

static void mcux_lpuart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb,
					 void *cb_data)
{
	struct mcux_lpuart_data *data = dev->data;
600136f8:	6903      	ldr	r3, [r0, #16]

	data->callback = cb;
	data->cb_data = cb_data;
600136fa:	e9c3 1200 	strd	r1, r2, [r3]
}
600136fe:	4770      	bx	lr

60013700 <mcux_lpuart_config_get>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int mcux_lpuart_config_get(const struct device *dev, struct uart_config *cfg)
{
	struct mcux_lpuart_data *data = dev->data;
60013700:	6902      	ldr	r2, [r0, #16]
{
60013702:	460b      	mov	r3, r1
	*cfg = data->uart_config;
60013704:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
60013708:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
6001370c:	2000      	movs	r0, #0
6001370e:	4770      	bx	lr

60013710 <mcux_lpuart_irq_err_disable>:
	LPUART_DisableInterrupts(config->base, mask);
60013710:	6843      	ldr	r3, [r0, #4]
60013712:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
60013716:	6818      	ldr	r0, [r3, #0]
60013718:	f000 bb13 	b.w	60013d42 <LPUART_DisableInterrupts>

6001371c <mcux_lpuart_irq_rx_disable>:
	const struct mcux_lpuart_config *config = dev->config;
6001371c:	6842      	ldr	r2, [r0, #4]
	LPUART_EnableRx(config->base, false);
6001371e:	6811      	ldr	r1, [r2, #0]
    {
        base->CTRL |= LPUART_CTRL_RE_MASK;
    }
    else
    {
        base->CTRL &= ~LPUART_CTRL_RE_MASK;
60013720:	698b      	ldr	r3, [r1, #24]
60013722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
60013726:	618b      	str	r3, [r1, #24]
	LPUART_DisableInterrupts(config->base, mask);
60013728:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
6001372c:	6810      	ldr	r0, [r2, #0]
6001372e:	f000 bb08 	b.w	60013d42 <LPUART_DisableInterrupts>

60013732 <mcux_lpuart_irq_tx_disable>:
	LPUART_DisableInterrupts(config->base, mask);
60013732:	6843      	ldr	r3, [r0, #4]
60013734:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60013738:	6818      	ldr	r0, [r3, #0]
6001373a:	f000 bb02 	b.w	60013d42 <LPUART_DisableInterrupts>

6001373e <mcux_lpuart_irq_err_enable>:
	LPUART_EnableInterrupts(config->base, mask);
6001373e:	6843      	ldr	r3, [r0, #4]
60013740:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
60013744:	6818      	ldr	r0, [r3, #0]
60013746:	f000 bae3 	b.w	60013d10 <LPUART_EnableInterrupts>

6001374a <mcux_lpuart_irq_tx_enable>:
	LPUART_EnableInterrupts(config->base, mask);
6001374a:	6843      	ldr	r3, [r0, #4]
6001374c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60013750:	6818      	ldr	r0, [r3, #0]
60013752:	f000 badd 	b.w	60013d10 <LPUART_EnableInterrupts>

60013756 <mcux_lpuart_irq_rx_full>:
{
60013756:	b508      	push	{r3, lr}
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60013758:	6843      	ldr	r3, [r0, #4]
6001375a:	6818      	ldr	r0, [r3, #0]
6001375c:	f7f8 fab8 	bl	6000bcd0 <LPUART_GetStatusFlags>
}
60013760:	f3c0 5040 	ubfx	r0, r0, #21, #1
60013764:	bd08      	pop	{r3, pc}

60013766 <mcux_lpuart_irq_tx_complete>:
{
60013766:	b508      	push	{r3, lr}
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60013768:	6843      	ldr	r3, [r0, #4]
6001376a:	6818      	ldr	r0, [r3, #0]
6001376c:	f7f8 fab0 	bl	6000bcd0 <LPUART_GetStatusFlags>
}
60013770:	f3c0 5080 	ubfx	r0, r0, #22, #1
60013774:	bd08      	pop	{r3, pc}

60013776 <mcux_lpuart_irq_tx_ready>:
{
60013776:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60013778:	6845      	ldr	r5, [r0, #4]
	uint32_t flags = LPUART_GetStatusFlags(config->base);
6001377a:	6828      	ldr	r0, [r5, #0]
6001377c:	f7f8 faa8 	bl	6000bcd0 <LPUART_GetStatusFlags>
60013780:	4604      	mov	r4, r0
	return (LPUART_GetEnabledInterrupts(config->base) & mask)
60013782:	6828      	ldr	r0, [r5, #0]
60013784:	f7f8 fa8e 	bl	6000bca4 <LPUART_GetEnabledInterrupts>
		&& (flags & kLPUART_TxDataRegEmptyFlag);
60013788:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
6001378c:	bf18      	it	ne
6001378e:	f3c4 50c0 	ubfxne	r0, r4, #23, #1
}
60013792:	bd38      	pop	{r3, r4, r5, pc}

60013794 <mcux_lpuart_irq_is_pending>:
{
60013794:	b538      	push	{r3, r4, r5, lr}
60013796:	4605      	mov	r5, r0
	return (mcux_lpuart_irq_tx_ready(dev)
60013798:	f7ff ffed 	bl	60013776 <mcux_lpuart_irq_tx_ready>
		|| mcux_lpuart_irq_rx_pending(dev));
6001379c:	4604      	mov	r4, r0
6001379e:	b968      	cbnz	r0, 600137bc <mcux_lpuart_irq_is_pending+0x28>
	return (LPUART_GetEnabledInterrupts(config->base) & mask)
600137a0:	686b      	ldr	r3, [r5, #4]
600137a2:	6818      	ldr	r0, [r3, #0]
600137a4:	f7f8 fa7e 	bl	6000bca4 <LPUART_GetEnabledInterrupts>
		&& mcux_lpuart_irq_rx_full(dev);
600137a8:	0283      	lsls	r3, r0, #10
600137aa:	d505      	bpl.n	600137b8 <mcux_lpuart_irq_is_pending+0x24>
600137ac:	4628      	mov	r0, r5
600137ae:	f7ff ffd2 	bl	60013756 <mcux_lpuart_irq_rx_full>
600137b2:	1e04      	subs	r4, r0, #0
600137b4:	bf18      	it	ne
600137b6:	2401      	movne	r4, #1
}
600137b8:	4620      	mov	r0, r4
600137ba:	bd38      	pop	{r3, r4, r5, pc}
		|| mcux_lpuart_irq_rx_pending(dev));
600137bc:	2401      	movs	r4, #1
600137be:	e7fb      	b.n	600137b8 <mcux_lpuart_irq_is_pending+0x24>

600137c0 <mcux_lpuart_fifo_read>:
{
600137c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
600137c4:	460e      	mov	r6, r1
600137c6:	4617      	mov	r7, r2
	const struct mcux_lpuart_config *config = dev->config;
600137c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	while ((len - num_rx > 0) &&
600137cc:	2500      	movs	r5, #0
{
#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
    uint32_t ctrl = base->CTRL;
    uint8_t result;
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
600137ce:	f640 0912 	movw	r9, #2066	; 0x812
600137d2:	b2ec      	uxtb	r4, r5
600137d4:	42a7      	cmp	r7, r4
600137d6:	dd05      	ble.n	600137e4 <mcux_lpuart_fifo_read+0x24>
	       (LPUART_GetStatusFlags(config->base)
600137d8:	f8d8 0000 	ldr.w	r0, [r8]
600137dc:	f7f8 fa78 	bl	6000bcd0 <LPUART_GetStatusFlags>
	while ((len - num_rx > 0) &&
600137e0:	0283      	lsls	r3, r0, #10
600137e2:	d402      	bmi.n	600137ea <mcux_lpuart_fifo_read+0x2a>
}
600137e4:	4620      	mov	r0, r4
600137e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx_data[num_rx++] = LPUART_ReadByte(config->base);
600137ea:	f8d8 2000 	ldr.w	r2, [r8]
    uint32_t ctrl = base->CTRL;
600137ee:	6993      	ldr	r3, [r2, #24]
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
600137f0:	0519      	lsls	r1, r3, #20
600137f2:	d408      	bmi.n	60013806 <mcux_lpuart_fifo_read+0x46>
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
600137f4:	ea03 0309 	and.w	r3, r3, r9
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
600137f8:	2b02      	cmp	r3, #2
600137fa:	d004      	beq.n	60013806 <mcux_lpuart_fifo_read+0x46>
    {
        result = (uint8_t)(base->DATA & 0x7FU);
    }
    else
    {
        result = (uint8_t)base->DATA;
600137fc:	69d3      	ldr	r3, [r2, #28]
600137fe:	b2db      	uxtb	r3, r3
    }

    return result;
60013800:	3501      	adds	r5, #1
60013802:	5533      	strb	r3, [r6, r4]
60013804:	e7e5      	b.n	600137d2 <mcux_lpuart_fifo_read+0x12>
        result = (uint8_t)(base->DATA & 0x7FU);
60013806:	69d3      	ldr	r3, [r2, #28]
60013808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6001380c:	e7f8      	b.n	60013800 <mcux_lpuart_fifo_read+0x40>

6001380e <mcux_lpuart_fifo_fill>:
{
6001380e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60013812:	460e      	mov	r6, r1
60013814:	4617      	mov	r7, r2
	const struct mcux_lpuart_config *config = dev->config;
60013816:	f8d0 8004 	ldr.w	r8, [r0, #4]
	while ((len - num_tx > 0) &&
6001381a:	2500      	movs	r5, #0
6001381c:	b2ec      	uxtb	r4, r5
6001381e:	42a7      	cmp	r7, r4
60013820:	dd06      	ble.n	60013830 <mcux_lpuart_fifo_fill+0x22>
	       (LPUART_GetStatusFlags(config->base)
60013822:	f8d8 0000 	ldr.w	r0, [r8]
	while ((len - num_tx > 0) &&
60013826:	3501      	adds	r5, #1
	       (LPUART_GetStatusFlags(config->base)
60013828:	f7f8 fa52 	bl	6000bcd0 <LPUART_GetStatusFlags>
	while ((len - num_tx > 0) &&
6001382c:	0203      	lsls	r3, r0, #8
6001382e:	d402      	bmi.n	60013836 <mcux_lpuart_fifo_fill+0x28>
}
60013830:	4620      	mov	r0, r4
60013832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LPUART_WriteByte(config->base, tx_data[num_tx++]);
60013836:	f8d8 3000 	ldr.w	r3, [r8]
    base->DATA = data;
6001383a:	5d32      	ldrb	r2, [r6, r4]
6001383c:	61da      	str	r2, [r3, #28]
}
6001383e:	e7ed      	b.n	6001381c <mcux_lpuart_fifo_fill+0xe>

60013840 <mcux_lpuart_poll_out>:
{
60013840:	b538      	push	{r3, r4, r5, lr}
60013842:	460c      	mov	r4, r1
	const struct mcux_lpuart_config *config = dev->config;
60013844:	6845      	ldr	r5, [r0, #4]
	while (!(LPUART_GetStatusFlags(config->base)
60013846:	6828      	ldr	r0, [r5, #0]
60013848:	f7f8 fa42 	bl	6000bcd0 <LPUART_GetStatusFlags>
6001384c:	0203      	lsls	r3, r0, #8
6001384e:	d5fa      	bpl.n	60013846 <mcux_lpuart_poll_out+0x6>
60013850:	f04f 0210 	mov.w	r2, #16
60013854:	f3ef 8311 	mrs	r3, BASEPRI
60013858:	f382 8812 	msr	BASEPRI_MAX, r2
6001385c:	f3bf 8f6f 	isb	sy
	LPUART_WriteByte(config->base, c);
60013860:	682a      	ldr	r2, [r5, #0]
    base->DATA = data;
60013862:	61d4      	str	r4, [r2, #28]
	__asm__ volatile(
60013864:	f383 8811 	msr	BASEPRI, r3
60013868:	f3bf 8f6f 	isb	sy
}
6001386c:	bd38      	pop	{r3, r4, r5, pc}

6001386e <mcux_lpuart_configure_init>:
{
6001386e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct mcux_lpuart_config *config = dev->config;
60013872:	6844      	ldr	r4, [r0, #4]
{
60013874:	b086      	sub	sp, #24
	struct mcux_lpuart_data *data = dev->data;
60013876:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
6001387a:	460d      	mov	r5, r1
	if (!device_is_ready(config->clock_dev)) {
6001387c:	6860      	ldr	r0, [r4, #4]
6001387e:	f000 fea2 	bl	600145c6 <z_device_is_ready>
60013882:	4607      	mov	r7, r0
60013884:	2800      	cmp	r0, #0
60013886:	d070      	beq.n	6001396a <mcux_lpuart_configure_init+0xfc>
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
60013888:	6860      	ldr	r0, [r4, #4]
6001388a:	68e1      	ldr	r1, [r4, #12]
	if (api->get_rate == NULL) {
6001388c:	6883      	ldr	r3, [r0, #8]
6001388e:	68db      	ldr	r3, [r3, #12]
60013890:	b92b      	cbnz	r3, 6001389e <mcux_lpuart_configure_init+0x30>
		return -EINVAL;
60013892:	f06f 0615 	mvn.w	r6, #21
}
60013896:	4630      	mov	r0, r6
60013898:	b006      	add	sp, #24
6001389a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->get_rate(dev, sys, rate);
6001389e:	466a      	mov	r2, sp
600138a0:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
600138a2:	4606      	mov	r6, r0
600138a4:	2800      	cmp	r0, #0
600138a6:	d1f4      	bne.n	60013892 <mcux_lpuart_configure_init+0x24>
	LPUART_GetDefaultConfig(&uart_config);
600138a8:	a801      	add	r0, sp, #4
600138aa:	f7f8 f9e1 	bl	6000bc70 <LPUART_GetDefaultConfig>
	switch (cfg->parity) {
600138ae:	792b      	ldrb	r3, [r5, #4]
600138b0:	2b01      	cmp	r3, #1
600138b2:	d005      	beq.n	600138c0 <mcux_lpuart_configure_init+0x52>
600138b4:	2b02      	cmp	r3, #2
600138b6:	d004      	beq.n	600138c2 <mcux_lpuart_configure_init+0x54>
600138b8:	b11b      	cbz	r3, 600138c2 <mcux_lpuart_configure_init+0x54>
		return -ENOTSUP;
600138ba:	f06f 0685 	mvn.w	r6, #133	; 0x85
600138be:	e7ea      	b.n	60013896 <mcux_lpuart_configure_init+0x28>
	switch (cfg->parity) {
600138c0:	2303      	movs	r3, #3
		uart_config.parityMode = kLPUART_ParityDisabled;
600138c2:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (cfg->data_bits) {
600138c6:	79ab      	ldrb	r3, [r5, #6]
600138c8:	2b02      	cmp	r3, #2
600138ca:	d04a      	beq.n	60013962 <mcux_lpuart_configure_init+0xf4>
600138cc:	2b03      	cmp	r3, #3
600138ce:	d1f4      	bne.n	600138ba <mcux_lpuart_configure_init+0x4c>
600138d0:	2300      	movs	r3, #0
		uart_config.dataBitsCount  = kLPUART_SevenDataBits;
600138d2:	f88d 3009 	strb.w	r3, [sp, #9]
	switch (cfg->stop_bits) {
600138d6:	796b      	ldrb	r3, [r5, #5]
600138d8:	2b01      	cmp	r3, #1
600138da:	d044      	beq.n	60013966 <mcux_lpuart_configure_init+0xf8>
600138dc:	2b03      	cmp	r3, #3
600138de:	d1ec      	bne.n	600138ba <mcux_lpuart_configure_init+0x4c>
600138e0:	2301      	movs	r3, #1
		uart_config.stopBitCount = kLPUART_OneStopBit;
600138e2:	f88d 300b 	strb.w	r3, [sp, #11]
	switch (cfg->flow_ctrl) {
600138e6:	79eb      	ldrb	r3, [r5, #7]
600138e8:	2b01      	cmp	r3, #1
600138ea:	d004      	beq.n	600138f6 <mcux_lpuart_configure_init+0x88>
600138ec:	2b03      	cmp	r3, #3
600138ee:	d001      	beq.n	600138f4 <mcux_lpuart_configure_init+0x86>
600138f0:	2b00      	cmp	r3, #0
600138f2:	d1e2      	bne.n	600138ba <mcux_lpuart_configure_init+0x4c>
600138f4:	2700      	movs	r7, #0
	uart_config.baudRate_Bps = cfg->baudrate;
600138f6:	682b      	ldr	r3, [r5, #0]
	LPUART_Init(config->base, &uart_config, clock_freq);
600138f8:	a901      	add	r1, sp, #4
		uart_config.enableTxCTS = false;
600138fa:	f88d 700f 	strb.w	r7, [sp, #15]
	uart_config.baudRate_Bps = cfg->baudrate;
600138fe:	9301      	str	r3, [sp, #4]
	uart_config.enableTx = false;
60013900:	f44f 7380 	mov.w	r3, #256	; 0x100
		uart_config.enableRxRTS = false;
60013904:	f88d 700e 	strb.w	r7, [sp, #14]
	uart_config.enableTx = false;
60013908:	f8ad 3014 	strh.w	r3, [sp, #20]
	LPUART_Init(config->base, &uart_config, clock_freq);
6001390c:	9a00      	ldr	r2, [sp, #0]
6001390e:	6820      	ldr	r0, [r4, #0]
60013910:	f7f8 f89e 	bl	6000ba50 <LPUART_Init>
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485) {
60013914:	79eb      	ldrb	r3, [r5, #7]
60013916:	2b03      	cmp	r3, #3
60013918:	d10b      	bne.n	60013932 <mcux_lpuart_configure_init+0xc4>
		config->base->MODIR |= LPUART_MODIR_TXRTSE(true);
6001391a:	6822      	ldr	r2, [r4, #0]
6001391c:	6a53      	ldr	r3, [r2, #36]	; 0x24
6001391e:	f043 0302 	orr.w	r3, r3, #2
60013922:	6253      	str	r3, [r2, #36]	; 0x24
		if (!config->rs485_de_active_low) {
60013924:	7d63      	ldrb	r3, [r4, #21]
60013926:	b923      	cbnz	r3, 60013932 <mcux_lpuart_configure_init+0xc4>
			config->base->MODIR |= LPUART_MODIR_TXRTSPOL(1);
60013928:	6822      	ldr	r2, [r4, #0]
6001392a:	6a53      	ldr	r3, [r2, #36]	; 0x24
6001392c:	f043 0304 	orr.w	r3, r3, #4
60013930:	6253      	str	r3, [r2, #36]	; 0x24
	config->base->CTRL |= LPUART_CTRL_TE(true);
60013932:	6822      	ldr	r2, [r4, #0]
60013934:	6993      	ldr	r3, [r2, #24]
60013936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
6001393a:	6193      	str	r3, [r2, #24]
	if (config->loopback_en) {
6001393c:	7da3      	ldrb	r3, [r4, #22]
6001393e:	b14b      	cbz	r3, 60013954 <mcux_lpuart_configure_init+0xe6>
		config->base->CTRL |= LPUART_CTRL_LOOPS_MASK;
60013940:	6822      	ldr	r2, [r4, #0]
60013942:	6993      	ldr	r3, [r2, #24]
60013944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60013948:	6193      	str	r3, [r2, #24]
		config->base->CTRL &= ~LPUART_CTRL_RSRC_MASK;
6001394a:	6822      	ldr	r2, [r4, #0]
6001394c:	6993      	ldr	r3, [r2, #24]
6001394e:	f023 0320 	bic.w	r3, r3, #32
60013952:	6193      	str	r3, [r2, #24]
	data->uart_config = *cfg;
60013954:	f108 0308 	add.w	r3, r8, #8
60013958:	e895 0003 	ldmia.w	r5, {r0, r1}
6001395c:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
60013960:	e799      	b.n	60013896 <mcux_lpuart_configure_init+0x28>
	switch (cfg->data_bits) {
60013962:	2301      	movs	r3, #1
60013964:	e7b5      	b.n	600138d2 <mcux_lpuart_configure_init+0x64>
	switch (cfg->stop_bits) {
60013966:	2300      	movs	r3, #0
60013968:	e7bb      	b.n	600138e2 <mcux_lpuart_configure_init+0x74>
		return -ENODEV;
6001396a:	f06f 0612 	mvn.w	r6, #18
6001396e:	e792      	b.n	60013896 <mcux_lpuart_configure_init+0x28>

60013970 <mcux_lpuart_err_check>:
{
60013970:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60013972:	6845      	ldr	r5, [r0, #4]
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60013974:	6828      	ldr	r0, [r5, #0]
60013976:	f7f8 f9ab 	bl	6000bcd0 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxOverrunFlag) {
6001397a:	f3c0 44c0 	ubfx	r4, r0, #19, #1
	if (flags & kLPUART_ParityErrorFlag) {
6001397e:	03c1      	lsls	r1, r0, #15
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
60013980:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
		err |= UART_ERROR_PARITY;
60013984:	bf48      	it	mi
60013986:	f044 0402 	orrmi.w	r4, r4, #2
	if (flags & kLPUART_FramingErrorFlag) {
6001398a:	0382      	lsls	r2, r0, #14
		err |= UART_ERROR_FRAMING;
6001398c:	bf48      	it	mi
6001398e:	f044 0404 	orrmi.w	r4, r4, #4
	if (flags & kLPUART_NoiseErrorFlag) {
60013992:	0343      	lsls	r3, r0, #13
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
60013994:	6828      	ldr	r0, [r5, #0]
		err |= UART_ERROR_PARITY;
60013996:	bf48      	it	mi
60013998:	f044 0402 	orrmi.w	r4, r4, #2
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
6001399c:	f7f8 f9a4 	bl	6000bce8 <LPUART_ClearStatusFlags>
}
600139a0:	4620      	mov	r0, r4
600139a2:	bd38      	pop	{r3, r4, r5, pc}

600139a4 <mcux_lpuart_isr>:
{
600139a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct mcux_lpuart_config *config = dev->config;
600139a6:	6846      	ldr	r6, [r0, #4]
{
600139a8:	4604      	mov	r4, r0
	struct mcux_lpuart_data *data = dev->data;
600139aa:	6907      	ldr	r7, [r0, #16]
	const uint32_t status = LPUART_GetStatusFlags(config->base);
600139ac:	6830      	ldr	r0, [r6, #0]
600139ae:	f7f8 f98f 	bl	6000bcd0 <LPUART_GetStatusFlags>
	if (data->callback) {
600139b2:	683b      	ldr	r3, [r7, #0]
	const uint32_t status = LPUART_GetStatusFlags(config->base);
600139b4:	4605      	mov	r5, r0
	if (data->callback) {
600139b6:	b113      	cbz	r3, 600139be <mcux_lpuart_isr+0x1a>
		data->callback(dev, data->cb_data);
600139b8:	6879      	ldr	r1, [r7, #4]
600139ba:	4620      	mov	r0, r4
600139bc:	4798      	blx	r3
	if (status & kLPUART_RxOverrunFlag) {
600139be:	032b      	lsls	r3, r5, #12
600139c0:	d506      	bpl.n	600139d0 <mcux_lpuart_isr+0x2c>
		LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag);
600139c2:	6830      	ldr	r0, [r6, #0]
600139c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
}
600139c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag);
600139cc:	f7f8 b98c 	b.w	6000bce8 <LPUART_ClearStatusFlags>
}
600139d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

600139d2 <mcux_lpuart_config_func_0>:
			    &mcux_lpuart_##n##_config,			\
			    PRE_KERNEL_1,				\
			    CONFIG_SERIAL_INIT_PRIORITY,		\
			    &mcux_lpuart_driver_api);			\

DT_INST_FOREACH_STATUS_OKAY(LPUART_MCUX_INIT)
600139d2:	2200      	movs	r2, #0
600139d4:	2019      	movs	r0, #25
600139d6:	b508      	push	{r3, lr}
600139d8:	4611      	mov	r1, r2
600139da:	f7f4 fb47 	bl	6000806c <z_arm_irq_priority_set>
600139de:	2019      	movs	r0, #25
600139e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
600139e4:	f7f4 bb34 	b.w	60008050 <arch_irq_enable>

600139e8 <mcux_lpuart_irq_rx_enable>:
{
600139e8:	b510      	push	{r4, lr}
	const struct mcux_lpuart_config *config = dev->config;
600139ea:	6844      	ldr	r4, [r0, #4]
	LPUART_EnableInterrupts(config->base, mask);
600139ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
600139f0:	6820      	ldr	r0, [r4, #0]
600139f2:	f000 f98d 	bl	60013d10 <LPUART_EnableInterrupts>
	LPUART_EnableRx(config->base, true);
600139f6:	6822      	ldr	r2, [r4, #0]
        base->CTRL |= LPUART_CTRL_RE_MASK;
600139f8:	6993      	ldr	r3, [r2, #24]
600139fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600139fe:	6193      	str	r3, [r2, #24]
}
60013a00:	bd10      	pop	{r4, pc}

60013a02 <mcux_lpuart_init>:
{
60013a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60013a04:	6845      	ldr	r5, [r0, #4]
{
60013a06:	4604      	mov	r4, r0
	struct mcux_lpuart_data *data = dev->data;
60013a08:	6901      	ldr	r1, [r0, #16]
	uart_api_config->baudrate = config->baud_rate;
60013a0a:	692b      	ldr	r3, [r5, #16]
	mcux_lpuart_configure_init(dev, uart_api_config);
60013a0c:	3108      	adds	r1, #8
	uart_api_config->baudrate = config->baud_rate;
60013a0e:	600b      	str	r3, [r1, #0]
	uart_api_config->parity = UART_CFG_PARITY_NONE;
60013a10:	f44f 7380 	mov.w	r3, #256	; 0x100
60013a14:	808b      	strh	r3, [r1, #4]
	uart_api_config->data_bits = UART_CFG_DATA_BITS_8;
60013a16:	2303      	movs	r3, #3
60013a18:	718b      	strb	r3, [r1, #6]
	uart_api_config->flow_ctrl = config->flow_ctrl;
60013a1a:	7d2b      	ldrb	r3, [r5, #20]
60013a1c:	71cb      	strb	r3, [r1, #7]
	mcux_lpuart_configure_init(dev, uart_api_config);
60013a1e:	f7ff ff26 	bl	6001386e <mcux_lpuart_configure_init>
	ret = pinctrl_lookup_state(config, id, &state);
60013a22:	aa01      	add	r2, sp, #4
60013a24:	2100      	movs	r1, #0
60013a26:	68a8      	ldr	r0, [r5, #8]
60013a28:	f000 f843 	bl	60013ab2 <pinctrl_lookup_state>
	if (ret < 0) {
60013a2c:	2800      	cmp	r0, #0
60013a2e:	db0b      	blt.n	60013a48 <mcux_lpuart_init+0x46>
	return pinctrl_apply_state_direct(config, state);
60013a30:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
60013a32:	2200      	movs	r2, #0
60013a34:	7919      	ldrb	r1, [r3, #4]
60013a36:	6818      	ldr	r0, [r3, #0]
60013a38:	f000 f84e 	bl	60013ad8 <pinctrl_configure_pins>
	if (err < 0) {
60013a3c:	2800      	cmp	r0, #0
60013a3e:	db03      	blt.n	60013a48 <mcux_lpuart_init+0x46>
	config->irq_config_func(dev);
60013a40:	4620      	mov	r0, r4
60013a42:	69ab      	ldr	r3, [r5, #24]
60013a44:	4798      	blx	r3
	return 0;
60013a46:	2000      	movs	r0, #0
}
60013a48:	b003      	add	sp, #12
60013a4a:	bd30      	pop	{r4, r5, pc}

60013a4c <mcux_lpuart_configure>:
{
60013a4c:	b538      	push	{r3, r4, r5, lr}
	LPUART_Deinit(config->base);
60013a4e:	6843      	ldr	r3, [r0, #4]
{
60013a50:	4604      	mov	r4, r0
60013a52:	460d      	mov	r5, r1
	LPUART_Deinit(config->base);
60013a54:	6818      	ldr	r0, [r3, #0]
60013a56:	f7f8 f8ef 	bl	6000bc38 <LPUART_Deinit>
	int ret = mcux_lpuart_configure_init(dev, cfg);
60013a5a:	4620      	mov	r0, r4
60013a5c:	4629      	mov	r1, r5
60013a5e:	f7ff ff06 	bl	6001386e <mcux_lpuart_configure_init>
	if (ret) {
60013a62:	4604      	mov	r4, r0
60013a64:	b918      	cbnz	r0, 60013a6e <mcux_lpuart_configure+0x22>
	return z_impl_k_sleep(timeout);
60013a66:	200a      	movs	r0, #10
60013a68:	2100      	movs	r1, #0
60013a6a:	f7fb fcc3 	bl	6000f3f4 <z_impl_k_sleep>
}
60013a6e:	4620      	mov	r0, r4
60013a70:	bd38      	pop	{r3, r4, r5, pc}

60013a72 <mcux_lpuart_poll_in>:
{
60013a72:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60013a74:	6845      	ldr	r5, [r0, #4]
{
60013a76:	460c      	mov	r4, r1
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60013a78:	6828      	ldr	r0, [r5, #0]
60013a7a:	f7f8 f929 	bl	6000bcd0 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxDataRegFullFlag) {
60013a7e:	0280      	lsls	r0, r0, #10
60013a80:	d514      	bpl.n	60013aac <mcux_lpuart_poll_in+0x3a>
		*c = LPUART_ReadByte(config->base);
60013a82:	682a      	ldr	r2, [r5, #0]
    uint32_t ctrl = base->CTRL;
60013a84:	6993      	ldr	r3, [r2, #24]
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60013a86:	0519      	lsls	r1, r3, #20
60013a88:	d40c      	bmi.n	60013aa4 <mcux_lpuart_poll_in+0x32>
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
60013a8a:	f423 63fd 	bic.w	r3, r3, #2024	; 0x7e8
60013a8e:	f023 0305 	bic.w	r3, r3, #5
60013a92:	051b      	lsls	r3, r3, #20
60013a94:	0d1b      	lsrs	r3, r3, #20
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60013a96:	2b02      	cmp	r3, #2
60013a98:	d004      	beq.n	60013aa4 <mcux_lpuart_poll_in+0x32>
        result = (uint8_t)base->DATA;
60013a9a:	69d3      	ldr	r3, [r2, #28]
60013a9c:	b2db      	uxtb	r3, r3
		ret = 0;
60013a9e:	2000      	movs	r0, #0
		*c = LPUART_ReadByte(config->base);
60013aa0:	7023      	strb	r3, [r4, #0]
}
60013aa2:	bd38      	pop	{r3, r4, r5, pc}
        result = (uint8_t)(base->DATA & 0x7FU);
60013aa4:	69d3      	ldr	r3, [r2, #28]
60013aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60013aaa:	e7f8      	b.n	60013a9e <mcux_lpuart_poll_in+0x2c>
	int ret = -1;
60013aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return ret;
60013ab0:	e7f7      	b.n	60013aa2 <mcux_lpuart_poll_in+0x30>

60013ab2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
60013ab2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
60013ab4:	6803      	ldr	r3, [r0, #0]
60013ab6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
60013ab8:	7905      	ldrb	r5, [r0, #4]
60013aba:	6804      	ldr	r4, [r0, #0]
60013abc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
60013ac0:	42a3      	cmp	r3, r4
60013ac2:	d302      	bcc.n	60013aca <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
60013ac4:	f06f 0001 	mvn.w	r0, #1
}
60013ac8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
60013aca:	795c      	ldrb	r4, [r3, #5]
60013acc:	428c      	cmp	r4, r1
60013ace:	d001      	beq.n	60013ad4 <pinctrl_lookup_state+0x22>
		(*state)++;
60013ad0:	3308      	adds	r3, #8
60013ad2:	e7f0      	b.n	60013ab6 <pinctrl_lookup_state+0x4>
			return 0;
60013ad4:	2000      	movs	r0, #0
60013ad6:	e7f7      	b.n	60013ac8 <pinctrl_lookup_state+0x16>

60013ad8 <pinctrl_configure_pins>:
{
60013ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60013adc:	2600      	movs	r6, #0
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60013ade:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60013ae2:	b2f3      	uxtb	r3, r6
60013ae4:	4299      	cmp	r1, r3
60013ae6:	d802      	bhi.n	60013aee <pinctrl_configure_pins+0x16>
}
60013ae8:	2000      	movs	r0, #0
60013aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
60013aee:	7c42      	ldrb	r2, [r0, #17]
			(volatile uint32_t *)((uintptr_t)pins[i].pinmux.gpr_register);
60013af0:	68c4      	ldr	r4, [r0, #12]
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
60013af2:	f002 070f 	and.w	r7, r2, #15
		uint32_t mux_register = pins[i].pinmux.mux_register;
60013af6:	f8d0 9000 	ldr.w	r9, [r0]
		uint32_t input_register = pins[i].pinmux.input_register;
60013afa:	f8d0 e008 	ldr.w	lr, [r0, #8]
		uint32_t input_daisy = pins[i].pinmux.input_daisy;
60013afe:	0912      	lsrs	r2, r2, #4
		uint32_t config_register = pins[i].pinmux.config_register;
60013b00:	f8d0 c004 	ldr.w	ip, [r0, #4]
		uint32_t pin_ctrl_flags = pins[i].pin_ctrl_flags;
60013b04:	6945      	ldr	r5, [r0, #20]
		if (gpr_register) {
60013b06:	b184      	cbz	r4, 60013b2a <pinctrl_configure_pins+0x52>
			if (pins[i].pinmux.gpr_val) {
60013b08:	7c83      	ldrb	r3, [r0, #18]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60013b0a:	f890 b010 	ldrb.w	fp, [r0, #16]
			if (pins[i].pinmux.gpr_val) {
60013b0e:	f013 0f01 	tst.w	r3, #1
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60013b12:	f00b 0b1f 	and.w	fp, fp, #31
			if (pins[i].pinmux.gpr_val) {
60013b16:	d01e      	beq.n	60013b56 <pinctrl_configure_pins+0x7e>
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60013b18:	f003 0301 	and.w	r3, r3, #1
				*gpr_register |=
60013b1c:	f8d4 a000 	ldr.w	sl, [r4]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60013b20:	fa03 f30b 	lsl.w	r3, r3, fp
				*gpr_register |=
60013b24:	ea43 030a 	orr.w	r3, r3, sl
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60013b28:	6023      	str	r3, [r4, #0]
			IOMUXC_SW_MUX_CTL_PAD_SION(MCUX_IMX_INPUT_ENABLE(pin_ctrl_flags));
60013b2a:	0feb      	lsrs	r3, r5, #31
			IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(mux_mode) |
60013b2c:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
		*((volatile uint32_t *)((uintptr_t)mux_register)) =
60013b30:	f8c9 7000 	str.w	r7, [r9]
		if (input_register) {
60013b34:	f1be 0f00 	cmp.w	lr, #0
60013b38:	d003      	beq.n	60013b42 <pinctrl_configure_pins+0x6a>
				IOMUXC_SELECT_INPUT_DAISY(input_daisy);
60013b3a:	f002 0207 	and.w	r2, r2, #7
			*((volatile uint32_t *)((uintptr_t)input_register)) =
60013b3e:	f8ce 2000 	str.w	r2, [lr]
		if (config_register) {
60013b42:	f1bc 0f00 	cmp.w	ip, #0
60013b46:	d003      	beq.n	60013b50 <pinctrl_configure_pins+0x78>
				pin_ctrl_flags & (~(0x1 << MCUX_IMX_INPUT_ENABLE_SHIFT));
60013b48:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
			*((volatile uint32_t *)((uintptr_t)config_register)) =
60013b4c:	f8cc 5000 	str.w	r5, [ip]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60013b50:	3601      	adds	r6, #1
60013b52:	3018      	adds	r0, #24
60013b54:	e7c5      	b.n	60013ae2 <pinctrl_configure_pins+0xa>
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60013b56:	6823      	ldr	r3, [r4, #0]
60013b58:	fa08 fb0b 	lsl.w	fp, r8, fp
60013b5c:	ea23 030b 	bic.w	r3, r3, fp
60013b60:	e7e2      	b.n	60013b28 <pinctrl_configure_pins+0x50>

60013b62 <SystemInitHook>:
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
  /* Void implementation of the weak function. */
}
60013b62:	4770      	bx	lr

60013b64 <LPI2C_MasterCheckAndClearError>:
{
60013b64:	b510      	push	{r4, lr}
    if (0U != status)
60013b66:	f411 5470 	ands.w	r4, r1, #15360	; 0x3c00
{
60013b6a:	4602      	mov	r2, r0
    if (0U != status)
60013b6c:	d01b      	beq.n	60013ba6 <LPI2C_MasterCheckAndClearError+0x42>
        if (0U != (status & (uint32_t)kLPI2C_MasterPinLowTimeoutFlag))
60013b6e:	048b      	lsls	r3, r1, #18
60013b70:	d410      	bmi.n	60013b94 <LPI2C_MasterCheckAndClearError+0x30>
        else if (0U != (status & (uint32_t)kLPI2C_MasterArbitrationLostFlag))
60013b72:	050b      	lsls	r3, r1, #20
60013b74:	d411      	bmi.n	60013b9a <LPI2C_MasterCheckAndClearError+0x36>
        else if (0U != (status & (uint32_t)kLPI2C_MasterNackDetectFlag))
60013b76:	054b      	lsls	r3, r1, #21
60013b78:	d412      	bmi.n	60013ba0 <LPI2C_MasterCheckAndClearError+0x3c>
    status_t result = kStatus_Success;
60013b7a:	f411 5f80 	tst.w	r1, #4096	; 0x1000
60013b7e:	f240 3387 	movw	r3, #903	; 0x387
60013b82:	bf0c      	ite	eq
60013b84:	2000      	moveq	r0, #0
60013b86:	4618      	movne	r0, r3
    base->MSR = statusMask;
60013b88:	6154      	str	r4, [r2, #20]
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
60013b8a:	6913      	ldr	r3, [r2, #16]
60013b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
60013b90:	6113      	str	r3, [r2, #16]
}
60013b92:	bd10      	pop	{r4, pc}
            result = kStatus_LPI2C_PinLowTimeout;
60013b94:	f240 308a 	movw	r0, #906	; 0x38a
60013b98:	e7f6      	b.n	60013b88 <LPI2C_MasterCheckAndClearError+0x24>
            result = kStatus_LPI2C_ArbitrationLost;
60013b9a:	f240 3089 	movw	r0, #905	; 0x389
60013b9e:	e7f3      	b.n	60013b88 <LPI2C_MasterCheckAndClearError+0x24>
            result = kStatus_LPI2C_Nak;
60013ba0:	f240 3086 	movw	r0, #902	; 0x386
60013ba4:	e7f0      	b.n	60013b88 <LPI2C_MasterCheckAndClearError+0x24>
    status_t result = kStatus_Success;
60013ba6:	4620      	mov	r0, r4
    return result;
60013ba8:	e7f3      	b.n	60013b92 <LPI2C_MasterCheckAndClearError+0x2e>

60013baa <LPI2C_CheckForBusyBus>:
    return base->MSR;
60013baa:	6943      	ldr	r3, [r0, #20]
    if ((0U != (status & (uint32_t)kLPI2C_MasterBusBusyFlag)) && (0U == (status & (uint32_t)kLPI2C_MasterBusyFlag)))
60013bac:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    status_t ret = kStatus_Success;
60013bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
}
60013bb4:	bf0c      	ite	eq
60013bb6:	f44f 7061 	moveq.w	r0, #900	; 0x384
60013bba:	2000      	movne	r0, #0
60013bbc:	4770      	bx	lr

60013bbe <LPI2C_MasterSetBaudRate>:
{
60013bbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t filtScl = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSCL_MASK) >> LPI2C_MCFGR2_FILTSCL_SHIFT);
60013bc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    uint8_t bestclkCycle = 0U;
60013bc4:	2700      	movs	r7, #0
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60013bc6:	6904      	ldr	r4, [r0, #16]
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60013bc8:	f04f 0b0a 	mov.w	fp, #10
    uint8_t filtScl = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSCL_MASK) >> LPI2C_MCFGR2_FILTSCL_SHIFT);
60013bcc:	f3c3 4303 	ubfx	r3, r3, #16, #4
    uint8_t bestDivider = 1U;
60013bd0:	f04f 0c01 	mov.w	ip, #1
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60013bd4:	f004 0401 	and.w	r4, r4, #1
    uint32_t bestError = 0xffffffffu;
60013bd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    uint8_t bestPre     = 0U;
60013bdc:	46b9      	mov	r9, r7
    for (prescale = 0U; prescale <= 7U; prescale++)
60013bde:	46be      	mov	lr, r7
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60013be0:	9400      	str	r4, [sp, #0]
    uint8_t divider     = 1U;
60013be2:	4665      	mov	r5, ip
    base->MCR = (base->MCR & ~LPI2C_MCR_MEN_MASK) | LPI2C_MCR_MEN(enable);
60013be4:	6904      	ldr	r4, [r0, #16]
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60013be6:	3302      	adds	r3, #2
60013be8:	f024 0401 	bic.w	r4, r4, #1
60013bec:	6104      	str	r4, [r0, #16]
60013bee:	fb0b f401 	mul.w	r4, fp, r1
60013bf2:	9401      	str	r4, [sp, #4]
60013bf4:	9c01      	ldr	r4, [sp, #4]
60013bf6:	fbb4 f4f5 	udiv	r4, r4, r5
60013bfa:	fbb4 f4f2 	udiv	r4, r4, r2
60013bfe:	fbb3 f8f5 	udiv	r8, r3, r5
60013c02:	3405      	adds	r4, #5
60013c04:	f1c8 06fe 	rsb	r6, r8, #254	; 0xfe
60013c08:	fbb4 f4fb 	udiv	r4, r4, fp
60013c0c:	4434      	add	r4, r6
        if (clkCycle > (120U - (2U + filtScl) / divider))
60013c0e:	f1c8 0678 	rsb	r6, r8, #120	; 0x78
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60013c12:	b2e4      	uxtb	r4, r4
        if (clkCycle > (120U - (2U + filtScl) / divider))
60013c14:	42b4      	cmp	r4, r6
60013c16:	d95e      	bls.n	60013cd6 <LPI2C_MasterSetBaudRate+0x118>
    for (prescale = 0U; prescale <= 7U; prescale++)
60013c18:	f10e 0e01 	add.w	lr, lr, #1
        divider *= 2U;
60013c1c:	006d      	lsls	r5, r5, #1
    for (prescale = 0U; prescale <= 7U; prescale++)
60013c1e:	fa5f fe8e 	uxtb.w	lr, lr
        divider *= 2U;
60013c22:	b2ed      	uxtb	r5, r5
    for (prescale = 0U; prescale <= 7U; prescale++)
60013c24:	f1be 0f08 	cmp.w	lr, #8
60013c28:	d1e4      	bne.n	60013bf4 <LPI2C_MasterSetBaudRate+0x36>
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60013c2a:	2664      	movs	r6, #100	; 0x64
60013c2c:	1c7d      	adds	r5, r7, #1
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60013c2e:	fbb3 f4fc 	udiv	r4, r3, ip
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60013c32:	2334      	movs	r3, #52	; 0x34
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60013c34:	1b3c      	subs	r4, r7, r4
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60013c36:	434b      	muls	r3, r1
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60013c38:	f3c4 0447 	ubfx	r4, r4, #1, #8
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60013c3c:	fbb3 f3f2 	udiv	r3, r3, r2
60013c40:	fbb3 f3fc 	udiv	r3, r3, ip
60013c44:	fbb3 f3f6 	udiv	r3, r3, r6
60013c48:	1aed      	subs	r5, r5, r3
60013c4a:	42ac      	cmp	r4, r5
60013c4c:	d85d      	bhi.n	60013d0a <LPI2C_MasterSetBaudRate+0x14c>
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60013c4e:	2514      	movs	r5, #20
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60013c50:	fbb1 f2f2 	udiv	r2, r1, r2
60013c54:	fbb2 f1fc 	udiv	r1, r2, ip
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60013c58:	fbb2 f2f5 	udiv	r2, r2, r5
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60013c5c:	084b      	lsrs	r3, r1, #1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60013c5e:	f10c 0502 	add.w	r5, ip, #2
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60013c62:	0889      	lsrs	r1, r1, #2
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60013c64:	3b01      	subs	r3, #1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60013c66:	42aa      	cmp	r2, r5
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60013c68:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60013c6c:	b2db      	uxtb	r3, r3
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60013c6e:	b2c9      	uxtb	r1, r1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60013c70:	d910      	bls.n	60013c94 <LPI2C_MasterSetBaudRate+0xd6>
        uint8_t filtSda = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSDA_MASK) >> LPI2C_MCFGR2_FILTSDA_SHIFT);
60013c72:	6a85      	ldr	r5, [r0, #40]	; 0x28
        if (filtSda < (sourceClock_Hz / baudRate_Hz / 20U - bestDivider - 2U))
60013c74:	3a02      	subs	r2, #2
        uint8_t filtSda = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSDA_MASK) >> LPI2C_MCFGR2_FILTSDA_SHIFT);
60013c76:	f3c5 6503 	ubfx	r5, r5, #24, #4
        if (filtSda < (sourceClock_Hz / baudRate_Hz / 20U - bestDivider - 2U))
60013c7a:	eba2 020c 	sub.w	r2, r2, ip
60013c7e:	4295      	cmp	r5, r2
            filtSda = (uint8_t)(sourceClock_Hz / baudRate_Hz / 20U) - bestDivider - 2U;
60013c80:	bf38      	it	cc
60013c82:	b2d5      	uxtbcc	r5, r2
        base->MCFGR2 = (base->MCFGR2 & ~LPI2C_MCFGR2_FILTSDA_MASK) | LPI2C_MCFGR2_FILTSDA(filtSda);
60013c84:	6a82      	ldr	r2, [r0, #40]	; 0x28
60013c86:	062d      	lsls	r5, r5, #24
60013c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
60013c8c:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
60013c90:	4315      	orrs	r5, r2
60013c92:	6285      	str	r5, [r0, #40]	; 0x28
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60013c94:	041b      	lsls	r3, r3, #16
             LPI2C_MCCR0_CLKLO((uint32_t)((uint32_t)bestclkCycle - (uint32_t)tmpHigh)) |
60013c96:	1b3f      	subs	r7, r7, r4
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60013c98:	0609      	lsls	r1, r1, #24
    base->MCFGR1 = (base->MCFGR1 & ~LPI2C_MCFGR1_PRESCALE_MASK) | LPI2C_MCFGR1_PRESCALE(bestPre);
60013c9a:	f009 0907 	and.w	r9, r9, #7
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60013c9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
    tmpReg = LPI2C_MCCR0_CLKHI((uint32_t)tmpHigh) |
60013ca2:	0222      	lsls	r2, r4, #8
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60013ca4:	f001 517c 	and.w	r1, r1, #1056964608	; 0x3f000000
             LPI2C_MCCR0_CLKLO((uint32_t)((uint32_t)bestclkCycle - (uint32_t)tmpHigh)) |
60013ca8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    tmpReg = LPI2C_MCCR0_CLKHI((uint32_t)tmpHigh) |
60013cac:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
60013cb0:	430b      	orrs	r3, r1
60013cb2:	4313      	orrs	r3, r2
60013cb4:	433b      	orrs	r3, r7
    base->MCCR0 = tmpReg;
60013cb6:	6483      	str	r3, [r0, #72]	; 0x48
    base->MCFGR1 = (base->MCFGR1 & ~LPI2C_MCFGR1_PRESCALE_MASK) | LPI2C_MCFGR1_PRESCALE(bestPre);
60013cb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
60013cba:	f023 0307 	bic.w	r3, r3, #7
60013cbe:	ea43 0309 	orr.w	r3, r3, r9
60013cc2:	6243      	str	r3, [r0, #36]	; 0x24
    if (wasEnabled)
60013cc4:	9b00      	ldr	r3, [sp, #0]
60013cc6:	b11b      	cbz	r3, 60013cd0 <LPI2C_MasterSetBaudRate+0x112>
60013cc8:	6903      	ldr	r3, [r0, #16]
60013cca:	f043 0301 	orr.w	r3, r3, #1
60013cce:	6103      	str	r3, [r0, #16]
}
60013cd0:	b003      	add	sp, #12
60013cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        computedRate = (sourceClock_Hz / (uint32_t)divider) /
60013cd6:	fbb1 f6f5 	udiv	r6, r1, r5
                       ((uint32_t)clkCycle + 2U + (2U + (uint32_t)filtScl) / (uint32_t)divider);
60013cda:	f108 0802 	add.w	r8, r8, #2
60013cde:	44a0      	add	r8, r4
        computedRate = (sourceClock_Hz / (uint32_t)divider) /
60013ce0:	fbb6 f6f8 	udiv	r6, r6, r8
        absError = baudRate_Hz > computedRate ? baudRate_Hz - computedRate : computedRate - baudRate_Hz;
60013ce4:	42b2      	cmp	r2, r6
60013ce6:	d907      	bls.n	60013cf8 <LPI2C_MasterSetBaudRate+0x13a>
60013ce8:	1b96      	subs	r6, r2, r6
        if (absError < bestError)
60013cea:	4556      	cmp	r6, sl
60013cec:	d294      	bcs.n	60013c18 <LPI2C_MasterSetBaudRate+0x5a>
60013cee:	46b2      	mov	sl, r6
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60013cf0:	4627      	mov	r7, r4
60013cf2:	46f1      	mov	r9, lr
60013cf4:	46ac      	mov	ip, r5
60013cf6:	e78f      	b.n	60013c18 <LPI2C_MasterSetBaudRate+0x5a>
        absError = baudRate_Hz > computedRate ? baudRate_Hz - computedRate : computedRate - baudRate_Hz;
60013cf8:	1ab6      	subs	r6, r6, r2
        if (absError < bestError)
60013cfa:	4556      	cmp	r6, sl
60013cfc:	d28c      	bcs.n	60013c18 <LPI2C_MasterSetBaudRate+0x5a>
            if (absError == 0U)
60013cfe:	2e00      	cmp	r6, #0
60013d00:	d1f5      	bne.n	60013cee <LPI2C_MasterSetBaudRate+0x130>
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60013d02:	4627      	mov	r7, r4
60013d04:	46f1      	mov	r9, lr
60013d06:	46ac      	mov	ip, r5
60013d08:	e78f      	b.n	60013c2a <LPI2C_MasterSetBaudRate+0x6c>
        tmpHigh = tmpHigh - 1U;
60013d0a:	3c01      	subs	r4, #1
60013d0c:	b2e4      	uxtb	r4, r4
60013d0e:	e79c      	b.n	60013c4a <LPI2C_MasterSetBaudRate+0x8c>

60013d10 <LPUART_EnableInterrupts>:
    tempReg |= ((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60013d10:	020b      	lsls	r3, r1, #8
    uint32_t tempReg = base->BAUD;
60013d12:	6902      	ldr	r2, [r0, #16]
    tempReg |= ((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60013d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
60013d18:	4313      	orrs	r3, r2
                 (mask & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
60013d1a:	f401 7240 	and.w	r2, r1, #768	; 0x300
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d1e:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    base->BAUD = tempReg;
60013d22:	6103      	str	r3, [r0, #16]
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60013d24:	6a83      	ldr	r3, [r0, #40]	; 0x28
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d26:	f421 2173 	bic.w	r1, r1, #995328	; 0xf3000
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60013d2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d2e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60013d32:	4313      	orrs	r3, r2
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d34:	f021 010f 	bic.w	r1, r1, #15
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60013d38:	6283      	str	r3, [r0, #40]	; 0x28
    base->CTRL |= mask;
60013d3a:	6983      	ldr	r3, [r0, #24]
60013d3c:	4319      	orrs	r1, r3
60013d3e:	6181      	str	r1, [r0, #24]
}
60013d40:	4770      	bx	lr

60013d42 <LPUART_DisableInterrupts>:
    tempReg &= ~((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60013d42:	020a      	lsls	r2, r1, #8
    uint32_t tempReg = base->BAUD;
60013d44:	6903      	ldr	r3, [r0, #16]
    tempReg &= ~((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60013d46:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
60013d4a:	ea23 0302 	bic.w	r3, r3, r2
                 ~(mask & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
60013d4e:	f401 7240 	and.w	r2, r1, #768	; 0x300
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d52:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    base->BAUD = tempReg;
60013d56:	6103      	str	r3, [r0, #16]
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60013d58:	6a83      	ldr	r3, [r0, #40]	; 0x28
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d5a:	f421 2173 	bic.w	r1, r1, #995328	; 0xf3000
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60013d5e:	ea23 0302 	bic.w	r3, r3, r2
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d62:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60013d66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60013d6a:	f021 010f 	bic.w	r1, r1, #15
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60013d6e:	6283      	str	r3, [r0, #40]	; 0x28
    base->CTRL &= ~mask;
60013d70:	6983      	ldr	r3, [r0, #24]
60013d72:	ea23 0301 	bic.w	r3, r3, r1
60013d76:	6183      	str	r3, [r0, #24]
}
60013d78:	4770      	bx	lr

60013d7a <ADC_DoAutoCalibration>:
#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
    bool bHWTrigger = false;

    /* The calibration would be failed when in hardwar mode.
     * Remember the hardware trigger state here and restore it later if the hardware trigger is enabled.*/
    if (0U != (ADC_CFG_ADTRG_MASK & base->CFG))
60013d7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
60013d7c:	4603      	mov	r3, r0
    if (0U != (ADC_CFG_ADTRG_MASK & base->CFG))
60013d7e:	f412 5200 	ands.w	r2, r2, #8192	; 0x2000
60013d82:	d004      	beq.n	60013d8e <ADC_DoAutoCalibration+0x14>
        base->CFG &= ~ADC_CFG_ADTRG_MASK;
60013d84:	6c42      	ldr	r2, [r0, #68]	; 0x44
60013d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
60013d8a:	6442      	str	r2, [r0, #68]	; 0x44
    {
        bHWTrigger = true;
60013d8c:	2201      	movs	r2, #1
        ADC_EnableHardwareTrigger(base, false);
    }
#endif

    /* Clear the CALF and launch the calibration. */
    base->GS = ADC_GS_CALF_MASK; /* Clear the CALF. */
60013d8e:	2102      	movs	r1, #2
60013d90:	64d9      	str	r1, [r3, #76]	; 0x4c
    base->GC |= ADC_GC_CAL_MASK; /* Launch the calibration. */
60013d92:	6c99      	ldr	r1, [r3, #72]	; 0x48
60013d94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
60013d98:	6499      	str	r1, [r3, #72]	; 0x48

    /* Check the status of CALF bit in ADC_GS and the CAL bit in ADC_GC. */
    while (0U != (base->GC & ADC_GC_CAL_MASK))
60013d9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
60013d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
60013da0:	d110      	bne.n	60013dc4 <ADC_DoAutoCalibration+0x4a>
    return (((base->HS) & (1UL << channelGroup)) >> channelGroup);
60013da2:	6a19      	ldr	r1, [r3, #32]
    }

    /* When CAL bit becomes '0' then check the CALF status and COCO[0] bit status. */
    if (0U == ADC_GetChannelStatusFlags(base, 0U)) /* Check the COCO[0] bit status. */
    {
        status = kStatus_Fail;
60013da4:	f011 0f01 	tst.w	r1, #1
 *
 * @return Flags' mask if indicated flags are asserted. See "adc_status_flags_t".
 */
static inline uint32_t ADC_GetStatusFlags(ADC_Type *base)
{
    return base->GS;
60013da8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
60013daa:	bf08      	it	eq
60013dac:	2001      	moveq	r0, #1
    }
    if (0U != (ADC_GetStatusFlags(base) & (uint32_t)kADC_CalibrationFailedFlag)) /* Check the CALF status. */
    {
        status = kStatus_Fail;
60013dae:	f011 0f02 	tst.w	r1, #2
    return base->R[channelGroup];
60013db2:	6a59      	ldr	r1, [r3, #36]	; 0x24
60013db4:	bf18      	it	ne
60013db6:	2001      	movne	r0, #1
    /* Clear conversion done flag. */
    (void)ADC_GetChannelConversionValue(base, 0U);

#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
    /* Restore original trigger mode. */
    if (true == bHWTrigger)
60013db8:	b11a      	cbz	r2, 60013dc2 <ADC_DoAutoCalibration+0x48>
        base->CFG |= ADC_CFG_ADTRG_MASK;
60013dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
60013dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
60013dc0:	645a      	str	r2, [r3, #68]	; 0x44
        ADC_EnableHardwareTrigger(base, true);
    }
#endif

    return status;
}
60013dc2:	4770      	bx	lr
    return base->GS;
60013dc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        if (0U != (ADC_GetStatusFlags(base) & (uint32_t)kADC_CalibrationFailedFlag))
60013dc6:	0789      	lsls	r1, r1, #30
60013dc8:	d5e7      	bpl.n	60013d9a <ADC_DoAutoCalibration+0x20>
            status = kStatus_Fail;
60013dca:	2001      	movs	r0, #1
60013dcc:	e7e9      	b.n	60013da2 <ADC_DoAutoCalibration+0x28>

60013dce <ADC_SetHardwareAverageConfig>:
 */
void ADC_SetHardwareAverageConfig(ADC_Type *base, adc_hardware_average_mode_t mode)
{
    uint32_t tmp32;

    if (mode == kADC_HardwareAverageDiasable)
60013dce:	2904      	cmp	r1, #4
60013dd0:	d104      	bne.n	60013ddc <ADC_SetHardwareAverageConfig+0xe>
    {
        base->GC &= ~ADC_GC_AVGE_MASK;
60013dd2:	6c83      	ldr	r3, [r0, #72]	; 0x48
60013dd4:	f023 0320 	bic.w	r3, r3, #32
    else
    {
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
        tmp32 |= ADC_CFG_AVGS(mode);
        base->CFG = tmp32;
        base->GC |= ADC_GC_AVGE_MASK; /* Enable the hardware compare. */
60013dd8:	6483      	str	r3, [r0, #72]	; 0x48
    }
}
60013dda:	4770      	bx	lr
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
60013ddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
        tmp32 |= ADC_CFG_AVGS(mode);
60013dde:	0389      	lsls	r1, r1, #14
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
60013de0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
        tmp32 |= ADC_CFG_AVGS(mode);
60013de4:	b289      	uxth	r1, r1
60013de6:	4319      	orrs	r1, r3
        base->CFG = tmp32;
60013de8:	6441      	str	r1, [r0, #68]	; 0x44
        base->GC |= ADC_GC_AVGE_MASK; /* Enable the hardware compare. */
60013dea:	6c83      	ldr	r3, [r0, #72]	; 0x48
60013dec:	f043 0320 	orr.w	r3, r3, #32
60013df0:	e7f2      	b.n	60013dd8 <ADC_SetHardwareAverageConfig+0xa>

60013df2 <USB_EhciPhyInit>:
 *
 * @retval kStatus_USB_Success      cancel successfully.
 * @retval kStatus_USB_Error        the freq value is incorrect.
 */
uint32_t USB_EhciPhyInit(uint8_t controllerId, uint32_t freq, usb_phy_config_struct_t *phyConfig)
{
60013df2:	b538      	push	{r3, r4, r5, lr}
60013df4:	4604      	mov	r4, r0
60013df6:	4615      	mov	r5, r2
#if ((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
    USBPHY_Type *usbPhyBase;

    usbPhyBase = (USBPHY_Type *)USB_EhciPhyGetBase(controllerId);
60013df8:	f7f8 fd02 	bl	6000c800 <USB_EhciPhyGetBase>
    if (NULL == usbPhyBase)
60013dfc:	2800      	cmp	r0, #0
60013dfe:	d039      	beq.n	60013e74 <USB_EhciPhyInit+0x82>
    ANATOP->HW_ANADIG_USB2_CHRG_DETECT.SET =
        ANATOP_HW_ANADIG_USB2_CHRG_DETECT_CHK_CHRG_B_MASK | ANATOP_HW_ANADIG_USB2_CHRG_DETECT_EN_B_MASK;
#endif

#if (defined USB_ANALOG)
    USB_ANALOG->INSTANCE[controllerId - (uint8_t)kUSB_ControllerEhci0].CHRG_DETECT_SET =
60013e00:	2260      	movs	r2, #96	; 0x60
60013e02:	1ea3      	subs	r3, r4, #2
60013e04:	4353      	muls	r3, r2
60013e06:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
60013e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
60013e0e:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
60013e12:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

#if ((!(defined FSL_FEATURE_SOC_CCM_ANALOG_COUNT)) && (!(defined FSL_FEATURE_SOC_ANATOP_COUNT)))

    usbPhyBase->TRIM_OVERRIDE_EN = 0x001fU; /* override IFR value */
#endif
    usbPhyBase->CTRL |= USBPHY_CTRL_SET_ENUTMILEVEL2_MASK; /* support LS device. */
60013e16:	6b03      	ldr	r3, [r0, #48]	; 0x30
60013e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
60013e1c:	6303      	str	r3, [r0, #48]	; 0x30
    usbPhyBase->CTRL |= USBPHY_CTRL_SET_ENUTMILEVEL3_MASK; /* support external FS Hub with LS device connected. */
60013e1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
60013e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
60013e24:	6303      	str	r3, [r0, #48]	; 0x30
    /* PWD register provides overall control of the PHY power state */
    usbPhyBase->PWD = 0U;
60013e26:	2300      	movs	r3, #0
60013e28:	6003      	str	r3, [r0, #0]
    if (((uint8_t)kUSB_ControllerIp3516Hs0 == controllerId) || ((uint8_t)kUSB_ControllerIp3516Hs1 == controllerId) ||
60013e2a:	f1a4 030a 	sub.w	r3, r4, #10
60013e2e:	2b01      	cmp	r3, #1
60013e30:	d902      	bls.n	60013e38 <USB_EhciPhyInit+0x46>
60013e32:	3c06      	subs	r4, #6
60013e34:	2c01      	cmp	r4, #1
60013e36:	d805      	bhi.n	60013e44 <USB_EhciPhyInit+0x52>
        ((uint8_t)kUSB_ControllerLpcIp3511Hs0 == controllerId) ||
        ((uint8_t)kUSB_ControllerLpcIp3511Hs1 == controllerId))
    {
        usbPhyBase->CTRL_SET = USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_MASK;
60013e38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
60013e3c:	6343      	str	r3, [r0, #52]	; 0x34
        usbPhyBase->CTRL_SET = USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_MASK;
60013e3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
60013e42:	6343      	str	r3, [r0, #52]	; 0x34
    }
    if (NULL != phyConfig)
60013e44:	b90d      	cbnz	r5, 60013e4a <USB_EhciPhyInit+0x58>
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
    }
#endif

    return (uint8_t)kStatus_USB_Success;
60013e46:	2000      	movs	r0, #0
}
60013e48:	bd38      	pop	{r3, r4, r5, pc}
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60013e4a:	786b      	ldrb	r3, [r5, #1]
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
60013e4c:	78a9      	ldrb	r1, [r5, #2]
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60013e4e:	041b      	lsls	r3, r3, #16
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
60013e50:	6902      	ldr	r2, [r0, #16]
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
60013e52:	0209      	lsls	r1, r1, #8
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60013e54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
60013e58:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
60013e5c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
60013e60:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60013e64:	430b      	orrs	r3, r1
60013e66:	7829      	ldrb	r1, [r5, #0]
60013e68:	f001 010f 	and.w	r1, r1, #15
60013e6c:	430b      	orrs	r3, r1
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
60013e6e:	4313      	orrs	r3, r2
        usbPhyBase->TX =
60013e70:	6103      	str	r3, [r0, #16]
60013e72:	e7e8      	b.n	60013e46 <USB_EhciPhyInit+0x54>
        return (uint8_t)kStatus_USB_Error;
60013e74:	2001      	movs	r0, #1
60013e76:	e7e7      	b.n	60013e48 <USB_EhciPhyInit+0x56>

60013e78 <USB_DeviceEhciSetDefaultState>:
    ehciState->dtdFree = ehciState->dtd;
60013e78:	68c2      	ldr	r2, [r0, #12]
60013e7a:	2320      	movs	r3, #32
{
60013e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ehciState->dtdFree = ehciState->dtd;
60013e7e:	6102      	str	r2, [r0, #16]
        p->nextDtdPointer = (uint32_t)&ehciState->dtd[i];
60013e80:	68c1      	ldr	r1, [r0, #12]
60013e82:	4419      	add	r1, r3
    for (uint32_t i = 1U; i < USB_DEVICE_CONFIG_EHCI_MAX_DTD; i++)
60013e84:	3320      	adds	r3, #32
60013e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        p->nextDtdPointer = (uint32_t)&ehciState->dtd[i];
60013e8a:	6011      	str	r1, [r2, #0]
        p                 = (usb_device_ehci_dtd_struct_t *)p->nextDtdPointer;
60013e8c:	6812      	ldr	r2, [r2, #0]
    for (uint32_t i = 1U; i < USB_DEVICE_CONFIG_EHCI_MAX_DTD; i++)
60013e8e:	d1f7      	bne.n	60013e80 <USB_DeviceEhciSetDefaultState+0x8>
    p->nextDtdPointer   = 0U;
60013e90:	2300      	movs	r3, #0
60013e92:	f100 0410 	add.w	r4, r0, #16
        ehciState->qh[i].nextDtdPointer = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60013e96:	2701      	movs	r7, #1
        ehciState->qh[i].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
60013e98:	2640      	movs	r6, #64	; 0x40
    p->nextDtdPointer   = 0U;
60013e9a:	6013      	str	r3, [r2, #0]
    ehciState->dtdCount = USB_DEVICE_CONFIG_EHCI_MAX_DTD;
60013e9c:	2210      	movs	r2, #16
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ITC_MASK;
60013e9e:	6841      	ldr	r1, [r0, #4]
    ehciState->dtdCount = USB_DEVICE_CONFIG_EHCI_MAX_DTD;
60013ea0:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ITC_MASK;
60013ea4:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
60013ea8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
60013eac:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_ITC(0U);
60013eb0:	6842      	ldr	r2, [r0, #4]
60013eb2:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
60013eb6:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_SLOM_MASK;
60013eba:	6841      	ldr	r1, [r0, #4]
60013ebc:	f8d1 21a8 	ldr.w	r2, [r1, #424]	; 0x1a8
60013ec0:	f042 0208 	orr.w	r2, r2, #8
60013ec4:	f8c1 21a8 	str.w	r2, [r1, #424]	; 0x1a8
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_ES_MASK;
60013ec8:	6841      	ldr	r1, [r0, #4]
60013eca:	f8d1 21a8 	ldr.w	r2, [r1, #424]	; 0x1a8
60013ece:	f022 0204 	bic.w	r2, r2, #4
60013ed2:	f8c1 21a8 	str.w	r2, [r1, #424]	; 0x1a8
        ehciState->dtdHard[i]                                              = NULL;
60013ed6:	461a      	mov	r2, r3
        ehciState->qh[i].nextDtdPointer = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60013ed8:	6881      	ldr	r1, [r0, #8]
60013eda:	4419      	add	r1, r3
60013edc:	608f      	str	r7, [r1, #8]
        ehciState->qh[i].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
60013ede:	6881      	ldr	r1, [r0, #8]
60013ee0:	58cd      	ldr	r5, [r1, r3]
60013ee2:	f366 451a 	bfi	r5, r6, #16, #11
60013ee6:	50cd      	str	r5, [r1, r3]
        ehciState->dtdHard[i]                                              = NULL;
60013ee8:	f844 2f04 	str.w	r2, [r4, #4]!
        ehciState->dtdTail[i]                                              = NULL;
60013eec:	6422      	str	r2, [r4, #64]	; 0x40
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
60013eee:	6881      	ldr	r1, [r0, #8]
60013ef0:	4419      	add	r1, r3
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
60013ef2:	3340      	adds	r3, #64	; 0x40
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
60013ef4:	f891 5038 	ldrb.w	r5, [r1, #56]	; 0x38
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
60013ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
60013efc:	f362 0500 	bfi	r5, r2, #0, #1
60013f00:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
60013f04:	d1e8      	bne.n	60013ed8 <USB_DeviceEhciSetDefaultState+0x60>
    ehciState->registerBase->EPLISTADDR = (uint32_t)ehciState->qh;
60013f06:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
60013f0a:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
    ehciState->registerBase->USBINTR =
60013f0e:	2147      	movs	r1, #71	; 0x47
    ehciState->registerBase->DEVICEADDR = 0U;
60013f10:	6843      	ldr	r3, [r0, #4]
60013f12:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    ehciState->registerBase->USBINTR =
60013f16:	6843      	ldr	r3, [r0, #4]
60013f18:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    ehciState->isResetting = 0U;
60013f1c:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
}
60013f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

60013f22 <USB_DeviceEhciSend>:
        (endpointAddress & USB_ENDPOINT_NUMBER_MASK) | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
60013f22:	f001 010f 	and.w	r1, r1, #15
    return USB_DeviceEhciTransfer(
60013f26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
60013f2a:	f7f8 bca1 	b.w	6000c870 <USB_DeviceEhciTransfer>

60013f2e <USB_DeviceEhciRecv>:
    return USB_DeviceEhciTransfer(
60013f2e:	f001 010f 	and.w	r1, r1, #15
60013f32:	f7f8 bc9d 	b.w	6000c870 <USB_DeviceEhciTransfer>

60013f36 <USB_DeviceEhciEndpointDeinit>:
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
60013f36:	08ca      	lsrs	r2, r1, #3
{
60013f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
60013f3c:	f002 0210 	and.w	r2, r2, #16
60013f40:	f001 060f 	and.w	r6, r1, #15
    uint32_t primeBit =
60013f44:	2501      	movs	r5, #1
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
60013f46:	6883      	ldr	r3, [r0, #8]
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
60013f48:	4332      	orrs	r2, r6
{
60013f4a:	4604      	mov	r4, r0
    uint8_t direction =
60013f4c:	09cf      	lsrs	r7, r1, #7
    uint32_t primeBit =
60013f4e:	4095      	lsls	r5, r2
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | direction;
60013f50:	0072      	lsls	r2, r6, #1
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
60013f52:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
60013f56:	eb03 1382 	add.w	r3, r3, r2, lsl #6
60013f5a:	ea4f 1882 	mov.w	r8, r2, lsl #6
60013f5e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60013f62:	f36f 0200 	bfc	r2, #0, #1
60013f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    (void)USB_DeviceEhciCancel(ehciState, ep);
60013f6a:	f7f8 fe6f 	bl	6000cc4c <USB_DeviceEhciCancel>
    if ((0U != (ehciState->registerBase->EPPRIME & primeBit)) || (0U != (ehciState->registerBase->EPSR & primeBit)))
60013f6e:	6863      	ldr	r3, [r4, #4]
60013f70:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
60013f74:	422a      	tst	r2, r5
60013f76:	d11a      	bne.n	60013fae <USB_DeviceEhciEndpointDeinit+0x78>
60013f78:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
60013f7c:	402b      	ands	r3, r5
60013f7e:	d116      	bne.n	60013fae <USB_DeviceEhciEndpointDeinit+0x78>
    ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristics = 0U;
60013f80:	68a2      	ldr	r2, [r4, #8]
60013f82:	f842 3008 	str.w	r3, [r2, r8]
    if (0U == endpoint)
60013f86:	6863      	ldr	r3, [r4, #4]
60013f88:	b976      	cbnz	r6, 60013fa8 <USB_DeviceEhciEndpointDeinit+0x72>
            ~((0U != direction) ? (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXT_MASK | USBHS_EPCR_TXS_MASK) :
60013f8a:	2f00      	cmp	r7, #0
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60013f8c:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
    return kStatus_USB_Success;
60013f90:	f04f 0000 	mov.w	r0, #0
            ~((0U != direction) ? (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXT_MASK | USBHS_EPCR_TXS_MASK) :
60013f94:	bf0c      	ite	eq
60013f96:	f06f 018d 	mvneq.w	r1, #141	; 0x8d
60013f9a:	f46f 010d 	mvnne.w	r1, #9240576	; 0x8d0000
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60013f9e:	400a      	ands	r2, r1
60013fa0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
60013fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60013fa8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
60013fac:	e7ed      	b.n	60013f8a <USB_DeviceEhciEndpointDeinit+0x54>
        return kStatus_USB_Busy;
60013fae:	2002      	movs	r0, #2
60013fb0:	e7f8      	b.n	60013fa4 <USB_DeviceEhciEndpointDeinit+0x6e>

60013fb2 <USB_DeviceEhciControl>:
 * @param param            The param type is determined by the selected item.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceEhciControl(usb_device_controller_handle ehciHandle, usb_device_control_type_t type, void *param)
{
60013fb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60013fb6:	460e      	mov	r6, r1
60013fb8:	4615      	mov	r5, r2
#if ((defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))
    uint64_t startTick;
#endif
#endif

    if (NULL == ehciHandle)
60013fba:	4604      	mov	r4, r0
60013fbc:	2800      	cmp	r0, #0
60013fbe:	f000 816e 	beq.w	6001429e <USB_DeviceEhciControl+0x2ec>

#if ((defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))
    deviceHandle = (usb_device_struct_t *)ehciState->deviceHandle;
#endif

    switch (type)
60013fc2:	2914      	cmp	r1, #20
60013fc4:	f200 816d 	bhi.w	600142a2 <USB_DeviceEhciControl+0x2f0>
60013fc8:	e8df f011 	tbh	[pc, r1, lsl #1]
60013fcc:	00200015 	.word	0x00200015
60013fd0:	00be0026 	.word	0x00be0026
60013fd4:	00ed00c6 	.word	0x00ed00c6
60013fd8:	012c0126 	.word	0x012c0126
60013fdc:	016b001c 	.word	0x016b001c
60013fe0:	016b016b 	.word	0x016b016b
60013fe4:	016b016b 	.word	0x016b016b
60013fe8:	01640151 	.word	0x01640151
60013fec:	016b016b 	.word	0x016b016b
60013ff0:	016b016b 	.word	0x016b016b
60013ff4:	0148      	.short	0x0148
    {
        case kUSB_DeviceControlRun:
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
60013ff6:	6842      	ldr	r2, [r0, #4]
60013ff8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60013ffc:	f043 0301 	orr.w	r3, r3, #1
60014000:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
            error = kStatus_USB_Success;
            break;
        case kUSB_DeviceControlStop:
            ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
            error = kStatus_USB_Success;
60014004:	2600      	movs	r6, #0
            /*no action*/
            break;
    }

    return error;
}
60014006:	4630      	mov	r0, r6
60014008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
6001400c:	6842      	ldr	r2, [r0, #4]
6001400e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60014012:	f023 0301 	bic.w	r3, r3, #1
60014016:	e7f3      	b.n	60014000 <USB_DeviceEhciControl+0x4e>
            if (NULL != param)
60014018:	2a00      	cmp	r2, #0
6001401a:	f000 8142 	beq.w	600142a2 <USB_DeviceEhciControl+0x2f0>
    uint32_t primeBit      = 1UL << ((epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6001401e:	f892 9002 	ldrb.w	r9, [r2, #2]
60014022:	f04f 0801 	mov.w	r8, #1
    uint16_t maxPacketSize = epInit->maxPacketSize & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_SIZE_MASK;
60014026:	f8b2 b000 	ldrh.w	fp, [r2]
                                ((epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6001402a:	ea4f 03d9 	mov.w	r3, r9, lsr #3
6001402e:	f009 070f 	and.w	r7, r9, #15
    (void)USB_DeviceEhciCancel(ehciState, epInit->endpointAddress);
60014032:	4649      	mov	r1, r9
    uint8_t transferType = epInit->transferType & USB_DESCRIPTOR_ENDPOINT_ATTRIBUTE_TYPE_MASK;
60014034:	f892 a003 	ldrb.w	sl, [r2, #3]
                                ((epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
60014038:	f003 0310 	and.w	r3, r3, #16
    uint32_t primeBit      = 1UL << ((epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6001403c:	433b      	orrs	r3, r7
6001403e:	fa08 f803 	lsl.w	r8, r8, r3
    (void)USB_DeviceEhciCancel(ehciState, epInit->endpointAddress);
60014042:	f7f8 fe03 	bl	6000cc4c <USB_DeviceEhciCancel>
    if ((0U != (ehciState->registerBase->EPPRIME & primeBit)) || (0U != (ehciState->registerBase->EPSR & primeBit)))
60014046:	6863      	ldr	r3, [r4, #4]
60014048:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
6001404c:	ea18 0f02 	tst.w	r8, r2
60014050:	d1d9      	bne.n	60014006 <USB_DeviceEhciControl+0x54>
60014052:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
60014056:	ea18 0803 	ands.w	r8, r8, r3
6001405a:	d1d4      	bne.n	60014006 <USB_DeviceEhciControl+0x54>
    uint8_t transferType = epInit->transferType & USB_DESCRIPTOR_ENDPOINT_ATTRIBUTE_TYPE_MASK;
6001405c:	f00a 0303 	and.w	r3, sl, #3
    uint8_t index        = ((uint8_t)((uint32_t)endpoint << 1U)) | direction;
60014060:	0079      	lsls	r1, r7, #1
    uint16_t maxPacketSize = epInit->maxPacketSize & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_SIZE_MASK;
60014062:	f3cb 000a 	ubfx	r0, fp, #0, #11
    uint8_t direction      = (epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
60014066:	ea4f 16d9 	mov.w	r6, r9, lsr #7
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
6001406a:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
    if (USB_ENDPOINT_ISOCHRONOUS == transferType)
6001406e:	2b01      	cmp	r3, #1
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
60014070:	f8d4 c008 	ldr.w	ip, [r4, #8]
60014074:	ea4f 1181 	mov.w	r1, r1, lsl #6
    if (USB_ENDPOINT_ISOCHRONOUS == transferType)
60014078:	d132      	bne.n	600140e0 <USB_DeviceEhciControl+0x12e>
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
6001407a:	882a      	ldrh	r2, [r5, #0]
        if (maxPacketSize > USB_DEVICE_MAX_HS_ISO_MAX_PACKET_SIZE)
6001407c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
60014080:	f85c e001 	ldr.w	lr, [ip, r1]
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
60014084:	f3c2 22c1 	ubfx	r2, r2, #11, #2
        if (maxPacketSize > USB_DEVICE_MAX_HS_ISO_MAX_PACKET_SIZE)
60014088:	bf28      	it	cs
6001408a:	f44f 6080 	movcs.w	r0, #1024	; 0x400
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
6001408e:	3201      	adds	r2, #1
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
60014090:	f362 7e9f 	bfi	lr, r2, #30, #2
60014094:	f84c e001 	str.w	lr, [ip, r1]
    ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
60014098:	68a2      	ldr	r2, [r4, #8]
6001409a:	f852 c001 	ldr.w	ip, [r2, r1]
6001409e:	f360 4c1a 	bfi	ip, r0, #16, #11
600140a2:	f842 c001 	str.w	ip, [r2, r1]
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt = epInit->zlt;
600140a6:	68a2      	ldr	r2, [r4, #8]
600140a8:	f895 c004 	ldrb.w	ip, [r5, #4]
600140ac:	440a      	add	r2, r1
600140ae:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
600140b2:	f36c 0041 	bfi	r0, ip, #1, #1
600140b6:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
    if ((USB_CONTROL_ENDPOINT == endpoint))
600140ba:	68a0      	ldr	r0, [r4, #8]
600140bc:	b9bf      	cbnz	r7, 600140ee <USB_DeviceEhciControl+0x13c>
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 1U;
600140be:	5842      	ldr	r2, [r0, r1]
600140c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
600140c4:	5042      	str	r2, [r0, r1]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.ios = 1U;
600140c6:	68a0      	ldr	r0, [r4, #8]
600140c8:	5842      	ldr	r2, [r0, r1]
600140ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
600140ce:	5042      	str	r2, [r0, r1]
        ehciState->registerBase->EPCR0 |=
600140d0:	6860      	ldr	r0, [r4, #4]
600140d2:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600140d6:	bb0e      	cbnz	r6, 6001411c <USB_DeviceEhciControl+0x16a>
                 (USBHS_EPCR_RXE_MASK | USBHS_EPCR_RXR_MASK | ((uint32_t)transferType << USBHS_EPCR_RXT_SHIFT)));
600140d8:	009b      	lsls	r3, r3, #2
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600140da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
600140de:	e020      	b.n	60014122 <USB_DeviceEhciControl+0x170>
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult = 0U;
600140e0:	f85c 2001 	ldr.w	r2, [ip, r1]
600140e4:	f368 729f 	bfi	r2, r8, #30, #2
600140e8:	f84c 2001 	str.w	r2, [ip, r1]
600140ec:	e7d4      	b.n	60014098 <USB_DeviceEhciControl+0xe6>
            ((0U == epInit->zlt) ? 1U : 0U);
600140ee:	792a      	ldrb	r2, [r5, #4]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt =
600140f0:	5845      	ldr	r5, [r0, r1]
            ((0U == epInit->zlt) ? 1U : 0U);
600140f2:	fab2 f282 	clz	r2, r2
600140f6:	0952      	lsrs	r2, r2, #5
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt =
600140f8:	f362 755d 	bfi	r5, r2, #29, #1
600140fc:	5045      	str	r5, [r0, r1]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.ios = 0U;
600140fe:	68a2      	ldr	r2, [r4, #8]
60014100:	5850      	ldr	r0, [r2, r1]
60014102:	f36f 30cf 	bfc	r0, #15, #1
60014106:	5050      	str	r0, [r2, r1]
        ehciState->registerBase->EPCR[endpoint - 1U] |=
60014108:	6862      	ldr	r2, [r4, #4]
6001410a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
6001410e:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
60014112:	b996      	cbnz	r6, 6001413a <USB_DeviceEhciControl+0x188>
                 (USBHS_EPCR_RXE_MASK | USBHS_EPCR_RXR_MASK | ((uint32_t)transferType << USBHS_EPCR_RXT_SHIFT)));
60014114:	009b      	lsls	r3, r3, #2
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
60014116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
6001411a:	e011      	b.n	60014140 <USB_DeviceEhciControl+0x18e>
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
6001411c:	049b      	lsls	r3, r3, #18
6001411e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
        ehciState->registerBase->EPCR0 |=
60014122:	4313      	orrs	r3, r2
60014124:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 1U;
60014128:	68a3      	ldr	r3, [r4, #8]
6001412a:	440b      	add	r3, r1
6001412c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60014130:	f042 0201 	orr.w	r2, r2, #1
60014134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return kStatus_USB_Success;
60014138:	e764      	b.n	60014004 <USB_DeviceEhciControl+0x52>
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
6001413a:	049b      	lsls	r3, r3, #18
6001413c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
        ehciState->registerBase->EPCR[endpoint - 1U] |=
60014140:	4303      	orrs	r3, r0
60014142:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
60014146:	e7ef      	b.n	60014128 <USB_DeviceEhciControl+0x176>
            if (NULL != param)
60014148:	2a00      	cmp	r2, #0
6001414a:	f000 80aa 	beq.w	600142a2 <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointDeinit(ehciState, *temp8);
6001414e:	7811      	ldrb	r1, [r2, #0]
}
60014150:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                error = USB_DeviceEhciEndpointDeinit(ehciState, *temp8);
60014154:	f7ff beef 	b.w	60013f36 <USB_DeviceEhciEndpointDeinit>
            if (NULL != param)
60014158:	2a00      	cmp	r2, #0
6001415a:	f000 80a2 	beq.w	600142a2 <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointStall(ehciState, *temp8);
6001415e:	7815      	ldrb	r5, [r2, #0]
    if (0U == endpoint)
60014160:	f015 060f 	ands.w	r6, r5, #15
60014164:	d10e      	bne.n	60014184 <USB_DeviceEhciControl+0x1d2>
        (void)USB_DeviceEhciCancel(ehciState, 0x00);
60014166:	4631      	mov	r1, r6
60014168:	f7f8 fd70 	bl	6000cc4c <USB_DeviceEhciCancel>
        (void)USB_DeviceEhciCancel(ehciState, 0x80);
6001416c:	2180      	movs	r1, #128	; 0x80
6001416e:	4620      	mov	r0, r4
60014170:	f7f8 fd6c 	bl	6000cc4c <USB_DeviceEhciCancel>
        ehciState->registerBase->EPCR0 |= (USBHS_EPCR_TXS_MASK | USBHS_EPCR_RXS_MASK);
60014174:	6862      	ldr	r2, [r4, #4]
60014176:	f8d2 31c0 	ldr.w	r3, [r2, #448]	; 0x1c0
6001417a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6001417e:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
60014182:	e73f      	b.n	60014004 <USB_DeviceEhciControl+0x52>
        (void)USB_DeviceEhciCancel(ehciState, ep);
60014184:	4629      	mov	r1, r5
60014186:	f7f8 fd61 	bl	6000cc4c <USB_DeviceEhciCancel>
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
6001418a:	6861      	ldr	r1, [r4, #4]
6001418c:	09ed      	lsrs	r5, r5, #7
6001418e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
60014192:	bf0c      	ite	eq
60014194:	2201      	moveq	r2, #1
60014196:	f44f 3280 	movne.w	r2, #65536	; 0x10000
6001419a:	f8d1 31c0 	ldr.w	r3, [r1, #448]	; 0x1c0
6001419e:	4313      	orrs	r3, r2
600141a0:	f8c1 31c0 	str.w	r3, [r1, #448]	; 0x1c0
600141a4:	e72e      	b.n	60014004 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
600141a6:	2a00      	cmp	r2, #0
600141a8:	d07b      	beq.n	600142a2 <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointUnstall(ehciState, *temp8);
600141aa:	7811      	ldrb	r1, [r2, #0]
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
600141ac:	6842      	ldr	r2, [r0, #4]
    if (0U == endpoint)
600141ae:	f011 030f 	ands.w	r3, r1, #15
    uint8_t direction =
600141b2:	ea4f 16d1 	mov.w	r6, r1, lsr #7
    if (0U == endpoint)
600141b6:	d10e      	bne.n	600141d6 <USB_DeviceEhciControl+0x224>
        ehciState->registerBase->EPCR0 &= ~((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
600141b8:	2e00      	cmp	r6, #0
600141ba:	f8d2 31c0 	ldr.w	r3, [r2, #448]	; 0x1c0
600141be:	bf14      	ite	ne
600141c0:	f46f 3080 	mvnne.w	r0, #65536	; 0x10000
600141c4:	f06f 0001 	mvneq.w	r0, #1
600141c8:	4003      	ands	r3, r0
600141ca:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    (void)USB_DeviceEhciCancel(ehciState, ep);
600141ce:	4620      	mov	r0, r4
600141d0:	f7f8 fd3c 	bl	6000cc4c <USB_DeviceEhciCancel>
    return kStatus_USB_Success;
600141d4:	e716      	b.n	60014004 <USB_DeviceEhciControl+0x52>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
600141d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
600141da:	1e5d      	subs	r5, r3, #1
600141dc:	336f      	adds	r3, #111	; 0x6f
600141de:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
            ~((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
600141e2:	b976      	cbnz	r6, 60014202 <USB_DeviceEhciControl+0x250>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
600141e4:	f020 0001 	bic.w	r0, r0, #1
600141e8:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXR_MASK : USBHS_EPCR_RXR_MASK);
600141ec:	6862      	ldr	r2, [r4, #4]
600141ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
600141f2:	6858      	ldr	r0, [r3, #4]
600141f4:	2340      	movs	r3, #64	; 0x40
600141f6:	3570      	adds	r5, #112	; 0x70
600141f8:	4303      	orrs	r3, r0
600141fa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
600141fe:	6053      	str	r3, [r2, #4]
60014200:	e7e5      	b.n	600141ce <USB_DeviceEhciControl+0x21c>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60014202:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
60014206:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXR_MASK : USBHS_EPCR_RXR_MASK);
6001420a:	6862      	ldr	r2, [r4, #4]
6001420c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
60014210:	6858      	ldr	r0, [r3, #4]
60014212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60014216:	e7ee      	b.n	600141f6 <USB_DeviceEhciControl+0x244>
            if (NULL != param)
60014218:	2601      	movs	r6, #1
6001421a:	2a00      	cmp	r2, #0
6001421c:	f43f aef3 	beq.w	60014006 <USB_DeviceEhciControl+0x54>
                *temp16 = ((uint16_t)USB_DEVICE_CONFIG_SELF_POWER
60014220:	8016      	strh	r6, [r2, #0]
                error = kStatus_USB_Success;
60014222:	e6ef      	b.n	60014004 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
60014224:	2a00      	cmp	r2, #0
60014226:	d03c      	beq.n	600142a2 <USB_DeviceEhciControl+0x2f0>
                uint8_t ep = (endpointStatus->endpointAddress) & USB_ENDPOINT_NUMBER_MASK;
60014228:	7813      	ldrb	r3, [r2, #0]
                if (ep < USB_DEVICE_CONFIG_ENDPOINTS)
6001422a:	071a      	lsls	r2, r3, #28
6001422c:	d439      	bmi.n	600142a2 <USB_DeviceEhciControl+0x2f0>
                uint8_t direction =
6001422e:	09d9      	lsrs	r1, r3, #7
                    if (0U != ep)
60014230:	f013 030f 	ands.w	r3, r3, #15
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
60014234:	6842      	ldr	r2, [r0, #4]
                    if (0U != ep)
60014236:	d00e      	beq.n	60014256 <USB_DeviceEhciControl+0x2a4>
                            (0U != (ehciState->registerBase->EPCR[ep - 1U] &
60014238:	336f      	adds	r3, #111	; 0x6f
6001423a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
6001423e:	6852      	ldr	r2, [r2, #4]
                                    ((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK))) ?
60014240:	2900      	cmp	r1, #0
60014242:	bf0c      	ite	eq
60014244:	2301      	moveq	r3, #1
60014246:	f44f 3380 	movne.w	r3, #65536	; 0x10000
                                (uint16_t)kUSB_DeviceEndpointStateStalled :
6001424a:	421a      	tst	r2, r3
6001424c:	bf14      	ite	ne
6001424e:	2301      	movne	r3, #1
60014250:	2300      	moveq	r3, #0
                        endpointStatus->endpointStatus =
60014252:	806b      	strh	r3, [r5, #2]
60014254:	e6d6      	b.n	60014004 <USB_DeviceEhciControl+0x52>
                            (0U != (ehciState->registerBase->EPCR0 &
60014256:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
6001425a:	e7f1      	b.n	60014240 <USB_DeviceEhciControl+0x28e>
            if (NULL != param)
6001425c:	b30a      	cbz	r2, 600142a2 <USB_DeviceEhciControl+0x2f0>
                    ((((uint32_t)(*temp8)) << USBHS_DEVICEADDR_USBADR_SHIFT) | USBHS_DEVICEADDR_USBADRA_MASK);
6001425e:	782b      	ldrb	r3, [r5, #0]
                ehciState->registerBase->DEVICEADDR =
60014260:	6842      	ldr	r2, [r0, #4]
                    ((((uint32_t)(*temp8)) << USBHS_DEVICEADDR_USBADR_SHIFT) | USBHS_DEVICEADDR_USBADRA_MASK);
60014262:	065b      	lsls	r3, r3, #25
60014264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                ehciState->registerBase->DEVICEADDR =
60014268:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
                error = kStatus_USB_Success;
6001426c:	e6ca      	b.n	60014004 <USB_DeviceEhciControl+0x52>
    switch (type)
6001426e:	2500      	movs	r5, #0
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_IN << 0x07U)));
60014270:	f065 017f 	orn	r1, r5, #127	; 0x7f
60014274:	b2ee      	uxtb	r6, r5
60014276:	4620      	mov	r0, r4
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
60014278:	3501      	adds	r5, #1
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_IN << 0x07U)));
6001427a:	b2c9      	uxtb	r1, r1
6001427c:	f7ff fe5b 	bl	60013f36 <USB_DeviceEhciEndpointDeinit>
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_OUT << 0x07U)));
60014280:	4631      	mov	r1, r6
60014282:	4620      	mov	r0, r4
60014284:	f7ff fe57 	bl	60013f36 <USB_DeviceEhciEndpointDeinit>
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
60014288:	2d08      	cmp	r5, #8
6001428a:	d1f1      	bne.n	60014270 <USB_DeviceEhciControl+0x2be>
            USB_DeviceEhciSetDefaultState(ehciState);
6001428c:	4620      	mov	r0, r4
6001428e:	f7ff fdf3 	bl	60013e78 <USB_DeviceEhciSetDefaultState>
            break;
60014292:	e6b7      	b.n	60014004 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
60014294:	b12a      	cbz	r2, 600142a2 <USB_DeviceEhciControl+0x2f0>
                *temp8 = ehciState->speed;
60014296:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
6001429a:	7013      	strb	r3, [r2, #0]
                error  = kStatus_USB_Success;
6001429c:	e6b2      	b.n	60014004 <USB_DeviceEhciControl+0x52>
        return kStatus_USB_InvalidHandle;
6001429e:	2603      	movs	r6, #3
600142a0:	e6b1      	b.n	60014006 <USB_DeviceEhciControl+0x54>
    usb_status_t error                        = kStatus_USB_Error;
600142a2:	2601      	movs	r6, #1
600142a4:	e6af      	b.n	60014006 <USB_DeviceEhciControl+0x54>

600142a6 <USB_DeviceEhciIsrFunction>:
 *
 * @param deviceHandle    The device handle got from USB_DeviceInit.
 *
 */
void USB_DeviceEhciIsrFunction(void *deviceHandle)
{
600142a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600142aa:	b089      	sub	sp, #36	; 0x24
    usb_device_struct_t *handle = (usb_device_struct_t *)deviceHandle;
    usb_device_ehci_state_struct_t *ehciState;
    uint32_t status;

    if (NULL == deviceHandle)
600142ac:	2800      	cmp	r0, #0
600142ae:	d05a      	beq.n	60014366 <USB_DeviceEhciIsrFunction+0xc0>
    {
        return;
    }

    ehciState = (usb_device_ehci_state_struct_t *)(handle->controllerHandle);
600142b0:	6884      	ldr	r4, [r0, #8]
#endif
        }
    }
#endif /* USB_DEVICE_CONFIG_DETACH_ENABLE */

    status = ehciState->registerBase->USBSTS;
600142b2:	6863      	ldr	r3, [r4, #4]
600142b4:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    status &= ehciState->registerBase->USBINTR;
600142b8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
600142bc:	ea01 0a02 	and.w	sl, r1, r2
        /* Error interrupt */
        USB_DeviceEhciInterruptError(ehciState);
    }
#endif /* USB_DEVICE_CONFIG_ERROR_HANDLING */

    if (0U != (status & USBHS_USBSTS_URI_MASK))
600142c0:	f01a 0f40 	tst.w	sl, #64	; 0x40
    ehciState->registerBase->USBSTS = status;
600142c4:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    if (0U != (status & USBHS_USBSTS_URI_MASK))
600142c8:	d01c      	beq.n	60014304 <USB_DeviceEhciIsrFunction+0x5e>
    status                             = ehciState->registerBase->EPSETUPSR;
600142ca:	6863      	ldr	r3, [r4, #4]
        ehciState->registerBase->EPFLUSH = USBHS_EPFLUSH_FERB_MASK | USBHS_EPFLUSH_FETB_MASK;
600142cc:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    status                             = ehciState->registerBase->EPSETUPSR;
600142d0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    ehciState->registerBase->EPSETUPSR = status;
600142d4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    status                              = ehciState->registerBase->EPCOMPLETE;
600142d8:	6863      	ldr	r3, [r4, #4]
600142da:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ehciState->registerBase->EPCOMPLETE = status;
600142de:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        ehciState->registerBase->EPFLUSH = USBHS_EPFLUSH_FERB_MASK | USBHS_EPFLUSH_FETB_MASK;
600142e2:	6863      	ldr	r3, [r4, #4]
600142e4:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
    } while (0U != (ehciState->registerBase->EPPRIME & (USBHS_EPPRIME_PERB_MASK | USBHS_EPPRIME_PETB_MASK)));
600142e8:	6863      	ldr	r3, [r4, #4]
600142ea:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
600142ee:	f012 1fff 	tst.w	r2, #16711935	; 0xff00ff
600142f2:	d1f6      	bne.n	600142e2 <USB_DeviceEhciIsrFunction+0x3c>
    if (0U != (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_PR_MASK))
600142f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
600142f8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
600142fc:	d036      	beq.n	6001436c <USB_DeviceEhciIsrFunction+0xc6>
        ehciState->isResetting = 1U;
600142fe:	2301      	movs	r3, #1
60014300:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    {
        /* Reset interrupt */
        USB_DeviceEhciInterruptReset(ehciState);
    }

    if (0U != (status & USBHS_USBSTS_UI_MASK))
60014304:	f01a 0f01 	tst.w	sl, #1
60014308:	d00c      	beq.n	60014324 <USB_DeviceEhciIsrFunction+0x7e>
    status = ehciState->registerBase->EPSETUPSR;
6001430a:	6863      	ldr	r3, [r4, #4]
6001430c:	f8d3 81ac 	ldr.w	r8, [r3, #428]	; 0x1ac
    if (0U != status)
60014310:	f1b8 0f00 	cmp.w	r8, #0
60014314:	d134      	bne.n	60014380 <USB_DeviceEhciIsrFunction+0xda>
    status = ehciState->registerBase->EPCOMPLETE;
60014316:	6863      	ldr	r3, [r4, #4]
60014318:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ehciState->registerBase->EPCOMPLETE = status;
6001431c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    if (0U != status)
60014320:	2a00      	cmp	r2, #0
60014322:	d177      	bne.n	60014414 <USB_DeviceEhciIsrFunction+0x16e>
    {
        /* Token done interrupt */
        USB_DeviceEhciInterruptTokenDone(ehciState);
    }

    if (0U != (status & USBHS_USBSTS_PCI_MASK))
60014324:	f01a 0f04 	tst.w	sl, #4
60014328:	d01d      	beq.n	60014366 <USB_DeviceEhciIsrFunction+0xc0>
    message.buffer  = (uint8_t *)NULL;
6001432a:	2300      	movs	r3, #0
    message.length  = 0U;
6001432c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    message.isSetup = 0U;
60014330:	f88d 301d 	strb.w	r3, [sp, #29]
    if (0U == (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_PR_MASK))
60014334:	6862      	ldr	r2, [r4, #4]
60014336:	f8d2 5184 	ldr.w	r5, [r2, #388]	; 0x184
6001433a:	f415 7580 	ands.w	r5, r5, #256	; 0x100
6001433e:	d112      	bne.n	60014366 <USB_DeviceEhciIsrFunction+0xc0>
        if (0U != (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_HSP_MASK))
60014340:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
60014344:	f3c3 2340 	ubfx	r3, r3, #9, #1
60014348:	005b      	lsls	r3, r3, #1
6001434a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
        if (0U != ehciState->isResetting)
6001434e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
60014352:	b143      	cbz	r3, 60014366 <USB_DeviceEhciIsrFunction+0xc0>
            message.code = (uint8_t)kUSB_DeviceNotifyBusReset;
60014354:	2310      	movs	r3, #16
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60014356:	a905      	add	r1, sp, #20
            message.code = (uint8_t)kUSB_DeviceNotifyBusReset;
60014358:	f88d 301c 	strb.w	r3, [sp, #28]
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6001435c:	6820      	ldr	r0, [r4, #0]
6001435e:	f7f5 fb89 	bl	60009a74 <USB_DeviceNotificationTrigger>
            ehciState->isResetting = 0U;
60014362:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
    if (0U != (status & USBHS_USBSTS_SRI_MASK))
    {
        /* Sof interrupt */
        USB_DeviceEhciInterruptSof(ehciState);
    }
}
60014366:	b009      	add	sp, #36	; 0x24
60014368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        message.length  = 0U;
6001436c:	e9cd 3305 	strd	r3, r3, [sp, #20]
        message.code    = (uint8_t)kUSB_DeviceNotifyBusReset;
60014370:	2310      	movs	r3, #16
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60014372:	a905      	add	r1, sp, #20
        message.code    = (uint8_t)kUSB_DeviceNotifyBusReset;
60014374:	f8ad 301c 	strh.w	r3, [sp, #28]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60014378:	6820      	ldr	r0, [r4, #0]
6001437a:	f7f5 fb7b 	bl	60009a74 <USB_DeviceNotificationTrigger>
6001437e:	e7c1      	b.n	60014304 <USB_DeviceEhciIsrFunction+0x5e>
60014380:	2500      	movs	r5, #0
                message.isSetup = 1U;
60014382:	f04f 0901 	mov.w	r9, #1
            if (0U != (status & (1UL << endpoint)))
60014386:	fa28 f305 	lsr.w	r3, r8, r5
6001438a:	07db      	lsls	r3, r3, #31
6001438c:	d53e      	bpl.n	6001440c <USB_DeviceEhciIsrFunction+0x166>
                temp = (void *)&ehciState->qh[(uint8_t)((uint32_t)endpoint << 1U) + USB_OUT].setupBufferBack;
6001438e:	68a6      	ldr	r6, [r4, #8]
60014390:	b2ef      	uxtb	r7, r5
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
60014392:	4620      	mov	r0, r4
60014394:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
                direction = (deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_IN) >> USB_REQUEST_TYPE_DIR_SHIFT;
60014398:	eb06 16c5 	add.w	r6, r6, r5, lsl #7
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
6001439c:	4639      	mov	r1, r7
                direction = (deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_IN) >> USB_REQUEST_TYPE_DIR_SHIFT;
6001439e:	f816 2f30 	ldrb.w	r2, [r6, #48]!
600143a2:	09d2      	lsrs	r2, r2, #7
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
600143a4:	9201      	str	r2, [sp, #4]
600143a6:	f7f8 fb6f 	bl	6000ca88 <USB_DeviceEhciCancelControlPipe>
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, 1U ^ direction);
600143aa:	9a01      	ldr	r2, [sp, #4]
600143ac:	4639      	mov	r1, r7
600143ae:	4620      	mov	r0, r4
600143b0:	f082 0201 	eor.w	r2, r2, #1
600143b4:	f7f8 fb68 	bl	6000ca88 <USB_DeviceEhciCancelControlPipe>
                message.length  = USB_SETUP_PACKET_SIZE;
600143b8:	2308      	movs	r3, #8
                message.code    = (endpoint) | (USB_OUT << 0x07U);
600143ba:	f88d 701c 	strb.w	r7, [sp, #28]
    ehciState->registerBase->EPSETUPSR = 1UL << ep;
600143be:	fa09 f105 	lsl.w	r1, r9, r5
                message.buffer  = (uint8_t *)deviceSetup;
600143c2:	9605      	str	r6, [sp, #20]
                message.length  = USB_SETUP_PACKET_SIZE;
600143c4:	9306      	str	r3, [sp, #24]
                message.isSetup = 1U;
600143c6:	f88d 901d 	strb.w	r9, [sp, #29]
    ehciState->registerBase->EPSETUPSR = 1UL << ep;
600143ca:	6862      	ldr	r2, [r4, #4]
600143cc:	f8c2 11ac 	str.w	r1, [r2, #428]	; 0x1ac
        ehciState->registerBase->USBCMD |= USBHS_USBCMD_SUTW_MASK;
600143d0:	6861      	ldr	r1, [r4, #4]
600143d2:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
600143d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
600143da:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
        ehciState->qh[index].setupBufferBack[0] = ehciState->qh[index].setupBuffer[0];
600143de:	68a2      	ldr	r2, [r4, #8]
600143e0:	445a      	add	r2, fp
600143e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
600143e4:	6311      	str	r1, [r2, #48]	; 0x30
        ehciState->qh[index].setupBufferBack[1] = ehciState->qh[index].setupBuffer[1];
600143e6:	68a2      	ldr	r2, [r4, #8]
600143e8:	445a      	add	r2, fp
600143ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
600143ec:	6351      	str	r1, [r2, #52]	; 0x34
        if (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_SUTW_MASK))
600143ee:	6862      	ldr	r2, [r4, #4]
600143f0:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
600143f4:	048f      	lsls	r7, r1, #18
600143f6:	d5eb      	bpl.n	600143d0 <USB_DeviceEhciIsrFunction+0x12a>
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_SUTW_MASK;
600143f8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
                (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
600143fc:	a905      	add	r1, sp, #20
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_SUTW_MASK;
600143fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
60014402:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60014406:	6820      	ldr	r0, [r4, #0]
60014408:	f7f5 fb34 	bl	60009a74 <USB_DeviceNotificationTrigger>
        for (endpoint = 0U; endpoint < USB_DEVICE_CONFIG_ENDPOINTS; endpoint++)
6001440c:	3501      	adds	r5, #1
6001440e:	2d08      	cmp	r5, #8
60014410:	d1b9      	bne.n	60014386 <USB_DeviceEhciIsrFunction+0xe0>
60014412:	e780      	b.n	60014316 <USB_DeviceEhciIsrFunction+0x70>
60014414:	2700      	movs	r7, #0
                            message.isSetup = 0U;
60014416:	46bb      	mov	fp, r7
60014418:	463b      	mov	r3, r7
            if (0U != (status & (1UL << count)))
6001441a:	fa22 f107 	lsr.w	r1, r2, r7
6001441e:	07ce      	lsls	r6, r1, #31
60014420:	d403      	bmi.n	6001442a <USB_DeviceEhciIsrFunction+0x184>
        for (count = 0U; count < 32U; count++)
60014422:	3701      	adds	r7, #1
60014424:	2f20      	cmp	r7, #32
60014426:	d1f8      	bne.n	6001441a <USB_DeviceEhciIsrFunction+0x174>
60014428:	e77c      	b.n	60014324 <USB_DeviceEhciIsrFunction+0x7e>
                if (count > 15U)
6001442a:	2f0f      	cmp	r7, #15
6001442c:	b2f9      	uxtb	r1, r7
6001442e:	d803      	bhi.n	60014438 <USB_DeviceEhciIsrFunction+0x192>
                if (endpoint >= USB_DEVICE_CONFIG_ENDPOINTS)
60014430:	2f07      	cmp	r7, #7
60014432:	d90f      	bls.n	60014454 <USB_DeviceEhciIsrFunction+0x1ae>
        for (count = 0U; count < 32U; count++)
60014434:	3701      	adds	r7, #1
60014436:	e7f0      	b.n	6001441a <USB_DeviceEhciIsrFunction+0x174>
                    endpoint  = count - 16U;
60014438:	3910      	subs	r1, #16
6001443a:	b2c9      	uxtb	r1, r1
                if (endpoint >= USB_DEVICE_CONFIG_ENDPOINTS)
6001443c:	2907      	cmp	r1, #7
6001443e:	d8f0      	bhi.n	60014422 <USB_DeviceEhciIsrFunction+0x17c>
                index          = (endpoint << 1U) + direction;
60014440:	004e      	lsls	r6, r1, #1
60014442:	3601      	adds	r6, #1
                message.length = 0U;
60014444:	e9cd 3305 	strd	r3, r3, [sp, #20]
                index          = (endpoint << 1U) + direction;
60014448:	b2f6      	uxtb	r6, r6
                if ((USB_CONTROL_ENDPOINT == endpoint) && (USB_IN == direction))
6001444a:	2900      	cmp	r1, #0
6001444c:	f000 80a3 	beq.w	60014596 <USB_DeviceEhciIsrFunction+0x2f0>
                    direction = USB_IN;
60014450:	2001      	movs	r0, #1
60014452:	e004      	b.n	6001445e <USB_DeviceEhciIsrFunction+0x1b8>
                index          = (endpoint << 1U) + direction;
60014454:	004e      	lsls	r6, r1, #1
                    direction = USB_OUT;
60014456:	2000      	movs	r0, #0
                index          = (endpoint << 1U) + direction;
60014458:	b2f6      	uxtb	r6, r6
                message.length = 0U;
6001445a:	e9cd 3305 	strd	r3, r3, [sp, #20]
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
6001445e:	b235      	sxth	r5, r6
                            primeBit = 1UL << (endpoint + 16U * direction);
60014460:	f04f 0801 	mov.w	r8, #1
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
60014464:	ea41 1cc0 	orr.w	ip, r1, r0, lsl #7
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60014468:	9502      	str	r5, [sp, #8]
6001446a:	eb04 0586 	add.w	r5, r4, r6, lsl #2
                            primeBit = 1UL << (endpoint + 16U * direction);
6001446e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
60014472:	f8cd c004 	str.w	ip, [sp, #4]
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60014476:	696d      	ldr	r5, [r5, #20]
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60014478:	01b6      	lsls	r6, r6, #6
                            primeBit = 1UL << (endpoint + 16U * direction);
6001447a:	fa08 f801 	lsl.w	r8, r8, r1
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
6001447e:	f025 051f 	bic.w	r5, r5, #31
                while (NULL != currentDtd)
60014482:	2d00      	cmp	r5, #0
60014484:	d0cd      	beq.n	60014422 <USB_DeviceEhciIsrFunction+0x17c>
                    currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60014486:	9902      	ldr	r1, [sp, #8]
60014488:	eb04 0981 	add.w	r9, r4, r1, lsl #2
6001448c:	f8d9 5014 	ldr.w	r5, [r9, #20]
60014490:	f025 051f 	bic.w	r5, r5, #31
60014494:	4629      	mov	r1, r5
                    while (NULL != currentDtd)
60014496:	b161      	cbz	r1, 600144b2 <USB_DeviceEhciIsrFunction+0x20c>
                             (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) ||
60014498:	6848      	ldr	r0, [r1, #4]
                        if ((0U !=
6001449a:	0600      	lsls	r0, r0, #24
6001449c:	d403      	bmi.n	600144a6 <USB_DeviceEhciIsrFunction+0x200>
                            (0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc))
6001449e:	6848      	ldr	r0, [r1, #4]
                             (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) ||
600144a0:	0400      	lsls	r0, r0, #16
600144a2:	f140 8087 	bpl.w	600145b4 <USB_DeviceEhciIsrFunction+0x30e>
                            if ((0U == (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
600144a6:	6848      	ldr	r0, [r1, #4]
600144a8:	0600      	lsls	r0, r0, #24
600144aa:	d4ba      	bmi.n	60014422 <USB_DeviceEhciIsrFunction+0x17c>
                                (0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc))
600144ac:	6849      	ldr	r1, [r1, #4]
                                        USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) &&
600144ae:	0408      	lsls	r0, r1, #16
600144b0:	d5b7      	bpl.n	60014422 <USB_DeviceEhciIsrFunction+0x17c>
                    while (NULL != currentDtd)
600144b2:	2d00      	cmp	r5, #0
600144b4:	d0b5      	beq.n	60014422 <USB_DeviceEhciIsrFunction+0x17c>
                        if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
600144b6:	6869      	ldr	r1, [r5, #4]
600144b8:	0609      	lsls	r1, r1, #24
600144ba:	d4e2      	bmi.n	60014482 <USB_DeviceEhciIsrFunction+0x1dc>
                        if (NULL == message.buffer)
600144bc:	9905      	ldr	r1, [sp, #20]
600144be:	b949      	cbnz	r1, 600144d4 <USB_DeviceEhciIsrFunction+0x22e>
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
600144c0:	68a9      	ldr	r1, [r5, #8]
                                            (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
600144c2:	8ba8      	ldrh	r0, [r5, #28]
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
600144c4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
                                            (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
600144c8:	f3c0 000b 	ubfx	r0, r0, #0, #12
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
600144cc:	f021 010f 	bic.w	r1, r1, #15
600144d0:	4301      	orrs	r1, r0
                            message.buffer =
600144d2:	9105      	str	r1, [sp, #20]
                                           currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
600144d4:	6868      	ldr	r0, [r5, #4]
                        message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
600144d6:	69e9      	ldr	r1, [r5, #28]
                                           currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
600144d8:	f3c0 400e 	ubfx	r0, r0, #16, #15
                        message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
600144dc:	f3c1 3112 	ubfx	r1, r1, #12, #19
600144e0:	1a09      	subs	r1, r1, r0
600144e2:	9806      	ldr	r0, [sp, #24]
600144e4:	4408      	add	r0, r1
600144e6:	9006      	str	r0, [sp, #24]
                        if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
600144e8:	f8d9 1014 	ldr.w	r1, [r9, #20]
600144ec:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
600144f0:	4281      	cmp	r1, r0
600144f2:	d163      	bne.n	600145bc <USB_DeviceEhciIsrFunction+0x316>
                            ehciState->dtdHard[index]                   = NULL;
600144f4:	f8c9 b014 	str.w	fp, [r9, #20]
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
600144f8:	2001      	movs	r0, #1
                            ehciState->dtdTail[index]                   = NULL;
600144fa:	f8c9 b054 	str.w	fp, [r9, #84]	; 0x54
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
600144fe:	68a1      	ldr	r1, [r4, #8]
60014500:	4431      	add	r1, r6
60014502:	6088      	str	r0, [r1, #8]
                            ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
60014504:	68a1      	ldr	r1, [r4, #8]
60014506:	4431      	add	r1, r6
60014508:	f8c1 b00c 	str.w	fp, [r1, #12]
                        if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
6001450c:	6869      	ldr	r1, [r5, #4]
6001450e:	0408      	lsls	r0, r1, #16
60014510:	d403      	bmi.n	6001451a <USB_DeviceEhciIsrFunction+0x274>
60014512:	f8d9 1014 	ldr.w	r1, [r9, #20]
60014516:	291f      	cmp	r1, #31
60014518:	d80d      	bhi.n	60014536 <USB_DeviceEhciIsrFunction+0x290>
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6001451a:	9b01      	ldr	r3, [sp, #4]
                            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6001451c:	a905      	add	r1, sp, #20
                            message.isSetup = 0U;
6001451e:	f88d b01d 	strb.w	fp, [sp, #29]
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
60014522:	f88d 301c 	strb.w	r3, [sp, #28]
                            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60014526:	6820      	ldr	r0, [r4, #0]
60014528:	9203      	str	r2, [sp, #12]
6001452a:	f7f5 faa3 	bl	60009a74 <USB_DeviceNotificationTrigger>
                            message.buffer = NULL;
6001452e:	2300      	movs	r3, #0
                            message.length = 0U;
60014530:	9a03      	ldr	r2, [sp, #12]
60014532:	e9cd 3305 	strd	r3, r3, [sp, #20]
                        currentDtd->dtdTokenUnion.dtdToken = 0U;
60014536:	f8c5 b004 	str.w	fp, [r5, #4]
                        currentDtd->nextDtdPointer         = (uint32_t)ehciState->dtdFree;
6001453a:	6921      	ldr	r1, [r4, #16]
6001453c:	6029      	str	r1, [r5, #0]
                        ehciState->dtdCount++;
6001453e:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
                        ehciState->dtdFree                 = currentDtd;
60014542:	6125      	str	r5, [r4, #16]
                        ehciState->dtdCount++;
60014544:	3101      	adds	r1, #1
60014546:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
                        currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
6001454a:	f8d9 1014 	ldr.w	r1, [r9, #20]
                        if ((NULL != currentDtd) && (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
6001454e:	291f      	cmp	r1, #31
                        currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60014550:	f021 051f 	bic.w	r5, r1, #31
                        if ((NULL != currentDtd) && (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
60014554:	d9ad      	bls.n	600144b2 <USB_DeviceEhciIsrFunction+0x20c>
60014556:	6869      	ldr	r1, [r5, #4]
60014558:	0609      	lsls	r1, r1, #24
6001455a:	d5ac      	bpl.n	600144b6 <USB_DeviceEhciIsrFunction+0x210>
                            ehciState->registerBase->EPPRIME = primeBit;
6001455c:	6861      	ldr	r1, [r4, #4]
6001455e:	f8c1 81b0 	str.w	r8, [r1, #432]	; 0x1b0
                            if (0U == (ehciState->registerBase->EPSR & primeBit))
60014562:	6861      	ldr	r1, [r4, #4]
60014564:	f8d1 01b8 	ldr.w	r0, [r1, #440]	; 0x1b8
60014568:	ea18 0f00 	tst.w	r8, r0
6001456c:	d1a3      	bne.n	600144b6 <USB_DeviceEhciIsrFunction+0x210>
                                while (0U != (ehciState->registerBase->EPPRIME & primeBit))
6001456e:	f8d1 01b0 	ldr.w	r0, [r1, #432]	; 0x1b0
60014572:	ea18 0f00 	tst.w	r8, r0
60014576:	d1fa      	bne.n	6001456e <USB_DeviceEhciIsrFunction+0x2c8>
                                if (0U == (ehciState->registerBase->EPSR & primeBit))
60014578:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
6001457c:	ea18 0101 	ands.w	r1, r8, r1
60014580:	d199      	bne.n	600144b6 <USB_DeviceEhciIsrFunction+0x210>
                                    ehciState->qh[index].nextDtdPointer         = (uint32_t)currentDtd;
60014582:	68a0      	ldr	r0, [r4, #8]
60014584:	4430      	add	r0, r6
60014586:	6085      	str	r5, [r0, #8]
                                    ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
60014588:	68a0      	ldr	r0, [r4, #8]
6001458a:	4430      	add	r0, r6
6001458c:	60c1      	str	r1, [r0, #12]
                                    ehciState->registerBase->EPPRIME            = primeBit;
6001458e:	6861      	ldr	r1, [r4, #4]
60014590:	f8c1 81b0 	str.w	r8, [r1, #432]	; 0x1b0
                    while (NULL != currentDtd)
60014594:	e78f      	b.n	600144b6 <USB_DeviceEhciIsrFunction+0x210>
                    if (1U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt)
60014596:	68a0      	ldr	r0, [r4, #8]
60014598:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
6001459c:	07ad      	lsls	r5, r5, #30
6001459e:	f57f af57 	bpl.w	60014450 <USB_DeviceEhciIsrFunction+0x1aa>
                            ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt)
600145a2:	6c05      	ldr	r5, [r0, #64]	; 0x40
                        if (0U ==
600145a4:	00ad      	lsls	r5, r5, #2
600145a6:	f53f af53 	bmi.w	60014450 <USB_DeviceEhciIsrFunction+0x1aa>
                                .capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 1U;
600145aa:	6c05      	ldr	r5, [r0, #64]	; 0x40
600145ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
600145b0:	6405      	str	r5, [r0, #64]	; 0x40
600145b2:	e74d      	b.n	60014450 <USB_DeviceEhciIsrFunction+0x1aa>
                        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer &
600145b4:	6809      	ldr	r1, [r1, #0]
600145b6:	f021 011f 	bic.w	r1, r1, #31
600145ba:	e76c      	b.n	60014496 <USB_DeviceEhciIsrFunction+0x1f0>
                                (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
600145bc:	6809      	ldr	r1, [r1, #0]
                            ehciState->dtdHard[index] =
600145be:	f8c9 1014 	str.w	r1, [r9, #20]
600145c2:	e7a3      	b.n	6001450c <USB_DeviceEhciIsrFunction+0x266>

600145c4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
600145c4:	4770      	bx	lr

600145c6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
600145c6:	b140      	cbz	r0, 600145da <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
600145c8:	68c3      	ldr	r3, [r0, #12]
600145ca:	7858      	ldrb	r0, [r3, #1]
600145cc:	f010 0001 	ands.w	r0, r0, #1
600145d0:	bf1e      	ittt	ne
600145d2:	7818      	ldrbne	r0, [r3, #0]
600145d4:	fab0 f080 	clzne	r0, r0
600145d8:	0940      	lsrne	r0, r0, #5
}
600145da:	4770      	bx	lr

600145dc <arch_system_halt>:
	__asm__ volatile(
600145dc:	f04f 0210 	mov.w	r2, #16
600145e0:	f3ef 8311 	mrs	r3, BASEPRI
600145e4:	f382 8812 	msr	BASEPRI_MAX, r2
600145e8:	f3bf 8f6f 	isb	sy
	for (;;) {
600145ec:	e7fe      	b.n	600145ec <arch_system_halt+0x10>

600145ee <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
600145ee:	f7fc b807 	b.w	60010600 <memset>

600145f2 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
600145f2:	f7ee bee1 	b.w	600033b8 <memcpy>

600145f6 <k_heap_init>:
{
600145f6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
600145f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
600145fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
60014600:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
60014602:	f7ef bff5 	b.w	600045f0 <sys_heap_init>

60014606 <k_heap_alloc>:
{
60014606:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
60014608:	e9cd 2300 	strd	r2, r3, [sp]
6001460c:	460a      	mov	r2, r1
6001460e:	2104      	movs	r1, #4
60014610:	f7f8 fd90 	bl	6000d134 <k_heap_aligned_alloc>
}
60014614:	b003      	add	sp, #12
60014616:	f85d fb04 	ldr.w	pc, [sp], #4

6001461a <k_is_in_isr>:
6001461a:	f3ef 8005 	mrs	r0, IPSR
}
6001461e:	3800      	subs	r0, #0
60014620:	bf18      	it	ne
60014622:	2001      	movne	r0, #1
60014624:	4770      	bx	lr

60014626 <z_impl_k_thread_name_set>:
}
60014626:	f06f 0057 	mvn.w	r0, #87	; 0x57
6001462a:	4770      	bx	lr

6001462c <k_thread_name_get>:
}
6001462c:	2000      	movs	r0, #0
6001462e:	4770      	bx	lr

60014630 <z_impl_k_thread_start>:
	z_sched_start(thread);
60014630:	f7fa b83e 	b.w	6000e6b0 <z_sched_start>

60014634 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
60014634:	f990 300e 	ldrsb.w	r3, [r0, #14]
60014638:	428b      	cmp	r3, r1
6001463a:	d001      	beq.n	60014640 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
6001463c:	f7fa bb3a 	b.w	6000ecb4 <z_set_prio>
}
60014640:	2000      	movs	r0, #0
60014642:	4770      	bx	lr

60014644 <z_impl_k_mutex_init>:
{
60014644:	4603      	mov	r3, r0
	mutex->owner = NULL;
60014646:	2000      	movs	r0, #0
60014648:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
6001464c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
60014650:	4770      	bx	lr

60014652 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
60014652:	b13a      	cbz	r2, 60014664 <z_impl_k_sem_init+0x12>
60014654:	428a      	cmp	r2, r1
60014656:	d305      	bcc.n	60014664 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
60014658:	e9c0 1202 	strd	r1, r2, [r0, #8]
6001465c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
60014660:	2000      	movs	r0, #0
60014662:	4770      	bx	lr
		return -EINVAL;
60014664:	f06f 0015 	mvn.w	r0, #21
}
60014668:	4770      	bx	lr

6001466a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
6001466a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
6001466c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
6001466e:	408b      	lsls	r3, r1
60014670:	ea22 0303 	bic.w	r3, r2, r3
60014674:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
60014676:	fa22 f001 	lsr.w	r0, r2, r1
}
6001467a:	f000 0001 	and.w	r0, r0, #1
6001467e:	4770      	bx	lr

60014680 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
60014680:	b120      	cbz	r0, 6001468c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
60014682:	2200      	movs	r2, #0
60014684:	3088      	adds	r0, #136	; 0x88
60014686:	4611      	mov	r1, r2
60014688:	f7fa bfb4 	b.w	6000f5f4 <z_sched_wake>
}
6001468c:	4770      	bx	lr

6001468e <k_work_submit_to_queue>:
{
6001468e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
60014690:	f7f9 fcd2 	bl	6000e038 <z_work_submit_to_queue>
	if (ret > 0) {
60014694:	1e04      	subs	r4, r0, #0
60014696:	dd09      	ble.n	600146ac <k_work_submit_to_queue+0x1e>
60014698:	f04f 0310 	mov.w	r3, #16
6001469c:	f3ef 8011 	mrs	r0, BASEPRI
600146a0:	f383 8812 	msr	BASEPRI_MAX, r3
600146a4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
600146a8:	f000 f802 	bl	600146b0 <z_reschedule_irqlock>
}
600146ac:	4620      	mov	r0, r4
600146ae:	bd10      	pop	{r4, pc}

600146b0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
600146b0:	4603      	mov	r3, r0
600146b2:	b920      	cbnz	r0, 600146be <z_reschedule_irqlock+0xe>
600146b4:	f3ef 8205 	mrs	r2, IPSR
600146b8:	b90a      	cbnz	r2, 600146be <z_reschedule_irqlock+0xe>
600146ba:	f7f3 bd31 	b.w	60008120 <arch_swap>
	__asm__ volatile(
600146be:	f383 8811 	msr	BASEPRI, r3
600146c2:	f3bf 8f6f 	isb	sy
}
600146c6:	4770      	bx	lr

600146c8 <z_reschedule_unlocked>:
	__asm__ volatile(
600146c8:	f04f 0310 	mov.w	r3, #16
600146cc:	f3ef 8011 	mrs	r0, BASEPRI
600146d0:	f383 8812 	msr	BASEPRI_MAX, r3
600146d4:	f3bf 8f6f 	isb	sy
600146d8:	f7ff bfea 	b.w	600146b0 <z_reschedule_irqlock>

600146dc <z_unpend_all>:
{
600146dc:	b538      	push	{r3, r4, r5, lr}
600146de:	4605      	mov	r5, r0
	int need_sched = 0;
600146e0:	2000      	movs	r0, #0
	return list->head == list;
600146e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
600146e4:	42a5      	cmp	r5, r4
600146e6:	d000      	beq.n	600146ea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
600146e8:	b904      	cbnz	r4, 600146ec <z_unpend_all+0x10>
}
600146ea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
600146ec:	4620      	mov	r0, r4
600146ee:	f7fa fbfb 	bl	6000eee8 <z_unpend_thread>
		z_ready_thread(thread);
600146f2:	4620      	mov	r0, r4
600146f4:	f7f9 ff0c 	bl	6000e510 <z_ready_thread>
		need_sched = 1;
600146f8:	2001      	movs	r0, #1
600146fa:	e7f2      	b.n	600146e2 <z_unpend_all+0x6>

600146fc <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
600146fc:	17c1      	asrs	r1, r0, #31
		t += off;
600146fe:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
60014700:	f04f 0264 	mov.w	r2, #100	; 0x64
60014704:	f141 0100 	adc.w	r1, r1, #0
{
60014708:	b508      	push	{r3, lr}
6001470a:	2300      	movs	r3, #0
6001470c:	f7ee fe3a 	bl	60003384 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
60014710:	17c1      	asrs	r1, r0, #31
60014712:	f7fa fdcd 	bl	6000f2b0 <z_tick_sleep>
}
60014716:	2364      	movs	r3, #100	; 0x64
60014718:	4358      	muls	r0, r3
6001471a:	bd08      	pop	{r3, pc}

6001471c <sys_clock_tick_get_32>:
{
6001471c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
6001471e:	f7fb fa69 	bl	6000fbf4 <sys_clock_tick_get>
}
60014722:	bd08      	pop	{r3, pc}

60014724 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
60014724:	f7fb ba66 	b.w	6000fbf4 <sys_clock_tick_get>

60014728 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60014728:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
6001472c:	bf08      	it	eq
6001472e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
60014732:	b538      	push	{r3, r4, r5, lr}
60014734:	460c      	mov	r4, r1
60014736:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60014738:	d014      	beq.n	60014764 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
6001473a:	4308      	orrs	r0, r1
6001473c:	d103      	bne.n	60014746 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
6001473e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
60014742:	f7fb ba57 	b.w	6000fbf4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
60014746:	f06f 0001 	mvn.w	r0, #1
6001474a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6001474e:	1b40      	subs	r0, r0, r5
60014750:	eb63 0101 	sbc.w	r1, r3, r1
60014754:	2900      	cmp	r1, #0
60014756:	da04      	bge.n	60014762 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
60014758:	f7fb fa4c 	bl	6000fbf4 <sys_clock_tick_get>
6001475c:	1940      	adds	r0, r0, r5
6001475e:	eb41 0104 	adc.w	r1, r1, r4
}
60014762:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
60014764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60014768:	4601      	mov	r1, r0
6001476a:	e7fa      	b.n	60014762 <sys_clock_timeout_end_calc+0x3a>

6001476c <k_timer_init>:
	timer->status = 0U;
6001476c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
6001476e:	e9c0 1208 	strd	r1, r2, [r0, #32]
60014772:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
60014776:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
60014778:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
6001477a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
6001477e:	e9c0 3300 	strd	r3, r3, [r0]
}
60014782:	4770      	bx	lr

60014784 <z_impl_k_timer_stop>:
{
60014784:	b510      	push	{r4, lr}
60014786:	4604      	mov	r4, r0
	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
60014788:	f7fb f8ea 	bl	6000f960 <z_abort_timeout>
	if (inactive) {
6001478c:	b9b0      	cbnz	r0, 600147bc <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
6001478e:	6a63      	ldr	r3, [r4, #36]	; 0x24
60014790:	b10b      	cbz	r3, 60014796 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
60014792:	4620      	mov	r0, r4
60014794:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
60014796:	f104 0018 	add.w	r0, r4, #24
6001479a:	f7fa fc49 	bl	6000f030 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
6001479e:	b168      	cbz	r0, 600147bc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
600147a0:	f7f9 feb6 	bl	6000e510 <z_ready_thread>
600147a4:	f04f 0310 	mov.w	r3, #16
600147a8:	f3ef 8011 	mrs	r0, BASEPRI
600147ac:	f383 8812 	msr	BASEPRI_MAX, r3
600147b0:	f3bf 8f6f 	isb	sy
}
600147b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
600147b8:	f7ff bf7a 	b.w	600146b0 <z_reschedule_irqlock>
600147bc:	bd10      	pop	{r4, pc}
	...
